MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H32" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                07 de marzo de 2021
Hora:                14H32
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O09DAJOG "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O09DAJOG new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.20 seconds
      cpu time            0.20 seconds
      
25255      /* Generate assessment metadata, which will be used to generate assessment data step */
25256      /* code, such as retrieving names of temporary variables and summary variables,      */
25257      /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
25258      /* roc, index, scoreDist and could be thought as a global variable in assessment     */
25259      /* computation.                                                                      */
25260      data work.ASSESS_2NSBLJO_assessMeta_7faT4o;
MPRINT(EM_DIAGRAM):    data work.ASSESS_2NSBLJO_assessMeta_7faT4o;
25261      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
25261    ! RESULT_MAX_LABEL
25262         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
25263      VARIABLE = "BAD";
MPRINT(EM_DIAGRAM):   VARIABLE = "BAD";
25264      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
25265      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
25266      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
25267      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
25268      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
25269      MEASUREMENT = "BINARY";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "BINARY";
25270      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
25271      GEN_VAR_IN_TEMP_DATA = "BAD";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "BAD";
25272      RESULT_MEAN = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "";
25273      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
25274      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
25275      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
25276      MIN_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "";
25277      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
25278      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
25279      MAX_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "";
25280      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
25281      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
25282      TEMPORARY_VARIABLE = "BAD_rtBCf7HyQL0v8Yp";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "BAD_rtBCf7HyQL0v8Yp";
25283      output;
MPRINT(EM_DIAGRAM):   output;
25284      VARIABLE = "F_BAD_1";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_BAD_1";
25285      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
25286      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
25287      PARENT = "F_BAD";
MPRINT(EM_DIAGRAM):   PARENT = "F_BAD";
25288      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
25289      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
25290      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
25291      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
25292      GEN_VAR_IN_TEMP_DATA = "F_BAD_1_Su5GvhmCslEUA4h";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_BAD_1_Su5GvhmCslEUA4h";
25293      RESULT_MEAN = "F_BAD_1_mean_0SYZqRyf5h3c6j2";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_BAD_1_mean_0SYZqRyf5h3c6j2";
25294      /* adjust for tied cases */
25295      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
25296      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
25297      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
25298      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
25299      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
25300      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
25301      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Número de eventos";
25302      TEMPORARY_VARIABLE = "F_BAD_1_wdC4fhj2AQrPAfS";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_BAD_1_wdC4fhj2AQrPAfS";
25303      output;
MPRINT(EM_DIAGRAM):   output;
25304      VARIABLE = "F_BAD_0";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_BAD_0";
25305      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
25306      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
25307      PARENT = "F_BAD";
MPRINT(EM_DIAGRAM):   PARENT = "F_BAD";
25308      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
25309      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
25310      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
25311      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
25312      GEN_VAR_IN_TEMP_DATA = "F_BAD_0_IajolvnOv3HjI8e";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_BAD_0_IajolvnOv3HjI8e";
25313      RESULT_MEAN = "F_BAD_0_mean_Qy5guhHQeJt10i0";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_BAD_0_mean_Qy5guhHQeJt10i0";
25314      /* adjust for tied cases */
25315      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
25316      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
25317      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
25318      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
25319      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
25320      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
25321      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Número de eventos";
25322      TEMPORARY_VARIABLE = "F_BAD_0_pfvdlljIUdanGpa";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_BAD_0_pfvdlljIUdanGpa";
25323      output;
MPRINT(EM_DIAGRAM):   output;
25324      VARIABLE = "P_BAD1";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_BAD1";
25325      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
25326      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
25327      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
25328      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
25329      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
25330      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
25331      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
25332      GEN_VAR_IN_TEMP_DATA = "P_BAD1";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_BAD1";
25333      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
25334      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Probabilidad posterior de la media";
25335      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
25336      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Probabilidad posterior mín";
25337      MIN_ADJUSTED = "P_BAD1_minAdjusted_l3UXvGFMR";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_BAD1_minAdjusted_l3UXvGFMR";
25338      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
25339      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Probabilidad posterior máx";
25340      MAX_ADJUSTED = "P_BAD1_maxAdjusted_YW89ti04E";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_BAD1_maxAdjusted_YW89ti04E";
25341      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
25342      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
25343      TEMPORARY_VARIABLE = "P_BAD1_xxOcH9cq0H6oznL";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_BAD1_xxOcH9cq0H6oznL";
25344      output;
MPRINT(EM_DIAGRAM):   output;
25345      VARIABLE = "P_BAD0";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_BAD0";
25346      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
25347      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
25348      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
25349      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
25350      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
25351      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
25352      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
25353      GEN_VAR_IN_TEMP_DATA = "P_BAD0";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_BAD0";
25354      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
25355      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Probabilidad posterior de la media";
25356      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
25357      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Probabilidad posterior mín";
25358      MIN_ADJUSTED = "P_BAD0_minAdjusted_zFydNVxde";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_BAD0_minAdjusted_zFydNVxde";
25359      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
25360      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Probabilidad posterior máx";
25361      MAX_ADJUSTED = "P_BAD0_maxAdjusted_BgljDFXnK";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_BAD0_maxAdjusted_BgljDFXnK";
25362      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
25363      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
25364      TEMPORARY_VARIABLE = "P_BAD0_N5H02Y8ntfhmAxM";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_BAD0_N5H02Y8ntfhmAxM";
25365      output;
MPRINT(EM_DIAGRAM):   output;
25366      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_2NSBLJO_ASSESSMETA_7FAT4O has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

25367      /* Generate temporary dataset and obtain summary statistics such as total number of   */
25368      /* obserations, frequency of target.  However, summary statistics for class reporting */
25369      /* variabels are not computed here since if there exist class reporting variables,    */
25370      /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
25371      /* summary statisitcs, if any.                                                        */
25372      data work.ASSESS_2NSBLJO_normSD_dcnzah(drop=
25373      _numberOfObservation_
25374      _levelFrequency_1
25375      _levelFrequency_2
25376      )
25377      work.ASSESS_2NSBLJO_meansAndTi_gBDYsC (keep=
25378      _numberOfObservation_
25379      _levelFrequency_1
25380      _levelFrequency_2
25381      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_2NSBLJO_normSD_dcnzah(drop= _numberOfObservation_ _levelFrequency_1 _levelFrequency_2 ) work.ASSESS_2NSBLJO_meansAndTi_gBDYsC (keep= _numberOfObservation_ _levelFrequency_1 _levelFrequency_2 );
25382      set EMWS1.Reg_TRAIN(
25383      where=(
25384      (BAD ^= .)
25385      )
25386      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TRAIN( where=( (BAD ^= .) ) ) end=_lastObservation_;
25387      keep frequency_1JRPFX;
MPRINT(EM_DIAGRAM):   keep frequency_1JRPFX;
25388      frequency_1JRPFX = 1;
MPRINT(EM_DIAGRAM):   frequency_1JRPFX = 1;
25389      keep I_BAD F_BAD;
MPRINT(EM_DIAGRAM):   keep I_BAD F_BAD;
25390      keep F_BAD_1_Su5GvhmCslEUA4h;
MPRINT(EM_DIAGRAM):   keep F_BAD_1_Su5GvhmCslEUA4h;
25391      if (F_BAD = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '1') then do;
25392      F_BAD_1_Su5GvhmCslEUA4h = 1;
MPRINT(EM_DIAGRAM):   F_BAD_1_Su5GvhmCslEUA4h = 1;
25393      end;
MPRINT(EM_DIAGRAM):   end;
25394      else do;
MPRINT(EM_DIAGRAM):   else do;
25395      F_BAD_1_Su5GvhmCslEUA4h = 0;
MPRINT(EM_DIAGRAM):   F_BAD_1_Su5GvhmCslEUA4h = 0;
25396      end;
MPRINT(EM_DIAGRAM):   end;
25397      keep F_BAD_0_IajolvnOv3HjI8e;
MPRINT(EM_DIAGRAM):   keep F_BAD_0_IajolvnOv3HjI8e;
25398      if (F_BAD = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '0') then do;
25399      F_BAD_0_IajolvnOv3HjI8e = 1;
MPRINT(EM_DIAGRAM):   F_BAD_0_IajolvnOv3HjI8e = 1;
25400      end;
MPRINT(EM_DIAGRAM):   end;
25401      else do;
MPRINT(EM_DIAGRAM):   else do;
25402      F_BAD_0_IajolvnOv3HjI8e = 0;
MPRINT(EM_DIAGRAM):   F_BAD_0_IajolvnOv3HjI8e = 0;
25403      end;
MPRINT(EM_DIAGRAM):   end;
25404      keep P_BAD1;
MPRINT(EM_DIAGRAM):   keep P_BAD1;
25405      keep P_BAD0;
MPRINT(EM_DIAGRAM):   keep P_BAD0;
25406      output work.ASSESS_2NSBLJO_normSD_dcnzah;
MPRINT(EM_DIAGRAM):   output work.ASSESS_2NSBLJO_normSD_dcnzah;
25407      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
25408      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
25409      _numberOfObservation_ + frequency_1JRPFX;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_1JRPFX;
25410      keep _levelFrequency_1;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_1;
25411      retain _levelFrequency_1 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_1 0;
25412      if (F_BAD = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '1') then do;
25413      _levelFrequency_1 + frequency_1JRPFX;
MPRINT(EM_DIAGRAM):   _levelFrequency_1 + frequency_1JRPFX;
25414      end;
MPRINT(EM_DIAGRAM):   end;
25415      keep _levelFrequency_2;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_2;
25416      retain _levelFrequency_2 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_2 0;
25417      if (F_BAD = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '0') then do;
25418      _levelFrequency_2 + frequency_1JRPFX;
MPRINT(EM_DIAGRAM):   _levelFrequency_2 + frequency_1JRPFX;
25419      end;
MPRINT(EM_DIAGRAM):   end;
25420      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
25421      output work.ASSESS_2NSBLJO_meansAndTi_gBDYsC;
MPRINT(EM_DIAGRAM):   output work.ASSESS_2NSBLJO_meansAndTi_gBDYsC;
25422      end;
MPRINT(EM_DIAGRAM):   end;
25423      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41    
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
      
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.REG_TRAIN.
      WHERE BAD not = .;
NOTE: The data set WORK.ASSESS_2NSBLJO_NORMSD_DCNZAH has 2979 observations and 7 variables.
NOTE: The data set WORK.ASSESS_2NSBLJO_MEANSANDTI_GBDYSC has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
      

25424      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
25425      set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
25426      where MODEL = "Reg" and TARGET = "BAD" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Reg" and TARGET = "BAD" and dataRole="TRAIN";
25427      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Reg') and (TARGET='BAD') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

25428      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
25429      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
25430      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
25431      output;
MPRINT(EM_DIAGRAM):   output;
25432      end;
MPRINT(EM_DIAGRAM):   end;
25433      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

25434      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
25435      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
25436      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
25437      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      

25438      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
25439      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
25440      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
25441      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
25442      keep event;
MPRINT(EM_DIAGRAM):   keep event;
25443      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
25444      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
25445      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
25446      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
25447      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
25448      /* tied */
25449      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
25450      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
25451      end;
MPRINT(EM_DIAGRAM):   end;
25452      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
25453      /* next tied */
25454      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
25455      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
25456      end;
MPRINT(EM_DIAGRAM):   end;
25457      output;
MPRINT(EM_DIAGRAM):   output;
25458      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
25459      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
25460      *end;
MPRINT(EM_DIAGRAM):   *end;
25461      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
25462      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
25463      end;
MPRINT(EM_DIAGRAM):   end;
25464      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
25465      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
25466      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
25467      end;
MPRINT(EM_DIAGRAM):   end;
25468      end;
MPRINT(EM_DIAGRAM):   end;
25469      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
25470      /* correct the previous change */
25471      end;
MPRINT(EM_DIAGRAM):   end;
25472      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
25473      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
25474      output;
MPRINT(EM_DIAGRAM):   output;
25475      end;
MPRINT(EM_DIAGRAM):   end;
25476      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
25477      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
25478      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

25479      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
25480      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
The SAS System

25481      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
25482      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
25483      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
25484      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
25485      end;
MPRINT(EM_DIAGRAM):   end;
25486      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
25487      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
25488      output;
MPRINT(EM_DIAGRAM):   output;
25489      end;
MPRINT(EM_DIAGRAM):   end;
25490      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
25491      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25492      *------------------------------------------------------------*;
25493      * MdlComp: Scoring REG_TRAIN data;
25494      *------------------------------------------------------------*;
25495      data EMWS1.MdlComp_TRAIN
25496      / view=EMWS1.MdlComp_TRAIN
25497      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
25498      set EMWS1.Reg_TRAIN
25499      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TRAIN ;
25500      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
25501     +if (P_BAD1 ge 0.61815024741536) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.61815024741536) then do;
25502     +b_BAD = 1;
MPRINT(EM_DIAGRAM):   b_BAD = 1;
25503     +end;
MPRINT(EM_DIAGRAM):   end;
25504     +else
25505     +if (P_BAD1 ge 0.42863152107631) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.42863152107631) then do;
25506     +b_BAD = 2;
MPRINT(EM_DIAGRAM):   b_BAD = 2;
25507     +end;
MPRINT(EM_DIAGRAM):   end;
25508     +else
25509     +if (P_BAD1 ge 0.32525628478741) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.32525628478741) then do;
25510     +b_BAD = 3;
MPRINT(EM_DIAGRAM):   b_BAD = 3;
25511     +end;
MPRINT(EM_DIAGRAM):   end;
25512     +else
25513     +if (P_BAD1 ge 0.26556882012909) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.26556882012909) then do;
25514     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
25515     +end;
MPRINT(EM_DIAGRAM):   end;
25516     +else
25517     +if (P_BAD1 ge 0.22492343356232) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.22492343356232) then do;
25518     +b_BAD = 5;
MPRINT(EM_DIAGRAM):   b_BAD = 5;
25519     +end;
MPRINT(EM_DIAGRAM):   end;
25520     +else
25521     +if (P_BAD1 ge 0.19506579044545) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.19506579044545) then do;
25522     +b_BAD = 6;
MPRINT(EM_DIAGRAM):   b_BAD = 6;
25523     +end;
MPRINT(EM_DIAGRAM):   end;
25524     +else
25525     +if (P_BAD1 ge 0.17296342866816) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.17296342866816) then do;
25526     +b_BAD = 7;
MPRINT(EM_DIAGRAM):   b_BAD = 7;
25527     +end;
MPRINT(EM_DIAGRAM):   end;
25528     +else
25529     +if (P_BAD1 ge 0.1563070170706) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.1563070170706) then do;
25530     +b_BAD = 8;
MPRINT(EM_DIAGRAM):   b_BAD = 8;
25531     +end;
MPRINT(EM_DIAGRAM):   end;
25532     +else
25533     +if (P_BAD1 ge 0.1411349034874) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.1411349034874) then do;
25534     +b_BAD = 9;
MPRINT(EM_DIAGRAM):   b_BAD = 9;
25535     +end;
MPRINT(EM_DIAGRAM):   end;
25536     +else
25537     +if (P_BAD1 ge 0.13036967077873) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.13036967077873) then do;
25538     +b_BAD = 10;
MPRINT(EM_DIAGRAM):   b_BAD = 10;
25539     +end;
MPRINT(EM_DIAGRAM):   end;
25540     +else
25541     +if (P_BAD1 ge 0.11975119191004) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.11975119191004) then do;
25542     +b_BAD = 11;
MPRINT(EM_DIAGRAM):   b_BAD = 11;
25543     +end;
MPRINT(EM_DIAGRAM):   end;
25544     +else
25545     +if (P_BAD1 ge 0.11065276961364) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.11065276961364) then do;
25546     +b_BAD = 12;
MPRINT(EM_DIAGRAM):   b_BAD = 12;
25547     +end;
MPRINT(EM_DIAGRAM):   end;
25548     +else
25549     +if (P_BAD1 ge 0.10495857793016) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.10495857793016) then do;
25550     +b_BAD = 13;
MPRINT(EM_DIAGRAM):   b_BAD = 13;
25551     +end;
MPRINT(EM_DIAGRAM):   end;
25552     +else
25553     +if (P_BAD1 ge 0.09937704269004) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.09937704269004) then do;
25554     +b_BAD = 14;
MPRINT(EM_DIAGRAM):   b_BAD = 14;
25555     +end;
MPRINT(EM_DIAGRAM):   end;
25556     +else
25557     +if (P_BAD1 ge 0.09364458558169) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.09364458558169) then do;
25558     +b_BAD = 15;
MPRINT(EM_DIAGRAM):   b_BAD = 15;
25559     +end;
MPRINT(EM_DIAGRAM):   end;
25560     +else
25561     +if (P_BAD1 ge 0.08578623675544) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.08578623675544) then do;
25562     +b_BAD = 16;
MPRINT(EM_DIAGRAM):   b_BAD = 16;
25563     +end;
MPRINT(EM_DIAGRAM):   end;
25564     +else
25565     +if (P_BAD1 ge 0.079078590313) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.079078590313) then do;
25566     +b_BAD = 17;
MPRINT(EM_DIAGRAM):   b_BAD = 17;
25567     +end;
MPRINT(EM_DIAGRAM):   end;
25568     +else
25569     +if (P_BAD1 ge 0.0701362844578) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.0701362844578) then do;
25570     +b_BAD = 18;
MPRINT(EM_DIAGRAM):   b_BAD = 18;
25571     +end;
MPRINT(EM_DIAGRAM):   end;
25572     +else
25573     +if (P_BAD1 ge 0.05971603204097) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.05971603204097) then do;
25574     +b_BAD = 19;
MPRINT(EM_DIAGRAM):   b_BAD = 19;
25575     +end;
MPRINT(EM_DIAGRAM):   end;
25576     +else
25577     +do;
MPRINT(EM_DIAGRAM):   else do;
25578     +b_BAD = 20;
MPRINT(EM_DIAGRAM):   b_BAD = 20;
25579     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25580      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
25581      quit;
25582      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25583      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25584      *------------------------------------------------------------*;
25585      * MdlComp: Scoring REG_VALIDATE data;
25586      *------------------------------------------------------------*;
25587      data EMWS1.MdlComp_VALIDATE
25588      / view=EMWS1.MdlComp_VALIDATE
25589      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
25590      set EMWS1.Reg_VALIDATE
25591      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VALIDATE ;
25592      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
25593     +if (P_BAD1 ge 0.61815024741536) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.61815024741536) then do;
25594     +b_BAD = 1;
MPRINT(EM_DIAGRAM):   b_BAD = 1;
25595     +end;
MPRINT(EM_DIAGRAM):   end;
25596     +else
25597     +if (P_BAD1 ge 0.42863152107631) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.42863152107631) then do;
25598     +b_BAD = 2;
MPRINT(EM_DIAGRAM):   b_BAD = 2;
25599     +end;
MPRINT(EM_DIAGRAM):   end;
25600     +else
25601     +if (P_BAD1 ge 0.32525628478741) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.32525628478741) then do;
25602     +b_BAD = 3;
MPRINT(EM_DIAGRAM):   b_BAD = 3;
25603     +end;
MPRINT(EM_DIAGRAM):   end;
25604     +else
25605     +if (P_BAD1 ge 0.26556882012909) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.26556882012909) then do;
25606     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
25607     +end;
MPRINT(EM_DIAGRAM):   end;
25608     +else
25609     +if (P_BAD1 ge 0.22492343356232) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.22492343356232) then do;
25610     +b_BAD = 5;
MPRINT(EM_DIAGRAM):   b_BAD = 5;
25611     +end;
MPRINT(EM_DIAGRAM):   end;
25612     +else
25613     +if (P_BAD1 ge 0.19506579044545) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.19506579044545) then do;
25614     +b_BAD = 6;
MPRINT(EM_DIAGRAM):   b_BAD = 6;
25615     +end;
MPRINT(EM_DIAGRAM):   end;
25616     +else
25617     +if (P_BAD1 ge 0.17296342866816) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.17296342866816) then do;
25618     +b_BAD = 7;
MPRINT(EM_DIAGRAM):   b_BAD = 7;
25619     +end;
MPRINT(EM_DIAGRAM):   end;
25620     +else
25621     +if (P_BAD1 ge 0.1563070170706) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.1563070170706) then do;
25622     +b_BAD = 8;
MPRINT(EM_DIAGRAM):   b_BAD = 8;
25623     +end;
MPRINT(EM_DIAGRAM):   end;
25624     +else
25625     +if (P_BAD1 ge 0.1411349034874) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.1411349034874) then do;
25626     +b_BAD = 9;
MPRINT(EM_DIAGRAM):   b_BAD = 9;
25627     +end;
MPRINT(EM_DIAGRAM):   end;
25628     +else
25629     +if (P_BAD1 ge 0.13036967077873) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.13036967077873) then do;
25630     +b_BAD = 10;
MPRINT(EM_DIAGRAM):   b_BAD = 10;
25631     +end;
MPRINT(EM_DIAGRAM):   end;
25632     +else
25633     +if (P_BAD1 ge 0.11975119191004) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.11975119191004) then do;
25634     +b_BAD = 11;
MPRINT(EM_DIAGRAM):   b_BAD = 11;
25635     +end;
MPRINT(EM_DIAGRAM):   end;
25636     +else
25637     +if (P_BAD1 ge 0.11065276961364) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.11065276961364) then do;
25638     +b_BAD = 12;
MPRINT(EM_DIAGRAM):   b_BAD = 12;
25639     +end;
MPRINT(EM_DIAGRAM):   end;
25640     +else
25641     +if (P_BAD1 ge 0.10495857793016) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.10495857793016) then do;
25642     +b_BAD = 13;
MPRINT(EM_DIAGRAM):   b_BAD = 13;
25643     +end;
MPRINT(EM_DIAGRAM):   end;
25644     +else
25645     +if (P_BAD1 ge 0.09937704269004) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.09937704269004) then do;
25646     +b_BAD = 14;
MPRINT(EM_DIAGRAM):   b_BAD = 14;
25647     +end;
MPRINT(EM_DIAGRAM):   end;
25648     +else
25649     +if (P_BAD1 ge 0.09364458558169) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.09364458558169) then do;
25650     +b_BAD = 15;
MPRINT(EM_DIAGRAM):   b_BAD = 15;
25651     +end;
MPRINT(EM_DIAGRAM):   end;
25652     +else
25653     +if (P_BAD1 ge 0.08578623675544) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.08578623675544) then do;
25654     +b_BAD = 16;
MPRINT(EM_DIAGRAM):   b_BAD = 16;
25655     +end;
MPRINT(EM_DIAGRAM):   end;
25656     +else
25657     +if (P_BAD1 ge 0.079078590313) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.079078590313) then do;
25658     +b_BAD = 17;
MPRINT(EM_DIAGRAM):   b_BAD = 17;
25659     +end;
MPRINT(EM_DIAGRAM):   end;
25660     +else
25661     +if (P_BAD1 ge 0.0701362844578) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.0701362844578) then do;
25662     +b_BAD = 18;
MPRINT(EM_DIAGRAM):   b_BAD = 18;
25663     +end;
MPRINT(EM_DIAGRAM):   end;
25664     +else
25665     +if (P_BAD1 ge 0.05971603204097) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.05971603204097) then do;
25666     +b_BAD = 19;
MPRINT(EM_DIAGRAM):   b_BAD = 19;
25667     +end;
MPRINT(EM_DIAGRAM):   end;
25668     +else
25669     +do;
MPRINT(EM_DIAGRAM):   else do;
25670     +b_BAD = 20;
MPRINT(EM_DIAGRAM):   b_BAD = 20;
25671     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25672      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   quit;
25673      quit;
25674      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25675      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring REG_TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25676      *------------------------------------------------------------*;
25677      * MdlComp: Scoring REG_TEST data;
25678      *------------------------------------------------------------*;
25679      data EMWS1.MdlComp_TEST
25680      / view=EMWS1.MdlComp_TEST
25681      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TEST / view=EMWS1.MdlComp_TEST ;
25682      set EMWS1.Reg_TEST
25683      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TEST ;
25684      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
25685     +if (P_BAD1 ge 0.61815024741536) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.61815024741536) then do;
25686     +b_BAD = 1;
MPRINT(EM_DIAGRAM):   b_BAD = 1;
25687     +end;
MPRINT(EM_DIAGRAM):   end;
25688     +else
25689     +if (P_BAD1 ge 0.42863152107631) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.42863152107631) then do;
25690     +b_BAD = 2;
MPRINT(EM_DIAGRAM):   b_BAD = 2;
25691     +end;
MPRINT(EM_DIAGRAM):   end;
25692     +else
25693     +if (P_BAD1 ge 0.32525628478741) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.32525628478741) then do;
25694     +b_BAD = 3;
MPRINT(EM_DIAGRAM):   b_BAD = 3;
25695     +end;
MPRINT(EM_DIAGRAM):   end;
25696     +else
25697     +if (P_BAD1 ge 0.26556882012909) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.26556882012909) then do;
25698     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
25699     +end;
MPRINT(EM_DIAGRAM):   end;
25700     +else
25701     +if (P_BAD1 ge 0.22492343356232) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.22492343356232) then do;
25702     +b_BAD = 5;
MPRINT(EM_DIAGRAM):   b_BAD = 5;
25703     +end;
MPRINT(EM_DIAGRAM):   end;
25704     +else
25705     +if (P_BAD1 ge 0.19506579044545) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.19506579044545) then do;
25706     +b_BAD = 6;
MPRINT(EM_DIAGRAM):   b_BAD = 6;
25707     +end;
MPRINT(EM_DIAGRAM):   end;
25708     +else
25709     +if (P_BAD1 ge 0.17296342866816) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.17296342866816) then do;
25710     +b_BAD = 7;
MPRINT(EM_DIAGRAM):   b_BAD = 7;
25711     +end;
MPRINT(EM_DIAGRAM):   end;
25712     +else
25713     +if (P_BAD1 ge 0.1563070170706) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.1563070170706) then do;
25714     +b_BAD = 8;
MPRINT(EM_DIAGRAM):   b_BAD = 8;
25715     +end;
MPRINT(EM_DIAGRAM):   end;
25716     +else
25717     +if (P_BAD1 ge 0.1411349034874) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.1411349034874) then do;
25718     +b_BAD = 9;
MPRINT(EM_DIAGRAM):   b_BAD = 9;
25719     +end;
MPRINT(EM_DIAGRAM):   end;
25720     +else
25721     +if (P_BAD1 ge 0.13036967077873) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.13036967077873) then do;
25722     +b_BAD = 10;
MPRINT(EM_DIAGRAM):   b_BAD = 10;
25723     +end;
MPRINT(EM_DIAGRAM):   end;
25724     +else
25725     +if (P_BAD1 ge 0.11975119191004) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.11975119191004) then do;
25726     +b_BAD = 11;
MPRINT(EM_DIAGRAM):   b_BAD = 11;
25727     +end;
MPRINT(EM_DIAGRAM):   end;
25728     +else
25729     +if (P_BAD1 ge 0.11065276961364) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.11065276961364) then do;
25730     +b_BAD = 12;
MPRINT(EM_DIAGRAM):   b_BAD = 12;
25731     +end;
MPRINT(EM_DIAGRAM):   end;
25732     +else
25733     +if (P_BAD1 ge 0.10495857793016) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.10495857793016) then do;
25734     +b_BAD = 13;
MPRINT(EM_DIAGRAM):   b_BAD = 13;
25735     +end;
MPRINT(EM_DIAGRAM):   end;
25736     +else
25737     +if (P_BAD1 ge 0.09937704269004) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.09937704269004) then do;
25738     +b_BAD = 14;
MPRINT(EM_DIAGRAM):   b_BAD = 14;
25739     +end;
MPRINT(EM_DIAGRAM):   end;
25740     +else
25741     +if (P_BAD1 ge 0.09364458558169) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.09364458558169) then do;
25742     +b_BAD = 15;
MPRINT(EM_DIAGRAM):   b_BAD = 15;
25743     +end;
MPRINT(EM_DIAGRAM):   end;
25744     +else
25745     +if (P_BAD1 ge 0.08578623675544) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.08578623675544) then do;
25746     +b_BAD = 16;
MPRINT(EM_DIAGRAM):   b_BAD = 16;
25747     +end;
MPRINT(EM_DIAGRAM):   end;
25748     +else
25749     +if (P_BAD1 ge 0.079078590313) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.079078590313) then do;
25750     +b_BAD = 17;
MPRINT(EM_DIAGRAM):   b_BAD = 17;
25751     +end;
MPRINT(EM_DIAGRAM):   end;
25752     +else
25753     +if (P_BAD1 ge 0.0701362844578) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.0701362844578) then do;
25754     +b_BAD = 18;
MPRINT(EM_DIAGRAM):   b_BAD = 18;
25755     +end;
MPRINT(EM_DIAGRAM):   end;
25756     +else
25757     +if (P_BAD1 ge 0.05971603204097) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.05971603204097) then do;
25758     +b_BAD = 19;
MPRINT(EM_DIAGRAM):   b_BAD = 19;
25759     +end;
MPRINT(EM_DIAGRAM):   end;
25760     +else
25761     +do;
MPRINT(EM_DIAGRAM):   else do;
25762     +b_BAD = 20;
MPRINT(EM_DIAGRAM):   b_BAD = 20;
25763     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25764      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.REG_TEST.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
      

MPRINT(EM_DIAGRAM):   quit;
25765      quit;
25766      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25767      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25768      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
25769      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.12 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M0YEPYIY noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YEPYIY;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YEPYIY(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YEPYIY;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YEPYIY;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1Q0E5U2 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0C3ZFAZ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   set WORK.M1Q0E5U2;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT= 
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Reg_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
      
NOTE: View EMWS1.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
