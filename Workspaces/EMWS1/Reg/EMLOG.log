*------------------------------------------------------------*
Usuario:                Jose Caloca
Fecha:                07 de marzo de 2021
Hora:                14H21
Sitio:                70115216
Plataforma:            X64_10PRO
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                07 de marzo de 2021
Hora:                14H21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0_R06KZ "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0_R06KZ new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70115216";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
41352      proc freq data=EMWS1.Reg_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Reg_VariableSet noprint;
41353      table ROLE*LEVEL/out=WORK.RegMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.RegMETA;
41354      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_VARIABLESET.
NOTE: The data set WORK.REGMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
41355      proc print data=WORK.RegMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RegMETA label noobs;
41356      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
41357      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
41358      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41359      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
41360      run;
 
NOTE: There were 4 observations read from the data set WORK.REGMETA.
NOTE: The PROCEDURE PRINT printed page 17.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41361      title10;
MPRINT(EM_DIAGRAM):   title10;
41362      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Impt_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
41391      data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
41392      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
41393      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
41394         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Evento" NUMLEVELS = "Número de niveles" LEVEL = "Nivel de medida" ORDER = "Orden" LABEL = "Etiqueta";
41395      set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
41396      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
41397      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
41398      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
41399      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
41400      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
41401      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
41402      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
41403      end;
MPRINT(EM_DIAGRAM):   end;
41404      output;
MPRINT(EM_DIAGRAM):   output;
41405      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
41406      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41407      proc print data=WORK.Reg_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg_EVENT noobs label;
41408      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
41409      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41410      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Eventos del modelo";
MPRINT(EM_DIAGRAM):   run;
41411      run;
 
NOTE: There were 1 observations read from the data set WORK.REG_EVENT.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41412      title10;
MPRINT(EM_DIAGRAM):   title10;
"No se han definido decisiones para el target "BAD"."
41413      proc print data = EMWS1.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_BAD_DM noobs label;
41414      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
41415      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
41416      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo" VARIABLE = "Variable" LABEL = "Etiqueta";
41417      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
41418      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variables predichas y de decisión";
MPRINT(EM_DIAGRAM):   run;
41419      run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41420      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M3M_O3L6;
MPRINT(EM_DIAGRAM):   set WORK.M3M_O3L6;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
41430      data WORK.M3M_O3L6;
MPRINT(EM_DIAGRAM):    data WORK.M3M_O3L6;
41431      set WORK.M3M_O3L6 end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M3M_O3L6 end=eof;
41432      output;
MPRINT(EM_DIAGRAM):   output;
41433      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
41434      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
41435      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
41436      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
41437      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
41438      output;
MPRINT(EM_DIAGRAM):   output;
41439      end;
MPRINT(EM_DIAGRAM):   end;
41440      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.M3M_O3L6.
NOTE: The data set WORK.M3M_O3L6 has 9 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
41441      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41442      * Reg: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg: Create decision matrix;
41443      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41444      data WORK.BAD;
MPRINT(EM_DIAGRAM):   data WORK.BAD;
41445        length   BAD                              $  32
41446                 COUNT                                8
41447                 DATAPRIOR                            8
41448                 TRAINPRIOR                           8
41449                 DECPRIOR                             8
41450                 DECISION1                            8
41451                 DECISION2                            8
41452                 ;
MPRINT(EM_DIAGRAM):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
41453
41454        label    COUNT="Level Counts"
41455                 DATAPRIOR="Data Proportions"
41456                 TRAINPRIOR="Training Proportions"
41457                 DECPRIOR="Decision Priors"
41458                 DECISION1="1"
41459                 DECISION2="0"
41460                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
41461        format   COUNT 10.
41462                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
41463      BAD="1"; COUNT=1189; DATAPRIOR=0.1994966442953; TRAINPRIOR=0.1994966442953; DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   BAD="1";
MPRINT(EM_DIAGRAM):   COUNT=1189;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
41464      output;
MPRINT(EM_DIAGRAM):   output;
41465      BAD="0"; COUNT=4771; DATAPRIOR=0.80050335570469; TRAINPRIOR=0.80050335570469; DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   BAD="0";
MPRINT(EM_DIAGRAM):   COUNT=4771;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
41466      output;
MPRINT(EM_DIAGRAM):   output;
41467      ;
MPRINT(EM_DIAGRAM):   ;
41468      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41469      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
41470      modify BAD(type=PROFIT label=BAD);
MPRINT(EM_DIAGRAM):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
41471      label DECISION1= '1';
41472      label DECISION2= '0';
41473      run;
 
NOTE: MODIFY was successful for WORK.BAD.DATA.
41474      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41475      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
41476      set EMWS1.Impt_TRAIN(keep=
41477      BAD IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON IMP_VALUE );
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN(keep= BAD IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON IMP_VALUE );
41478      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
41479      *------------------------------------------------------------* ;
41480      * Reg: DMDBClass Macro ;
41481      *------------------------------------------------------------* ;
41482      %macro DMDBClass;
41483          BAD(DESC) IMP_DELINQ(ASC) IMP_DEROG(ASC) IMP_JOB(ASC) IMP_NINQ(ASC)
41484         IMP_REASON(ASC)
41485      %mend DMDBClass;
41486      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
41487      * Reg: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBVar Macro ;
41488      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
41489      %macro DMDBVar;
41490          IMP_DEBTINC IMP_VALUE
41491      %mend DMDBVar;
41492      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41493      * Reg: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg: Create DMDB;
41494      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41495      proc dmdb batch data=WORK.EM_DMREG
41496      dmdbcat=WORK.Reg_DMDB
41497      maxlevel = 513
41498      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
41499      class %DMDBClass;
MPRINT(DMDBCLASS):   BAD(DESC) IMP_DELINQ(ASC) IMP_DEROG(ASC) IMP_JOB(ASC) IMP_NINQ(ASC) IMP_REASON(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
41500      var %DMDBVar;
MPRINT(DMDBVAR):   IMP_DEBTINC IMP_VALUE
MPRINT(EM_DIAGRAM):  ;
41501      target
41502      BAD
41503      ;
MPRINT(EM_DIAGRAM):   target BAD ;
41504      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.11 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
41505      quit;
41506      *--- end code ---*;
 
41507      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41508      * Reg: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg: Run DMREG procedure;
41509      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41510      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB
41511      validata = EMWS1.Impt_VALIDATE
41512      outest = EMWS1.Reg_EMESTIMATE
41513      outterms = EMWS1.Reg_OUTTERMS
41514      outmap= EMWS1.Reg_MAPDS namelen=200
41515      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB validata = EMWS1.Impt_VALIDATE outest = EMWS1.Reg_EMESTIMATE outterms = EMWS1.Reg_OUTTERMS outmap= EMWS1.Reg_MAPDS namelen=200 ;
41516      class
41517      BAD
41518      IMP_DELINQ
41519      IMP_DEROG
41520      IMP_JOB
41521      IMP_NINQ
41522      IMP_REASON
41523      ;
MPRINT(EM_DIAGRAM):   class BAD IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON ;
41524      model BAD =
41525      IMP_DEBTINC
41526      IMP_DELINQ
41527      IMP_DEROG
41528      IMP_JOB
41529      IMP_NINQ
41530      IMP_REASON
41531      IMP_VALUE
41532      /error=binomial link=LOGIT
41533      coding=DEVIATION
41534      nodesignprint
41535      ;
MPRINT(EM_DIAGRAM):   model BAD = IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON IMP_VALUE /error=binomial link=LOGIT coding=DEVIATION nodesignprint ;
41536      ;
MPRINT(EM_DIAGRAM):   ;
41537      score data=EMWS1.Impt_TEST
41538      out=_null_
41539      outfit=EMWS1.Reg_FITTEST
41540      role = TEST
41541      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Impt_TEST out=_null_ outfit=EMWS1.Reg_FITTEST role = TEST ;
41542      code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas"
41543      group=Reg
41544      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas" group=Reg ;
41545      code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas"
41546      group=Reg
41547      residual
41548      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas" group=Reg residual ;
41549      run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that BAD=1.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMPUBLISHSCORE.sas opened.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas opened.
NOTE: There were 1193 observations read from the data set EMWS1.PART_TEST.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      58 at 75570:41    251 at 75571:28   38 at 75572:14    106 at 75572:43   134 at 75573:14   26 at 75573:41
NOTE: There were 1193 observations read from the data set EMWS1.VARSEL_TEST.
NOTE: View EMWS1.IMPT_TEST.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
NOTE: There were 1193 observations read from the data set EMWS1.VARCLUS_TEST.
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 75543:41    401 at 75544:28   60 at 75545:14    160 at 75545:43   216 at 75546:14   32 at 75546:41
NOTE: There were 1788 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.18 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.VARCLUS_VALIDATE.
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.26 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1788 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 1193 observations read from the data set EMWS1.IMPT_TEST.
NOTE: The data set EMWS1.REG_EMESTIMATE has 3 observations and 80 variables.
NOTE: The data set EMWS1.REG_OUTTERMS has 46 observations and 6 variables.
NOTE: The data set EMWS1.REG_MAPDS has 2 observations and 47 variables.
NOTE: The data set EMWS1.REG_FITTEST has 1 observations and 14 variables.
NOTE: The PROCEDURE DMREG printed pages 20-21.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.35 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
41550      quit;
 
41551      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
41552      delete Reg_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB;
41553      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
41554      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
41555      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
41556      delete Reg_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB / memtype=catalog;
41557      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG_DMDB (memtype=CATALOG).
41558      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41559      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
41560      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
41561      set EMWS1.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMESTIMATE;
41562      drop _AIC_--_VMISC_
41563      ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_ ;
41564      where _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _TYPE_ in('PARMS', 'T', 'P');
41565      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
41566      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
41567      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
41568      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
41569      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
41570      end;
MPRINT(EM_DIAGRAM):   end;
41571      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMESTIMATE.
      WHERE _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
41572      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
41573      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 46 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41574      proc transpose data=EMWS1.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
41575      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable ));
41576      var 'IMP_DEBTINC'n--'IMP_VALUE'n;
MPRINT(EM_DIAGRAM):   var 'IMP_DEBTINC'n--'IMP_VALUE'n;
41577      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_MAPDS.
NOTE: The data set WORK.MAP has 45 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
41578      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
41579      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
41580      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 45 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41581      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
41582      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
41583      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 46 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41584      data EMWS1.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
41585      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
41586      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
41587      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
41588      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
41589         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
41590         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Efecto" Variable = "Variable" Sign = "Signo" ClassLevel = "Nivel" Abscoefficient = "Coeficiente absoluto" Coefficient = "Coeficiente" _LABEL_ = "Etiqueta de efecto" CODE = "Variable de código de puntuación";
41591      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
41591    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-valor" abstvalue = "T-valor absoluto" PValue = "P valor";
41592      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
41593      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
41594      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
41595      classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
41596      end;
MPRINT(EM_DIAGRAM):   end;
41597      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
41598      if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
41599      end;
MPRINT(EM_DIAGRAM):   end;
41600      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
41601      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
41602      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
41603      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
41604      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
41605      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
41606      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK.ESTIMATE.
NOTE: There were 45 observations read from the data set WORK.MAP.
NOTE: The data set EMWS1.REG_EFFECTS has 46 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
41607      proc sort data =EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg_EFFECTS;
41608      by
41609      descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
41610      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 46 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
41611      data EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS;
41612      set EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS;
41613      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
41614      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "Número TScore";
41615      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
41616      TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
41617      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 46 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
41618      proc sort data =EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg_EFFECTS;
41619      by
41620      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
41621      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 46 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
41622      data EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EFFECTS;
41623      set EMWS1.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EFFECTS;
41624      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
41625      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Número de efecto";
41626      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
41627      EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
41628      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set EMWS1.REG_EFFECTS.
NOTE: The data set EMWS1.REG_EFFECTS has 46 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                07 de marzo de 2021
Hora:                14H21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0RLIYDO "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0RLIYDO new;
MPRINT(EM_DIAGRAM):   run;
41730      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41731      *------------------------------------------------------------*;
41732      * Reg: Scoring DATA data;
41733      *------------------------------------------------------------*;
41734      data EMWS1.Reg_TRAIN
41735      / view=EMWS1.Reg_TRAIN
41736      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TRAIN / view=EMWS1.Reg_TRAIN ;
41737      set EMWS1.Impt_TRAIN
41738      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
41739      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
41740     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
41741     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
41742     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
41743     +
41744     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
41745     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
41746     +
41747     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
41748     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
41749     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
41750     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
41751     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
41752     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
41753     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
41754     +
41755     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
41756     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
41757     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
41758     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
41759     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
41760     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
41761     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
41762     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
41763     +end;
MPRINT(EM_DIAGRAM):   end;
41764     +else do;
MPRINT(EM_DIAGRAM):   else do;
41765     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
41766     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
41767     +   end;
MPRINT(EM_DIAGRAM):   end;
41768     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
41769     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
41770     +   end;
MPRINT(EM_DIAGRAM):   end;
41771     +   else do;
MPRINT(EM_DIAGRAM):   else do;
41772     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
41773     +   end;
MPRINT(EM_DIAGRAM):   end;
41774     +end;
MPRINT(EM_DIAGRAM):   end;
41775     +
41776     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
41777     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
41778     +
41779     +*** Check IMP_DEBTINC for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_DEBTINC for missing values ;
41780     +if missing( IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEBTINC ) then do;
41781     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41782     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41783     +end;
MPRINT(EM_DIAGRAM):   end;
41784     +
41785     +*** Check IMP_VALUE for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_VALUE for missing values ;
41786     +if missing( IMP_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_VALUE ) then do;
41787     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41788     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41789     +end;
MPRINT(EM_DIAGRAM):   end;
41790     +
41791     +*** Generate dummy variables for IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DELINQ ;
41792     +drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
41793     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41794     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
41795     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
41796     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
41797     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
41798     +_1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
41799     +_1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
41800     +_1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
41801     +_1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
41802     +_1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
41803     +_1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
41804     +_1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
41805     +_1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
41806     +_1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
41807     +if missing( IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DELINQ ) then do;
41808     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
41809     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
41810     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
41811     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
41812     +   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
41813     +   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
41814     +   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
41815     +   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
41816     +   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
41817     +   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
41818     +   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
41819     +   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
41820     +   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
41821     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41822     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41823     +end;
MPRINT(EM_DIAGRAM):   end;
41824     +else do;
MPRINT(EM_DIAGRAM):   else do;
41825     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
41826     +   _dm12 = put( IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DELINQ , BEST12. );
41827     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
41828     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
41829     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
41830     +   end;
MPRINT(EM_DIAGRAM):   end;
41831     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
41832     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
41833     +   end;
MPRINT(EM_DIAGRAM):   end;
41834     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
41835     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
41836     +   end;
MPRINT(EM_DIAGRAM):   end;
41837     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
41838     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
41839     +   end;
MPRINT(EM_DIAGRAM):   end;
41840     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
41841     +      _1_4 = 1;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
41842     +   end;
MPRINT(EM_DIAGRAM):   end;
41843     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
41844     +      _1_6 = 1;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
41845     +   end;
MPRINT(EM_DIAGRAM):   end;
41846     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
41847     +      _1_5 = 1;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
41848     +   end;
MPRINT(EM_DIAGRAM):   end;
41849     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
41850     +      _1_7 = 1;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
41851     +   end;
MPRINT(EM_DIAGRAM):   end;
41852     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
41853     +      _1_8 = 1;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
41854     +   end;
MPRINT(EM_DIAGRAM):   end;
41855     +   else if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
41856     +      _1_10 = 1;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
41857     +   end;
MPRINT(EM_DIAGRAM):   end;
41858     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
41859     +      _1_9 = 1;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
41860     +   end;
MPRINT(EM_DIAGRAM):   end;
41861     +   else if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
41862     +      _1_11 = 1;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
41863     +   end;
MPRINT(EM_DIAGRAM):   end;
41864     +   else if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
41865     +      _1_12 = 1;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
41866     +   end;
MPRINT(EM_DIAGRAM):   end;
41867     +   else if _dm12 = '15'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
41868     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
41869     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
41870     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
41871     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
41872     +      _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
41873     +      _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
41874     +      _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
41875     +      _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
41876     +      _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
41877     +      _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
41878     +      _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
41879     +      _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
41880     +      _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
41881     +   end;
MPRINT(EM_DIAGRAM):   end;
41882     +   else do;
MPRINT(EM_DIAGRAM):   else do;
41883     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
41884     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
41885     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
41886     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
41887     +      _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
41888     +      _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
41889     +      _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
41890     +      _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
41891     +      _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
41892     +      _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
41893     +      _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
41894     +      _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
41895     +      _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
41896     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41897     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41898     +   end;
MPRINT(EM_DIAGRAM):   end;
41899     +end;
MPRINT(EM_DIAGRAM):   end;
41900     +
41901     +*** Generate dummy variables for IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DEROG ;
41902     +drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
41903     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41904     +_2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
41905     +_2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
41906     +_2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
41907     +_2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
41908     +_2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
41909     +_2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
41910     +_2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
41911     +_2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
41912     +_2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
41913     +_2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
41914     +if missing( IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEROG ) then do;
41915     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
41916     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
41917     +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
41918     +   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
41919     +   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
41920     +   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
41921     +   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
41922     +   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
41923     +   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
41924     +   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
41925     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
41926     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41927     +end;
MPRINT(EM_DIAGRAM):   end;
41928     +else do;
MPRINT(EM_DIAGRAM):   else do;
41929     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
41930     +   _dm12 = put( IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DEROG , BEST12. );
41931     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
41932     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
41933     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
41934     +   end;
MPRINT(EM_DIAGRAM):   end;
41935     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
41936     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
41937     +   end;
MPRINT(EM_DIAGRAM):   end;
41938     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
41939     +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
41940     +   end;
MPRINT(EM_DIAGRAM):   end;
41941     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
41942     +      _2_3 = 1;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
41943     +   end;
MPRINT(EM_DIAGRAM):   end;
41944     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
41945     +      _2_4 = 1;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
41946     +   end;
MPRINT(EM_DIAGRAM):   end;
41947     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
41948     +      _2_5 = 1;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
41949     +   end;
MPRINT(EM_DIAGRAM):   end;
41950     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
41951     +      _2_6 = 1;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
41952     +   end;
MPRINT(EM_DIAGRAM):   end;
41953     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
41954     +      _2_7 = 1;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
41955     +   end;
MPRINT(EM_DIAGRAM):   end;
41956     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
41957     +      _2_8 = 1;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
41958     +   end;
MPRINT(EM_DIAGRAM):   end;
41959     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
41960     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
41961     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
41962     +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
41963     +      _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
41964     +      _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
41965     +      _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
41966     +      _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
41967     +      _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
41968     +      _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
41969     +      _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
41970     +   end;
MPRINT(EM_DIAGRAM):   end;
41971     +   else if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
41972     +      _2_9 = 1;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
41973     +   end;
MPRINT(EM_DIAGRAM):   end;
41974     +   else do;
MPRINT(EM_DIAGRAM):   else do;
41975     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
41976     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
41977     +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
41978     +      _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
41979     +      _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
41980     +      _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
41981     +      _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
41982     +      _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
41983     +      _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
41984     +      _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
41985     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
41986     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
41987     +   end;
MPRINT(EM_DIAGRAM):   end;
41988     +end;
MPRINT(EM_DIAGRAM):   end;
41989     +
41990     +*** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
41991     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
41992     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
41993     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
41994     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
41995     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
41996     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
41997     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
41998     +if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
41999     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
42000     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
42001     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
42002     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
42003     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
42004     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42005     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42006     +end;
MPRINT(EM_DIAGRAM):   end;
42007     +else do;
MPRINT(EM_DIAGRAM):   else do;
42008     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
42009     +   %DMNORMCP( IMP_JOB , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
42010     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
42011     +   if _dm7 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
42012     +      if _dm7 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
42013     +         if _dm7 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
42014     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
42015     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42016     +         end;
MPRINT(EM_DIAGRAM):   end;
42017     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42018     +            if _dm7 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
42019     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
42020     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42021     +            end;
MPRINT(EM_DIAGRAM):   end;
42022     +         end;
MPRINT(EM_DIAGRAM):   end;
42023     +      end;
MPRINT(EM_DIAGRAM):   end;
42024     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42025     +         if _dm7 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
42026     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
42027     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42028     +         end;
MPRINT(EM_DIAGRAM):   end;
42029     +      end;
MPRINT(EM_DIAGRAM):   end;
42030     +   end;
MPRINT(EM_DIAGRAM):   end;
42031     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42032     +      if _dm7 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
42033     +         if _dm7 = 'PROFEXE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
42034     +            _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
42035     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42036     +         end;
MPRINT(EM_DIAGRAM):   end;
42037     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42038     +            if _dm7 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
42039     +               _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
42040     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42041     +            end;
MPRINT(EM_DIAGRAM):   end;
42042     +         end;
MPRINT(EM_DIAGRAM):   end;
42043     +      end;
MPRINT(EM_DIAGRAM):   end;
42044     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42045     +         if _dm7 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
42046     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
42047     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
42048     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
42049     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
42050     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
42051     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42052     +         end;
MPRINT(EM_DIAGRAM):   end;
42053     +      end;
MPRINT(EM_DIAGRAM):   end;
42054     +   end;
MPRINT(EM_DIAGRAM):   end;
42055     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
42056     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
42057     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
42058     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
42059     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
42060     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
42061     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42062     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42063     +   end;
MPRINT(EM_DIAGRAM):   end;
42064     +end;
MPRINT(EM_DIAGRAM):   end;
42065     +
42066     +*** Generate dummy variables for IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_NINQ ;
42067     +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13
42068     +         ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13 ;
42069     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42070     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
42071     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
42072     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
42073     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
42074     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
42075     +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
42076     +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
42077     +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
42078     +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
42079     +_4_9 = 0;
MPRINT(EM_DIAGRAM):   _4_9 = 0;
42080     +_4_10 = 0;
MPRINT(EM_DIAGRAM):   _4_10 = 0;
42081     +_4_11 = 0;
MPRINT(EM_DIAGRAM):   _4_11 = 0;
42082     +_4_12 = 0;
MPRINT(EM_DIAGRAM):   _4_12 = 0;
42083     +_4_13 = 0;
MPRINT(EM_DIAGRAM):   _4_13 = 0;
42084     +if missing( IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_NINQ ) then do;
42085     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
42086     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
42087     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
42088     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
42089     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
42090     +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
42091     +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
42092     +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
42093     +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
42094     +   _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
42095     +   _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
42096     +   _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
42097     +   _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
42098     +   _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
42099     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42100     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42101     +end;
MPRINT(EM_DIAGRAM):   end;
42102     +else do;
MPRINT(EM_DIAGRAM):   else do;
42103     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
42104     +   _dm12 = put( IMP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_NINQ , BEST12. );
42105     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42106     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
42107     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
42108     +      if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
42109     +         if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
42110     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
42111     +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
42112     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42113     +            end;
MPRINT(EM_DIAGRAM):   end;
42114     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42115     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
42116     +                  _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
42117     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42118     +               end;
MPRINT(EM_DIAGRAM):   end;
42119     +            end;
MPRINT(EM_DIAGRAM):   end;
42120     +         end;
MPRINT(EM_DIAGRAM):   end;
42121     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42122     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
42123     +               _4_10 = 1;
MPRINT(EM_DIAGRAM):   _4_10 = 1;
42124     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42125     +            end;
MPRINT(EM_DIAGRAM):   end;
42126     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42127     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
42128     +                  _4_11 = 1;
MPRINT(EM_DIAGRAM):   _4_11 = 1;
42129     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42130     +               end;
MPRINT(EM_DIAGRAM):   end;
42131     +            end;
MPRINT(EM_DIAGRAM):   end;
42132     +         end;
MPRINT(EM_DIAGRAM):   end;
42133     +      end;
MPRINT(EM_DIAGRAM):   end;
42134     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42135     +         if _dm12 <= '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '13' then do;
42136     +            if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '12' then do;
42137     +               _4_12 = 1;
MPRINT(EM_DIAGRAM):   _4_12 = 1;
42138     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42139     +            end;
MPRINT(EM_DIAGRAM):   end;
42140     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42141     +               if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '13' then do;
42142     +                  _4_13 = 1;
MPRINT(EM_DIAGRAM):   _4_13 = 1;
42143     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42144     +               end;
MPRINT(EM_DIAGRAM):   end;
42145     +            end;
MPRINT(EM_DIAGRAM):   end;
42146     +         end;
MPRINT(EM_DIAGRAM):   end;
42147     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42148     +            if _dm12 = '14'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '14' then do;
42149     +               _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
42150     +               _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
42151     +               _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
42152     +               _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
42153     +               _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
42154     +               _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
42155     +               _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
42156     +               _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
42157     +               _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
42158     +               _4_9 = -1;
MPRINT(EM_DIAGRAM):   _4_9 = -1;
42159     +               _4_10 = -1;
MPRINT(EM_DIAGRAM):   _4_10 = -1;
42160     +               _4_11 = -1;
MPRINT(EM_DIAGRAM):   _4_11 = -1;
42161     +               _4_12 = -1;
MPRINT(EM_DIAGRAM):   _4_12 = -1;
42162     +               _4_13 = -1;
MPRINT(EM_DIAGRAM):   _4_13 = -1;
42163     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42164     +            end;
MPRINT(EM_DIAGRAM):   end;
42165     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42166     +               if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
42167     +                  _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
42168     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42169     +               end;
MPRINT(EM_DIAGRAM):   end;
42170     +            end;
MPRINT(EM_DIAGRAM):   end;
42171     +         end;
MPRINT(EM_DIAGRAM):   end;
42172     +      end;
MPRINT(EM_DIAGRAM):   end;
42173     +   end;
MPRINT(EM_DIAGRAM):   end;
42174     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42175     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
42176     +         if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
42177     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
42178     +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
42179     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42180     +            end;
MPRINT(EM_DIAGRAM):   end;
42181     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42182     +               if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
42183     +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
42184     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42185     +               end;
MPRINT(EM_DIAGRAM):   end;
42186     +            end;
MPRINT(EM_DIAGRAM):   end;
42187     +         end;
MPRINT(EM_DIAGRAM):   end;
42188     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42189     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
42190     +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
42191     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42192     +            end;
MPRINT(EM_DIAGRAM):   end;
42193     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42194     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
42195     +                  _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
42196     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42197     +               end;
MPRINT(EM_DIAGRAM):   end;
42198     +            end;
MPRINT(EM_DIAGRAM):   end;
42199     +         end;
MPRINT(EM_DIAGRAM):   end;
42200     +      end;
MPRINT(EM_DIAGRAM):   end;
42201     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42202     +         if _dm12 <= '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '8' then do;
42203     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
42204     +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
42205     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42206     +            end;
MPRINT(EM_DIAGRAM):   end;
42207     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42208     +               if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
42209     +                  _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
42210     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42211     +               end;
MPRINT(EM_DIAGRAM):   end;
42212     +            end;
MPRINT(EM_DIAGRAM):   end;
42213     +         end;
MPRINT(EM_DIAGRAM):   end;
42214     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42215     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
42216     +               _4_9 = 1;
MPRINT(EM_DIAGRAM):   _4_9 = 1;
42217     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42218     +            end;
MPRINT(EM_DIAGRAM):   end;
42219     +         end;
MPRINT(EM_DIAGRAM):   end;
42220     +      end;
MPRINT(EM_DIAGRAM):   end;
42221     +   end;
MPRINT(EM_DIAGRAM):   end;
42222     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
42223     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
42224     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
42225     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
42226     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
42227     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
42228     +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
42229     +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
42230     +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
42231     +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
42232     +      _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
42233     +      _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
42234     +      _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
42235     +      _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
42236     +      _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
42237     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42238     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42239     +   end;
MPRINT(EM_DIAGRAM):   end;
42240     +end;
MPRINT(EM_DIAGRAM):   end;
42241     +
42242     +*** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
42243     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
42244     +if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
42245     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
42246     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42247     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42248     +end;
MPRINT(EM_DIAGRAM):   end;
42249     +else do;
MPRINT(EM_DIAGRAM):   else do;
42250     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
42251     +   %DMNORMCP( IMP_REASON , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
42252     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
42253     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
42254     +   end;
MPRINT(EM_DIAGRAM):   end;
42255     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
42256     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
42257     +   end;
MPRINT(EM_DIAGRAM):   end;
42258     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42259     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
42260     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42261     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42262     +   end;
MPRINT(EM_DIAGRAM):   end;
42263     +end;
MPRINT(EM_DIAGRAM):   end;
42264     +
42265     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
42266     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
42267     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
42268     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
42269     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
42270     +end;
MPRINT(EM_DIAGRAM):   end;
42271     +
42272     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
42273     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
42274     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
42275     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
42276     +
42277     +***  Effect: IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEBTINC ;
42278     +_TEMP = IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_DEBTINC ;
42279     +_LP0 = _LP0 + (    0.02301743834483 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02301743834483 * _TEMP);
42280     +
42281     +***  Effect: IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DELINQ ;
42282     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42283     +_LP0 = _LP0 + (   -6.36976476950453) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.36976476950453) * _TEMP * _1_0;
42284     +_LP0 = _LP0 + (   -5.51726383264789) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.51726383264789) * _TEMP * _1_1;
42285     +_LP0 = _LP0 + (   -5.28965030555067) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.28965030555067) * _TEMP * _1_2;
42286     +_LP0 = _LP0 + (   -4.34366303985794) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.34366303985794) * _TEMP * _1_3;
42287     +_LP0 = _LP0 + (   -4.25867430244393) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.25867430244393) * _TEMP * _1_4;
42288     +_LP0 = _LP0 + (     -3.283714218888) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.283714218888) * _TEMP * _1_5;
42289     +_LP0 = _LP0 + (   -3.09169507595513) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.09169507595513) * _TEMP * _1_6;
42290     +_LP0 = _LP0 + (   -3.18586029288527) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.18586029288527) * _TEMP * _1_7;
42291     +_LP0 = _LP0 + (     5.8151933515491) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.8151933515491) * _TEMP * _1_8;
42292     +_LP0 = _LP0 + (    5.72592869905509) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.72592869905509) * _TEMP * _1_9;
42293     +_LP0 = _LP0 + (    6.28501429836591) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.28501429836591) * _TEMP * _1_10;
42294     +_LP0 = _LP0 + (    6.38687336744805) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.38687336744805) * _TEMP * _1_11;
42295     +_LP0 = _LP0 + (      6.821097778354) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.821097778354) * _TEMP * _1_12;
42296     +
42297     +***  Effect: IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEROG ;
42298     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42299     +_LP0 = _LP0 + (    -2.8677033650612) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.8677033650612) * _TEMP * _2_0;
42300     +_LP0 = _LP0 + (   -2.11858807771827) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.11858807771827) * _TEMP * _2_1;
42301     +_LP0 = _LP0 + (    -1.7649733889329) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.7649733889329) * _TEMP * _2_2;
42302     +_LP0 = _LP0 + (   -0.48994493823638) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48994493823638) * _TEMP * _2_3;
42303     +_LP0 = _LP0 + (   -1.38347605687145) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.38347605687145) * _TEMP * _2_4;
42304     +_LP0 = _LP0 + (   -2.42749123203087) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.42749123203087) * _TEMP * _2_5;
42305     +_LP0 = _LP0 + (   -1.63845058723395) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63845058723395) * _TEMP * _2_6;
42306     +_LP0 = _LP0 + (    6.55732617759875) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.55732617759875) * _TEMP * _2_7;
42307     +_LP0 = _LP0 + (    8.44334237115244) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.44334237115244) * _TEMP * _2_8;
42308     +_LP0 = _LP0 + (   -1.53254744572132) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53254744572132) * _TEMP * _2_9;
42309     +
42310     +***  Effect: IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_JOB ;
42311     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42312     +_LP0 = _LP0 + (    0.03576771441688) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03576771441688) * _TEMP * _3_0;
42313     +_LP0 = _LP0 + (   -0.54173477854762) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.54173477854762) * _TEMP * _3_1;
42314     +_LP0 = _LP0 + (    0.00438269980738) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00438269980738) * _TEMP * _3_2;
42315     +_LP0 = _LP0 + (   -0.32380419617585) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.32380419617585) * _TEMP * _3_3;
42316     +_LP0 = _LP0 + (    0.93192783430112) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.93192783430112) * _TEMP * _3_4;
42317     +
42318     +***  Effect: IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_NINQ ;
42319     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42320     +_LP0 = _LP0 + (   -3.19988133130655) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.19988133130655) * _TEMP * _4_0;
42321     +_LP0 = _LP0 + (   -2.97610436099208) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97610436099208) * _TEMP * _4_1;
42322     +_LP0 = _LP0 + (   -2.59383398186293) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.59383398186293) * _TEMP * _4_2;
42323     +_LP0 = _LP0 + (   -2.72829859454369) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.72829859454369) * _TEMP * _4_3;
42324     +_LP0 = _LP0 + (   -2.16102796215731) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.16102796215731) * _TEMP * _4_4;
42325     +_LP0 = _LP0 + (   -1.70230660255527) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.70230660255527) * _TEMP * _4_5;
42326     +_LP0 = _LP0 + (   -1.40679709428819) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.40679709428819) * _TEMP * _4_6;
42327     +_LP0 = _LP0 + (   -2.01194012595193) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.01194012595193) * _TEMP * _4_7;
42328     +_LP0 = _LP0 + (   -1.85711669237786) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.85711669237786) * _TEMP * _4_8;
42329     +_LP0 = _LP0 + (    -1.4633323596648) * _TEMP * _4_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.4633323596648) * _TEMP * _4_9;
42330     +_LP0 = _LP0 + (   -2.48609623065954) * _TEMP * _4_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.48609623065954) * _TEMP * _4_10;
42331     +_LP0 = _LP0 + (   -2.84449681837825) * _TEMP * _4_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.84449681837825) * _TEMP * _4_11;
42332     +_LP0 = _LP0 + (    8.80097365735391) * _TEMP * _4_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.80097365735391) * _TEMP * _4_12;
42333     +_LP0 = _LP0 + (    9.70197642443637) * _TEMP * _4_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.70197642443637) * _TEMP * _4_13;
42334     +
42335     +***  Effect: IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_REASON ;
42336     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42337     +_LP0 = _LP0 + (   -0.16939167734054) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16939167734054) * _TEMP * _5_0;
42338     +
42339     +***  Effect: IMP_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_VALUE ;
42340     +_TEMP = IMP_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_VALUE ;
42341     +_LP0 = _LP0 + ( -2.2984459913856E-7 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.2984459913856E-7 * _TEMP);
42342     +
42343     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
42344     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
42345     +_TEMP =     9.57833925484919 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.57833925484919 + _LP0;
42346     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
42347     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
42348     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
42349     +end;
MPRINT(EM_DIAGRAM):   end;
42350     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
42351     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
42352     +
42353     +REGDR1:
42354     +
42355     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
42356     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
42357     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
42358     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
42359     +end;
MPRINT(EM_DIAGRAM):   end;
42360     +else do;
MPRINT(EM_DIAGRAM):   else do;
42361     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
42362     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
42363     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
42364     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
42365     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
42366     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
42367     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
42368     +   end;
MPRINT(EM_DIAGRAM):   end;
42369     +end;
MPRINT(EM_DIAGRAM):   end;
42370     +
42371     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
42372     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
42373     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
42374     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
42375     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
42376     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
42377     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
42378     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
42379     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
42380     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
42381     +end;
MPRINT(EM_DIAGRAM):   end;
42382     +I_BAD = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REGDRF[_IY];
42383     +U_BAD = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REGDRU[_IY];
42384     +
42385     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
42386     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
42387     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
42388      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
42389      quit;
42390      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
42391      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42392      *------------------------------------------------------------*;
42393      * Reg: Scoring VALIDATE data;
42394      *------------------------------------------------------------*;
42395      data EMWS1.Reg_VALIDATE
42396      / view=EMWS1.Reg_VALIDATE
42397      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_VALIDATE / view=EMWS1.Reg_VALIDATE ;
42398      set EMWS1.Impt_VALIDATE
42399      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
42400      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
42401     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
42402     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
42403     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
42404     +
42405     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
42406     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
42407     +
42408     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
42409     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
42410     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
42411     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
42412     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
42413     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
42414     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
42415     +
42416     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
42417     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
42418     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
42419     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
42420     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
42421     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42422     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
42423     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
42424     +end;
MPRINT(EM_DIAGRAM):   end;
42425     +else do;
MPRINT(EM_DIAGRAM):   else do;
42426     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
42427     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
42428     +   end;
MPRINT(EM_DIAGRAM):   end;
42429     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
42430     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
42431     +   end;
MPRINT(EM_DIAGRAM):   end;
42432     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42433     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
42434     +   end;
MPRINT(EM_DIAGRAM):   end;
42435     +end;
MPRINT(EM_DIAGRAM):   end;
42436     +
42437     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
42438     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
42439     +
42440     +*** Check IMP_DEBTINC for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_DEBTINC for missing values ;
42441     +if missing( IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEBTINC ) then do;
42442     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42443     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42444     +end;
MPRINT(EM_DIAGRAM):   end;
42445     +
42446     +*** Check IMP_VALUE for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_VALUE for missing values ;
42447     +if missing( IMP_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_VALUE ) then do;
42448     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42449     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42450     +end;
MPRINT(EM_DIAGRAM):   end;
42451     +
42452     +*** Generate dummy variables for IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DELINQ ;
42453     +drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
42454     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42455     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
42456     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
42457     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
42458     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
42459     +_1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
42460     +_1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
42461     +_1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
42462     +_1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
42463     +_1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
42464     +_1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
42465     +_1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
42466     +_1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
42467     +_1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
42468     +if missing( IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DELINQ ) then do;
42469     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
42470     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
42471     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
42472     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
42473     +   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
42474     +   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
42475     +   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
42476     +   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
42477     +   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
42478     +   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
42479     +   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
42480     +   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
42481     +   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
42482     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42483     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42484     +end;
MPRINT(EM_DIAGRAM):   end;
42485     +else do;
MPRINT(EM_DIAGRAM):   else do;
42486     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
42487     +   _dm12 = put( IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DELINQ , BEST12. );
42488     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42489     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
42490     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
42491     +   end;
MPRINT(EM_DIAGRAM):   end;
42492     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
42493     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
42494     +   end;
MPRINT(EM_DIAGRAM):   end;
42495     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
42496     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
42497     +   end;
MPRINT(EM_DIAGRAM):   end;
42498     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
42499     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
42500     +   end;
MPRINT(EM_DIAGRAM):   end;
42501     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
42502     +      _1_4 = 1;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
42503     +   end;
MPRINT(EM_DIAGRAM):   end;
42504     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
42505     +      _1_6 = 1;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
42506     +   end;
MPRINT(EM_DIAGRAM):   end;
42507     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
42508     +      _1_5 = 1;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
42509     +   end;
MPRINT(EM_DIAGRAM):   end;
42510     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
42511     +      _1_7 = 1;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
42512     +   end;
MPRINT(EM_DIAGRAM):   end;
42513     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
42514     +      _1_8 = 1;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
42515     +   end;
MPRINT(EM_DIAGRAM):   end;
42516     +   else if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
42517     +      _1_10 = 1;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
42518     +   end;
MPRINT(EM_DIAGRAM):   end;
42519     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
42520     +      _1_9 = 1;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
42521     +   end;
MPRINT(EM_DIAGRAM):   end;
42522     +   else if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
42523     +      _1_11 = 1;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
42524     +   end;
MPRINT(EM_DIAGRAM):   end;
42525     +   else if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
42526     +      _1_12 = 1;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
42527     +   end;
MPRINT(EM_DIAGRAM):   end;
42528     +   else if _dm12 = '15'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
42529     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
42530     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
42531     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
42532     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
42533     +      _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
42534     +      _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
42535     +      _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
42536     +      _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
42537     +      _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
42538     +      _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
42539     +      _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
42540     +      _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
42541     +      _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
42542     +   end;
MPRINT(EM_DIAGRAM):   end;
42543     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42544     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
42545     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
42546     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
42547     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
42548     +      _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
42549     +      _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
42550     +      _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
42551     +      _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
42552     +      _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
42553     +      _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
42554     +      _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
42555     +      _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
42556     +      _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
42557     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42558     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42559     +   end;
MPRINT(EM_DIAGRAM):   end;
42560     +end;
MPRINT(EM_DIAGRAM):   end;
42561     +
42562     +*** Generate dummy variables for IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DEROG ;
42563     +drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
42564     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42565     +_2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
42566     +_2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
42567     +_2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
42568     +_2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
42569     +_2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
42570     +_2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
42571     +_2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
42572     +_2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
42573     +_2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
42574     +_2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
42575     +if missing( IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEROG ) then do;
42576     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
42577     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
42578     +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
42579     +   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
42580     +   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
42581     +   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
42582     +   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
42583     +   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
42584     +   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
42585     +   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
42586     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42587     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42588     +end;
MPRINT(EM_DIAGRAM):   end;
42589     +else do;
MPRINT(EM_DIAGRAM):   else do;
42590     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
42591     +   _dm12 = put( IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DEROG , BEST12. );
42592     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42593     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
42594     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
42595     +   end;
MPRINT(EM_DIAGRAM):   end;
42596     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
42597     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
42598     +   end;
MPRINT(EM_DIAGRAM):   end;
42599     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
42600     +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
42601     +   end;
MPRINT(EM_DIAGRAM):   end;
42602     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
42603     +      _2_3 = 1;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
42604     +   end;
MPRINT(EM_DIAGRAM):   end;
42605     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
42606     +      _2_4 = 1;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
42607     +   end;
MPRINT(EM_DIAGRAM):   end;
42608     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
42609     +      _2_5 = 1;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
42610     +   end;
MPRINT(EM_DIAGRAM):   end;
42611     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
42612     +      _2_6 = 1;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
42613     +   end;
MPRINT(EM_DIAGRAM):   end;
42614     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
42615     +      _2_7 = 1;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
42616     +   end;
MPRINT(EM_DIAGRAM):   end;
42617     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
42618     +      _2_8 = 1;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
42619     +   end;
MPRINT(EM_DIAGRAM):   end;
42620     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
42621     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
42622     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
42623     +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
42624     +      _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
42625     +      _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
42626     +      _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
42627     +      _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
42628     +      _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
42629     +      _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
42630     +      _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
42631     +   end;
MPRINT(EM_DIAGRAM):   end;
42632     +   else if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
42633     +      _2_9 = 1;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
42634     +   end;
MPRINT(EM_DIAGRAM):   end;
42635     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42636     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
42637     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
42638     +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
42639     +      _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
42640     +      _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
42641     +      _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
42642     +      _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
42643     +      _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
42644     +      _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
42645     +      _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
42646     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42647     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42648     +   end;
MPRINT(EM_DIAGRAM):   end;
42649     +end;
MPRINT(EM_DIAGRAM):   end;
42650     +
42651     +*** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
42652     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
42653     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42654     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
42655     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
42656     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
42657     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
42658     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
42659     +if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
42660     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
42661     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
42662     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
42663     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
42664     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
42665     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42666     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42667     +end;
MPRINT(EM_DIAGRAM):   end;
42668     +else do;
MPRINT(EM_DIAGRAM):   else do;
42669     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
42670     +   %DMNORMCP( IMP_JOB , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
42671     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
42672     +   if _dm7 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
42673     +      if _dm7 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
42674     +         if _dm7 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
42675     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
42676     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42677     +         end;
MPRINT(EM_DIAGRAM):   end;
42678     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42679     +            if _dm7 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
42680     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
42681     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42682     +            end;
MPRINT(EM_DIAGRAM):   end;
42683     +         end;
MPRINT(EM_DIAGRAM):   end;
42684     +      end;
MPRINT(EM_DIAGRAM):   end;
42685     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42686     +         if _dm7 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
42687     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
42688     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42689     +         end;
MPRINT(EM_DIAGRAM):   end;
42690     +      end;
MPRINT(EM_DIAGRAM):   end;
42691     +   end;
MPRINT(EM_DIAGRAM):   end;
42692     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42693     +      if _dm7 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
42694     +         if _dm7 = 'PROFEXE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
42695     +            _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
42696     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42697     +         end;
MPRINT(EM_DIAGRAM):   end;
42698     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42699     +            if _dm7 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
42700     +               _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
42701     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42702     +            end;
MPRINT(EM_DIAGRAM):   end;
42703     +         end;
MPRINT(EM_DIAGRAM):   end;
42704     +      end;
MPRINT(EM_DIAGRAM):   end;
42705     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42706     +         if _dm7 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
42707     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
42708     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
42709     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
42710     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
42711     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
42712     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42713     +         end;
MPRINT(EM_DIAGRAM):   end;
42714     +      end;
MPRINT(EM_DIAGRAM):   end;
42715     +   end;
MPRINT(EM_DIAGRAM):   end;
42716     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
42717     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
42718     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
42719     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
42720     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
42721     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
42722     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42723     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42724     +   end;
MPRINT(EM_DIAGRAM):   end;
42725     +end;
MPRINT(EM_DIAGRAM):   end;
42726     +
42727     +*** Generate dummy variables for IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_NINQ ;
42728     +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13
42729     +         ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13 ;
42730     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
42731     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
42732     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
42733     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
42734     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
42735     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
42736     +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
42737     +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
42738     +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
42739     +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
42740     +_4_9 = 0;
MPRINT(EM_DIAGRAM):   _4_9 = 0;
42741     +_4_10 = 0;
MPRINT(EM_DIAGRAM):   _4_10 = 0;
42742     +_4_11 = 0;
MPRINT(EM_DIAGRAM):   _4_11 = 0;
42743     +_4_12 = 0;
MPRINT(EM_DIAGRAM):   _4_12 = 0;
42744     +_4_13 = 0;
MPRINT(EM_DIAGRAM):   _4_13 = 0;
42745     +if missing( IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_NINQ ) then do;
42746     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
42747     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
42748     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
42749     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
42750     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
42751     +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
42752     +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
42753     +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
42754     +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
42755     +   _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
42756     +   _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
42757     +   _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
42758     +   _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
42759     +   _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
42760     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42761     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42762     +end;
MPRINT(EM_DIAGRAM):   end;
42763     +else do;
MPRINT(EM_DIAGRAM):   else do;
42764     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
42765     +   _dm12 = put( IMP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_NINQ , BEST12. );
42766     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
42767     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
42768     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
42769     +      if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
42770     +         if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
42771     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
42772     +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
42773     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42774     +            end;
MPRINT(EM_DIAGRAM):   end;
42775     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42776     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
42777     +                  _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
42778     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42779     +               end;
MPRINT(EM_DIAGRAM):   end;
42780     +            end;
MPRINT(EM_DIAGRAM):   end;
42781     +         end;
MPRINT(EM_DIAGRAM):   end;
42782     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42783     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
42784     +               _4_10 = 1;
MPRINT(EM_DIAGRAM):   _4_10 = 1;
42785     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42786     +            end;
MPRINT(EM_DIAGRAM):   end;
42787     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42788     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
42789     +                  _4_11 = 1;
MPRINT(EM_DIAGRAM):   _4_11 = 1;
42790     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42791     +               end;
MPRINT(EM_DIAGRAM):   end;
42792     +            end;
MPRINT(EM_DIAGRAM):   end;
42793     +         end;
MPRINT(EM_DIAGRAM):   end;
42794     +      end;
MPRINT(EM_DIAGRAM):   end;
42795     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42796     +         if _dm12 <= '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '13' then do;
42797     +            if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '12' then do;
42798     +               _4_12 = 1;
MPRINT(EM_DIAGRAM):   _4_12 = 1;
42799     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42800     +            end;
MPRINT(EM_DIAGRAM):   end;
42801     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42802     +               if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '13' then do;
42803     +                  _4_13 = 1;
MPRINT(EM_DIAGRAM):   _4_13 = 1;
42804     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42805     +               end;
MPRINT(EM_DIAGRAM):   end;
42806     +            end;
MPRINT(EM_DIAGRAM):   end;
42807     +         end;
MPRINT(EM_DIAGRAM):   end;
42808     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42809     +            if _dm12 = '14'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '14' then do;
42810     +               _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
42811     +               _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
42812     +               _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
42813     +               _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
42814     +               _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
42815     +               _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
42816     +               _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
42817     +               _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
42818     +               _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
42819     +               _4_9 = -1;
MPRINT(EM_DIAGRAM):   _4_9 = -1;
42820     +               _4_10 = -1;
MPRINT(EM_DIAGRAM):   _4_10 = -1;
42821     +               _4_11 = -1;
MPRINT(EM_DIAGRAM):   _4_11 = -1;
42822     +               _4_12 = -1;
MPRINT(EM_DIAGRAM):   _4_12 = -1;
42823     +               _4_13 = -1;
MPRINT(EM_DIAGRAM):   _4_13 = -1;
42824     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42825     +            end;
MPRINT(EM_DIAGRAM):   end;
42826     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42827     +               if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
42828     +                  _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
42829     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42830     +               end;
MPRINT(EM_DIAGRAM):   end;
42831     +            end;
MPRINT(EM_DIAGRAM):   end;
42832     +         end;
MPRINT(EM_DIAGRAM):   end;
42833     +      end;
MPRINT(EM_DIAGRAM):   end;
42834     +   end;
MPRINT(EM_DIAGRAM):   end;
42835     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42836     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
42837     +         if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
42838     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
42839     +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
42840     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42841     +            end;
MPRINT(EM_DIAGRAM):   end;
42842     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42843     +               if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
42844     +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
42845     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42846     +               end;
MPRINT(EM_DIAGRAM):   end;
42847     +            end;
MPRINT(EM_DIAGRAM):   end;
42848     +         end;
MPRINT(EM_DIAGRAM):   end;
42849     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42850     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
42851     +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
42852     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42853     +            end;
MPRINT(EM_DIAGRAM):   end;
42854     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42855     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
42856     +                  _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
42857     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42858     +               end;
MPRINT(EM_DIAGRAM):   end;
42859     +            end;
MPRINT(EM_DIAGRAM):   end;
42860     +         end;
MPRINT(EM_DIAGRAM):   end;
42861     +      end;
MPRINT(EM_DIAGRAM):   end;
42862     +      else do;
MPRINT(EM_DIAGRAM):   else do;
42863     +         if _dm12 <= '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '8' then do;
42864     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
42865     +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
42866     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42867     +            end;
MPRINT(EM_DIAGRAM):   end;
42868     +            else do;
MPRINT(EM_DIAGRAM):   else do;
42869     +               if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
42870     +                  _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
42871     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42872     +               end;
MPRINT(EM_DIAGRAM):   end;
42873     +            end;
MPRINT(EM_DIAGRAM):   end;
42874     +         end;
MPRINT(EM_DIAGRAM):   end;
42875     +         else do;
MPRINT(EM_DIAGRAM):   else do;
42876     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
42877     +               _4_9 = 1;
MPRINT(EM_DIAGRAM):   _4_9 = 1;
42878     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
42879     +            end;
MPRINT(EM_DIAGRAM):   end;
42880     +         end;
MPRINT(EM_DIAGRAM):   end;
42881     +      end;
MPRINT(EM_DIAGRAM):   end;
42882     +   end;
MPRINT(EM_DIAGRAM):   end;
42883     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
42884     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
42885     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
42886     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
42887     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
42888     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
42889     +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
42890     +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
42891     +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
42892     +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
42893     +      _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
42894     +      _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
42895     +      _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
42896     +      _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
42897     +      _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
42898     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42899     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42900     +   end;
MPRINT(EM_DIAGRAM):   end;
42901     +end;
MPRINT(EM_DIAGRAM):   end;
42902     +
42903     +*** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
42904     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
42905     +if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
42906     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
42907     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
42908     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42909     +end;
MPRINT(EM_DIAGRAM):   end;
42910     +else do;
MPRINT(EM_DIAGRAM):   else do;
42911     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
42912     +   %DMNORMCP( IMP_REASON , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
42913     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
42914     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
42915     +   end;
MPRINT(EM_DIAGRAM):   end;
42916     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
42917     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
42918     +   end;
MPRINT(EM_DIAGRAM):   end;
42919     +   else do;
MPRINT(EM_DIAGRAM):   else do;
42920     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
42921     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
42922     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
42923     +   end;
MPRINT(EM_DIAGRAM):   end;
42924     +end;
MPRINT(EM_DIAGRAM):   end;
42925     +
42926     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
42927     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
42928     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
42929     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
42930     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
42931     +end;
MPRINT(EM_DIAGRAM):   end;
42932     +
42933     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
42934     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
42935     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
42936     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
42937     +
42938     +***  Effect: IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEBTINC ;
42939     +_TEMP = IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_DEBTINC ;
42940     +_LP0 = _LP0 + (    0.02301743834483 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02301743834483 * _TEMP);
42941     +
42942     +***  Effect: IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DELINQ ;
42943     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42944     +_LP0 = _LP0 + (   -6.36976476950453) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.36976476950453) * _TEMP * _1_0;
42945     +_LP0 = _LP0 + (   -5.51726383264789) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.51726383264789) * _TEMP * _1_1;
42946     +_LP0 = _LP0 + (   -5.28965030555067) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.28965030555067) * _TEMP * _1_2;
42947     +_LP0 = _LP0 + (   -4.34366303985794) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.34366303985794) * _TEMP * _1_3;
42948     +_LP0 = _LP0 + (   -4.25867430244393) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.25867430244393) * _TEMP * _1_4;
42949     +_LP0 = _LP0 + (     -3.283714218888) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.283714218888) * _TEMP * _1_5;
42950     +_LP0 = _LP0 + (   -3.09169507595513) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.09169507595513) * _TEMP * _1_6;
42951     +_LP0 = _LP0 + (   -3.18586029288527) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.18586029288527) * _TEMP * _1_7;
42952     +_LP0 = _LP0 + (     5.8151933515491) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.8151933515491) * _TEMP * _1_8;
42953     +_LP0 = _LP0 + (    5.72592869905509) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.72592869905509) * _TEMP * _1_9;
42954     +_LP0 = _LP0 + (    6.28501429836591) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.28501429836591) * _TEMP * _1_10;
42955     +_LP0 = _LP0 + (    6.38687336744805) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.38687336744805) * _TEMP * _1_11;
42956     +_LP0 = _LP0 + (      6.821097778354) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.821097778354) * _TEMP * _1_12;
42957     +
42958     +***  Effect: IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEROG ;
42959     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42960     +_LP0 = _LP0 + (    -2.8677033650612) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.8677033650612) * _TEMP * _2_0;
42961     +_LP0 = _LP0 + (   -2.11858807771827) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.11858807771827) * _TEMP * _2_1;
42962     +_LP0 = _LP0 + (    -1.7649733889329) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.7649733889329) * _TEMP * _2_2;
42963     +_LP0 = _LP0 + (   -0.48994493823638) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48994493823638) * _TEMP * _2_3;
42964     +_LP0 = _LP0 + (   -1.38347605687145) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.38347605687145) * _TEMP * _2_4;
42965     +_LP0 = _LP0 + (   -2.42749123203087) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.42749123203087) * _TEMP * _2_5;
42966     +_LP0 = _LP0 + (   -1.63845058723395) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63845058723395) * _TEMP * _2_6;
42967     +_LP0 = _LP0 + (    6.55732617759875) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.55732617759875) * _TEMP * _2_7;
42968     +_LP0 = _LP0 + (    8.44334237115244) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.44334237115244) * _TEMP * _2_8;
42969     +_LP0 = _LP0 + (   -1.53254744572132) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53254744572132) * _TEMP * _2_9;
42970     +
42971     +***  Effect: IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_JOB ;
42972     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42973     +_LP0 = _LP0 + (    0.03576771441688) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03576771441688) * _TEMP * _3_0;
42974     +_LP0 = _LP0 + (   -0.54173477854762) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.54173477854762) * _TEMP * _3_1;
42975     +_LP0 = _LP0 + (    0.00438269980738) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00438269980738) * _TEMP * _3_2;
42976     +_LP0 = _LP0 + (   -0.32380419617585) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.32380419617585) * _TEMP * _3_3;
42977     +_LP0 = _LP0 + (    0.93192783430112) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.93192783430112) * _TEMP * _3_4;
42978     +
42979     +***  Effect: IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_NINQ ;
42980     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42981     +_LP0 = _LP0 + (   -3.19988133130655) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.19988133130655) * _TEMP * _4_0;
42982     +_LP0 = _LP0 + (   -2.97610436099208) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97610436099208) * _TEMP * _4_1;
42983     +_LP0 = _LP0 + (   -2.59383398186293) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.59383398186293) * _TEMP * _4_2;
42984     +_LP0 = _LP0 + (   -2.72829859454369) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.72829859454369) * _TEMP * _4_3;
42985     +_LP0 = _LP0 + (   -2.16102796215731) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.16102796215731) * _TEMP * _4_4;
42986     +_LP0 = _LP0 + (   -1.70230660255527) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.70230660255527) * _TEMP * _4_5;
42987     +_LP0 = _LP0 + (   -1.40679709428819) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.40679709428819) * _TEMP * _4_6;
42988     +_LP0 = _LP0 + (   -2.01194012595193) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.01194012595193) * _TEMP * _4_7;
42989     +_LP0 = _LP0 + (   -1.85711669237786) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.85711669237786) * _TEMP * _4_8;
42990     +_LP0 = _LP0 + (    -1.4633323596648) * _TEMP * _4_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.4633323596648) * _TEMP * _4_9;
42991     +_LP0 = _LP0 + (   -2.48609623065954) * _TEMP * _4_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.48609623065954) * _TEMP * _4_10;
42992     +_LP0 = _LP0 + (   -2.84449681837825) * _TEMP * _4_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.84449681837825) * _TEMP * _4_11;
42993     +_LP0 = _LP0 + (    8.80097365735391) * _TEMP * _4_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.80097365735391) * _TEMP * _4_12;
42994     +_LP0 = _LP0 + (    9.70197642443637) * _TEMP * _4_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.70197642443637) * _TEMP * _4_13;
42995     +
42996     +***  Effect: IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_REASON ;
42997     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
42998     +_LP0 = _LP0 + (   -0.16939167734054) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16939167734054) * _TEMP * _5_0;
42999     +
43000     +***  Effect: IMP_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_VALUE ;
43001     +_TEMP = IMP_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_VALUE ;
43002     +_LP0 = _LP0 + ( -2.2984459913856E-7 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.2984459913856E-7 * _TEMP);
43003     +
43004     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
43005     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
43006     +_TEMP =     9.57833925484919 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.57833925484919 + _LP0;
43007     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
43008     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
43009     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
43010     +end;
MPRINT(EM_DIAGRAM):   end;
43011     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
43012     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
43013     +
43014     +REGDR1:
43015     +
43016     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
43017     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
43018     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
43019     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
43020     +end;
MPRINT(EM_DIAGRAM):   end;
43021     +else do;
MPRINT(EM_DIAGRAM):   else do;
43022     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
43023     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
43024     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
43025     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
43026     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
43027     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
43028     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
43029     +   end;
MPRINT(EM_DIAGRAM):   end;
43030     +end;
MPRINT(EM_DIAGRAM):   end;
43031     +
43032     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
43033     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
43034     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
43035     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
43036     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
43037     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
43038     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
43039     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
43040     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
43041     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
43042     +end;
MPRINT(EM_DIAGRAM):   end;
43043     +I_BAD = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REGDRF[_IY];
43044     +U_BAD = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REGDRU[_IY];
43045     +
43046     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
43047     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
43048     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
43049      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
43050      quit;
43051      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
43052      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43053      *------------------------------------------------------------*;
43054      * Reg: Scoring TEST data;
43055      *------------------------------------------------------------*;
43056      data EMWS1.Reg_TEST
43057      / view=EMWS1.Reg_TEST
43058      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_TEST / view=EMWS1.Reg_TEST ;
43059      set EMWS1.Impt_TEST
43060      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TEST ;
43061      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMFLOWSCORE.sas.
43062     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
43063     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
43064     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
43065     +
43066     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
43067     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
43068     +
43069     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
43070     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
43071     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
43072     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
43073     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
43074     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
43075     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
43076     +
43077     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
43078     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
43079     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
43080     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
43081     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
43082     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
43083     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
43084     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
43085     +end;
MPRINT(EM_DIAGRAM):   end;
43086     +else do;
MPRINT(EM_DIAGRAM):   else do;
43087     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
43088     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
43089     +   end;
MPRINT(EM_DIAGRAM):   end;
43090     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
43091     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
43092     +   end;
MPRINT(EM_DIAGRAM):   end;
43093     +   else do;
MPRINT(EM_DIAGRAM):   else do;
43094     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
43095     +   end;
MPRINT(EM_DIAGRAM):   end;
43096     +end;
MPRINT(EM_DIAGRAM):   end;
43097     +
43098     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
43099     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
43100     +
43101     +*** Check IMP_DEBTINC for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_DEBTINC for missing values ;
43102     +if missing( IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEBTINC ) then do;
43103     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43104     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43105     +end;
MPRINT(EM_DIAGRAM):   end;
43106     +
43107     +*** Check IMP_VALUE for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_VALUE for missing values ;
43108     +if missing( IMP_VALUE ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_VALUE ) then do;
43109     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43110     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43111     +end;
MPRINT(EM_DIAGRAM):   end;
43112     +
43113     +*** Generate dummy variables for IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DELINQ ;
43114     +drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
43115     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
43116     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
43117     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
43118     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
43119     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
43120     +_1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
43121     +_1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
43122     +_1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
43123     +_1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
43124     +_1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
43125     +_1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
43126     +_1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
43127     +_1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
43128     +_1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
43129     +if missing( IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DELINQ ) then do;
43130     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
43131     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
43132     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
43133     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
43134     +   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
43135     +   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
43136     +   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
43137     +   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
43138     +   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
43139     +   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
43140     +   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
43141     +   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
43142     +   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
43143     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43144     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43145     +end;
MPRINT(EM_DIAGRAM):   end;
43146     +else do;
MPRINT(EM_DIAGRAM):   else do;
43147     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
43148     +   _dm12 = put( IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DELINQ , BEST12. );
43149     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
43150     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
43151     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
43152     +   end;
MPRINT(EM_DIAGRAM):   end;
43153     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
43154     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
43155     +   end;
MPRINT(EM_DIAGRAM):   end;
43156     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
43157     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
43158     +   end;
MPRINT(EM_DIAGRAM):   end;
43159     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
43160     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
43161     +   end;
MPRINT(EM_DIAGRAM):   end;
43162     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
43163     +      _1_4 = 1;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
43164     +   end;
MPRINT(EM_DIAGRAM):   end;
43165     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
43166     +      _1_6 = 1;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
43167     +   end;
MPRINT(EM_DIAGRAM):   end;
43168     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
43169     +      _1_5 = 1;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
43170     +   end;
MPRINT(EM_DIAGRAM):   end;
43171     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
43172     +      _1_7 = 1;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
43173     +   end;
MPRINT(EM_DIAGRAM):   end;
43174     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
43175     +      _1_8 = 1;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
43176     +   end;
MPRINT(EM_DIAGRAM):   end;
43177     +   else if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
43178     +      _1_10 = 1;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
43179     +   end;
MPRINT(EM_DIAGRAM):   end;
43180     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
43181     +      _1_9 = 1;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
43182     +   end;
MPRINT(EM_DIAGRAM):   end;
43183     +   else if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
43184     +      _1_11 = 1;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
43185     +   end;
MPRINT(EM_DIAGRAM):   end;
43186     +   else if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
43187     +      _1_12 = 1;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
43188     +   end;
MPRINT(EM_DIAGRAM):   end;
43189     +   else if _dm12 = '15'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
43190     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
43191     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
43192     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
43193     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
43194     +      _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
43195     +      _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
43196     +      _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
43197     +      _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
43198     +      _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
43199     +      _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
43200     +      _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
43201     +      _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
43202     +      _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
43203     +   end;
MPRINT(EM_DIAGRAM):   end;
43204     +   else do;
MPRINT(EM_DIAGRAM):   else do;
43205     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
43206     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
43207     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
43208     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
43209     +      _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
43210     +      _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
43211     +      _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
43212     +      _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
43213     +      _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
43214     +      _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
43215     +      _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
43216     +      _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
43217     +      _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
43218     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
43219     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43220     +   end;
MPRINT(EM_DIAGRAM):   end;
43221     +end;
MPRINT(EM_DIAGRAM):   end;
43222     +
43223     +*** Generate dummy variables for IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DEROG ;
43224     +drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
43225     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
43226     +_2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
43227     +_2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
43228     +_2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
43229     +_2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
43230     +_2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
43231     +_2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
43232     +_2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
43233     +_2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
43234     +_2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
43235     +_2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
43236     +if missing( IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEROG ) then do;
43237     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
43238     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
43239     +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
43240     +   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
43241     +   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
43242     +   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
43243     +   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
43244     +   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
43245     +   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
43246     +   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
43247     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43248     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43249     +end;
MPRINT(EM_DIAGRAM):   end;
43250     +else do;
MPRINT(EM_DIAGRAM):   else do;
43251     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
43252     +   _dm12 = put( IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DEROG , BEST12. );
43253     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
43254     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
43255     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
43256     +   end;
MPRINT(EM_DIAGRAM):   end;
43257     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
43258     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
43259     +   end;
MPRINT(EM_DIAGRAM):   end;
43260     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
43261     +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
43262     +   end;
MPRINT(EM_DIAGRAM):   end;
43263     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
43264     +      _2_3 = 1;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
43265     +   end;
MPRINT(EM_DIAGRAM):   end;
43266     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
43267     +      _2_4 = 1;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
43268     +   end;
MPRINT(EM_DIAGRAM):   end;
43269     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
43270     +      _2_5 = 1;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
43271     +   end;
MPRINT(EM_DIAGRAM):   end;
43272     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
43273     +      _2_6 = 1;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
43274     +   end;
MPRINT(EM_DIAGRAM):   end;
43275     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
43276     +      _2_7 = 1;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
43277     +   end;
MPRINT(EM_DIAGRAM):   end;
43278     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
43279     +      _2_8 = 1;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
43280     +   end;
MPRINT(EM_DIAGRAM):   end;
43281     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
43282     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
43283     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
43284     +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
43285     +      _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
43286     +      _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
43287     +      _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
43288     +      _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
43289     +      _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
43290     +      _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
43291     +      _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
43292     +   end;
MPRINT(EM_DIAGRAM):   end;
43293     +   else if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
43294     +      _2_9 = 1;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
43295     +   end;
MPRINT(EM_DIAGRAM):   end;
43296     +   else do;
MPRINT(EM_DIAGRAM):   else do;
43297     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
43298     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
43299     +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
43300     +      _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
43301     +      _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
43302     +      _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
43303     +      _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
43304     +      _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
43305     +      _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
43306     +      _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
43307     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
43308     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43309     +   end;
MPRINT(EM_DIAGRAM):   end;
43310     +end;
MPRINT(EM_DIAGRAM):   end;
43311     +
43312     +*** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
43313     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
43314     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
43315     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
43316     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
43317     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
43318     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
43319     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
43320     +if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
43321     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
43322     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
43323     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
43324     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
43325     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
43326     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43327     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43328     +end;
MPRINT(EM_DIAGRAM):   end;
43329     +else do;
MPRINT(EM_DIAGRAM):   else do;
43330     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
43331     +   %DMNORMCP( IMP_JOB , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
43332     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
43333     +   if _dm7 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
43334     +      if _dm7 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
43335     +         if _dm7 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
43336     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
43337     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43338     +         end;
MPRINT(EM_DIAGRAM):   end;
43339     +         else do;
MPRINT(EM_DIAGRAM):   else do;
43340     +            if _dm7 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
43341     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
43342     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43343     +            end;
MPRINT(EM_DIAGRAM):   end;
43344     +         end;
MPRINT(EM_DIAGRAM):   end;
43345     +      end;
MPRINT(EM_DIAGRAM):   end;
43346     +      else do;
MPRINT(EM_DIAGRAM):   else do;
43347     +         if _dm7 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
43348     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
43349     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43350     +         end;
MPRINT(EM_DIAGRAM):   end;
43351     +      end;
MPRINT(EM_DIAGRAM):   end;
43352     +   end;
MPRINT(EM_DIAGRAM):   end;
43353     +   else do;
MPRINT(EM_DIAGRAM):   else do;
43354     +      if _dm7 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
43355     +         if _dm7 = 'PROFEXE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
43356     +            _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
43357     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43358     +         end;
MPRINT(EM_DIAGRAM):   end;
43359     +         else do;
MPRINT(EM_DIAGRAM):   else do;
43360     +            if _dm7 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
43361     +               _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
43362     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43363     +            end;
MPRINT(EM_DIAGRAM):   end;
43364     +         end;
MPRINT(EM_DIAGRAM):   end;
43365     +      end;
MPRINT(EM_DIAGRAM):   end;
43366     +      else do;
MPRINT(EM_DIAGRAM):   else do;
43367     +         if _dm7 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
43368     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
43369     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
43370     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
43371     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
43372     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
43373     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43374     +         end;
MPRINT(EM_DIAGRAM):   end;
43375     +      end;
MPRINT(EM_DIAGRAM):   end;
43376     +   end;
MPRINT(EM_DIAGRAM):   end;
43377     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
43378     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
43379     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
43380     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
43381     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
43382     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
43383     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
43384     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43385     +   end;
MPRINT(EM_DIAGRAM):   end;
43386     +end;
MPRINT(EM_DIAGRAM):   end;
43387     +
43388     +*** Generate dummy variables for IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_NINQ ;
43389     +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13
43390     +         ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13 ;
43391     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
43392     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
43393     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
43394     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
43395     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
43396     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
43397     +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
43398     +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
43399     +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
43400     +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
43401     +_4_9 = 0;
MPRINT(EM_DIAGRAM):   _4_9 = 0;
43402     +_4_10 = 0;
MPRINT(EM_DIAGRAM):   _4_10 = 0;
43403     +_4_11 = 0;
MPRINT(EM_DIAGRAM):   _4_11 = 0;
43404     +_4_12 = 0;
MPRINT(EM_DIAGRAM):   _4_12 = 0;
43405     +_4_13 = 0;
MPRINT(EM_DIAGRAM):   _4_13 = 0;
43406     +if missing( IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_NINQ ) then do;
43407     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
43408     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
43409     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
43410     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
43411     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
43412     +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
43413     +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
43414     +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
43415     +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
43416     +   _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
43417     +   _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
43418     +   _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
43419     +   _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
43420     +   _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
43421     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43422     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43423     +end;
MPRINT(EM_DIAGRAM):   end;
43424     +else do;
MPRINT(EM_DIAGRAM):   else do;
43425     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
43426     +   _dm12 = put( IMP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_NINQ , BEST12. );
43427     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
43428     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
43429     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
43430     +      if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
43431     +         if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
43432     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
43433     +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
43434     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43435     +            end;
MPRINT(EM_DIAGRAM):   end;
43436     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43437     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
43438     +                  _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
43439     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43440     +               end;
MPRINT(EM_DIAGRAM):   end;
43441     +            end;
MPRINT(EM_DIAGRAM):   end;
43442     +         end;
MPRINT(EM_DIAGRAM):   end;
43443     +         else do;
MPRINT(EM_DIAGRAM):   else do;
43444     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
43445     +               _4_10 = 1;
MPRINT(EM_DIAGRAM):   _4_10 = 1;
43446     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43447     +            end;
MPRINT(EM_DIAGRAM):   end;
43448     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43449     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
43450     +                  _4_11 = 1;
MPRINT(EM_DIAGRAM):   _4_11 = 1;
43451     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43452     +               end;
MPRINT(EM_DIAGRAM):   end;
43453     +            end;
MPRINT(EM_DIAGRAM):   end;
43454     +         end;
MPRINT(EM_DIAGRAM):   end;
43455     +      end;
MPRINT(EM_DIAGRAM):   end;
43456     +      else do;
MPRINT(EM_DIAGRAM):   else do;
43457     +         if _dm12 <= '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '13' then do;
43458     +            if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '12' then do;
43459     +               _4_12 = 1;
MPRINT(EM_DIAGRAM):   _4_12 = 1;
43460     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43461     +            end;
MPRINT(EM_DIAGRAM):   end;
43462     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43463     +               if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '13' then do;
43464     +                  _4_13 = 1;
MPRINT(EM_DIAGRAM):   _4_13 = 1;
43465     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43466     +               end;
MPRINT(EM_DIAGRAM):   end;
43467     +            end;
MPRINT(EM_DIAGRAM):   end;
43468     +         end;
MPRINT(EM_DIAGRAM):   end;
43469     +         else do;
MPRINT(EM_DIAGRAM):   else do;
43470     +            if _dm12 = '14'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '14' then do;
43471     +               _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
43472     +               _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
43473     +               _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
43474     +               _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
43475     +               _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
43476     +               _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
43477     +               _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
43478     +               _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
43479     +               _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
43480     +               _4_9 = -1;
MPRINT(EM_DIAGRAM):   _4_9 = -1;
43481     +               _4_10 = -1;
MPRINT(EM_DIAGRAM):   _4_10 = -1;
43482     +               _4_11 = -1;
MPRINT(EM_DIAGRAM):   _4_11 = -1;
43483     +               _4_12 = -1;
MPRINT(EM_DIAGRAM):   _4_12 = -1;
43484     +               _4_13 = -1;
MPRINT(EM_DIAGRAM):   _4_13 = -1;
43485     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43486     +            end;
MPRINT(EM_DIAGRAM):   end;
43487     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43488     +               if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
43489     +                  _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
43490     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43491     +               end;
MPRINT(EM_DIAGRAM):   end;
43492     +            end;
MPRINT(EM_DIAGRAM):   end;
43493     +         end;
MPRINT(EM_DIAGRAM):   end;
43494     +      end;
MPRINT(EM_DIAGRAM):   end;
43495     +   end;
MPRINT(EM_DIAGRAM):   end;
43496     +   else do;
MPRINT(EM_DIAGRAM):   else do;
43497     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
43498     +         if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
43499     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
43500     +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
43501     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43502     +            end;
MPRINT(EM_DIAGRAM):   end;
43503     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43504     +               if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
43505     +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
43506     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43507     +               end;
MPRINT(EM_DIAGRAM):   end;
43508     +            end;
MPRINT(EM_DIAGRAM):   end;
43509     +         end;
MPRINT(EM_DIAGRAM):   end;
43510     +         else do;
MPRINT(EM_DIAGRAM):   else do;
43511     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
43512     +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
43513     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43514     +            end;
MPRINT(EM_DIAGRAM):   end;
43515     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43516     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
43517     +                  _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
43518     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43519     +               end;
MPRINT(EM_DIAGRAM):   end;
43520     +            end;
MPRINT(EM_DIAGRAM):   end;
43521     +         end;
MPRINT(EM_DIAGRAM):   end;
43522     +      end;
MPRINT(EM_DIAGRAM):   end;
43523     +      else do;
MPRINT(EM_DIAGRAM):   else do;
43524     +         if _dm12 <= '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '8' then do;
43525     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
43526     +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
43527     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43528     +            end;
MPRINT(EM_DIAGRAM):   end;
43529     +            else do;
MPRINT(EM_DIAGRAM):   else do;
43530     +               if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
43531     +                  _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
43532     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43533     +               end;
MPRINT(EM_DIAGRAM):   end;
43534     +            end;
MPRINT(EM_DIAGRAM):   end;
43535     +         end;
MPRINT(EM_DIAGRAM):   end;
43536     +         else do;
MPRINT(EM_DIAGRAM):   else do;
43537     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
43538     +               _4_9 = 1;
MPRINT(EM_DIAGRAM):   _4_9 = 1;
43539     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
43540     +            end;
MPRINT(EM_DIAGRAM):   end;
43541     +         end;
MPRINT(EM_DIAGRAM):   end;
43542     +      end;
MPRINT(EM_DIAGRAM):   end;
43543     +   end;
MPRINT(EM_DIAGRAM):   end;
43544     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
43545     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
43546     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
43547     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
43548     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
43549     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
43550     +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
43551     +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
43552     +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
43553     +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
43554     +      _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
43555     +      _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
43556     +      _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
43557     +      _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
43558     +      _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
43559     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
43560     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43561     +   end;
MPRINT(EM_DIAGRAM):   end;
43562     +end;
MPRINT(EM_DIAGRAM):   end;
43563     +
43564     +*** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
43565     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
43566     +if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
43567     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
43568     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
43569     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43570     +end;
MPRINT(EM_DIAGRAM):   end;
43571     +else do;
MPRINT(EM_DIAGRAM):   else do;
43572     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
43573     +   %DMNORMCP( IMP_REASON , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
43574     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
43575     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
43576     +   end;
MPRINT(EM_DIAGRAM):   end;
43577     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
43578     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
43579     +   end;
MPRINT(EM_DIAGRAM):   end;
43580     +   else do;
MPRINT(EM_DIAGRAM):   else do;
43581     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
43582     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
43583     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
43584     +   end;
MPRINT(EM_DIAGRAM):   end;
43585     +end;
MPRINT(EM_DIAGRAM):   end;
43586     +
43587     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
43588     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
43589     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
43590     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
43591     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
43592     +end;
MPRINT(EM_DIAGRAM):   end;
43593     +
43594     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
43595     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
43596     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
43597     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
43598     +
43599     +***  Effect: IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEBTINC ;
43600     +_TEMP = IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_DEBTINC ;
43601     +_LP0 = _LP0 + (    0.02301743834483 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02301743834483 * _TEMP);
43602     +
43603     +***  Effect: IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DELINQ ;
43604     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
43605     +_LP0 = _LP0 + (   -6.36976476950453) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.36976476950453) * _TEMP * _1_0;
43606     +_LP0 = _LP0 + (   -5.51726383264789) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.51726383264789) * _TEMP * _1_1;
43607     +_LP0 = _LP0 + (   -5.28965030555067) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.28965030555067) * _TEMP * _1_2;
43608     +_LP0 = _LP0 + (   -4.34366303985794) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.34366303985794) * _TEMP * _1_3;
43609     +_LP0 = _LP0 + (   -4.25867430244393) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.25867430244393) * _TEMP * _1_4;
43610     +_LP0 = _LP0 + (     -3.283714218888) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.283714218888) * _TEMP * _1_5;
43611     +_LP0 = _LP0 + (   -3.09169507595513) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.09169507595513) * _TEMP * _1_6;
43612     +_LP0 = _LP0 + (   -3.18586029288527) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.18586029288527) * _TEMP * _1_7;
43613     +_LP0 = _LP0 + (     5.8151933515491) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.8151933515491) * _TEMP * _1_8;
43614     +_LP0 = _LP0 + (    5.72592869905509) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.72592869905509) * _TEMP * _1_9;
43615     +_LP0 = _LP0 + (    6.28501429836591) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.28501429836591) * _TEMP * _1_10;
43616     +_LP0 = _LP0 + (    6.38687336744805) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.38687336744805) * _TEMP * _1_11;
43617     +_LP0 = _LP0 + (      6.821097778354) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.821097778354) * _TEMP * _1_12;
43618     +
43619     +***  Effect: IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEROG ;
43620     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
43621     +_LP0 = _LP0 + (    -2.8677033650612) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.8677033650612) * _TEMP * _2_0;
43622     +_LP0 = _LP0 + (   -2.11858807771827) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.11858807771827) * _TEMP * _2_1;
43623     +_LP0 = _LP0 + (    -1.7649733889329) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.7649733889329) * _TEMP * _2_2;
43624     +_LP0 = _LP0 + (   -0.48994493823638) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48994493823638) * _TEMP * _2_3;
43625     +_LP0 = _LP0 + (   -1.38347605687145) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.38347605687145) * _TEMP * _2_4;
43626     +_LP0 = _LP0 + (   -2.42749123203087) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.42749123203087) * _TEMP * _2_5;
43627     +_LP0 = _LP0 + (   -1.63845058723395) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63845058723395) * _TEMP * _2_6;
43628     +_LP0 = _LP0 + (    6.55732617759875) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.55732617759875) * _TEMP * _2_7;
43629     +_LP0 = _LP0 + (    8.44334237115244) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.44334237115244) * _TEMP * _2_8;
43630     +_LP0 = _LP0 + (   -1.53254744572132) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53254744572132) * _TEMP * _2_9;
43631     +
43632     +***  Effect: IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_JOB ;
43633     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
43634     +_LP0 = _LP0 + (    0.03576771441688) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03576771441688) * _TEMP * _3_0;
43635     +_LP0 = _LP0 + (   -0.54173477854762) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.54173477854762) * _TEMP * _3_1;
43636     +_LP0 = _LP0 + (    0.00438269980738) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00438269980738) * _TEMP * _3_2;
43637     +_LP0 = _LP0 + (   -0.32380419617585) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.32380419617585) * _TEMP * _3_3;
43638     +_LP0 = _LP0 + (    0.93192783430112) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.93192783430112) * _TEMP * _3_4;
43639     +
43640     +***  Effect: IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_NINQ ;
43641     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
43642     +_LP0 = _LP0 + (   -3.19988133130655) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.19988133130655) * _TEMP * _4_0;
43643     +_LP0 = _LP0 + (   -2.97610436099208) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97610436099208) * _TEMP * _4_1;
43644     +_LP0 = _LP0 + (   -2.59383398186293) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.59383398186293) * _TEMP * _4_2;
43645     +_LP0 = _LP0 + (   -2.72829859454369) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.72829859454369) * _TEMP * _4_3;
43646     +_LP0 = _LP0 + (   -2.16102796215731) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.16102796215731) * _TEMP * _4_4;
43647     +_LP0 = _LP0 + (   -1.70230660255527) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.70230660255527) * _TEMP * _4_5;
43648     +_LP0 = _LP0 + (   -1.40679709428819) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.40679709428819) * _TEMP * _4_6;
43649     +_LP0 = _LP0 + (   -2.01194012595193) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.01194012595193) * _TEMP * _4_7;
43650     +_LP0 = _LP0 + (   -1.85711669237786) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.85711669237786) * _TEMP * _4_8;
43651     +_LP0 = _LP0 + (    -1.4633323596648) * _TEMP * _4_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.4633323596648) * _TEMP * _4_9;
43652     +_LP0 = _LP0 + (   -2.48609623065954) * _TEMP * _4_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.48609623065954) * _TEMP * _4_10;
43653     +_LP0 = _LP0 + (   -2.84449681837825) * _TEMP * _4_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.84449681837825) * _TEMP * _4_11;
43654     +_LP0 = _LP0 + (    8.80097365735391) * _TEMP * _4_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.80097365735391) * _TEMP * _4_12;
43655     +_LP0 = _LP0 + (    9.70197642443637) * _TEMP * _4_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.70197642443637) * _TEMP * _4_13;
43656     +
43657     +***  Effect: IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_REASON ;
43658     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
43659     +_LP0 = _LP0 + (   -0.16939167734054) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16939167734054) * _TEMP * _5_0;
43660     +
43661     +***  Effect: IMP_VALUE ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_VALUE ;
43662     +_TEMP = IMP_VALUE ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_VALUE ;
43663     +_LP0 = _LP0 + ( -2.2984459913856E-7 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.2984459913856E-7 * _TEMP);
43664     +
43665     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
43666     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
43667     +_TEMP =     9.57833925484919 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.57833925484919 + _LP0;
43668     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
43669     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
43670     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
43671     +end;
MPRINT(EM_DIAGRAM):   end;
43672     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
43673     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
43674     +
43675     +REGDR1:
43676     +
43677     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
43678     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
43679     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
43680     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
43681     +end;
MPRINT(EM_DIAGRAM):   end;
43682     +else do;
MPRINT(EM_DIAGRAM):   else do;
43683     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
43684     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
43685     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
43686     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
43687     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
43688     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
43689     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
43690     +   end;
MPRINT(EM_DIAGRAM):   end;
43691     +end;
MPRINT(EM_DIAGRAM):   end;
43692     +
43693     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
43694     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
43695     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
43696     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
43697     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
43698     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
43699     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
43700     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
43701     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
43702     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
43703     +end;
MPRINT(EM_DIAGRAM):   end;
43704     +I_BAD = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REGDRF[_IY];
43705     +U_BAD = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REGDRU[_IY];
43706     +
43707     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
43708     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
43709     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
43710      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
43711      quit;
43712      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
43713      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
43714      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
43715      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.09 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg_TRAIN out=WORK.M056D99J noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M056D99J;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M056D99J(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M056D99J;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M056D99J;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2GG4HY5 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M193A_II(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   set WORK.M2GG4HY5;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Nodo del modelo";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_BAD1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_BAD0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("F_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("I_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("U_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
44068      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
44069      set EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO;
44070      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
44071      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS1.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44072      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMINFO;
44073      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
44074      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
44075      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
44079      run;
44080      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
44081      set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMINFO WORK.MODELTEMP_INFO;
44082      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
44083      proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Reg_EMINFO NOTHREADS;
44084      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
44085      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set EMWS1.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44086      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
44087      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
44088      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
44089      proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
44090      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
44091      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
44092      data EMWS1.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMINFO;
44093      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
44094      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
44095      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
44096      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
44097      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
44098      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
44099      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.11 seconds
 
NOTE: View EMWS1.REG_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                07 de marzo de 2021
Hora:                14H21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0QJK2MK "C:\Jose\DM_ang\Workspaces\EMWS1\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0QJK2MK new;
MPRINT(EM_DIAGRAM):   run;
44123      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):    data WORK.DMREGTEMP;
44124      merge EMWS1.Reg_EMESTIMATE EMWS1.Reg_FITTEST;
MPRINT(EM_DIAGRAM):   merge EMWS1.Reg_EMESTIMATE EMWS1.Reg_FITTEST;
44125      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG_EMESTIMATE.
NOTE: There were 1 observations read from the data set EMWS1.REG_FITTEST.
NOTE: The data set WORK.DMREGTEMP has 3 observations and 94 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44126      data EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMOUTFIT;
44127      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
44128      set WORK.DMREGTEMP end=eof;
MPRINT(EM_DIAGRAM):   set WORK.DMREGTEMP end=eof;
44129      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
44130      drop _TYPE_--IMP_VALUE;
MPRINT(EM_DIAGRAM):   drop _TYPE_--IMP_VALUE;
44131      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
44132      TARGET = "BAD";
MPRINT(EM_DIAGRAM):   TARGET = "BAD";
44133      output;
MPRINT(EM_DIAGRAM):   output;
44134      end;
MPRINT(EM_DIAGRAM):   end;
44135      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.DMREGTEMP.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS1.REG_EMOUTFIT has 1 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44136      data EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMOUTFIT;
44137      set EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT;
44138      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
44139      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Etiqueta target";
44140      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.REG_EMOUTFIT.
NOTE: The data set EMWS1.REG_EMOUTFIT has 1 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
44141      proc sort data=EMWS1.Reg_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg_EMREPORTFIT nothreads;
44142      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
44143      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG_EMREPORTFIT.
NOTE: The data set EMWS1.REG_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44144      %let _EMwarndup = 0;
44145      %let _EMtargetdup =;
44146      %let _EMASEtargetdup =;
44147      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
44148      set EMWS1.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMOUTFIT;
44149      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
44150      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
44151      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
44152      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
44153      end;
MPRINT(EM_DIAGRAM):   end;
44154      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44155      proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
44156      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
44157      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 9 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
44158      proc sort data=EMWS1.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
44159      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
44160      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8 observations read from the data set EMWS1.REG_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44161      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
44162      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
44163      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
44164      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 8 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 9 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44165      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
44166      set EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_CMeta_TRAIN;
44167      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
44168      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
44169      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
44170      set EMWS1.Reg_TRAIN(keep=
44171      F_BAD
44172      I_BAD
44173      P_BAD0
44174      P_BAD1
44175      R_BAD0
44176      R_BAD1
44177      U_BAD
44178      _WARN_
44179      BAD
44180      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_TRAIN(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
44181      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View EMWS1.REG_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.REG_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2979 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg_36XC_WI nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_36XC_WI;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo de resultado";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label TARGET = "Variable target";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Texto correcto";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correcto";
MPRINT(EM_DIAGRAM):   set WORK.Reg_36XC_WI(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correcto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrecto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg_36XC_WI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_36XC_WI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: todas las probabilidades posteriores son valores ausentes ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1993957704 _NEVENTS 594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0322713491 OVLMAX 0.999975268 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2979/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2979/20) ) / ( AVGNUMRESP / (2979/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2979/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2979/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Evento" DECILE = "Profundidad" BIN = "Clase" NUMOBS = "Número de observaciones" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Clase" N = "Número de observaciones" P_LABEL = "Rango de la probabilidad posterior" EVENT = "Evento" LOWPOSTERIOR = "Probabilidad posterior del límite inferior" PERCENTAGEOFEVENTS = "Porcentaje de eventos"
CUMULATIVEPERCENTAGEOFNONEVENTS = "Porcentaje acumulado de no eventos" CUMULATIVEPERCENTAGE = "Porcentaje acumulado" PERCENTAGEOFEVENTS = "Porcentaje de eventos" PERCENTAGEOFNONEVENTS = "Porcentaje de no eventos" CUMULATIVEPERCENTAGEOFEVENTS = "Porcentaje
acumulado de eventos" UPPOSTERIOR = "Probabilidad posterior del límite superior" NUMBEROFEVENTS = "Número de eventos" PERCENTAGE = "Porcentaje" NUMBEROFNONEVENTS = "Número de no eventos" _MEANP_ = "Probabilidad posterior de la media" _MINP_ =
"Probabilidad posterior mín" _MAXP_ = "Probabilidad posterior máx" SCORE = "Puntuación del modelo" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Probabilidad posterior máx" _MINP_ = "Probabilidad posterior mín" _MEANP_ = "Probabilidad posterior de la media" BASECAP = "Respuesta capturada % básica" BASECAPC = "Respuesta capturada % acumulada básica"
BASENUMBEROFEVENTS = "Número de eventos básicos" BASEGAIN = "Ganancia básica" BASELIFT = "Mejora básica" BASELIFTC = "Mejora acumulada básica" BASERESP = "Respuesta % básica" BASERESPC = "Respuesta % acumulada básica" BASELIFTC = "Mejora acumulada básica"
BESTCAP = "Mejor respuesta % capturada" BESTCAPC = "Mejor respuesta capturada % acumulada" BESTGAIN = "Mejor ganancia" BESTRESP = "Mejor % respuesta" BESTRESPC = "Mejor respuesta % acumulada" BESTLIFT = "Mejor mejora" BESTLIFTC = "Mejor mejora acumulada"
BESTNUMBEROFEVENTS = "Número de mejores eventos" CAP = "Respuesta capturada %" CAPC = "Respuesta capturada % acumulada" DECILE = "Profundidad" GAIN = "Ganancia" LIFT = "Mejora" LIFTC = "Mejora acumulada" NUMNEVENT = "Número de no eventos" N = "Número de
observaciones" EVENT = "Evento" RESPC = "Respuesta % acumulada" NUMBEROFEVENTS = "Número de eventos" RESP = "Respuesta %" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
48459      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
48460      set EMWS1.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_CMeta_TRAIN;
48461      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
48462      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
48463      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
48464      set EMWS1.Reg_VALIDATE(keep=
48465      F_BAD
48466      I_BAD
48467      P_BAD0
48468      P_BAD1
48469      R_BAD0
48470      R_BAD1
48471      U_BAD
48472      _WARN_
48473      BAD
48474      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VALIDATE(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
48475      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 75543:41    401 at 75544:28   60 at 75545:14    160 at 75545:43   216 at 75546:14   32 at 75546:41
NOTE: There were 1788 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.VARCLUS_VALIDATE.
NOTE: View EMWS1.REG_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.REG_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg_3BQB2H3 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_3BQB2H3;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo de resultado";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label TARGET = "Variable target";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Texto correcto";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correcto";
MPRINT(EM_DIAGRAM):   set WORK.Reg_3BQB2H3(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correcto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrecto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMCLASSIFICATION WORK.Reg_3BQB2H3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_3BQB2H3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: todas las probabilidades posteriores son valores ausentes ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1996644295 _NEVENTS 357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0345409464 OVLMAX 0.9999922188 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / ( AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Evento" DECILE = "Profundidad" BIN = "Clase" NUMOBS = "Número de observaciones" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Clase" N = "Número de observaciones" P_LABEL = "Rango de la probabilidad posterior" EVENT = "Evento" LOWPOSTERIOR = "Probabilidad posterior del límite inferior" PERCENTAGEOFEVENTS = "Porcentaje de eventos"
CUMULATIVEPERCENTAGEOFNONEVENTS = "Porcentaje acumulado de no eventos" CUMULATIVEPERCENTAGE = "Porcentaje acumulado" PERCENTAGEOFEVENTS = "Porcentaje de eventos" PERCENTAGEOFNONEVENTS = "Porcentaje de no eventos" CUMULATIVEPERCENTAGEOFEVENTS = "Porcentaje
acumulado de eventos" UPPOSTERIOR = "Probabilidad posterior del límite superior" NUMBEROFEVENTS = "Número de eventos" PERCENTAGE = "Porcentaje" NUMBEROFNONEVENTS = "Número de no eventos" _MEANP_ = "Probabilidad posterior de la media" _MINP_ =
"Probabilidad posterior mín" _MAXP_ = "Probabilidad posterior máx" SCORE = "Puntuación del modelo" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Probabilidad posterior máx" _MINP_ = "Probabilidad posterior mín" _MEANP_ = "Probabilidad posterior de la media" BASECAP = "Respuesta capturada % básica" BASECAPC = "Respuesta capturada % acumulada básica"
BASENUMBEROFEVENTS = "Número de eventos básicos" BASEGAIN = "Ganancia básica" BASELIFT = "Mejora básica" BASELIFTC = "Mejora acumulada básica" BASERESP = "Respuesta % básica" BASERESPC = "Respuesta % acumulada básica" BASELIFTC = "Mejora acumulada básica"
BESTCAP = "Mejor respuesta % capturada" BESTCAPC = "Mejor respuesta capturada % acumulada" BESTGAIN = "Mejor ganancia" BESTRESP = "Mejor % respuesta" BESTRESPC = "Mejor respuesta % acumulada" BESTLIFT = "Mejor mejora" BESTLIFTC = "Mejor mejora acumulada"
BESTNUMBEROFEVENTS = "Número de mejores eventos" CAP = "Respuesta capturada %" CAPC = "Respuesta capturada % acumulada" DECILE = "Profundidad" GAIN = "Ganancia" LIFT = "Mejora" LIFTC = "Mejora acumulada" NUMNEVENT = "Número de no eventos" N = "Número de
observaciones" EVENT = "Evento" RESPC = "Respuesta % acumulada" NUMBEROFEVENTS = "Número de eventos" RESP = "Respuesta %" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
52762      %let _cn = %sysfunc(getoption(CENTER));
52763      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
52764      proc print data=EMWS1.Reg_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMREPORTFIT noobs label;
52765      var STAT LABEL TRAIN
52766      VALIDATE
52767      TEST
52768      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
52769      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
52770      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52771      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Estadísticos de ajuste";
MPRINT(EM_DIAGRAM):   run;
52772      run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 22.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
52773      title10;
MPRINT(EM_DIAGRAM):   title10;
52774      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
52775      proc sort data=EMWS1.Reg_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg_EMCLASSIFICATION nothreads;
52776      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
52777      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
NOTE: The data set EMWS1.REG_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
52778      %let _cn = %sysfunc(getoption(CENTER));
52779      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
52780      proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMCLASSIFICATION noobs label;
52781      var from into pct_row pct_col count percent
52782      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
52783      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
52784      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
52785      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
52786      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
52787      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
52788      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
52789      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
52790      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
52791      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52792      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Tabla de clasificación";
MPRINT(EM_DIAGRAM):   run;
52793      run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 23.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
52794      title9;
MPRINT(EM_DIAGRAM):   title9;
52795      title10;
MPRINT(EM_DIAGRAM):   title10;
52796      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
52797      %let _cn = %sysfunc(getoption(CENTER));
52798      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
52799      data EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg_EMEVENTREPORT;
52800      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
52801      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
52801    ! FALSEEVENT
52802      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
52803         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos" TARGET = "Target" TARGETLABEL = "Etiqueta target" FALSEEVENT = "Falso positivo" FALSENEVENT = "Falso negativo" TRUEEVENT = "Verdadero positivo" TRUENEVENT = "Verdadero negativo";
52804      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
52805      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
52806      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
52807      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
52808      set EMWS1.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg_EMEVENTREPORT;
52809      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_EMEVENTREPORT.
NOTE: The data set EMWS1.REG_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
52810      proc print data=EMWS1.Reg_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMEVENTREPORT noobs label;
52811      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52812      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Tabla de evento de clasificación";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
52813      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
52814      run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
52815      title10;
MPRINT(EM_DIAGRAM):   title10;
52816      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
52817      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
52818      modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Variable target";
52819      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Rol de los datos";
52820      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
52821      run;
 
NOTE: MODIFY was successful for EMWS1.REG_EMRANK.DATA.
52822      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
52823      %let _cn = %sysfunc(getoption(CENTER));
52824      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
52825      proc print data=EMWS1.Reg_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMRANK label noobs;
52826      var
52827      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
52828      by
52829      notsorted DATAROLE
52830      notsorted TARGET
52831      notsorted TARGETLABEL
52832      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
52833      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
52834      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Clasificaciones de puntuación de evaluación";
MPRINT(EM_DIAGRAM):   run;
52835      run;
 
NOTE: There were 40 observations read from the data set EMWS1.REG_EMRANK.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
52836      title10;
MPRINT(EM_DIAGRAM):   title10;
52837      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
52838      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
52839      modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Variable target";
52840      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Rol de los datos";
52841      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
52842      run;
 
NOTE: MODIFY was successful for EMWS1.REG_EMSCOREDIST.DATA.
52843      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
The SAS System
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Distribución de puntuación de evaluación";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
