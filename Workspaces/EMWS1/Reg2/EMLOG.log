*------------------------------------------------------------*
Usuario:                Jose Caloca
Fecha:                07 de marzo de 2021
Hora:                14H21
Sitio:                70115216
Plataforma:            X64_10PRO
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                07 de marzo de 2021
Hora:                14H21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0VQHAB4 "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0VQHAB4 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70115216";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
24282      proc freq data=EMWS1.Reg2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.Reg2_VariableSet noprint;
24283      table ROLE*LEVEL/out=WORK.Reg2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Reg2META;
24284      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_VARIABLESET.
NOTE: The data set WORK.REG2META has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
24285      proc print data=WORK.Reg2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg2META label noobs;
24286      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
24287      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
24288      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24289      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
24290      run;
 
NOTE: There were 4 observations read from the data set WORK.REG2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24291      title10;
MPRINT(EM_DIAGRAM):   title10;
24292      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN
EMWS1.Impt_TRAIN EMWS1.Impt_TRAIN EMWS1 Impt_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS1.Impt_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
24321      data WORK.Reg2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
24322      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
24323      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
24324         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Evento" NUMLEVELS = "Número de niveles" LEVEL = "Nivel de medida" ORDER = "Orden" LABEL = "Etiqueta";
24325      set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS1.IDS_BAD_DM( where=(_TYPE_="TARGET"));
24326      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
24327      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
24328      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
24329      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
24330      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
24331      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
24332      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
24333      end;
MPRINT(EM_DIAGRAM):   end;
24334      output;
MPRINT(EM_DIAGRAM):   output;
24335      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24336      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24337      proc print data=WORK.Reg2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg2_EVENT noobs label;
24338      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
24339      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24340      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Eventos del modelo";
MPRINT(EM_DIAGRAM):   run;
24341      run;
 
NOTE: There were 1 observations read from the data set WORK.REG2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24342      title10;
MPRINT(EM_DIAGRAM):   title10;
"No se han definido decisiones para el target "BAD"."
24343      proc print data = EMWS1.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS1.Ids_BAD_DM noobs label;
24344      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
24345      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
24346      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo" VARIABLE = "Variable" LABEL = "Etiqueta";
24347      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24348      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variables predichas y de decisión";
MPRINT(EM_DIAGRAM):   run;
24349      run;
 
NOTE: There were 7 observations read from the data set EMWS1.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24350      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M3GV56IM;
MPRINT(EM_DIAGRAM):   set WORK.M3GV56IM;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
24360      data WORK.M3GV56IM;
MPRINT(EM_DIAGRAM):    data WORK.M3GV56IM;
24361      set WORK.M3GV56IM end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M3GV56IM end=eof;
24362      output;
MPRINT(EM_DIAGRAM):   output;
24363      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
24364      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
24365      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
24366      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
24367      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
24368      output;
MPRINT(EM_DIAGRAM):   output;
24369      end;
MPRINT(EM_DIAGRAM):   end;
24370      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.M3GV56IM.
NOTE: The data set WORK.M3GV56IM has 9 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS1.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
24371      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24372      * Reg2: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg2: Create decision matrix;
24373      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24374      data WORK.BAD;
MPRINT(EM_DIAGRAM):   data WORK.BAD;
24375        length   BAD                              $  32
24376                 COUNT                                8
24377                 DATAPRIOR                            8
24378                 TRAINPRIOR                           8
24379                 DECPRIOR                             8
24380                 DECISION1                            8
24381                 DECISION2                            8
24382                 ;
MPRINT(EM_DIAGRAM):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
24383
24384        label    COUNT="Level Counts"
24385                 DATAPRIOR="Data Proportions"
24386                 TRAINPRIOR="Training Proportions"
24387                 DECPRIOR="Decision Priors"
24388                 DECISION1="1"
24389                 DECISION2="0"
24390                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
24391        format   COUNT 10.
24392                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
24393      BAD="1"; COUNT=1189; DATAPRIOR=0.1994966442953; TRAINPRIOR=0.1994966442953; DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   BAD="1";
MPRINT(EM_DIAGRAM):   COUNT=1189;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
24394      output;
MPRINT(EM_DIAGRAM):   output;
24395      BAD="0"; COUNT=4771; DATAPRIOR=0.80050335570469; TRAINPRIOR=0.80050335570469; DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   BAD="0";
MPRINT(EM_DIAGRAM):   COUNT=4771;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
24396      output;
MPRINT(EM_DIAGRAM):   output;
24397      ;
MPRINT(EM_DIAGRAM):   ;
24398      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24399      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
24400      modify BAD(type=PROFIT label=BAD);
MPRINT(EM_DIAGRAM):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
24401      label DECISION1= '1';
24402      label DECISION2= '0';
24403      run;
 
NOTE: MODIFY was successful for WORK.BAD.DATA.
24404      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24405      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
24406      set EMWS1.Impt_TRAIN(keep=
24407      BAD IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON IMP_VALUE );
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN(keep= BAD IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON IMP_VALUE );
24408      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg2: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
24409      *------------------------------------------------------------* ;
24410      * Reg2: DMDBClass Macro ;
24411      *------------------------------------------------------------* ;
24412      %macro DMDBClass;
24413          BAD(DESC) IMP_DELINQ(ASC) IMP_DEROG(ASC) IMP_JOB(ASC) IMP_NINQ(ASC)
24414         IMP_REASON(ASC)
24415      %mend DMDBClass;
24416      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
24417      * Reg2: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg2: DMDBVar Macro ;
24418      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
24419      %macro DMDBVar;
24420          IMP_DEBTINC IMP_VALUE
24421      %mend DMDBVar;
24422      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24423      * Reg2: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg2: Create DMDB;
24424      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24425      proc dmdb batch data=WORK.EM_DMREG
24426      dmdbcat=WORK.Reg2_DMDB
24427      maxlevel = 513
24428      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg2_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
24429      class %DMDBClass;
MPRINT(DMDBCLASS):   BAD(DESC) IMP_DELINQ(ASC) IMP_DEROG(ASC) IMP_JOB(ASC) IMP_NINQ(ASC) IMP_REASON(ASC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   var
24430      var %DMDBVar;
MPRINT(DMDBVAR):   IMP_DEBTINC IMP_VALUE
MPRINT(EM_DIAGRAM):  ;
24431      target
24432      BAD
24433      ;
MPRINT(EM_DIAGRAM):   target BAD ;
24434      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.14 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
24435      quit;
24436      *--- end code ---*;
 
24437      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24438      * Reg2: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg2: Run DMREG procedure;
24439      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24440      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg2_DMDB
24441      validata = EMWS1.Impt_VALIDATE
24442      outest = EMWS1.Reg2_EMESTIMATE
24443      outterms = EMWS1.Reg2_OUTTERMS
24444      outmap= EMWS1.Reg2_MAPDS namelen=200
24445      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg2_DMDB validata = EMWS1.Impt_VALIDATE outest = EMWS1.Reg2_EMESTIMATE outterms = EMWS1.Reg2_OUTTERMS outmap= EMWS1.Reg2_MAPDS namelen=200 ;
24446      class
24447      BAD
24448      IMP_DELINQ
24449      IMP_DEROG
24450      IMP_JOB
24451      IMP_NINQ
24452      IMP_REASON
24453      ;
MPRINT(EM_DIAGRAM):   class BAD IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON ;
24454      model BAD =
24455      IMP_DEBTINC
24456      IMP_DELINQ
24457      IMP_DEROG
24458      IMP_JOB
24459      IMP_NINQ
24460      IMP_REASON
24461      IMP_VALUE
24462      /error=binomial link=LOGIT
24463      coding=DEVIATION
24464      nodesignprint
24465      selection=STEPWISE choose=NONE
24466      Hierarchy=CLASS
24467      Rule=NONE
24468      ;
MPRINT(EM_DIAGRAM):   model BAD = IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON IMP_VALUE /error=binomial link=LOGIT coding=DEVIATION nodesignprint selection=STEPWISE choose=NONE Hierarchy=CLASS Rule=NONE ;
24469      ;
MPRINT(EM_DIAGRAM):   ;
24470      score data=EMWS1.Impt_TEST
24471      out=_null_
24472      outfit=EMWS1.Reg2_FITTEST
24473      role = TEST
24474      ;
MPRINT(EM_DIAGRAM):   score data=EMWS1.Impt_TEST out=_null_ outfit=EMWS1.Reg2_FITTEST role = TEST ;
24475      code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas"
24476      group=Reg2
24477      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas" group=Reg2 ;
24478      code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas"
24479      group=Reg2
24480      residual
24481      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas" group=Reg2 residual ;
24482      run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that BAD=1.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMPUBLISHSCORE.sas opened.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas opened.
NOTE: There were 1193 observations read from the data set EMWS1.PART_TEST.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      58 at 75570:41    251 at 75571:28   38 at 75572:14    106 at 75572:43   134 at 75573:14   26 at 75573:41
NOTE: There were 1193 observations read from the data set EMWS1.VARSEL_TEST.
NOTE: View EMWS1.IMPT_TEST.VIEW used (Total process time):
      real time           0.54 seconds
      cpu time            0.37 seconds
 
NOTE: There were 1193 observations read from the data set EMWS1.VARCLUS_TEST.
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 75543:41    401 at 75544:28   60 at 75545:14    160 at 75545:43   216 at 75546:14   32 at 75546:41
NOTE: There were 1788 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.62 seconds
      cpu time            0.45 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.VARCLUS_VALIDATE.
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.70 seconds
      cpu time            0.53 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1788 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 1193 observations read from the data set EMWS1.IMPT_TEST.
NOTE: The data set EMWS1.REG2_EMESTIMATE has 24 observations and 82 variables.
NOTE: The data set EMWS1.REG2_OUTTERMS has 45 observations and 6 variables.
NOTE: The data set EMWS1.REG2_MAPDS has 2 observations and 47 variables.
NOTE: The data set EMWS1.REG2_FITTEST has 7 observations and 15 variables.
NOTE: The PROCEDURE DMREG printed pages 4-11.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.76 seconds
      cpu time            0.56 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
24483      quit;
 
24484      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
24485      delete Reg2_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg2_DMDB;
24486      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG2_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
24487      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24488      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
24489      delete Reg2_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg2_DMDB / memtype=catalog;
24490      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG2_DMDB (memtype=CATALOG).
24491      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24492      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
24493      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
24494      set EMWS1.Reg2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMESTIMATE;
24495      drop _AIC_--_VMISC_
24496      ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VMISC_ ;
24497      where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
24498      drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
24499      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
24500      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
24501      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
24502      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
24503      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
24504      end;
MPRINT(EM_DIAGRAM):   end;
24505      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG2_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24506      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
24507      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 46 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24508      proc transpose data=EMWS1.Reg2_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
24509      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg2_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable ));
24510      var 'IMP_DEBTINC'n--'IMP_VALUE'n;
MPRINT(EM_DIAGRAM):   var 'IMP_DEBTINC'n--'IMP_VALUE'n;
24511      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG2_MAPDS.
NOTE: The data set WORK.MAP has 45 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24512      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
24513      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
24514      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 45 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24515      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
24516      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
24517      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 46 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24518      data EMWS1.Reg2_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EFFECTS(rename=(_LABEL_=EffectLabel));
24519      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
24520      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
24521      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
24522      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
24523         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
24524         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Efecto" Variable = "Variable" Sign = "Signo" ClassLevel = "Nivel" Abscoefficient = "Coeficiente absoluto" Coefficient = "Coeficiente" _LABEL_ = "Etiqueta de efecto" CODE = "Variable de código de puntuación";
24525      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
24525    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-valor" abstvalue = "T-valor absoluto" PValue = "P valor";
24526      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
24527      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
24528      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
24529      classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
24530      end;
MPRINT(EM_DIAGRAM):   end;
24531      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
24532      if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
24533      end;
MPRINT(EM_DIAGRAM):   end;
24534      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
24535      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
24536      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
24537      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
24538      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
24539      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
24540      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 24526:13   1 at 24537:18
NOTE: There were 46 observations read from the data set WORK.ESTIMATE.
NOTE: There were 45 observations read from the data set WORK.MAP.
NOTE: The data set EMWS1.REG2_EFFECTS has 45 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
24541      proc sort data =EMWS1.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg2_EFFECTS;
24542      by
24543      descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
24544      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS1.REG2_EFFECTS.
NOTE: The data set EMWS1.REG2_EFFECTS has 45 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24545      data EMWS1.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EFFECTS;
24546      set EMWS1.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EFFECTS;
24547      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
24548      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "Número TScore";
24549      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
24550      TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
24551      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS1.REG2_EFFECTS.
NOTE: The data set EMWS1.REG2_EFFECTS has 45 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24552      proc sort data =EMWS1.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS1.Reg2_EFFECTS;
24553      by
24554      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
24555      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS1.REG2_EFFECTS.
NOTE: The data set EMWS1.REG2_EFFECTS has 45 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24556      data EMWS1.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EFFECTS;
24557      set EMWS1.Reg2_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EFFECTS;
24558      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
24559      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Número de efecto";
24560      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
24561      EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
24562      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set EMWS1.REG2_EFFECTS.
NOTE: The data set EMWS1.REG2_EFFECTS has 45 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24563      proc transpose data=EMWS1.Reg2_EMESTIMATE out=EMWS1.Reg2_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg2_EMESTIMATE out=EMWS1.Reg2_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
24564      where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
24565      var 'IMP_DEBTINC'n--'IMP_VALUE'n;
MPRINT(EM_DIAGRAM):   var 'IMP_DEBTINC'n--'IMP_VALUE'n;
24566      by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
24567      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
24568      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 21 observations read from the data set EMWS1.REG2_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS1.REG2_ESTIMATEGRID has 315 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24569      data EMWS1.Reg2_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_ESTIMATEGRID;
24570      set EMWS1.Reg2_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_ESTIMATEGRID;
24571      if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
24572      label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))"
24573         Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
24573    ! PValue =
24574         "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Etiqueta de efecto" Effect = "Efecto" Abscoefficient = "Coeficiente absoluto" Coefficient = "Coeficiente" tvalue = "T-valor" abstvalue = "T-valor absoluto" PValue = "P valor";
24575      AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
24576      AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
24577      where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
24578      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 198 observations read from the data set EMWS1.REG2_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS1.REG2_ESTIMATEGRID has 198 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                07 de marzo de 2021
Hora:                14H21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2JQYB5R "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2JQYB5R new;
MPRINT(EM_DIAGRAM):   run;
24680      proc transpose data=EMWS1.Reg2_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS1.Reg2_EMESTIMATE out=WORK.TEMPREG;
24681      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
24682      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 79 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
24683      proc transpose data=EMWS1.Reg2_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS1.Reg2_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
24684      var "IMP_DEBTINC"n--"IMP_VALUE"n;
MPRINT(EM_DIAGRAM):   var "IMP_DEBTINC"n--"IMP_VALUE"n;
24685      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS1.REG2_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 45 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
24686      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
24687      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
24688      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 79 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 79 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24689      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
24690      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
24691      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 45 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 45 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24692      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
24693      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
24694      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
24695      if (ina and inb) and BAD ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and BAD ne . then output;
24696      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 79 observations read from the data set WORK.TEMPREG.
NOTE: There were 45 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 44 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24697      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
24698      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
24699      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
24700      i=1;
MPRINT(EM_DIAGRAM):   i=1;
24701      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
24702      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
24703      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
24704      output;
MPRINT(EM_DIAGRAM):   output;
24705      end;
MPRINT(EM_DIAGRAM):   end;
24706      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 44 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24707      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
24708      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
24709      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 44 observations read from the data set WORK.TEMPREG3.
NOTE: 38 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 6 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
24710      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24711      *------------------------------------------------------------*;
24712      * Reg2: Scoring DATA data;
24713      *------------------------------------------------------------*;
24714      data EMWS1.Reg2_TRAIN
24715      / view=EMWS1.Reg2_TRAIN
24716      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_TRAIN / view=EMWS1.Reg2_TRAIN ;
24717      set EMWS1.Impt_TRAIN
24718      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TRAIN ;
24719      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
24720     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
24721     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
24722     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
24723     +
24724     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
24725     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
24726     +
24727     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
24728     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
24729     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
24730     +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
24731     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
24732     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
24733     +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
24734     +
24735     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
24736     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
24737     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
24738     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
24739     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
24740     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   _Y = .;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
24741     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
24742     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = 1;
24743     +end;
MPRINT(EM_DIAGRAM):   end;
24744     +else do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
24745     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   _Y = 0;
24746     +      _Y = 1;
MPRINT(EM_DIAGRAM):   end;
24747     +   end;
24748     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _Y = .;
24749     +      _Y = 0;
MPRINT(EM_DIAGRAM):   end;
24750     +   end;
MPRINT(EM_DIAGRAM):   end;
24751     +   else do;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
24752     +      _Y = .;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
24753     +   end;
24754     +end;
MPRINT(EM_DIAGRAM):   *** Check IMP_DEBTINC for missing values ;
24755     +
MPRINT(EM_DIAGRAM):   if missing( IMP_DEBTINC ) then do;
24756     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24757     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24758     +
MPRINT(EM_DIAGRAM):   end;
24759     +*** Check IMP_DEBTINC for missing values ;
24760     +if missing( IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DELINQ ;
24761     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
24762     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24763     +end;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
24764     +
MPRINT(EM_DIAGRAM):   _1_1 = 0;
24765     +*** Generate dummy variables for IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
24766     +drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
24767     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
24768     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
24769     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
24770     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
24771     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
24772     +_1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
24773     +_1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
24774     +_1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
24775     +_1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
24776     +_1_8 = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_DELINQ ) then do;
24777     +_1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = .;
24778     +_1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = .;
24779     +_1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = .;
24780     +_1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = .;
24781     +if missing( IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   _1_4 = .;
24782     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
24783     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
24784     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
24785     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
24786     +   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
24787     +   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
24788     +   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
24789     +   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
24790     +   _1_8 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24791     +   _1_9 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24792     +   _1_10 = .;
MPRINT(EM_DIAGRAM):   end;
24793     +   _1_11 = .;
24794     +   _1_12 = .;
MPRINT(EM_DIAGRAM):   else do;
24795     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
24796     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24797     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DELINQ , BEST12. );
24798     +else do;
24799     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
24800     +   _dm12 = put( IMP_DELINQ , BEST12. );
24801     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
24802     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
24803     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   end;
24804     +   end;
24805     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
24806     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   end;
24807     +   end;
24808     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
24809     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   end;
24810     +   end;
24811     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
24812     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   end;
24813     +   end;
24814     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
24815     +      _1_4 = 1;
MPRINT(EM_DIAGRAM):   end;
24816     +   end;
24817     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
24818     +      _1_6 = 1;
MPRINT(EM_DIAGRAM):   end;
24819     +   end;
24820     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
24821     +      _1_5 = 1;
MPRINT(EM_DIAGRAM):   end;
24822     +   end;
24823     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
24824     +      _1_7 = 1;
MPRINT(EM_DIAGRAM):   end;
24825     +   end;
24826     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
24827     +      _1_8 = 1;
MPRINT(EM_DIAGRAM):   end;
24828     +   end;
24829     +   else if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
24830     +      _1_10 = 1;
MPRINT(EM_DIAGRAM):   end;
24831     +   end;
24832     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
24833     +      _1_9 = 1;
MPRINT(EM_DIAGRAM):   end;
24834     +   end;
24835     +   else if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
24836     +      _1_11 = 1;
MPRINT(EM_DIAGRAM):   end;
24837     +   end;
24838     +   else if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
24839     +      _1_12 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
24840     +   end;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
24841     +   else if _dm12 = '15'  then do;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
24842     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
24843     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
24844     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
24845     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
24846     +      _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
24847     +      _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
24848     +      _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
24849     +      _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
24850     +      _1_8 = -1;
MPRINT(EM_DIAGRAM):   end;
24851     +      _1_9 = -1;
24852     +      _1_10 = -1;
MPRINT(EM_DIAGRAM):   else do;
24853     +      _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = .;
24854     +      _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = .;
24855     +   end;
MPRINT(EM_DIAGRAM):   _1_2 = .;
24856     +   else do;
MPRINT(EM_DIAGRAM):   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
24857     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
24858     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
24859     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
24860     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
24861     +      _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
24862     +      _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
24863     +      _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
24864     +      _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
24865     +      _1_8 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24866     +      _1_9 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24867     +      _1_10 = .;
MPRINT(EM_DIAGRAM):   end;
24868     +      _1_11 = .;
MPRINT(EM_DIAGRAM):   end;
24869     +      _1_12 = .;
24870     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DEROG ;
24871     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
24872     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24873     +end;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
24874     +
MPRINT(EM_DIAGRAM):   _2_1 = 0;
24875     +*** Generate dummy variables for IMP_DEROG ;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
24876     +drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
24877     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
24878     +_2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
24879     +_2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
24880     +_2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
24881     +_2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
24882     +_2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
24883     +_2_5 = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEROG ) then do;
24884     +_2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = .;
24885     +_2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = .;
24886     +_2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = .;
24887     +_2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = .;
24888     +if missing( IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   _2_4 = .;
24889     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
24890     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
24891     +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
24892     +   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
24893     +   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
24894     +   _2_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24895     +   _2_6 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24896     +   _2_7 = .;
MPRINT(EM_DIAGRAM):   end;
24897     +   _2_8 = .;
24898     +   _2_9 = .;
MPRINT(EM_DIAGRAM):   else do;
24899     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
24900     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
24901     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DEROG , BEST12. );
24902     +else do;
24903     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
24904     +   _dm12 = put( IMP_DEROG , BEST12. );
24905     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
24906     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
24907     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   end;
24908     +   end;
24909     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
24910     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   end;
24911     +   end;
24912     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
24913     +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   end;
24914     +   end;
24915     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
24916     +      _2_3 = 1;
MPRINT(EM_DIAGRAM):   end;
24917     +   end;
24918     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
24919     +      _2_4 = 1;
MPRINT(EM_DIAGRAM):   end;
24920     +   end;
24921     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
24922     +      _2_5 = 1;
MPRINT(EM_DIAGRAM):   end;
24923     +   end;
24924     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
24925     +      _2_6 = 1;
MPRINT(EM_DIAGRAM):   end;
24926     +   end;
24927     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
24928     +      _2_7 = 1;
MPRINT(EM_DIAGRAM):   end;
24929     +   end;
24930     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
24931     +      _2_8 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
24932     +   end;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
24933     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
24934     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
24935     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
24936     +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
24937     +      _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
24938     +      _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
24939     +      _2_5 = -1;
MPRINT(EM_DIAGRAM):   end;
24940     +      _2_6 = -1;
24941     +      _2_7 = -1;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
24942     +      _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
24943     +      _2_9 = -1;
MPRINT(EM_DIAGRAM):   end;
24944     +   end;
24945     +   else if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _2_0 = .;
24946     +      _2_9 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = .;
24947     +   end;
MPRINT(EM_DIAGRAM):   _2_2 = .;
24948     +   else do;
MPRINT(EM_DIAGRAM):   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
24949     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
24950     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
24951     +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
24952     +      _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
24953     +      _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
24954     +      _2_5 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
24955     +      _2_6 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24956     +      _2_7 = .;
MPRINT(EM_DIAGRAM):   end;
24957     +      _2_8 = .;
MPRINT(EM_DIAGRAM):   end;
24958     +      _2_9 = .;
24959     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
24960     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
24961     +   end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
24962     +end;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
24963     +
MPRINT(EM_DIAGRAM):   _3_1 = 0;
24964     +*** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
24965     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
24966     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
24967     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
24968     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = .;
24969     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = .;
24970     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = .;
24971     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = .;
24972     +if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   _3_4 = .;
24973     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
24974     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
24975     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   end;
24976     +   _3_3 = .;
24977     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   else do;
24978     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
24979     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
24980     +end;
24981     +else do;
24982     +   length _dm7 $ 7; drop _dm7 ;
24983     +   %DMNORMCP( IMP_JOB , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
24984     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24985     +   if _dm7 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   end;
24986     +      if _dm7 <= 'OFFICE'  then do;
24987     +         if _dm7 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   else do;
24988     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
24989     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
24990     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24991     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
24992     +            if _dm7 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   end;
24993     +               _3_1 = 1;
24994     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
24995     +            end;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
24996     +         end;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
24997     +      end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
24998     +      else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
24999     +         if _dm7 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   end;
25000     +            _3_2 = 1;
25001     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
25002     +         end;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
25003     +      end;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
25004     +   end;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
25005     +   else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
25006     +      if _dm7 <= 'SALES'  then do;
25007     +         if _dm7 = 'PROFEXE'  then do;
MPRINT(EM_DIAGRAM):   else do;
25008     +            _3_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
25009     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
25010     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25011     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25012     +            if _dm7 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   end;
25013     +               _3_4 = 1;
25014     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
25015     +            end;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
25016     +         end;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
25017     +      end;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
25018     +      else do;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
25019     +         if _dm7 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
25020     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25021     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   end;
25022     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   end;
25023     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   end;
25024     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
25025     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _3_0 = .;
25026     +         end;
MPRINT(EM_DIAGRAM):   _3_1 = .;
25027     +      end;
MPRINT(EM_DIAGRAM):   _3_2 = .;
25028     +   end;
MPRINT(EM_DIAGRAM):   _3_3 = .;
25029     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _3_4 = .;
25030     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25031     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25032     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   end;
25033     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   end;
25034     +      _3_4 = .;
25035     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_NINQ ;
25036     +      _DM_BAD = 1;
25037     +   end;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13 ;
25038     +end;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25039     +
MPRINT(EM_DIAGRAM):   _4_0 = 0;
25040     +*** Generate dummy variables for IMP_NINQ ;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
25041     +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13
MPRINT(EM_DIAGRAM):   _4_2 = 0;
25042     +         ;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
25043     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
25044     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
25045     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
25046     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
25047     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
25048     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_9 = 0;
25049     +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_10 = 0;
25050     +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_11 = 0;
25051     +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_12 = 0;
25052     +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_13 = 0;
25053     +_4_9 = 0;
MPRINT(EM_DIAGRAM):   if missing( IMP_NINQ ) then do;
25054     +_4_10 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = .;
25055     +_4_11 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = .;
25056     +_4_12 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = .;
25057     +_4_13 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = .;
25058     +if missing( IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   _4_4 = .;
25059     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
25060     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
25061     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
25062     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
25063     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
25064     +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
25065     +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
25066     +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
25067     +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
25068     +   _4_9 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25069     +   _4_10 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25070     +   _4_11 = .;
MPRINT(EM_DIAGRAM):   end;
25071     +   _4_12 = .;
25072     +   _4_13 = .;
MPRINT(EM_DIAGRAM):   else do;
25073     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
25074     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25075     +end;
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_NINQ , BEST12. );
25076     +else do;
25077     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(DMNORMIP):   call dmnorm(_dm12,
25078     +   _dm12 = put( IMP_NINQ , BEST12. );
25079     +   %DMNORMIP( _dm12 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
25080     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
25081     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25082     +      if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   end;
25083     +         if _dm12 <= '1'  then do;
25084     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else do;
25085     +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
25086     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
25087     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25088     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25089     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   end;
25090     +                  _4_1 = 1;
25091     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
25092     +               end;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
25093     +            end;
MPRINT(EM_DIAGRAM):   _4_10 = 1;
25094     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25095     +         else do;
MPRINT(EM_DIAGRAM):   end;
25096     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else do;
25097     +               _4_10 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
25098     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_11 = 1;
25099     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25100     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25101     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   end;
25102     +                  _4_11 = 1;
MPRINT(EM_DIAGRAM):   end;
25103     +                  _dm_find = 1;
25104     +               end;
MPRINT(EM_DIAGRAM):   else do;
25105     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 <= '13' then do;
25106     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '12' then do;
25107     +      end;
MPRINT(EM_DIAGRAM):   _4_12 = 1;
25108     +      else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
25109     +         if _dm12 <= '13'  then do;
25110     +            if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else do;
25111     +               _4_12 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '13' then do;
25112     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_13 = 1;
25113     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25114     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25115     +               if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   end;
25116     +                  _4_13 = 1;
25117     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
25118     +               end;
MPRINT(EM_DIAGRAM):   if _dm12 = '14' then do;
25119     +            end;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
25120     +         end;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
25121     +         else do;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
25122     +            if _dm12 = '14'  then do;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
25123     +               _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
25124     +               _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
25125     +               _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
25126     +               _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
25127     +               _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_9 = -1;
25128     +               _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_10 = -1;
25129     +               _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_11 = -1;
25130     +               _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_12 = -1;
25131     +               _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_13 = -1;
25132     +               _4_9 = -1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25133     +               _4_10 = -1;
MPRINT(EM_DIAGRAM):   end;
25134     +               _4_11 = -1;
25135     +               _4_12 = -1;
MPRINT(EM_DIAGRAM):   else do;
25136     +               _4_13 = -1;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
25137     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
25138     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25139     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25140     +               if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   end;
25141     +                  _4_2 = 1;
MPRINT(EM_DIAGRAM):   end;
25142     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
25143     +               end;
25144     +            end;
MPRINT(EM_DIAGRAM):   else do;
25145     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
25146     +      end;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
25147     +   end;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
25148     +   else do;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25149     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   end;
25150     +         if _dm12 <= '4'  then do;
25151     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else do;
25152     +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
25153     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
25154     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25155     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25156     +               if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   end;
25157     +                  _4_4 = 1;
25158     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
25159     +               end;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
25160     +            end;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
25161     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25162     +         else do;
MPRINT(EM_DIAGRAM):   end;
25163     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else do;
25164     +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
25165     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
25166     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25167     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25168     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   end;
25169     +                  _4_6 = 1;
MPRINT(EM_DIAGRAM):   end;
25170     +                  _dm_find = 1;
25171     +               end;
MPRINT(EM_DIAGRAM):   else do;
25172     +            end;
MPRINT(EM_DIAGRAM):   if _dm12 <= '8' then do;
25173     +         end;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
25174     +      end;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
25175     +      else do;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
MPRINT(EM_DIAGRAM):   end;
25176     +         if _dm12 <= '8'  then do;
25177     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else do;
25178     +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
25179     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
25180     +            end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25181     +            else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25182     +               if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   end;
25183     +                  _4_8 = 1;
25184     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   else do;
25185     +               end;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
25186     +            end;
MPRINT(EM_DIAGRAM):   _4_9 = 1;
25187     +         end;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25188     +         else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25189     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   end;
25190     +               _4_9 = 1;
MPRINT(EM_DIAGRAM):   end;
25191     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
25192     +            end;
MPRINT(EM_DIAGRAM):   _4_0 = .;
25193     +         end;
MPRINT(EM_DIAGRAM):   _4_1 = .;
25194     +      end;
MPRINT(EM_DIAGRAM):   _4_2 = .;
25195     +   end;
MPRINT(EM_DIAGRAM):   _4_3 = .;
25196     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   _4_4 = .;
25197     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
25198     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
25199     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
25200     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
25201     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
25202     +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
25203     +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
25204     +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
25205     +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
25206     +      _4_9 = .;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25207     +      _4_10 = .;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25208     +      _4_11 = .;
MPRINT(EM_DIAGRAM):   end;
25209     +      _4_12 = .;
MPRINT(EM_DIAGRAM):   end;
25210     +      _4_13 = .;
25211     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
25212     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
25213     +   end;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
25214     +end;
MPRINT(EM_DIAGRAM):   _5_0 = .;
25215     +
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25216     +*** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25217     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   end;
25218     +if missing( IMP_REASON ) then do;
25219     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   else do;
25220     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
25221     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
25222     +end;
25223     +else do;
25224     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
25225     +   %DMNORMCP( IMP_REASON , _dm7 )
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
25226     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
25227     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   end;
25228     +   end;
25229     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   _5_0 = .;
25230     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25231     +   end;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25232     +   else do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
25233     +      _5_0 = .;
25234     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
25235     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
25236     +   end;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
25237     +end;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
25238     +
MPRINT(EM_DIAGRAM):   goto REG2DR1;
25239     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   end;
25240     +if _DM_BAD > 0 then do;
25241     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
25242     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   drop _TEMP;
25243     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   drop _LP0;
25244     +end;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
25245     +
25246     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEBTINC ;
25247     +drop _TEMP;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_DEBTINC ;
25248     +drop _LP0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02289913858542 * _TEMP);
25249     +_LP0 = 0;
25250     +
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DELINQ ;
25251     +***  Effect: IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25252     +_TEMP = IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.36810610762426) * _TEMP * _1_0;
25253     +_LP0 = _LP0 + (    0.02289913858542 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.514049956722) * _TEMP * _1_1;
25254     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.2843695033657) * _TEMP * _1_2;
25255     +***  Effect: IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.33915431549382) * _TEMP * _1_3;
25256     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.25984995623968) * _TEMP * _1_4;
25257     +_LP0 = _LP0 + (   -6.36810610762426) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.28507383244363) * _TEMP * _1_5;
25258     +_LP0 = _LP0 + (     -5.514049956722) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.09323594638332) * _TEMP * _1_6;
25259     +_LP0 = _LP0 + (    -5.2843695033657) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.18770351982685) * _TEMP * _1_7;
25260     +_LP0 = _LP0 + (   -4.33915431549382) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.82333407130081) * _TEMP * _1_8;
25261     +_LP0 = _LP0 + (   -4.25984995623968) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.70394237244294) * _TEMP * _1_9;
25262     +_LP0 = _LP0 + (   -3.28507383244363) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.2858432496825) * _TEMP * _1_10;
25263     +_LP0 = _LP0 + (   -3.09323594638332) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.38306165550988) * _TEMP * _1_11;
25264     +_LP0 = _LP0 + (   -3.18770351982685) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.8109576786943) * _TEMP * _1_12;
25265     +_LP0 = _LP0 + (    5.82333407130081) * _TEMP * _1_8;
25266     +_LP0 = _LP0 + (    5.70394237244294) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEROG ;
25267     +_LP0 = _LP0 + (     6.2858432496825) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25268     +_LP0 = _LP0 + (    6.38306165550988) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.86735097139464) * _TEMP * _2_0;
25269     +_LP0 = _LP0 + (     6.8109576786943) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.11874325860727) * _TEMP * _2_1;
25270     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.76350136096206) * _TEMP * _2_2;
25271     +***  Effect: IMP_DEROG ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48813030136529) * _TEMP * _2_3;
25272     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.38611408157288) * _TEMP * _2_4;
25273     +_LP0 = _LP0 + (   -2.86735097139464) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.42294775600152) * _TEMP * _2_5;
25274     +_LP0 = _LP0 + (   -2.11874325860727) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63523498828215) * _TEMP * _2_6;
25275     +_LP0 = _LP0 + (   -1.76350136096206) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.54670767437824) * _TEMP * _2_7;
25276     +_LP0 = _LP0 + (   -0.48813030136529) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.4369694791475) * _TEMP * _2_8;
25277     +_LP0 = _LP0 + (   -1.38611408157288) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53379076929278) * _TEMP * _2_9;
25278     +_LP0 = _LP0 + (   -2.42294775600152) * _TEMP * _2_5;
25279     +_LP0 = _LP0 + (   -1.63523498828215) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_JOB ;
25280     +_LP0 = _LP0 + (    6.54670767437824) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25281     +_LP0 = _LP0 + (     8.4369694791475) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03770979332431) * _TEMP * _3_0;
25282     +_LP0 = _LP0 + (   -1.53379076929278) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53848818107953) * _TEMP * _3_1;
25283     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01017544415566) * _TEMP * _3_2;
25284     +***  Effect: IMP_JOB ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3275979270872) * _TEMP * _3_3;
25285     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.93231248131988) * _TEMP * _3_4;
25286     +_LP0 = _LP0 + (    0.03770979332431) * _TEMP * _3_0;
25287     +_LP0 = _LP0 + (   -0.53848818107953) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_NINQ ;
25288     +_LP0 = _LP0 + (    0.01017544415566) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25289     +_LP0 = _LP0 + (    -0.3275979270872) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.20142529362903) * _TEMP * _4_0;
25290     +_LP0 = _LP0 + (    0.93231248131988) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97761269627832) * _TEMP * _4_1;
25291     +
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.5958928200474) * _TEMP * _4_2;
25292     +***  Effect: IMP_NINQ ;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.72910725202414) * _TEMP * _4_3;
25293     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.16450819343992) * _TEMP * _4_4;
25294     +_LP0 = _LP0 + (   -3.20142529362903) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.7022775235962) * _TEMP * _4_5;
25295     +_LP0 = _LP0 + (   -2.97761269627832) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.40380406429631) * _TEMP * _4_6;
25296     +_LP0 = _LP0 + (    -2.5958928200474) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.0130731413641) * _TEMP * _4_7;
25297     +_LP0 = _LP0 + (   -2.72910725202414) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.86586169639211) * _TEMP * _4_8;
25298     +_LP0 = _LP0 + (   -2.16450819343992) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.45933464010808) * _TEMP * _4_9;
25299     +_LP0 = _LP0 + (    -1.7022775235962) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.48147900155389) * _TEMP * _4_10;
25300     +_LP0 = _LP0 + (   -1.40380406429631) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.84845528171252) * _TEMP * _4_11;
25301     +_LP0 = _LP0 + (    -2.0130731413641) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.80778823729157) * _TEMP * _4_12;
25302     +_LP0 = _LP0 + (   -1.86586169639211) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.69207784540914) * _TEMP * _4_13;
25303     +_LP0 = _LP0 + (   -1.45933464010808) * _TEMP * _4_9;
25304     +_LP0 = _LP0 + (   -2.48147900155389) * _TEMP * _4_10;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_REASON ;
25305     +_LP0 = _LP0 + (   -2.84845528171252) * _TEMP * _4_11;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25306     +_LP0 = _LP0 + (    8.80778823729157) * _TEMP * _4_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16946157702693) * _TEMP * _5_0;
25307     +_LP0 = _LP0 + (    9.69207784540914) * _TEMP * _4_13;
25308     +
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
25309     +***  Effect: IMP_REASON ;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
25310     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 9.55572185479483 + _LP0;
25311     +_LP0 = _LP0 + (   -0.16946157702693) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
25312     +
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
25313     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
25314     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   end;
25315     +_TEMP =     9.55572185479483 + _LP0;
25316     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
25317     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
25318     +   _P0 = _TEMP / (1 + _TEMP);
25319     +end;
25320     +else _P0 = 1 / (1 + exp(-_TEMP));
25321     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
25322     +
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
25323     +REG2DR1:
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25324     +
MPRINT(EM_DIAGRAM):   end;
25325     +*** Residuals;
25326     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   else do;
25327     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
25328     +   R_BAD0 = .;
25329     +end;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
25330     +else do;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
25331     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   select( _Y );
25332     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
25333     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   end;
25334     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   end;
25335     +   select( _Y );
25336     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
25337     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
25338     +   end;
25339     +end;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
25340     +
25341     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
25342     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 1;
25343     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
25344     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
25345     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _IY = 2;
25346     +_IY = 1;
MPRINT(EM_DIAGRAM):   end;
25347     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   I_BAD = REG2DRF[_IY];
25348     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   U_BAD = REG2DRU[_IY];
25349     +   _MAXP = _P1;
25350     +   _IY = 2;
MPRINT(EM_DIAGRAM):   *************************************;
25351     +end;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
25352     +I_BAD = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   *************************************;
25353     +U_BAD = REG2DRU[_IY];
25354     +
25355     +*************************************;
25356     +***** end scoring code for regression;
25357     +*************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25358      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25359      quit;
25360      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25361      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25362      *------------------------------------------------------------*;
25363      * Reg2: Scoring VALIDATE data;
25364      *------------------------------------------------------------*;
25365      data EMWS1.Reg2_VALIDATE
25366      / view=EMWS1.Reg2_VALIDATE
25367      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_VALIDATE / view=EMWS1.Reg2_VALIDATE ;
25368      set EMWS1.Impt_VALIDATE
25369      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_VALIDATE ;
25370      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
25371     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25372     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
25373     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
25374     +
25375     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
25376     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
25377     +
25378     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
25379     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
25380     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
25381     +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
25382     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
25383     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
25384     +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
25385     +
25386     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
25387     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
25388     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
25389     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
25390     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
25391     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25392     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
25393     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
25394     +end;
MPRINT(EM_DIAGRAM):   end;
25395     +else do;
MPRINT(EM_DIAGRAM):   else do;
25396     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
25397     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
25398     +   end;
MPRINT(EM_DIAGRAM):   end;
25399     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
25400     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
25401     +   end;
MPRINT(EM_DIAGRAM):   end;
25402     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25403     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
25404     +   end;
MPRINT(EM_DIAGRAM):   end;
25405     +end;
MPRINT(EM_DIAGRAM):   end;
25406     +
25407     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
25408     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
25409     +
25410     +*** Check IMP_DEBTINC for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_DEBTINC for missing values ;
25411     +if missing( IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEBTINC ) then do;
25412     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25413     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25414     +end;
MPRINT(EM_DIAGRAM):   end;
25415     +
25416     +*** Generate dummy variables for IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DELINQ ;
25417     +drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
25418     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25419     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
25420     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
25421     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
25422     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
25423     +_1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
25424     +_1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
25425     +_1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
25426     +_1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
25427     +_1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
25428     +_1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
25429     +_1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
25430     +_1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
25431     +_1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
25432     +if missing( IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DELINQ ) then do;
25433     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
25434     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
25435     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
25436     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
25437     +   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
25438     +   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
25439     +   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
25440     +   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
25441     +   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
25442     +   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
25443     +   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
25444     +   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
25445     +   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
25446     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25447     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25448     +end;
MPRINT(EM_DIAGRAM):   end;
25449     +else do;
MPRINT(EM_DIAGRAM):   else do;
25450     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25451     +   _dm12 = put( IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DELINQ , BEST12. );
25452     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25453     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
25454     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
25455     +   end;
MPRINT(EM_DIAGRAM):   end;
25456     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
25457     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
25458     +   end;
MPRINT(EM_DIAGRAM):   end;
25459     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
25460     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
25461     +   end;
MPRINT(EM_DIAGRAM):   end;
25462     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
25463     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
25464     +   end;
MPRINT(EM_DIAGRAM):   end;
25465     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
25466     +      _1_4 = 1;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
25467     +   end;
MPRINT(EM_DIAGRAM):   end;
25468     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
25469     +      _1_6 = 1;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
25470     +   end;
MPRINT(EM_DIAGRAM):   end;
25471     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
25472     +      _1_5 = 1;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
25473     +   end;
MPRINT(EM_DIAGRAM):   end;
25474     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
25475     +      _1_7 = 1;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
25476     +   end;
MPRINT(EM_DIAGRAM):   end;
25477     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
25478     +      _1_8 = 1;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
25479     +   end;
MPRINT(EM_DIAGRAM):   end;
25480     +   else if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
25481     +      _1_10 = 1;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
25482     +   end;
MPRINT(EM_DIAGRAM):   end;
25483     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
25484     +      _1_9 = 1;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
25485     +   end;
MPRINT(EM_DIAGRAM):   end;
25486     +   else if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
25487     +      _1_11 = 1;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
25488     +   end;
MPRINT(EM_DIAGRAM):   end;
25489     +   else if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
25490     +      _1_12 = 1;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
25491     +   end;
MPRINT(EM_DIAGRAM):   end;
25492     +   else if _dm12 = '15'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
25493     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
25494     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
25495     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
25496     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
25497     +      _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
25498     +      _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
25499     +      _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
25500     +      _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
25501     +      _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
25502     +      _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
25503     +      _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
25504     +      _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
25505     +      _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
25506     +   end;
MPRINT(EM_DIAGRAM):   end;
25507     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25508     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
25509     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
25510     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
25511     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
25512     +      _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
25513     +      _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
25514     +      _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
25515     +      _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
25516     +      _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
25517     +      _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
25518     +      _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
25519     +      _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
25520     +      _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
25521     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25522     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25523     +   end;
MPRINT(EM_DIAGRAM):   end;
25524     +end;
MPRINT(EM_DIAGRAM):   end;
25525     +
25526     +*** Generate dummy variables for IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DEROG ;
25527     +drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
25528     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25529     +_2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
25530     +_2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
25531     +_2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
25532     +_2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
25533     +_2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
25534     +_2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
25535     +_2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
25536     +_2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
25537     +_2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
25538     +_2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
25539     +if missing( IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEROG ) then do;
25540     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
25541     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
25542     +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
25543     +   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
25544     +   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
25545     +   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
25546     +   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
25547     +   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
25548     +   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
25549     +   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
25550     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25551     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25552     +end;
MPRINT(EM_DIAGRAM):   end;
25553     +else do;
MPRINT(EM_DIAGRAM):   else do;
25554     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25555     +   _dm12 = put( IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DEROG , BEST12. );
25556     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25557     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
25558     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
25559     +   end;
MPRINT(EM_DIAGRAM):   end;
25560     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
25561     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
25562     +   end;
MPRINT(EM_DIAGRAM):   end;
25563     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
25564     +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
25565     +   end;
MPRINT(EM_DIAGRAM):   end;
25566     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
25567     +      _2_3 = 1;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
25568     +   end;
MPRINT(EM_DIAGRAM):   end;
25569     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
25570     +      _2_4 = 1;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
25571     +   end;
MPRINT(EM_DIAGRAM):   end;
25572     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
25573     +      _2_5 = 1;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
25574     +   end;
MPRINT(EM_DIAGRAM):   end;
25575     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
25576     +      _2_6 = 1;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
25577     +   end;
MPRINT(EM_DIAGRAM):   end;
25578     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
25579     +      _2_7 = 1;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
25580     +   end;
MPRINT(EM_DIAGRAM):   end;
25581     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
25582     +      _2_8 = 1;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
25583     +   end;
MPRINT(EM_DIAGRAM):   end;
25584     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
25585     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
25586     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
25587     +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
25588     +      _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
25589     +      _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
25590     +      _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
25591     +      _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
25592     +      _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
25593     +      _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
25594     +      _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
25595     +   end;
MPRINT(EM_DIAGRAM):   end;
25596     +   else if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
25597     +      _2_9 = 1;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
25598     +   end;
MPRINT(EM_DIAGRAM):   end;
25599     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25600     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
25601     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
25602     +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
25603     +      _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
25604     +      _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
25605     +      _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
25606     +      _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
25607     +      _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
25608     +      _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
25609     +      _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
25610     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25611     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25612     +   end;
MPRINT(EM_DIAGRAM):   end;
25613     +end;
MPRINT(EM_DIAGRAM):   end;
25614     +
25615     +*** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
25616     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
25617     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25618     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
25619     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
25620     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
25621     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
25622     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
25623     +if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
25624     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
25625     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
25626     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
25627     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
25628     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
25629     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25630     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25631     +end;
MPRINT(EM_DIAGRAM):   end;
25632     +else do;
MPRINT(EM_DIAGRAM):   else do;
25633     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
25634     +   %DMNORMCP( IMP_JOB , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
25635     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
25636     +   if _dm7 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
25637     +      if _dm7 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
25638     +         if _dm7 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
25639     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
25640     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25641     +         end;
MPRINT(EM_DIAGRAM):   end;
25642     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25643     +            if _dm7 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
25644     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
25645     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25646     +            end;
MPRINT(EM_DIAGRAM):   end;
25647     +         end;
MPRINT(EM_DIAGRAM):   end;
25648     +      end;
MPRINT(EM_DIAGRAM):   end;
25649     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25650     +         if _dm7 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
25651     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
25652     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25653     +         end;
MPRINT(EM_DIAGRAM):   end;
25654     +      end;
MPRINT(EM_DIAGRAM):   end;
25655     +   end;
MPRINT(EM_DIAGRAM):   end;
25656     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25657     +      if _dm7 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
25658     +         if _dm7 = 'PROFEXE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
25659     +            _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
25660     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25661     +         end;
MPRINT(EM_DIAGRAM):   end;
25662     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25663     +            if _dm7 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
25664     +               _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
25665     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25666     +            end;
MPRINT(EM_DIAGRAM):   end;
25667     +         end;
MPRINT(EM_DIAGRAM):   end;
25668     +      end;
MPRINT(EM_DIAGRAM):   end;
25669     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25670     +         if _dm7 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
25671     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
25672     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
25673     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
25674     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
25675     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
25676     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25677     +         end;
MPRINT(EM_DIAGRAM):   end;
25678     +      end;
MPRINT(EM_DIAGRAM):   end;
25679     +   end;
MPRINT(EM_DIAGRAM):   end;
25680     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
25681     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
25682     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
25683     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
25684     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
25685     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
25686     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25687     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25688     +   end;
MPRINT(EM_DIAGRAM):   end;
25689     +end;
MPRINT(EM_DIAGRAM):   end;
25690     +
25691     +*** Generate dummy variables for IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_NINQ ;
25692     +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13
25693     +         ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13 ;
25694     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
25695     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
25696     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
25697     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
25698     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
25699     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
25700     +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
25701     +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
25702     +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
25703     +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
25704     +_4_9 = 0;
MPRINT(EM_DIAGRAM):   _4_9 = 0;
25705     +_4_10 = 0;
MPRINT(EM_DIAGRAM):   _4_10 = 0;
25706     +_4_11 = 0;
MPRINT(EM_DIAGRAM):   _4_11 = 0;
25707     +_4_12 = 0;
MPRINT(EM_DIAGRAM):   _4_12 = 0;
25708     +_4_13 = 0;
MPRINT(EM_DIAGRAM):   _4_13 = 0;
25709     +if missing( IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_NINQ ) then do;
25710     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
25711     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
25712     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
25713     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
25714     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
25715     +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
25716     +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
25717     +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
25718     +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
25719     +   _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
25720     +   _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
25721     +   _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
25722     +   _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
25723     +   _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
25724     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25725     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25726     +end;
MPRINT(EM_DIAGRAM):   end;
25727     +else do;
MPRINT(EM_DIAGRAM):   else do;
25728     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
25729     +   _dm12 = put( IMP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_NINQ , BEST12. );
25730     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
25731     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
25732     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
25733     +      if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
25734     +         if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
25735     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
25736     +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
25737     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25738     +            end;
MPRINT(EM_DIAGRAM):   end;
25739     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25740     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
25741     +                  _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
25742     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25743     +               end;
MPRINT(EM_DIAGRAM):   end;
25744     +            end;
MPRINT(EM_DIAGRAM):   end;
25745     +         end;
MPRINT(EM_DIAGRAM):   end;
25746     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25747     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
25748     +               _4_10 = 1;
MPRINT(EM_DIAGRAM):   _4_10 = 1;
25749     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25750     +            end;
MPRINT(EM_DIAGRAM):   end;
25751     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25752     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
25753     +                  _4_11 = 1;
MPRINT(EM_DIAGRAM):   _4_11 = 1;
25754     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25755     +               end;
MPRINT(EM_DIAGRAM):   end;
25756     +            end;
MPRINT(EM_DIAGRAM):   end;
25757     +         end;
MPRINT(EM_DIAGRAM):   end;
25758     +      end;
MPRINT(EM_DIAGRAM):   end;
25759     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25760     +         if _dm12 <= '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '13' then do;
25761     +            if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '12' then do;
25762     +               _4_12 = 1;
MPRINT(EM_DIAGRAM):   _4_12 = 1;
25763     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25764     +            end;
MPRINT(EM_DIAGRAM):   end;
25765     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25766     +               if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '13' then do;
25767     +                  _4_13 = 1;
MPRINT(EM_DIAGRAM):   _4_13 = 1;
25768     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25769     +               end;
MPRINT(EM_DIAGRAM):   end;
25770     +            end;
MPRINT(EM_DIAGRAM):   end;
25771     +         end;
MPRINT(EM_DIAGRAM):   end;
25772     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25773     +            if _dm12 = '14'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '14' then do;
25774     +               _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
25775     +               _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
25776     +               _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
25777     +               _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
25778     +               _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
25779     +               _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
25780     +               _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
25781     +               _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
25782     +               _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
25783     +               _4_9 = -1;
MPRINT(EM_DIAGRAM):   _4_9 = -1;
25784     +               _4_10 = -1;
MPRINT(EM_DIAGRAM):   _4_10 = -1;
25785     +               _4_11 = -1;
MPRINT(EM_DIAGRAM):   _4_11 = -1;
25786     +               _4_12 = -1;
MPRINT(EM_DIAGRAM):   _4_12 = -1;
25787     +               _4_13 = -1;
MPRINT(EM_DIAGRAM):   _4_13 = -1;
25788     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25789     +            end;
MPRINT(EM_DIAGRAM):   end;
25790     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25791     +               if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
25792     +                  _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
25793     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25794     +               end;
MPRINT(EM_DIAGRAM):   end;
25795     +            end;
MPRINT(EM_DIAGRAM):   end;
25796     +         end;
MPRINT(EM_DIAGRAM):   end;
25797     +      end;
MPRINT(EM_DIAGRAM):   end;
25798     +   end;
MPRINT(EM_DIAGRAM):   end;
25799     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25800     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
25801     +         if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
25802     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
25803     +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
25804     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25805     +            end;
MPRINT(EM_DIAGRAM):   end;
25806     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25807     +               if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
25808     +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
25809     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25810     +               end;
MPRINT(EM_DIAGRAM):   end;
25811     +            end;
MPRINT(EM_DIAGRAM):   end;
25812     +         end;
MPRINT(EM_DIAGRAM):   end;
25813     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25814     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
25815     +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
25816     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25817     +            end;
MPRINT(EM_DIAGRAM):   end;
25818     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25819     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
25820     +                  _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
25821     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25822     +               end;
MPRINT(EM_DIAGRAM):   end;
25823     +            end;
MPRINT(EM_DIAGRAM):   end;
25824     +         end;
MPRINT(EM_DIAGRAM):   end;
25825     +      end;
MPRINT(EM_DIAGRAM):   end;
25826     +      else do;
MPRINT(EM_DIAGRAM):   else do;
25827     +         if _dm12 <= '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '8' then do;
25828     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
25829     +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
25830     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25831     +            end;
MPRINT(EM_DIAGRAM):   end;
25832     +            else do;
MPRINT(EM_DIAGRAM):   else do;
25833     +               if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
25834     +                  _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
25835     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25836     +               end;
MPRINT(EM_DIAGRAM):   end;
25837     +            end;
MPRINT(EM_DIAGRAM):   end;
25838     +         end;
MPRINT(EM_DIAGRAM):   end;
25839     +         else do;
MPRINT(EM_DIAGRAM):   else do;
25840     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
25841     +               _4_9 = 1;
MPRINT(EM_DIAGRAM):   _4_9 = 1;
25842     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
25843     +            end;
MPRINT(EM_DIAGRAM):   end;
25844     +         end;
MPRINT(EM_DIAGRAM):   end;
25845     +      end;
MPRINT(EM_DIAGRAM):   end;
25846     +   end;
MPRINT(EM_DIAGRAM):   end;
25847     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
25848     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
25849     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
25850     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
25851     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
25852     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
25853     +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
25854     +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
25855     +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
25856     +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
25857     +      _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
25858     +      _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
25859     +      _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
25860     +      _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
25861     +      _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
25862     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25863     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25864     +   end;
MPRINT(EM_DIAGRAM):   end;
25865     +end;
MPRINT(EM_DIAGRAM):   end;
25866     +
25867     +*** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
25868     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
25869     +if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
25870     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
25871     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
25872     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25873     +end;
MPRINT(EM_DIAGRAM):   end;
25874     +else do;
MPRINT(EM_DIAGRAM):   else do;
25875     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
25876     +   %DMNORMCP( IMP_REASON , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
25877     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
25878     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
25879     +   end;
MPRINT(EM_DIAGRAM):   end;
25880     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
25881     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
25882     +   end;
MPRINT(EM_DIAGRAM):   end;
25883     +   else do;
MPRINT(EM_DIAGRAM):   else do;
25884     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
25885     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
25886     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
25887     +   end;
MPRINT(EM_DIAGRAM):   end;
25888     +end;
MPRINT(EM_DIAGRAM):   end;
25889     +
25890     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
25891     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
25892     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
25893     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
25894     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
25895     +end;
MPRINT(EM_DIAGRAM):   end;
25896     +
25897     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
25898     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
25899     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
25900     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
25901     +
25902     +***  Effect: IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEBTINC ;
25903     +_TEMP = IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_DEBTINC ;
25904     +_LP0 = _LP0 + (    0.02289913858542 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02289913858542 * _TEMP);
25905     +
25906     +***  Effect: IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DELINQ ;
25907     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25908     +_LP0 = _LP0 + (   -6.36810610762426) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.36810610762426) * _TEMP * _1_0;
25909     +_LP0 = _LP0 + (     -5.514049956722) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.514049956722) * _TEMP * _1_1;
25910     +_LP0 = _LP0 + (    -5.2843695033657) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.2843695033657) * _TEMP * _1_2;
25911     +_LP0 = _LP0 + (   -4.33915431549382) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.33915431549382) * _TEMP * _1_3;
25912     +_LP0 = _LP0 + (   -4.25984995623968) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.25984995623968) * _TEMP * _1_4;
25913     +_LP0 = _LP0 + (   -3.28507383244363) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.28507383244363) * _TEMP * _1_5;
25914     +_LP0 = _LP0 + (   -3.09323594638332) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.09323594638332) * _TEMP * _1_6;
25915     +_LP0 = _LP0 + (   -3.18770351982685) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.18770351982685) * _TEMP * _1_7;
25916     +_LP0 = _LP0 + (    5.82333407130081) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.82333407130081) * _TEMP * _1_8;
25917     +_LP0 = _LP0 + (    5.70394237244294) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.70394237244294) * _TEMP * _1_9;
25918     +_LP0 = _LP0 + (     6.2858432496825) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.2858432496825) * _TEMP * _1_10;
25919     +_LP0 = _LP0 + (    6.38306165550988) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.38306165550988) * _TEMP * _1_11;
25920     +_LP0 = _LP0 + (     6.8109576786943) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.8109576786943) * _TEMP * _1_12;
25921     +
25922     +***  Effect: IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEROG ;
25923     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25924     +_LP0 = _LP0 + (   -2.86735097139464) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.86735097139464) * _TEMP * _2_0;
25925     +_LP0 = _LP0 + (   -2.11874325860727) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.11874325860727) * _TEMP * _2_1;
25926     +_LP0 = _LP0 + (   -1.76350136096206) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.76350136096206) * _TEMP * _2_2;
25927     +_LP0 = _LP0 + (   -0.48813030136529) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48813030136529) * _TEMP * _2_3;
25928     +_LP0 = _LP0 + (   -1.38611408157288) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.38611408157288) * _TEMP * _2_4;
25929     +_LP0 = _LP0 + (   -2.42294775600152) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.42294775600152) * _TEMP * _2_5;
25930     +_LP0 = _LP0 + (   -1.63523498828215) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63523498828215) * _TEMP * _2_6;
25931     +_LP0 = _LP0 + (    6.54670767437824) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.54670767437824) * _TEMP * _2_7;
25932     +_LP0 = _LP0 + (     8.4369694791475) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.4369694791475) * _TEMP * _2_8;
25933     +_LP0 = _LP0 + (   -1.53379076929278) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53379076929278) * _TEMP * _2_9;
25934     +
25935     +***  Effect: IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_JOB ;
25936     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25937     +_LP0 = _LP0 + (    0.03770979332431) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03770979332431) * _TEMP * _3_0;
25938     +_LP0 = _LP0 + (   -0.53848818107953) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53848818107953) * _TEMP * _3_1;
25939     +_LP0 = _LP0 + (    0.01017544415566) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01017544415566) * _TEMP * _3_2;
25940     +_LP0 = _LP0 + (    -0.3275979270872) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3275979270872) * _TEMP * _3_3;
25941     +_LP0 = _LP0 + (    0.93231248131988) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.93231248131988) * _TEMP * _3_4;
25942     +
25943     +***  Effect: IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_NINQ ;
25944     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25945     +_LP0 = _LP0 + (   -3.20142529362903) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.20142529362903) * _TEMP * _4_0;
25946     +_LP0 = _LP0 + (   -2.97761269627832) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97761269627832) * _TEMP * _4_1;
25947     +_LP0 = _LP0 + (    -2.5958928200474) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.5958928200474) * _TEMP * _4_2;
25948     +_LP0 = _LP0 + (   -2.72910725202414) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.72910725202414) * _TEMP * _4_3;
25949     +_LP0 = _LP0 + (   -2.16450819343992) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.16450819343992) * _TEMP * _4_4;
25950     +_LP0 = _LP0 + (    -1.7022775235962) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.7022775235962) * _TEMP * _4_5;
25951     +_LP0 = _LP0 + (   -1.40380406429631) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.40380406429631) * _TEMP * _4_6;
25952     +_LP0 = _LP0 + (    -2.0130731413641) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.0130731413641) * _TEMP * _4_7;
25953     +_LP0 = _LP0 + (   -1.86586169639211) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.86586169639211) * _TEMP * _4_8;
25954     +_LP0 = _LP0 + (   -1.45933464010808) * _TEMP * _4_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.45933464010808) * _TEMP * _4_9;
25955     +_LP0 = _LP0 + (   -2.48147900155389) * _TEMP * _4_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.48147900155389) * _TEMP * _4_10;
25956     +_LP0 = _LP0 + (   -2.84845528171252) * _TEMP * _4_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.84845528171252) * _TEMP * _4_11;
25957     +_LP0 = _LP0 + (    8.80778823729157) * _TEMP * _4_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.80778823729157) * _TEMP * _4_12;
25958     +_LP0 = _LP0 + (    9.69207784540914) * _TEMP * _4_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.69207784540914) * _TEMP * _4_13;
25959     +
25960     +***  Effect: IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_REASON ;
25961     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
25962     +_LP0 = _LP0 + (   -0.16946157702693) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16946157702693) * _TEMP * _5_0;
25963     +
25964     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
25965     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
25966     +_TEMP =     9.55572185479483 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.55572185479483 + _LP0;
25967     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
25968     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
25969     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
25970     +end;
MPRINT(EM_DIAGRAM):   end;
25971     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
25972     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
25973     +
25974     +REG2DR1:
25975     +
25976     +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
25977     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
25978     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25979     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25980     +end;
MPRINT(EM_DIAGRAM):   end;
25981     +else do;
MPRINT(EM_DIAGRAM):   else do;
25982     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
25983     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
25984     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
25985     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
25986     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
25987     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
25988     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
25989     +   end;
MPRINT(EM_DIAGRAM):   end;
25990     +end;
MPRINT(EM_DIAGRAM):   end;
25991     +
25992     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
25993     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
25994     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
25995     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
25996     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
25997     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
25998     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
25999     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
26000     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
26001     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
26002     +end;
MPRINT(EM_DIAGRAM):   end;
26003     +I_BAD = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REG2DRF[_IY];
26004     +U_BAD = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG2DRU[_IY];
26005     +
26006     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
26007     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
26008     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
26009      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
26010      quit;
26011      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
26012      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26013      *------------------------------------------------------------*;
26014      * Reg2: Scoring TEST data;
26015      *------------------------------------------------------------*;
26016      data EMWS1.Reg2_TEST
26017      / view=EMWS1.Reg2_TEST
26018      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_TEST / view=EMWS1.Reg2_TEST ;
26019      set EMWS1.Impt_TEST
26020      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Impt_TEST ;
26021      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMFLOWSCORE.sas.
26022     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
26023     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
26024     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
26025     +
26026     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
26027     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
26028     +
26029     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
26030     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
26031     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
26032     +array REG2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REG2DRF [2] $12 _temporary_ ('1' '0' );
26033     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
26034     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
26035     +ARRAY REG2DRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REG2DRU[2] _TEMPORARY_ (1 0);
26036     +
26037     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
26038     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
26039     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
26040     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
26041     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
26042     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
26043     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
26044     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
26045     +end;
MPRINT(EM_DIAGRAM):   end;
26046     +else do;
MPRINT(EM_DIAGRAM):   else do;
26047     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
26048     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
26049     +   end;
MPRINT(EM_DIAGRAM):   end;
26050     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
26051     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
26052     +   end;
MPRINT(EM_DIAGRAM):   end;
26053     +   else do;
MPRINT(EM_DIAGRAM):   else do;
26054     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
26055     +   end;
MPRINT(EM_DIAGRAM):   end;
26056     +end;
MPRINT(EM_DIAGRAM):   end;
26057     +
26058     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
26059     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
26060     +
26061     +*** Check IMP_DEBTINC for missing values ;
MPRINT(EM_DIAGRAM):   *** Check IMP_DEBTINC for missing values ;
26062     +if missing( IMP_DEBTINC ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEBTINC ) then do;
26063     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
26064     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26065     +end;
MPRINT(EM_DIAGRAM):   end;
26066     +
26067     +*** Generate dummy variables for IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DELINQ ;
26068     +drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 _1_2 _1_3 _1_4 _1_5 _1_6 _1_7 _1_8 _1_9 _1_10 _1_11 _1_12 ;
26069     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
26070     +_1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
26071     +_1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
26072     +_1_2 = 0;
MPRINT(EM_DIAGRAM):   _1_2 = 0;
26073     +_1_3 = 0;
MPRINT(EM_DIAGRAM):   _1_3 = 0;
26074     +_1_4 = 0;
MPRINT(EM_DIAGRAM):   _1_4 = 0;
26075     +_1_5 = 0;
MPRINT(EM_DIAGRAM):   _1_5 = 0;
26076     +_1_6 = 0;
MPRINT(EM_DIAGRAM):   _1_6 = 0;
26077     +_1_7 = 0;
MPRINT(EM_DIAGRAM):   _1_7 = 0;
26078     +_1_8 = 0;
MPRINT(EM_DIAGRAM):   _1_8 = 0;
26079     +_1_9 = 0;
MPRINT(EM_DIAGRAM):   _1_9 = 0;
26080     +_1_10 = 0;
MPRINT(EM_DIAGRAM):   _1_10 = 0;
26081     +_1_11 = 0;
MPRINT(EM_DIAGRAM):   _1_11 = 0;
26082     +_1_12 = 0;
MPRINT(EM_DIAGRAM):   _1_12 = 0;
26083     +if missing( IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DELINQ ) then do;
26084     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
26085     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
26086     +   _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
26087     +   _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
26088     +   _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
26089     +   _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
26090     +   _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
26091     +   _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
26092     +   _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
26093     +   _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
26094     +   _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
26095     +   _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
26096     +   _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
26097     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
26098     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26099     +end;
MPRINT(EM_DIAGRAM):   end;
26100     +else do;
MPRINT(EM_DIAGRAM):   else do;
26101     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
26102     +   _dm12 = put( IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DELINQ , BEST12. );
26103     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
26104     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
26105     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
26106     +   end;
MPRINT(EM_DIAGRAM):   end;
26107     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
26108     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
26109     +   end;
MPRINT(EM_DIAGRAM):   end;
26110     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
26111     +      _1_2 = 1;
MPRINT(EM_DIAGRAM):   _1_2 = 1;
26112     +   end;
MPRINT(EM_DIAGRAM):   end;
26113     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
26114     +      _1_3 = 1;
MPRINT(EM_DIAGRAM):   _1_3 = 1;
26115     +   end;
MPRINT(EM_DIAGRAM):   end;
26116     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
26117     +      _1_4 = 1;
MPRINT(EM_DIAGRAM):   _1_4 = 1;
26118     +   end;
MPRINT(EM_DIAGRAM):   end;
26119     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
26120     +      _1_6 = 1;
MPRINT(EM_DIAGRAM):   _1_6 = 1;
26121     +   end;
MPRINT(EM_DIAGRAM):   end;
26122     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
26123     +      _1_5 = 1;
MPRINT(EM_DIAGRAM):   _1_5 = 1;
26124     +   end;
MPRINT(EM_DIAGRAM):   end;
26125     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
26126     +      _1_7 = 1;
MPRINT(EM_DIAGRAM):   _1_7 = 1;
26127     +   end;
MPRINT(EM_DIAGRAM):   end;
26128     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
26129     +      _1_8 = 1;
MPRINT(EM_DIAGRAM):   _1_8 = 1;
26130     +   end;
MPRINT(EM_DIAGRAM):   end;
26131     +   else if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '11' then do;
26132     +      _1_10 = 1;
MPRINT(EM_DIAGRAM):   _1_10 = 1;
26133     +   end;
MPRINT(EM_DIAGRAM):   end;
26134     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
26135     +      _1_9 = 1;
MPRINT(EM_DIAGRAM):   _1_9 = 1;
26136     +   end;
MPRINT(EM_DIAGRAM):   end;
26137     +   else if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '12' then do;
26138     +      _1_11 = 1;
MPRINT(EM_DIAGRAM):   _1_11 = 1;
26139     +   end;
MPRINT(EM_DIAGRAM):   end;
26140     +   else if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '13' then do;
26141     +      _1_12 = 1;
MPRINT(EM_DIAGRAM):   _1_12 = 1;
26142     +   end;
MPRINT(EM_DIAGRAM):   end;
26143     +   else if _dm12 = '15'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '15' then do;
26144     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
26145     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
26146     +      _1_2 = -1;
MPRINT(EM_DIAGRAM):   _1_2 = -1;
26147     +      _1_3 = -1;
MPRINT(EM_DIAGRAM):   _1_3 = -1;
26148     +      _1_4 = -1;
MPRINT(EM_DIAGRAM):   _1_4 = -1;
26149     +      _1_5 = -1;
MPRINT(EM_DIAGRAM):   _1_5 = -1;
26150     +      _1_6 = -1;
MPRINT(EM_DIAGRAM):   _1_6 = -1;
26151     +      _1_7 = -1;
MPRINT(EM_DIAGRAM):   _1_7 = -1;
26152     +      _1_8 = -1;
MPRINT(EM_DIAGRAM):   _1_8 = -1;
26153     +      _1_9 = -1;
MPRINT(EM_DIAGRAM):   _1_9 = -1;
26154     +      _1_10 = -1;
MPRINT(EM_DIAGRAM):   _1_10 = -1;
26155     +      _1_11 = -1;
MPRINT(EM_DIAGRAM):   _1_11 = -1;
26156     +      _1_12 = -1;
MPRINT(EM_DIAGRAM):   _1_12 = -1;
26157     +   end;
MPRINT(EM_DIAGRAM):   end;
26158     +   else do;
MPRINT(EM_DIAGRAM):   else do;
26159     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
26160     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
26161     +      _1_2 = .;
MPRINT(EM_DIAGRAM):   _1_2 = .;
26162     +      _1_3 = .;
MPRINT(EM_DIAGRAM):   _1_3 = .;
26163     +      _1_4 = .;
MPRINT(EM_DIAGRAM):   _1_4 = .;
26164     +      _1_5 = .;
MPRINT(EM_DIAGRAM):   _1_5 = .;
26165     +      _1_6 = .;
MPRINT(EM_DIAGRAM):   _1_6 = .;
26166     +      _1_7 = .;
MPRINT(EM_DIAGRAM):   _1_7 = .;
26167     +      _1_8 = .;
MPRINT(EM_DIAGRAM):   _1_8 = .;
26168     +      _1_9 = .;
MPRINT(EM_DIAGRAM):   _1_9 = .;
26169     +      _1_10 = .;
MPRINT(EM_DIAGRAM):   _1_10 = .;
26170     +      _1_11 = .;
MPRINT(EM_DIAGRAM):   _1_11 = .;
26171     +      _1_12 = .;
MPRINT(EM_DIAGRAM):   _1_12 = .;
26172     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
26173     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26174     +   end;
MPRINT(EM_DIAGRAM):   end;
26175     +end;
MPRINT(EM_DIAGRAM):   end;
26176     +
26177     +*** Generate dummy variables for IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_DEROG ;
26178     +drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 _2_2 _2_3 _2_4 _2_5 _2_6 _2_7 _2_8 _2_9 ;
26179     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
26180     +_2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
26181     +_2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
26182     +_2_2 = 0;
MPRINT(EM_DIAGRAM):   _2_2 = 0;
26183     +_2_3 = 0;
MPRINT(EM_DIAGRAM):   _2_3 = 0;
26184     +_2_4 = 0;
MPRINT(EM_DIAGRAM):   _2_4 = 0;
26185     +_2_5 = 0;
MPRINT(EM_DIAGRAM):   _2_5 = 0;
26186     +_2_6 = 0;
MPRINT(EM_DIAGRAM):   _2_6 = 0;
26187     +_2_7 = 0;
MPRINT(EM_DIAGRAM):   _2_7 = 0;
26188     +_2_8 = 0;
MPRINT(EM_DIAGRAM):   _2_8 = 0;
26189     +_2_9 = 0;
MPRINT(EM_DIAGRAM):   _2_9 = 0;
26190     +if missing( IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_DEROG ) then do;
26191     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
26192     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
26193     +   _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
26194     +   _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
26195     +   _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
26196     +   _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
26197     +   _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
26198     +   _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
26199     +   _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
26200     +   _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
26201     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
26202     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26203     +end;
MPRINT(EM_DIAGRAM):   end;
26204     +else do;
MPRINT(EM_DIAGRAM):   else do;
26205     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
26206     +   _dm12 = put( IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_DEROG , BEST12. );
26207     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
26208     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
26209     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
26210     +   end;
MPRINT(EM_DIAGRAM):   end;
26211     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
26212     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
26213     +   end;
MPRINT(EM_DIAGRAM):   end;
26214     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
26215     +      _2_2 = 1;
MPRINT(EM_DIAGRAM):   _2_2 = 1;
26216     +   end;
MPRINT(EM_DIAGRAM):   end;
26217     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
26218     +      _2_3 = 1;
MPRINT(EM_DIAGRAM):   _2_3 = 1;
26219     +   end;
MPRINT(EM_DIAGRAM):   end;
26220     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
26221     +      _2_4 = 1;
MPRINT(EM_DIAGRAM):   _2_4 = 1;
26222     +   end;
MPRINT(EM_DIAGRAM):   end;
26223     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
26224     +      _2_5 = 1;
MPRINT(EM_DIAGRAM):   _2_5 = 1;
26225     +   end;
MPRINT(EM_DIAGRAM):   end;
26226     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
26227     +      _2_6 = 1;
MPRINT(EM_DIAGRAM):   _2_6 = 1;
26228     +   end;
MPRINT(EM_DIAGRAM):   end;
26229     +   else if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '7' then do;
26230     +      _2_7 = 1;
MPRINT(EM_DIAGRAM):   _2_7 = 1;
26231     +   end;
MPRINT(EM_DIAGRAM):   end;
26232     +   else if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '8' then do;
26233     +      _2_8 = 1;
MPRINT(EM_DIAGRAM):   _2_8 = 1;
26234     +   end;
MPRINT(EM_DIAGRAM):   end;
26235     +   else if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '10' then do;
26236     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
26237     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
26238     +      _2_2 = -1;
MPRINT(EM_DIAGRAM):   _2_2 = -1;
26239     +      _2_3 = -1;
MPRINT(EM_DIAGRAM):   _2_3 = -1;
26240     +      _2_4 = -1;
MPRINT(EM_DIAGRAM):   _2_4 = -1;
26241     +      _2_5 = -1;
MPRINT(EM_DIAGRAM):   _2_5 = -1;
26242     +      _2_6 = -1;
MPRINT(EM_DIAGRAM):   _2_6 = -1;
26243     +      _2_7 = -1;
MPRINT(EM_DIAGRAM):   _2_7 = -1;
26244     +      _2_8 = -1;
MPRINT(EM_DIAGRAM):   _2_8 = -1;
26245     +      _2_9 = -1;
MPRINT(EM_DIAGRAM):   _2_9 = -1;
26246     +   end;
MPRINT(EM_DIAGRAM):   end;
26247     +   else if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '9' then do;
26248     +      _2_9 = 1;
MPRINT(EM_DIAGRAM):   _2_9 = 1;
26249     +   end;
MPRINT(EM_DIAGRAM):   end;
26250     +   else do;
MPRINT(EM_DIAGRAM):   else do;
26251     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
26252     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
26253     +      _2_2 = .;
MPRINT(EM_DIAGRAM):   _2_2 = .;
26254     +      _2_3 = .;
MPRINT(EM_DIAGRAM):   _2_3 = .;
26255     +      _2_4 = .;
MPRINT(EM_DIAGRAM):   _2_4 = .;
26256     +      _2_5 = .;
MPRINT(EM_DIAGRAM):   _2_5 = .;
26257     +      _2_6 = .;
MPRINT(EM_DIAGRAM):   _2_6 = .;
26258     +      _2_7 = .;
MPRINT(EM_DIAGRAM):   _2_7 = .;
26259     +      _2_8 = .;
MPRINT(EM_DIAGRAM):   _2_8 = .;
26260     +      _2_9 = .;
MPRINT(EM_DIAGRAM):   _2_9 = .;
26261     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
26262     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26263     +   end;
MPRINT(EM_DIAGRAM):   end;
26264     +end;
MPRINT(EM_DIAGRAM):   end;
26265     +
26266     +*** Generate dummy variables for IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_JOB ;
26267     +drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
MPRINT(EM_DIAGRAM):   drop _3_0 _3_1 _3_2 _3_3 _3_4 ;
26268     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
26269     +_3_0 = 0;
MPRINT(EM_DIAGRAM):   _3_0 = 0;
26270     +_3_1 = 0;
MPRINT(EM_DIAGRAM):   _3_1 = 0;
26271     +_3_2 = 0;
MPRINT(EM_DIAGRAM):   _3_2 = 0;
26272     +_3_3 = 0;
MPRINT(EM_DIAGRAM):   _3_3 = 0;
26273     +_3_4 = 0;
MPRINT(EM_DIAGRAM):   _3_4 = 0;
26274     +if missing( IMP_JOB ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_JOB ) then do;
26275     +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
26276     +   _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
26277     +   _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
26278     +   _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
26279     +   _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
26280     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
26281     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26282     +end;
MPRINT(EM_DIAGRAM):   end;
26283     +else do;
MPRINT(EM_DIAGRAM):   else do;
26284     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
26285     +   %DMNORMCP( IMP_JOB , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_JOB,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
26286     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
26287     +   if _dm7 <= 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OTHER' then do;
26288     +      if _dm7 <= 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'OFFICE' then do;
26289     +         if _dm7 = 'MGR'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'MGR' then do;
26290     +            _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
26291     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26292     +         end;
MPRINT(EM_DIAGRAM):   end;
26293     +         else do;
MPRINT(EM_DIAGRAM):   else do;
26294     +            if _dm7 = 'OFFICE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OFFICE' then do;
26295     +               _3_1 = 1;
MPRINT(EM_DIAGRAM):   _3_1 = 1;
26296     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26297     +            end;
MPRINT(EM_DIAGRAM):   end;
26298     +         end;
MPRINT(EM_DIAGRAM):   end;
26299     +      end;
MPRINT(EM_DIAGRAM):   end;
26300     +      else do;
MPRINT(EM_DIAGRAM):   else do;
26301     +         if _dm7 = 'OTHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'OTHER' then do;
26302     +            _3_2 = 1;
MPRINT(EM_DIAGRAM):   _3_2 = 1;
26303     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26304     +         end;
MPRINT(EM_DIAGRAM):   end;
26305     +      end;
MPRINT(EM_DIAGRAM):   end;
26306     +   end;
MPRINT(EM_DIAGRAM):   end;
26307     +   else do;
MPRINT(EM_DIAGRAM):   else do;
26308     +      if _dm7 <= 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 <= 'SALES' then do;
26309     +         if _dm7 = 'PROFEXE'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'PROFEXE' then do;
26310     +            _3_3 = 1;
MPRINT(EM_DIAGRAM):   _3_3 = 1;
26311     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26312     +         end;
MPRINT(EM_DIAGRAM):   end;
26313     +         else do;
MPRINT(EM_DIAGRAM):   else do;
26314     +            if _dm7 = 'SALES'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SALES' then do;
26315     +               _3_4 = 1;
MPRINT(EM_DIAGRAM):   _3_4 = 1;
26316     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26317     +            end;
MPRINT(EM_DIAGRAM):   end;
26318     +         end;
MPRINT(EM_DIAGRAM):   end;
26319     +      end;
MPRINT(EM_DIAGRAM):   end;
26320     +      else do;
MPRINT(EM_DIAGRAM):   else do;
26321     +         if _dm7 = 'SELF'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'SELF' then do;
26322     +            _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
26323     +            _3_1 = -1;
MPRINT(EM_DIAGRAM):   _3_1 = -1;
26324     +            _3_2 = -1;
MPRINT(EM_DIAGRAM):   _3_2 = -1;
26325     +            _3_3 = -1;
MPRINT(EM_DIAGRAM):   _3_3 = -1;
26326     +            _3_4 = -1;
MPRINT(EM_DIAGRAM):   _3_4 = -1;
26327     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26328     +         end;
MPRINT(EM_DIAGRAM):   end;
26329     +      end;
MPRINT(EM_DIAGRAM):   end;
26330     +   end;
MPRINT(EM_DIAGRAM):   end;
26331     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
26332     +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
26333     +      _3_1 = .;
MPRINT(EM_DIAGRAM):   _3_1 = .;
26334     +      _3_2 = .;
MPRINT(EM_DIAGRAM):   _3_2 = .;
26335     +      _3_3 = .;
MPRINT(EM_DIAGRAM):   _3_3 = .;
26336     +      _3_4 = .;
MPRINT(EM_DIAGRAM):   _3_4 = .;
26337     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
26338     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26339     +   end;
MPRINT(EM_DIAGRAM):   end;
26340     +end;
MPRINT(EM_DIAGRAM):   end;
26341     +
26342     +*** Generate dummy variables for IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_NINQ ;
26343     +drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13
26344     +         ;
MPRINT(EM_DIAGRAM):   drop _4_0 _4_1 _4_2 _4_3 _4_4 _4_5 _4_6 _4_7 _4_8 _4_9 _4_10 _4_11 _4_12 _4_13 ;
26345     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
26346     +_4_0 = 0;
MPRINT(EM_DIAGRAM):   _4_0 = 0;
26347     +_4_1 = 0;
MPRINT(EM_DIAGRAM):   _4_1 = 0;
26348     +_4_2 = 0;
MPRINT(EM_DIAGRAM):   _4_2 = 0;
26349     +_4_3 = 0;
MPRINT(EM_DIAGRAM):   _4_3 = 0;
26350     +_4_4 = 0;
MPRINT(EM_DIAGRAM):   _4_4 = 0;
26351     +_4_5 = 0;
MPRINT(EM_DIAGRAM):   _4_5 = 0;
26352     +_4_6 = 0;
MPRINT(EM_DIAGRAM):   _4_6 = 0;
26353     +_4_7 = 0;
MPRINT(EM_DIAGRAM):   _4_7 = 0;
26354     +_4_8 = 0;
MPRINT(EM_DIAGRAM):   _4_8 = 0;
26355     +_4_9 = 0;
MPRINT(EM_DIAGRAM):   _4_9 = 0;
26356     +_4_10 = 0;
MPRINT(EM_DIAGRAM):   _4_10 = 0;
26357     +_4_11 = 0;
MPRINT(EM_DIAGRAM):   _4_11 = 0;
26358     +_4_12 = 0;
MPRINT(EM_DIAGRAM):   _4_12 = 0;
26359     +_4_13 = 0;
MPRINT(EM_DIAGRAM):   _4_13 = 0;
26360     +if missing( IMP_NINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_NINQ ) then do;
26361     +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
26362     +   _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
26363     +   _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
26364     +   _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
26365     +   _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
26366     +   _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
26367     +   _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
26368     +   _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
26369     +   _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
26370     +   _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
26371     +   _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
26372     +   _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
26373     +   _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
26374     +   _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
26375     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
26376     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26377     +end;
MPRINT(EM_DIAGRAM):   end;
26378     +else do;
MPRINT(EM_DIAGRAM):   else do;
26379     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
26380     +   _dm12 = put( IMP_NINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( IMP_NINQ , BEST12. );
26381     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
26382     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
26383     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
26384     +      if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
26385     +         if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
26386     +            if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
26387     +               _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
26388     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26389     +            end;
MPRINT(EM_DIAGRAM):   end;
26390     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26391     +               if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
26392     +                  _4_1 = 1;
MPRINT(EM_DIAGRAM):   _4_1 = 1;
26393     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26394     +               end;
MPRINT(EM_DIAGRAM):   end;
26395     +            end;
MPRINT(EM_DIAGRAM):   end;
26396     +         end;
MPRINT(EM_DIAGRAM):   end;
26397     +         else do;
MPRINT(EM_DIAGRAM):   else do;
26398     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
26399     +               _4_10 = 1;
MPRINT(EM_DIAGRAM):   _4_10 = 1;
26400     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26401     +            end;
MPRINT(EM_DIAGRAM):   end;
26402     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26403     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
26404     +                  _4_11 = 1;
MPRINT(EM_DIAGRAM):   _4_11 = 1;
26405     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26406     +               end;
MPRINT(EM_DIAGRAM):   end;
26407     +            end;
MPRINT(EM_DIAGRAM):   end;
26408     +         end;
MPRINT(EM_DIAGRAM):   end;
26409     +      end;
MPRINT(EM_DIAGRAM):   end;
26410     +      else do;
MPRINT(EM_DIAGRAM):   else do;
26411     +         if _dm12 <= '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '13' then do;
26412     +            if _dm12 = '12'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '12' then do;
26413     +               _4_12 = 1;
MPRINT(EM_DIAGRAM):   _4_12 = 1;
26414     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26415     +            end;
MPRINT(EM_DIAGRAM):   end;
26416     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26417     +               if _dm12 = '13'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '13' then do;
26418     +                  _4_13 = 1;
MPRINT(EM_DIAGRAM):   _4_13 = 1;
26419     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26420     +               end;
MPRINT(EM_DIAGRAM):   end;
26421     +            end;
MPRINT(EM_DIAGRAM):   end;
26422     +         end;
MPRINT(EM_DIAGRAM):   end;
26423     +         else do;
MPRINT(EM_DIAGRAM):   else do;
26424     +            if _dm12 = '14'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '14' then do;
26425     +               _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
26426     +               _4_1 = -1;
MPRINT(EM_DIAGRAM):   _4_1 = -1;
26427     +               _4_2 = -1;
MPRINT(EM_DIAGRAM):   _4_2 = -1;
26428     +               _4_3 = -1;
MPRINT(EM_DIAGRAM):   _4_3 = -1;
26429     +               _4_4 = -1;
MPRINT(EM_DIAGRAM):   _4_4 = -1;
26430     +               _4_5 = -1;
MPRINT(EM_DIAGRAM):   _4_5 = -1;
26431     +               _4_6 = -1;
MPRINT(EM_DIAGRAM):   _4_6 = -1;
26432     +               _4_7 = -1;
MPRINT(EM_DIAGRAM):   _4_7 = -1;
26433     +               _4_8 = -1;
MPRINT(EM_DIAGRAM):   _4_8 = -1;
26434     +               _4_9 = -1;
MPRINT(EM_DIAGRAM):   _4_9 = -1;
26435     +               _4_10 = -1;
MPRINT(EM_DIAGRAM):   _4_10 = -1;
26436     +               _4_11 = -1;
MPRINT(EM_DIAGRAM):   _4_11 = -1;
26437     +               _4_12 = -1;
MPRINT(EM_DIAGRAM):   _4_12 = -1;
26438     +               _4_13 = -1;
MPRINT(EM_DIAGRAM):   _4_13 = -1;
26439     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26440     +            end;
MPRINT(EM_DIAGRAM):   end;
26441     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26442     +               if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
26443     +                  _4_2 = 1;
MPRINT(EM_DIAGRAM):   _4_2 = 1;
26444     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26445     +               end;
MPRINT(EM_DIAGRAM):   end;
26446     +            end;
MPRINT(EM_DIAGRAM):   end;
26447     +         end;
MPRINT(EM_DIAGRAM):   end;
26448     +      end;
MPRINT(EM_DIAGRAM):   end;
26449     +   end;
MPRINT(EM_DIAGRAM):   end;
26450     +   else do;
MPRINT(EM_DIAGRAM):   else do;
26451     +      if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
26452     +         if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
26453     +            if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
26454     +               _4_3 = 1;
MPRINT(EM_DIAGRAM):   _4_3 = 1;
26455     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26456     +            end;
MPRINT(EM_DIAGRAM):   end;
26457     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26458     +               if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
26459     +                  _4_4 = 1;
MPRINT(EM_DIAGRAM):   _4_4 = 1;
26460     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26461     +               end;
MPRINT(EM_DIAGRAM):   end;
26462     +            end;
MPRINT(EM_DIAGRAM):   end;
26463     +         end;
MPRINT(EM_DIAGRAM):   end;
26464     +         else do;
MPRINT(EM_DIAGRAM):   else do;
26465     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
26466     +               _4_5 = 1;
MPRINT(EM_DIAGRAM):   _4_5 = 1;
26467     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26468     +            end;
MPRINT(EM_DIAGRAM):   end;
26469     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26470     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
26471     +                  _4_6 = 1;
MPRINT(EM_DIAGRAM):   _4_6 = 1;
26472     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26473     +               end;
MPRINT(EM_DIAGRAM):   end;
26474     +            end;
MPRINT(EM_DIAGRAM):   end;
26475     +         end;
MPRINT(EM_DIAGRAM):   end;
26476     +      end;
MPRINT(EM_DIAGRAM):   end;
26477     +      else do;
MPRINT(EM_DIAGRAM):   else do;
26478     +         if _dm12 <= '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '8' then do;
26479     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
26480     +               _4_7 = 1;
MPRINT(EM_DIAGRAM):   _4_7 = 1;
26481     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26482     +            end;
MPRINT(EM_DIAGRAM):   end;
26483     +            else do;
MPRINT(EM_DIAGRAM):   else do;
26484     +               if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
26485     +                  _4_8 = 1;
MPRINT(EM_DIAGRAM):   _4_8 = 1;
26486     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26487     +               end;
MPRINT(EM_DIAGRAM):   end;
26488     +            end;
MPRINT(EM_DIAGRAM):   end;
26489     +         end;
MPRINT(EM_DIAGRAM):   end;
26490     +         else do;
MPRINT(EM_DIAGRAM):   else do;
26491     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
26492     +               _4_9 = 1;
MPRINT(EM_DIAGRAM):   _4_9 = 1;
26493     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
26494     +            end;
MPRINT(EM_DIAGRAM):   end;
26495     +         end;
MPRINT(EM_DIAGRAM):   end;
26496     +      end;
MPRINT(EM_DIAGRAM):   end;
26497     +   end;
MPRINT(EM_DIAGRAM):   end;
26498     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
26499     +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
26500     +      _4_1 = .;
MPRINT(EM_DIAGRAM):   _4_1 = .;
26501     +      _4_2 = .;
MPRINT(EM_DIAGRAM):   _4_2 = .;
26502     +      _4_3 = .;
MPRINT(EM_DIAGRAM):   _4_3 = .;
26503     +      _4_4 = .;
MPRINT(EM_DIAGRAM):   _4_4 = .;
26504     +      _4_5 = .;
MPRINT(EM_DIAGRAM):   _4_5 = .;
26505     +      _4_6 = .;
MPRINT(EM_DIAGRAM):   _4_6 = .;
26506     +      _4_7 = .;
MPRINT(EM_DIAGRAM):   _4_7 = .;
26507     +      _4_8 = .;
MPRINT(EM_DIAGRAM):   _4_8 = .;
26508     +      _4_9 = .;
MPRINT(EM_DIAGRAM):   _4_9 = .;
26509     +      _4_10 = .;
MPRINT(EM_DIAGRAM):   _4_10 = .;
26510     +      _4_11 = .;
MPRINT(EM_DIAGRAM):   _4_11 = .;
26511     +      _4_12 = .;
MPRINT(EM_DIAGRAM):   _4_12 = .;
26512     +      _4_13 = .;
MPRINT(EM_DIAGRAM):   _4_13 = .;
26513     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
26514     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26515     +   end;
MPRINT(EM_DIAGRAM):   end;
26516     +end;
MPRINT(EM_DIAGRAM):   end;
26517     +
26518     +*** Generate dummy variables for IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for IMP_REASON ;
26519     +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
26520     +if missing( IMP_REASON ) then do;
MPRINT(EM_DIAGRAM):   if missing( IMP_REASON ) then do;
26521     +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
26522     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
26523     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26524     +end;
MPRINT(EM_DIAGRAM):   end;
26525     +else do;
MPRINT(EM_DIAGRAM):   else do;
26526     +   length _dm7 $ 7; drop _dm7 ;
MPRINT(EM_DIAGRAM):   length _dm7 $ 7;
MPRINT(EM_DIAGRAM):   drop _dm7 ;
26527     +   %DMNORMCP( IMP_REASON , _dm7 )
MPRINT(DMNORMCP):   _dm7=dmnorm(IMP_REASON,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
26528     +   if _dm7 = 'DEBTCON'  then do;
MPRINT(EM_DIAGRAM):   if _dm7 = 'DEBTCON' then do;
26529     +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
26530     +   end;
MPRINT(EM_DIAGRAM):   end;
26531     +   else if _dm7 = 'HOMEIMP'  then do;
MPRINT(EM_DIAGRAM):   else if _dm7 = 'HOMEIMP' then do;
26532     +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
26533     +   end;
MPRINT(EM_DIAGRAM):   end;
26534     +   else do;
MPRINT(EM_DIAGRAM):   else do;
26535     +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
26536     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
26537     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
26538     +   end;
MPRINT(EM_DIAGRAM):   end;
26539     +end;
MPRINT(EM_DIAGRAM):   end;
26540     +
26541     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
26542     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
26543     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
26544     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
26545     +   goto REG2DR1;
MPRINT(EM_DIAGRAM):   goto REG2DR1;
26546     +end;
MPRINT(EM_DIAGRAM):   end;
26547     +
26548     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
26549     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
26550     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
26551     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
26552     +
26553     +***  Effect: IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEBTINC ;
26554     +_TEMP = IMP_DEBTINC ;
MPRINT(EM_DIAGRAM):   _TEMP = IMP_DEBTINC ;
26555     +_LP0 = _LP0 + (    0.02289913858542 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.02289913858542 * _TEMP);
26556     +
26557     +***  Effect: IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DELINQ ;
26558     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
26559     +_LP0 = _LP0 + (   -6.36810610762426) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -6.36810610762426) * _TEMP * _1_0;
26560     +_LP0 = _LP0 + (     -5.514049956722) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.514049956722) * _TEMP * _1_1;
26561     +_LP0 = _LP0 + (    -5.2843695033657) * _TEMP * _1_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -5.2843695033657) * _TEMP * _1_2;
26562     +_LP0 = _LP0 + (   -4.33915431549382) * _TEMP * _1_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.33915431549382) * _TEMP * _1_3;
26563     +_LP0 = _LP0 + (   -4.25984995623968) * _TEMP * _1_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -4.25984995623968) * _TEMP * _1_4;
26564     +_LP0 = _LP0 + (   -3.28507383244363) * _TEMP * _1_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.28507383244363) * _TEMP * _1_5;
26565     +_LP0 = _LP0 + (   -3.09323594638332) * _TEMP * _1_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.09323594638332) * _TEMP * _1_6;
26566     +_LP0 = _LP0 + (   -3.18770351982685) * _TEMP * _1_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.18770351982685) * _TEMP * _1_7;
26567     +_LP0 = _LP0 + (    5.82333407130081) * _TEMP * _1_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.82333407130081) * _TEMP * _1_8;
26568     +_LP0 = _LP0 + (    5.70394237244294) * _TEMP * _1_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 5.70394237244294) * _TEMP * _1_9;
26569     +_LP0 = _LP0 + (     6.2858432496825) * _TEMP * _1_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.2858432496825) * _TEMP * _1_10;
26570     +_LP0 = _LP0 + (    6.38306165550988) * _TEMP * _1_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.38306165550988) * _TEMP * _1_11;
26571     +_LP0 = _LP0 + (     6.8109576786943) * _TEMP * _1_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.8109576786943) * _TEMP * _1_12;
26572     +
26573     +***  Effect: IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_DEROG ;
26574     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
26575     +_LP0 = _LP0 + (   -2.86735097139464) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.86735097139464) * _TEMP * _2_0;
26576     +_LP0 = _LP0 + (   -2.11874325860727) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.11874325860727) * _TEMP * _2_1;
26577     +_LP0 = _LP0 + (   -1.76350136096206) * _TEMP * _2_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.76350136096206) * _TEMP * _2_2;
26578     +_LP0 = _LP0 + (   -0.48813030136529) * _TEMP * _2_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.48813030136529) * _TEMP * _2_3;
26579     +_LP0 = _LP0 + (   -1.38611408157288) * _TEMP * _2_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.38611408157288) * _TEMP * _2_4;
26580     +_LP0 = _LP0 + (   -2.42294775600152) * _TEMP * _2_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.42294775600152) * _TEMP * _2_5;
26581     +_LP0 = _LP0 + (   -1.63523498828215) * _TEMP * _2_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.63523498828215) * _TEMP * _2_6;
26582     +_LP0 = _LP0 + (    6.54670767437824) * _TEMP * _2_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 6.54670767437824) * _TEMP * _2_7;
26583     +_LP0 = _LP0 + (     8.4369694791475) * _TEMP * _2_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.4369694791475) * _TEMP * _2_8;
26584     +_LP0 = _LP0 + (   -1.53379076929278) * _TEMP * _2_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.53379076929278) * _TEMP * _2_9;
26585     +
26586     +***  Effect: IMP_JOB ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_JOB ;
26587     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
26588     +_LP0 = _LP0 + (    0.03770979332431) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.03770979332431) * _TEMP * _3_0;
26589     +_LP0 = _LP0 + (   -0.53848818107953) * _TEMP * _3_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.53848818107953) * _TEMP * _3_1;
26590     +_LP0 = _LP0 + (    0.01017544415566) * _TEMP * _3_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01017544415566) * _TEMP * _3_2;
26591     +_LP0 = _LP0 + (    -0.3275979270872) * _TEMP * _3_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.3275979270872) * _TEMP * _3_3;
26592     +_LP0 = _LP0 + (    0.93231248131988) * _TEMP * _3_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.93231248131988) * _TEMP * _3_4;
26593     +
26594     +***  Effect: IMP_NINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_NINQ ;
26595     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
26596     +_LP0 = _LP0 + (   -3.20142529362903) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -3.20142529362903) * _TEMP * _4_0;
26597     +_LP0 = _LP0 + (   -2.97761269627832) * _TEMP * _4_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.97761269627832) * _TEMP * _4_1;
26598     +_LP0 = _LP0 + (    -2.5958928200474) * _TEMP * _4_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.5958928200474) * _TEMP * _4_2;
26599     +_LP0 = _LP0 + (   -2.72910725202414) * _TEMP * _4_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.72910725202414) * _TEMP * _4_3;
26600     +_LP0 = _LP0 + (   -2.16450819343992) * _TEMP * _4_4;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.16450819343992) * _TEMP * _4_4;
26601     +_LP0 = _LP0 + (    -1.7022775235962) * _TEMP * _4_5;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.7022775235962) * _TEMP * _4_5;
26602     +_LP0 = _LP0 + (   -1.40380406429631) * _TEMP * _4_6;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.40380406429631) * _TEMP * _4_6;
26603     +_LP0 = _LP0 + (    -2.0130731413641) * _TEMP * _4_7;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.0130731413641) * _TEMP * _4_7;
26604     +_LP0 = _LP0 + (   -1.86586169639211) * _TEMP * _4_8;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.86586169639211) * _TEMP * _4_8;
26605     +_LP0 = _LP0 + (   -1.45933464010808) * _TEMP * _4_9;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.45933464010808) * _TEMP * _4_9;
26606     +_LP0 = _LP0 + (   -2.48147900155389) * _TEMP * _4_10;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.48147900155389) * _TEMP * _4_10;
26607     +_LP0 = _LP0 + (   -2.84845528171252) * _TEMP * _4_11;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -2.84845528171252) * _TEMP * _4_11;
26608     +_LP0 = _LP0 + (    8.80778823729157) * _TEMP * _4_12;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 8.80778823729157) * _TEMP * _4_12;
26609     +_LP0 = _LP0 + (    9.69207784540914) * _TEMP * _4_13;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 9.69207784540914) * _TEMP * _4_13;
26610     +
26611     +***  Effect: IMP_REASON ;
MPRINT(EM_DIAGRAM):   *** Effect: IMP_REASON ;
26612     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
26613     +_LP0 = _LP0 + (   -0.16946157702693) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16946157702693) * _TEMP * _5_0;
26614     +
26615     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
26616     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
26617     +_TEMP =     9.55572185479483 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 9.55572185479483 + _LP0;
26618     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
26619     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
26620     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
26621     +end;
MPRINT(EM_DIAGRAM):   end;
26622     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
26623     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
26624     +
26625     +REG2DR1:
26626     +
26627     +*** Residuals;
MPRINT(EM_DIAGRAM):   REG2DR1: *** Residuals;
26628     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
26629     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
26630     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
26631     +end;
MPRINT(EM_DIAGRAM):   end;
26632     +else do;
MPRINT(EM_DIAGRAM):   else do;
26633     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
26634     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
26635     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
26636     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
26637     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
26638     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
26639     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
26640     +   end;
MPRINT(EM_DIAGRAM):   end;
26641     +end;
MPRINT(EM_DIAGRAM):   end;
26642     +
26643     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
26644     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
26645     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
26646     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
26647     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
26648     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
26649     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
26650     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
26651     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
26652     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
26653     +end;
MPRINT(EM_DIAGRAM):   end;
26654     +I_BAD = REG2DRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REG2DRF[_IY];
26655     +U_BAD = REG2DRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REG2DRU[_IY];
26656     +
26657     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
26658     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
26659     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
26660      run;
 
NOTE: DATA STEP view saved on file EMWS1.REG2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.IMPT_TEST.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
26661      quit;
26662      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
26663      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26664      * Reg2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg2: Computing metadata for TRAIN data;
26665      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Reg2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Reg2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Reg2_TRAIN out=WORK.M11DQ7C3 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M11DQ7C3;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M11DQ7C3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M11DQ7C3;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M11DQ7C3;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1W29PBU NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3502A0J(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   set WORK.M1W29PBU;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Nodo del modelo";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("BAD") model = "Reg2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'IMP_DEBTINC' 'IMP_DELINQ' 'IMP_DEROG' 'IMP_JOB' 'IMP_NINQ' 'IMP_REASON' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg2: Rechazado usando selección paso a paso";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
27024      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMINFO;
27025      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
27026      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
27027      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
27031      run;
27032      proc sort data = EMWS1.Reg2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg2_EMINFO NOTHREADS;
27033      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27034      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: The data set EMWS1.REG2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27035      proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
27036      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27037      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS1.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27038      proc sort data = EMWS1.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS1.Reg2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
27039      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27040      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS1.REG2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27041      data EMWS1.Reg2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMINFO;
27042      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
27043      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27044      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS1.REG2_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27045      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
27046      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
27047      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
27048      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
NOTE: View EMWS1.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS1.REG2_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "07 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "14H21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                07 de marzo de 2021
Hora:                14H21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O116QLSM "C:\Jose\DM_ang\Workspaces\EMWS1\Reg2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O116QLSM new;
MPRINT(EM_DIAGRAM):   run;
27072      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):    data WORK.DMREGTEMP;
27073      set EMWS1.Reg2_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMESTIMATE;
27074      where _CHOSEN_ ne '';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '';
27075      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS1.REG2_EMESTIMATE.
      WHERE _CHOSEN_ not = ' ';
NOTE: The data set WORK.DMREGTEMP has 3 observations and 82 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27076      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):   data WORK.DMREGTEMP;
27077      merge WORK.DMREGTEMP EMWS1.Reg2_FITTEST;
MPRINT(EM_DIAGRAM):   merge WORK.DMREGTEMP EMWS1.Reg2_FITTEST;
27078      by _step_;
MPRINT(EM_DIAGRAM):   by _step_;
27079      if _CHOSEN_ ne '' then output;
MPRINT(EM_DIAGRAM):   if _CHOSEN_ ne '' then output;
27080      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.DMREGTEMP.
NOTE: There were 7 observations read from the data set EMWS1.REG2_FITTEST.
NOTE: The data set WORK.DMREGTEMP has 3 observations and 96 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
27081      data EMWS1.Reg2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMOUTFIT;
27082      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
27083      set WORK.DMREGTEMP end=eof;
MPRINT(EM_DIAGRAM):   set WORK.DMREGTEMP end=eof;
27084      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
27085      drop _STEP_--IMP_VALUE;
MPRINT(EM_DIAGRAM):   drop _STEP_--IMP_VALUE;
27086      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
27087      TARGET = "BAD";
MPRINT(EM_DIAGRAM):   TARGET = "BAD";
27088      output;
MPRINT(EM_DIAGRAM):   output;
27089      end;
MPRINT(EM_DIAGRAM):   end;
27090      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.DMREGTEMP.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS1.REG2_EMOUTFIT has 1 observations and 47 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27091      data EMWS1.Reg2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMOUTFIT;
27092      set EMWS1.Reg2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMOUTFIT;
27093      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
27094      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Etiqueta target";
27095      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMOUTFIT.
NOTE: The data set EMWS1.REG2_EMOUTFIT has 1 observations and 48 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
27096      proc sort data=EMWS1.Reg2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg2_EMREPORTFIT nothreads;
27097      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
27098      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG2_EMREPORTFIT.
NOTE: The data set EMWS1.REG2_EMREPORTFIT has 20 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
27099      %let _EMwarndup = 0;
27100      %let _EMtargetdup =;
27101      %let _EMASEtargetdup =;
27102      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
27103      set EMWS1.Reg2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMOUTFIT;
27104      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
27105      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
27106      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
27107      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
27108      end;
MPRINT(EM_DIAGRAM):   end;
27109      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS1.REG2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27110      proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
27111      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
27112      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS1.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 9 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27113      proc sort data=EMWS1.Reg2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Reg2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
27114      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
27115      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 8 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
27116      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
27117      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
27118      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
27119      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 8 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 9 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27120      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
27121      set EMWS1.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_CMeta_TRAIN;
27122      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
27123      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
27124      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
27125      set EMWS1.Reg2_TRAIN(keep=
27126      F_BAD
27127      I_BAD
27128      P_BAD0
27129      P_BAD1
27130      R_BAD0
27131      R_BAD1
27132      U_BAD
27133      _WARN_
27134      BAD
27135      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_TRAIN(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
27136      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2979 observations read from the data set EMWS1.PART_TRAIN.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 75516:41   615 at 75517:28   105 at 75518:14   252 at 75518:43   338 at 75519:14   54 at 75519:41
NOTE: There were 2979 observations read from the data set EMWS1.VARSEL_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.VARCLUS_TRAIN.
NOTE: View EMWS1.REG2_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: There were 2979 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS1.REG2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2979 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg2_1NKBSM0 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_1NKBSM0;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo de resultado";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label TARGET = "Variable target";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Texto correcto";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correcto";
MPRINT(EM_DIAGRAM):   set WORK.Reg2_1NKBSM0(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correcto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrecto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg2_1NKBSM0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg2_1NKBSM0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: todas las probabilidades posteriores son valores ausentes ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1993957704 _NEVENTS 594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0337876887 OVLMAX 0.9999750294 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2979/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2979/20) ) / ( AVGNUMRESP / (2979/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2979/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2979/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Evento" DECILE = "Profundidad" BIN = "Clase" NUMOBS = "Número de observaciones" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Clase" N = "Número de observaciones" P_LABEL = "Rango de la probabilidad posterior" EVENT = "Evento" LOWPOSTERIOR = "Probabilidad posterior del límite inferior" PERCENTAGEOFEVENTS = "Porcentaje de eventos"
CUMULATIVEPERCENTAGEOFNONEVENTS = "Porcentaje acumulado de no eventos" CUMULATIVEPERCENTAGE = "Porcentaje acumulado" PERCENTAGEOFEVENTS = "Porcentaje de eventos" PERCENTAGEOFNONEVENTS = "Porcentaje de no eventos" CUMULATIVEPERCENTAGEOFEVENTS = "Porcentaje
acumulado de eventos" UPPOSTERIOR = "Probabilidad posterior del límite superior" NUMBEROFEVENTS = "Número de eventos" PERCENTAGE = "Porcentaje" NUMBEROFNONEVENTS = "Número de no eventos" _MEANP_ = "Probabilidad posterior de la media" _MINP_ =
"Probabilidad posterior mín" _MAXP_ = "Probabilidad posterior máx" SCORE = "Puntuación del modelo" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Probabilidad posterior máx" _MINP_ = "Probabilidad posterior mín" _MEANP_ = "Probabilidad posterior de la media" BASECAP = "Respuesta capturada % básica" BASECAPC = "Respuesta capturada % acumulada básica"
BASENUMBEROFEVENTS = "Número de eventos básicos" BASEGAIN = "Ganancia básica" BASELIFT = "Mejora básica" BASELIFTC = "Mejora acumulada básica" BASERESP = "Respuesta % básica" BASERESPC = "Respuesta % acumulada básica" BASELIFTC = "Mejora acumulada básica"
BESTCAP = "Mejor respuesta % capturada" BESTCAPC = "Mejor respuesta capturada % acumulada" BESTGAIN = "Mejor ganancia" BESTRESP = "Mejor % respuesta" BESTRESPC = "Mejor respuesta % acumulada" BESTLIFT = "Mejor mejora" BESTLIFTC = "Mejor mejora acumulada"
BESTNUMBEROFEVENTS = "Número de mejores eventos" CAP = "Respuesta capturada %" CAPC = "Respuesta capturada % acumulada" DECILE = "Profundidad" GAIN = "Ganancia" LIFT = "Mejora" LIFTC = "Mejora acumulada" NUMNEVENT = "Número de no eventos" N = "Número de
observaciones" EVENT = "Evento" RESPC = "Respuesta % acumulada" NUMBEROFEVENTS = "Número de eventos" RESP = "Respuesta %" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
31414      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
31415      set EMWS1.Reg2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_CMeta_TRAIN;
31416      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
31417      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 8 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
31418      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
31419      set EMWS1.Reg2_VALIDATE(keep=
31420      F_BAD
31421      I_BAD
31422      P_BAD0
31423      P_BAD1
31424      R_BAD0
31425      R_BAD1
31426      U_BAD
31427      _WARN_
31428      BAD
31429      );
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_VALIDATE(keep= F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
31430      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1788 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 75543:41    401 at 75544:28   60 at 75545:14    160 at 75545:43   216 at 75546:14   32 at 75546:41
NOTE: There were 1788 observations read from the data set EMWS1.VARSEL_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.VARCLUS_VALIDATE.
NOTE: View EMWS1.REG2_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: There were 1788 observations read from the data set EMWS1.IMPT_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS1.REG2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg2_22TP0WO nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg2_22TP0WO;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo de resultado";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label TARGET = "Variable target";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Texto correcto";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correcto";
MPRINT(EM_DIAGRAM):   set WORK.Reg2_22TP0WO(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correcto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrecto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMCLASSIFICATION WORK.Reg2_22TP0WO;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg2_22TP0WO;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS1.Reg2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS1.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: todas las probabilidades posteriores son valores ausentes ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1996644295 _NEVENTS 357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
The SAS System
 
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0341745777 OVLMAX 0.9999923351 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / ( AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Evento" DECILE = "Profundidad" BIN = "Clase" NUMOBS = "Número de observaciones" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Clase" N = "Número de observaciones" P_LABEL = "Rango de la probabilidad posterior" EVENT = "Evento" LOWPOSTERIOR = "Probabilidad posterior del límite inferior" PERCENTAGEOFEVENTS = "Porcentaje de eventos"
CUMULATIVEPERCENTAGEOFNONEVENTS = "Porcentaje acumulado de no eventos" CUMULATIVEPERCENTAGE = "Porcentaje acumulado" PERCENTAGEOFEVENTS = "Porcentaje de eventos" PERCENTAGEOFNONEVENTS = "Porcentaje de no eventos" CUMULATIVEPERCENTAGEOFEVENTS = "Porcentaje
acumulado de eventos" UPPOSTERIOR = "Probabilidad posterior del límite superior" NUMBEROFEVENTS = "Número de eventos" PERCENTAGE = "Porcentaje" NUMBEROFNONEVENTS = "Número de no eventos" _MEANP_ = "Probabilidad posterior de la media" _MINP_ =
"Probabilidad posterior mín" _MAXP_ = "Probabilidad posterior máx" SCORE = "Puntuación del modelo" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Probabilidad posterior máx" _MINP_ = "Probabilidad posterior mín" _MEANP_ = "Probabilidad posterior de la media" BASECAP = "Respuesta capturada % básica" BASECAPC = "Respuesta capturada % acumulada básica"
BASENUMBEROFEVENTS = "Número de eventos básicos" BASEGAIN = "Ganancia básica" BASELIFT = "Mejora básica" BASELIFTC = "Mejora acumulada básica" BASERESP = "Respuesta % básica" BASERESPC = "Respuesta % acumulada básica" BASELIFTC = "Mejora acumulada básica"
BESTCAP = "Mejor respuesta % capturada" BESTCAPC = "Mejor respuesta capturada % acumulada" BESTGAIN = "Mejor ganancia" BESTRESP = "Mejor % respuesta" BESTRESPC = "Mejor respuesta % acumulada" BESTLIFT = "Mejor mejora" BESTLIFTC = "Mejor mejora acumulada"
BESTNUMBEROFEVENTS = "Número de mejores eventos" CAP = "Respuesta capturada %" CAPC = "Respuesta capturada % acumulada" DECILE = "Profundidad" GAIN = "Ganancia" LIFT = "Mejora" LIFTC = "Mejora acumulada" NUMNEVENT = "Número de no eventos" N = "Número de
observaciones" EVENT = "Evento" RESPC = "Respuesta % acumulada" NUMBEROFEVENTS = "Número de eventos" RESP = "Respuesta %" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
35717      %let _cn = %sysfunc(getoption(CENTER));
35718      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
35719      proc print data=EMWS1.Reg2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg2_EMREPORTFIT noobs label;
35720      var STAT LABEL TRAIN
35721      VALIDATE
35722      TEST
35723      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
35724      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
35725      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35726      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Estadísticos de ajuste";
MPRINT(EM_DIAGRAM):   run;
35727      run;
 
NOTE: There were 20 observations read from the data set EMWS1.REG2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35728      title10;
MPRINT(EM_DIAGRAM):   title10;
35729      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
35730      proc sort data=EMWS1.Reg2_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS1.Reg2_EMCLASSIFICATION nothreads;
35731      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
35732      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_EMCLASSIFICATION.
NOTE: The data set EMWS1.REG2_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
35733      %let _cn = %sysfunc(getoption(CENTER));
35734      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
35735      proc print data=EMWS1.Reg2_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg2_EMCLASSIFICATION noobs label;
35736      var from into pct_row pct_col count percent
35737      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
35738      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
35739      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
35740      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
35741      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
35742      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
35743      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
35744      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
35745      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
35746      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35747      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Tabla de clasificación";
MPRINT(EM_DIAGRAM):   run;
35748      run;
 
NOTE: There were 8 observations read from the data set EMWS1.REG2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
35749      title9;
MPRINT(EM_DIAGRAM):   title9;
35750      title10;
MPRINT(EM_DIAGRAM):   title10;
35751      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
35752      %let _cn = %sysfunc(getoption(CENTER));
35753      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
35754      data EMWS1.Reg2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS1.Reg2_EMEVENTREPORT;
35755      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
35756      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
35756    ! FALSEEVENT
35757      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
35758         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos" TARGET = "Target" TARGETLABEL = "Etiqueta target" FALSEEVENT = "Falso positivo" FALSENEVENT = "Falso negativo" TRUEEVENT = "Verdadero positivo" TRUENEVENT = "Verdadero negativo";
35759      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
35760      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
35761      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
35762      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
35763      set EMWS1.Reg2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS1.Reg2_EMEVENTREPORT;
35764      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG2_EMEVENTREPORT.
NOTE: The data set EMWS1.REG2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
35765      proc print data=EMWS1.Reg2_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg2_EMEVENTREPORT noobs label;
35766      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35767      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Tabla de evento de clasificación";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
35768      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
35769      run;
 
NOTE: There were 2 observations read from the data set EMWS1.REG2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 14.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35770      title10;
MPRINT(EM_DIAGRAM):   title10;
35771      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
35772      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
35773      modify Reg2_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Variable target";
35774      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Rol de los datos";
35775      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
35776      run;
 
NOTE: MODIFY was successful for EMWS1.REG2_EMRANK.DATA.
35777      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
35778      %let _cn = %sysfunc(getoption(CENTER));
35779      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
35780      proc print data=EMWS1.Reg2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg2_EMRANK label noobs;
35781      var
35782      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
35783      by
35784      notsorted DATAROLE
35785      notsorted TARGET
35786      notsorted TARGETLABEL
35787      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
35788      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
35789      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Clasificaciones de puntuación de evaluación";
MPRINT(EM_DIAGRAM):   run;
35790      run;
 
NOTE: There were 40 observations read from the data set EMWS1.REG2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
35791      title10;
MPRINT(EM_DIAGRAM):   title10;
35792      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
35793      proc datasets library=EMWS1 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS1 nolist;
35794      modify Reg2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Variable target";
35795      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Rol de los datos";
35796      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
35797      run;
 
NOTE: MODIFY was successful for EMWS1.REG2_EMSCOREDIST.DATA.
35798      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS1.Reg2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Distribución de puntuación de evaluación";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
