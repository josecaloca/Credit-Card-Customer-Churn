MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                14 de marzo de 2021
Hora:                13H51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0M0NR2Y "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0M0NR2Y new;
MPRINT(EM_DIAGRAM):   run;
43475      %let EMEXCEPTIONSTRING=;
43476      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
43477      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
43478      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43479      %let EM_ACTION = REPORT;
43480      %let syscc = 0;
43481      %macro main;
43482      
43483        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
43484        %include temp;
43485        filename temp;
43486      
43487        %setProperties;
43488      
43489        %if %upcase(&EM_ACTION) = CREATE %then %do;
43490          filename temp catalog 'sashelp.emmdfy.binning_create.source';
43491          %include temp;
43492          filename temp;
43493      
43494          %create;
43495        %end;
43496      
43497         %else
43498         %if %upcase(&EM_ACTION) = TRAIN %then %do;
43499      
43500             filename temp catalog 'sashelp.emmdfy.binning_train.source';
43501             %include temp;
43502             filename temp;
43503             %train;
43504         %end;
43505      
43506        %else
43507        %if %upcase(&EM_ACTION) = SCORE %then %do;
43508          filename temp catalog 'sashelp.emmdfy.binning_score.source';
43509          %include temp;
43510          filename temp;
43511      
43512          %score;
43513      
43514        %end;
43515      
43516        %else
43517        %if %upcase(&EM_ACTION) = REPORT %then %do;
43518      
43519             filename temp catalog 'sashelp.emmdfy.binning_report.source';
43520             %include temp;
43521             filename temp;
43522      
43523             %report;
43524         %end;
43525      
43526         %doendm:
43527      %mend main;
43528      
43529      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
43531     +%macro SetProperties;
43533     +     /* IGN options */
43534     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
43535     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
43536     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
43538     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
43539     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
43540     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
43541     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
43542     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
43543     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
43544     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
43545     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
43546     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
43547     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
43548     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
43549     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
43550     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
43551     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
43553     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
43554     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
43555     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
43558     +%mend SetProperties;
43559     +%macro appendfiles(fileref1, fileref2);
43560     +     data _null_;
43561     +       length c $256;
43562     +       fid1=fopen("&fileref1",'A');
43563     +       fid2=fopen("&fileref2",'I');
43564     +       cval = finfo(fid2,'lrecl');
43565     +       put cval= fid1= fid2=;
43566     +       if (fid2 > 0) then
43567     +         do while(fread(fid2)=0);
43568     +           rc = fget(fid2,c,256);
43569     +           _msg_=sysmsg();
43570     +           /* put rc= c= _msg_=; */
43571     +           rc = fput(fid1,strip(c));
43572     +           rc = fwrite(fid1);
43573     +         end;
43574     +         _msg_=sysmsg();
43575     +         put _msg_=;
43576     +       rc = fclose(fid1);
43577     +       rc = fclose(fid2);
43578     +     run;
43579     +%mend appendfiles;
43581     +%macro buildOptScoreCode;
43583     +    %em_register(key=BINCODE, type=FOLDER);
43585     +    filename x catalog 'sashelp.emutil.em_deldir.source';
43586     +    %inc x;
43587     +    filename x;
43588     +    %delDir(folder=%nrbquote(&em_user_bincode));
43590     +    data _null_; length rc $200;
43591     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
43592     +    run;
43594     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
43596     +    %let dsid = %sysfunc(open(class_nosv));
43597     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
43598     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
43600     +    %let oldname=;
43601     +    %do %while(^%sysfunc(fetch(&dsid)));
43602     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
43603     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
43605     +        %if &name ne &oldname %then %do;
43606     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
43607     +             data _null_;
43608     +                length string $1024 flag endflag 8;
43609     +                retain string flag endflag;
43610     +                set class_nosv end=eof;
43611     +                where DISPLAY_VAR ="&name";
43612     +                by _variable_ _group_;
43613     +                file _F1;
43614     +                index = kindex(_variable_, "BIN_");
43615     +                if index gt 0 then do;
43616     +                   if first._variable_ then do;
43617     +                      put ' ';
43618     +                      put "&EM_CODEBAR;";
43619     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
43620     +                      put string;
43621     +                      put "&EM_CODEBAR;";
43623     +                      if origLabel ne "" then do;
43624     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
43625     +                            put string;
43626     +                            string = tranwrd(origLabel,"'","''");
43627     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
43628     +                            put string;
43629     +                      end;
43630     +                      else do;
43631     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
43632     +                             put string;
43633     +                      end;
43635     +                      put ' ';
43637     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
43638     +                      put string;
43639     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
43640     +                      put string;
43641     +                      put "end;";
43642     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
43643     +                      put string;
43644     +                   end;
43645     +                   if first._group_ then do;
43646     +                      flag = 0;
43647     +                      endflag = 1;
43648     +                      if ^first._variable_ then do;
43649     +                         put "else";
43650     +                      end;
43651     +                      if LB ne . then do;
43652     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
43653     +                      end;
43654     +                      else do;
43655     +                         flag = 1;
43656     +                         string = "if";
43657     +                      end;
43658     +                   end;
43659     +                   if last._Group_ then do;
43660     +                      if UB ne . then do;
43661     +                        if flag ne 1 then do;
43662     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
43663     +                        end;
43664     +                        else do;
43665     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
43666     +                        end;
43667     +                      end;
43668     +                      else do;
43669     +                         if flag=1 then do;
43670     +                            string = strip(DISPLAY_VAR) ;
43671     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
43672     +                            endflag=0;
43673     +                            string="";
43674     +                         end;
43675     +                         else do;
43676     +                            string = strip(string)!!" then do;";
43677     +                         end;
43678     +                      end;
43679     +                      put string;
43680     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
43681     +                      put string;
43682     +                      if endflag eq 1 then do;
43683     +                        put "end;";
43684     +                      end;
43685     +                   end;
43686     +                   if last._variable_ then do;
43687     +                     string = "end;";
43688     +                     put string;
43689     +                   end;
43691     +                end;
43692     +                else do;
43693     +                   _split_value_ = tranwrd(_split_value_,"'","''");
43694     +                   if first._group_ then do;
43695     +                      flag=0;
43696     +                      if ^first._variable_ then
43697     +                         put 'else';
43698     +                      else do;
43699     +                         put ' ';
43700     +                         put "&EM_CODEBAR;";
43701     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
43702     +                         put string;
43703     +                         put "&EM_CODEBAR;";
43705     +                         if origLabel ne "" then do;
43706     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
43707     +                               put string;
43708     +                               string = tranwrd(origLabel,"'","''");
43709     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
43710     +                               put string;
43711     +                         end;
43712     +                         else do;
43713     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
43714     +                               put string;
43715     +                         end;
43717     +                         put ' ';
43719     +                         if format ne '' then do;
43720     +                            if first._variable_ then do;
43721     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
43722     +                               put string;
43723     +                               string = '%dmnormip(_UFormat200);';
43724     +                               put string;
43726     +                               string ="if MISSING(_UFormat200) then do;";
43727     +                               put string;
43728     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
43729     +                               put string;
43730     +                               put "end;";
43732     +                               string="else if NOT MISSING(_UFormat200) then do;";
43733     +                               put string;
43735     +                            end;
43736     +                         end;
43737     +                         else do;
43738     +                            if type = 'N' then do;
43739     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
43740     +                              put string;
43741     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
43742     +                              put string;
43743     +                              put "end;";
43745     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
43746     +                              put string;
43747     +                            end;
43748     +                            else if type='C' then do;
43749     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
43750     +                              put string;
43751     +                              string = '%dmnormip(_UFormat200);';
43752     +                              put string;
43754     +                              string ="if MISSING(_UFormat200) then do;";
43755     +                              put string;
43756     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
43757     +                              put string;
43758     +                              put "end;";
43760     +                              string="else if NOT MISSING(_UFormat200) then do;";
43761     +                              put string;
43762     +                              string = '%dmnormip(_UFormat200);';
43763     +                              put string;
43764     +                           end;
43765     +                         end;
43766     +                      end;
43767     +                      if format ne '' OR type='C' then do;
43768     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
43769     +                      end;
43770     +                      else do;
43771     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
43772     +                      end;
43773     +                   end;
43774     +                   else do;
43775     +                      if flag ne 1 then do;
43776     +                       if format ne '' OR type='C' then do;
43777     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
43778     +                       end;
43779     +                       else do;
43780     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
43781     +                       end;
43782     +                         length = length(tempstring);
43784     +                         if length < 195 then do;
43785     +                            string = tempstring;
43786     +                         end;
43787     +                         else do;
43789     +                            string = strip(string);
43790     +                            put string;
43791     +                            string = ") then do;";
43792     +                            put string;
43794     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
43795     +                            put string;
43796     +                            put "end;";
43798     +                            put 'else';
43799     +                            if format ne '' OR type='C' then do;
43800     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
43801     +                            end;
43802     +                            else do;
43803     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
43804     +                            end;
43805     +                         end;
43806     +                      end;
43807     +                   end;
43809     +                   if last._group_ then do;
43810     +                      string = strip(string);
43811     +                      put string;
43813     +                      string = ") then do;";
43814     +                      put string;
43816     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
43817     +                      put string;
43818     +                      put "end;";
43819     +                   end;
43821     +                   if last._variable_ then do;
43822     +                     put "else do;";
43824     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
43825     +                     put string;
43827     +                     put "end;";
43828     +                     put "end;";
43829     +                   end;
43830     +                end;
43831     +             run;
43833     +             %let oldname = &name;
43834     +        %end;
43835     +    %end;
43836     +    %let dsid = %sysfunc(close(&dsid));
43838     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
43839     +    data _null_;
43840     +       file _F1;
43841     +       put "length _UFormat200 $200;";
43842     +       put "drop _UFormat200;";
43843     +       put "_UFormat200='';";
43844     +    run;
43845     +    filename _F1;
43847     +   %em_register(key=EMSCOREVAR, type=DATA);
43848     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
43849     +   proc datasets lib=&em_lib nolist;
43850     +      delete &scorevarDs;
43851     +   run;
43852     +   quit;
43854     +   %let filrf=mydir;
43855     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
43856     +   %let did=%sysfunc(dopen(&filrf));
43858     +   %if &did %then %do;  %PUT  did= &did;
43859     +       %let memcount=%sysfunc(dnum(&did));
43860     +       %if &memcount > 0 %then %do;
43861     +           data &em_user_emscorevar;
43862     +              length Name $32 formula $70 file $200;
43863     +              keep NAME Formula file;
43864     +              formula  = '';
43865     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
43866     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
43867     +               output;
43868     +           %end;
43869     +           %do i=1 %to &memcount;
43870     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
43871     +               %let newvar = %scan(&name, 1, .);
43872     +               %if "&newvar" ne "_ALL_" %then %do;
43873     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
43874     +                   output;
43875     +               %end;
43876     +           %end;
43878     +           run;
43879     +       %end;
43880     +       %let did = %sysfunc(dclose(&did));
43881     +  %end;
43883     +   %doendu:
43884     +%mend buildOptScoreCode;
43887     +%macro buildScoreCode(flowCode, publishCode);
43890     +  filename x "&flowCode";
43892     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
43893     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
43894     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
43896     +  data temp;
43897     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
43898     +    by display_var _Split_value_;
43899     +     if upcase(_Split_value_) ne 'MISSING';
43900     +   run;
43902     +   data temp_missing;
43903     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
43904     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
43905     +     by display_var _Split_value_;
43906     +     if upcase(_Split_value_) eq 'MISSING';
43907     +     keep _variable_ display_var missgrp;
43908     +   run;
43910     +   proc sort data=temp_missing; by display_var missgrp; run;
43912     +   data temp_missing;
43913     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
43914     +     by display_var missgrp;
43915     +     if ^_a then delete;
43916     +     keep _variable_ display_var missgrp ;
43917     +   run;
43919     +   data temp;
43920     +     merge temp temp_missing;
43921     +     by display_var;
43922     +     if display_Var eq '' then delete;
43923     +    run;
43925     +    /* pull in wtev values */
43926     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
43927     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
43928     +    proc sort data=temp;  by display_var _group_; run;
43930     +   data temp;
43931     +      merge temp tempcoarse(keep=display_var _group_  role) ;
43932     +      by display_var _group_;
43933     +    run;
43935     +    data temp;
43936     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
43937     +      by display_var;
43939     +      if _group_ = . then delete;
43940     +      if _variable_ = '' then delete;
43941     +    run;
43943     +    proc sort data=temp out=class;
43944     +       by _variable_ _group_ LB;
43945     +    run;
43947     +    data _null_;
43948     +      file X;
43950     +      put "length _UFormat200 $200;";
43951     +      put "drop _UFormat200;";
43952     +      put "_UFormat200='';";
43953     +    run;
43955     +    data class_nosv;
43956     +      set class;
43957     +      if upcase(role)="INPUT";
43958     +    run;
43960     +    data _null_;
43961     +       file X MOD;
43962     +       length string $1024 flag endflag 8;
43963     +       retain string flag endflag;
43964     +       set class_nosv end=eof;
43965     +       by _variable_ _group_;
43967     +       index = kindex(_variable_, "BIN_");
43968     +       if index gt 0 then do;
43970     +         if first._variable_ then do;
43971     +            put ' ';
43972     +            put "&EM_CODEBAR;";
43973     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
43974     +            put string;
43975     +            put "&EM_CODEBAR;";
43978     +            if origLabel ne "" then do;
43979     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
43980     +              put string;
43981     +              string = tranwrd(origLabel,"'","''");
43982     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
43983     +              put string;
43984     +            end;
43985     +            else do;
43986     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
43987     +             put string;
43988     +            end;
43990     +            put ' ';
43992     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
43993     +            put string;
43994     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
43995     +            put string;
43996     +            put "end;";
43997     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
43998     +            put string;
43999     +          end;
44000     +           if first._group_ then do;
44001     +              flag = 0;
44002     +              endflag = 1;
44003     +              if ^first._variable_ then do;
44004     +                put "else";
44005     +              end;
44006     +              if LB ne . then do;
44007     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
44008     +              end;
44009     +              else do;
44010     +                 flag = 1;
44011     +                 string = "if";
44012     +              end;
44014     +           end;
44015     +           if last._Group_ then do;
44016     +              if UB ne . then do;
44017     +                if flag ne 1 then do;
44018     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
44019     +                end;
44020     +                else do;
44021     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
44022     +                end;
44023     +              end;
44024     +              else do;
44025     +                 if flag=1 then do;
44026     +                   string = strip(DISPLAY_VAR) ;
44027     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
44028     +                   endflag = 0;
44029     +                   string="";
44030     +                 end;
44031     +                 else do;
44032     +                   string = strip(string)!!" then do;";
44033     +                 end;
44034     +              end;
44035     +              put string;
44037     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
44038     +              put string;
44039     +              if endflag eq 1 then do;
44040     +                put "end;";
44041     +              end;
44042     +           end;
44043     +           if last._variable_ then do;
44044     +             string = "end;";
44045     +             put string;
44046     +           end;
44047     +       end;
44048     +       else do;
44049     +           _split_value_ = tranwrd(_split_value_,"'","''");
44050     +           if first._group_ then do;
44051     +              flag=0;
44052     +              if ^first._variable_ then
44053     +                 put 'else';
44054     +              else do;
44055     +                 put ' ';
44056     +                 put "&EM_CODEBAR;";
44057     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
44058     +                 put string;
44059     +                 put "&EM_CODEBAR;";
44061     +                 if origLabel ne "" then do;
44062     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
44063     +                   put string;
44064     +                   string = tranwrd(origLabel,"'","''");
44065     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
44066     +                   put string;
44067     +                 end;
44068     +                 else do;
44069     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
44070     +                   put string;
44071     +                 end;
44073     +                 put ' ';
44075     +                if format ne '' then do;
44076     +                  if first._variable_ then do;
44077     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
44078     +                    put string;
44079     +                    string = '%dmnormip(_UFormat200);';
44080     +                    put string;
44082     +                     string ="if MISSING(_UFormat200) then do;";
44083     +                     put string;
44084     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
44085     +                     put string;
44086     +                     put "end;";
44088     +                     string="else if NOT MISSING(_UFormat200) then do;";
44089     +                     put string;
44091     +                  end;
44092     +                end;
44093     +                else do;
44094     +                     if type = 'N' then do;
44095     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
44096     +                       put string;
44097     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
44098     +                       put string;
44099     +                       put "end;";
44101     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
44102     +                       put string;
44104     +                     end;
44105     +                     else if type='C' then do;
44106     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
44107     +                        put string;
44108     +                        string = '%dmnormip(_UFormat200);';
44109     +                        put string;
44111     +                        string ="if MISSING(_UFormat200) then do;";
44112     +                        put string;
44113     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
44114     +                        put string;
44115     +                        put "end;";
44117     +                        string="else if NOT MISSING(_UFormat200) then do;";
44118     +                        put string;
44119     +                        string = '%dmnormip(_UFormat200);';
44120     +                        put string;
44121     +                    end;
44122     +                end;
44123     +              end;
44124     +              if format ne '' OR type='C' then do;
44125     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
44126     +              end;
44127     +              else do;
44128     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
44129     +              end;
44130     +           end;
44131     +           else do;
44132     +              if flag ne 1 then do;
44133     +                if format ne '' OR type='C' then do;
44134     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
44135     +                end;
44136     +                else do;
44137     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
44138     +                end;
44139     +                length = klength(tempstring);
44141     +                if length < 195 then do;
44142     +                   string = tempstring;
44143     +                end;
44144     +                else do;
44146     +                   string = strip(string);
44147     +                   put string;
44148     +                   string = ") then do;";
44149     +                   put string;
44151     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
44152     +                   put string;
44153     +                   put "end;";
44155     +                 /*  string = strip(string)||",'...';"; */
44157     +                   put 'else';
44158     +                   if format ne '' OR type='C' then do;
44159     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
44160     +                   end;
44161     +                   else do;
44162     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
44163     +                   end;
44166     +                end;
44167     +              end;
44168     +           end;
44170     +           if last._group_ then do;
44171     +              string = strip(string);
44172     +              put string;
44173     +              string = ") then do;";
44174     +              put string;
44176     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
44177     +              put string;
44178     +              put "end;";
44179     +           end;
44181     +           if last._variable_ then do;
44182     +             put "else do;";
44184     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
44185     +             put string;
44187     +             put "end;";
44188     +             put "end;";
44189     +           end;
44190     +         *end;
44191     +       end;
44192     +    run;
44194     +    /* generate PublishCode the same as flowscorecode */
44195     +    filename Y "&publishCode";
44197     +    /* if publishCode already exists, wipe it out first */
44198     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
44199     +      %let rc = %sysfunc(fdelete(Y));
44200     +    %end;
44202     +    %appendfiles(Y, X);
44204     +    %if %EM_BINARY_TARGET= %then %do;
44205     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
44206     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
44207     +      %end;
44208     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
44209     +      %let ibn_inttarget_orig = &ibn_inttarget;
44211     +      %if %symexist(IGNBinTarget)=0 %then %do;
44212     +         %global ignbintarget ignfreqvar;
44213     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
44214     +         %include temp;
44215     +         filename temp;
44216     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
44218     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
44219     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
44220     +         %end;
44221     +      %end;
44222     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
44223     +         proc sql noprint;
44224     +            %if %EM_FREQ ne %then %do;
44225     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
44226     +            %end;
44227     +            %else %do;
44228     +               select mean(&ibn_inttarget)
44229     +            %end;
44230     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
44231     +         quit;
44232     +      %end;
44234     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
44235     +      %if &dsid %then %do;
44236     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
44237     +         %let rc=%sysfunc(close(&dsid));
44238     +      %end;
44239     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
44241     +      data _null_;
44242     +         file x mod;
44243     +         put ' ';
44245     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
44246     +             put "&EM_CODEBAR;";
44247     +             %let note = Mean Cutoff Binary Transformation for Target;
44248     +             put "* &note;";
44249     +             put "&EM_CODEBAR;";
44250     +         %end;
44251     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
44252     +             put "&EM_CODEBAR;";
44253     +             %let note = User-Specified Cutoff Binary Transformation for Target;
44254     +             put "* &note;";
44255     +             put "&EM_CODEBAR;";
44256     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
44257     +         %end;
44258     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
44259     +         put "else do;";
44260     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
44261     +         put "   else &IGNBinTarget=0;";
44262     +         put "end;";
44264     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
44265     +      run;
44267     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
44269     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
44271     +         data _null_;
44272     +            file deltaref;
44273     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
44274     +            put "if name='&IGNBinTarget' then do;";
44275     +            put "   role='TARGET';";
44276     +            put "   level='BINARY';";
44277     +            put "end;";
44278     +         run;
44280     +      %end;
44281     +      %else %do;
44283     +         data _null_;
44284     +            file deltaref;
44285     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
44286     +            put "if name='&IGNBinTarget' then do;";
44287     +            put "   role='REJECTED';";
44288     +            put "   level='BINARY';";
44289     +            put "end;";
44290     +         run;
44291     +      %end;
44293     +      filename deltaref;
44295     +   %end;
44297     +    filename X;
44298     +    filename Y;
44300     +    %buildOptScoreCode;
44302     +    proc datasets library=work nolist;
44303     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
44304     +    run;
44305     +    quit;
44307     +%mend buildScoreCode;
44309     +%macro buildMetaCode(DeltaCodeFile=);
44311     +   /* set variable roles based on New Role column in the Results table */
44312     +   data _null_;
44313     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
44314     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
44315     +      %if &dsid %then %do;
44316     +        %let obs = %sysfunc(fetch(&dsid));
44317     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
44318     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
44319     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
44321     +        %do %while(&obs=0);
44322     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
44323     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
44324     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
44326     +          /* retrieve grp and woe names from varmappings dataset */
44327     +          %let choice = _VARIABLE_ = "&inputname";
44328     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
44329     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
44330     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
44331     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
44332     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
44334     +          put "if name = '&inputname' then role='REJECTED';";
44335     +          %if "&role" ne "DEFAULT" %then %do;
44336     +            put "if name = '&grpname' then role='&role';";
44337     +          %end;
44338     +          %else %do;
44339     +            put "if name = '&grpname' then role='&oldrole';";
44340     +          %end;
44341     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
44343     +          %let obs = %sysfunc(fetch(&dsid));
44344     +        %end;
44345     +      %end;
44346     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
44347     +   run;
44349     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
44350     +   data _null_;
44351     +      file &DeltaCodeFile MOD;
44353     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
44354     +      %if &sdsid %then %do;
44355     +        %let sobs = %sysfunc(fetch(&sdsid));
44356     +        %do %while(&sobs=0);
44357     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
44358     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
44359     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
44360     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
44362     +          %let checkgrp = GRP_&checkname;
44363     +          %let lenname = %length(&checkgrp);
44364     +          %if %eval(&lenname-32) > 0 %then %do;
44365     +            %let checkgrp = %substr(&checkgrp, 1, 32);
44366     +          %end;
44368     +          %let choice = _VARIABLE_ ="&checkname";
44369     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
44371     +          /* if var not found in varmappings, delete variables; */
44372     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
44373     +          %if &vdsid eq 0 %then %do;
44374     +            put 'if name="&displayvar" then delete;';
44375     +            %let dispgrp = GRP_&displayvar;
44376     +            put 'if name="&dispgrp" then delete;';
44377     +          %end;
44379     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
44380     +          %let sobs = %sysfunc(fetch(&sdsid));
44381     +        %end;
44382     +      %end;
44383     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
44384     +   run;
44386     +%mend buildMetaCode;
44388     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
44390     +   proc sort data=&coarse out=sortedcoarse nodupkey;
44391     +     by display_var;
44392     +   run;
44393     +   proc sort data=&varmappings nodupkey;
44394     +     by _variable_;
44395     +   run;
44396     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
44397     +     proc sort data=&resultstable; by display_var; run;
44399     +     /* check that _new_role exists - did not exist in earlier releases */
44400     +     %let rds=%sysfunc(open(&resultstable));
44401     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
44402     +     %let rds=%sysfunc(close(&rds));
44403     +   %end;
44405     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
44406     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
44407     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
44408     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
44409     +     %end;
44410     +     ;
44411     +     by display_var;
44412     +     length _role_ _new_role_ $10;
44413     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
44414     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
44415     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
44416     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
44417     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
44418     +           ;
44420     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
44421     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
44422     +                _role_ = "Rejected";
44423     +             else _role_ = "Input";
44424     +           %end;
44425     +           %else %do;
44426     +             _role_ = "Input";
44427     +           %end;
44428     +           if _new_role_ eq "" then _new_role_="Default";
44429     +      if ^_a then do;
44430     +        _gini_ = 0;
44431     +        _role_ = 'Rejected';
44432     +        if _new_role_ eq "" then _new_role_="Default";
44433     +      end;
44434     +   run;
44435     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
44436     +     by NAME;
44437     +   run;
44438     +   data outlabel;
44439     +     set outlabel;
44440     +     if _label_ = '' then _label_ = _variable_;
44441     +   run;
44442     +   data &resultstable;
44443     +     merge &resultstable(in=_a_) outlabel;
44444     +     by display_Var;
44445     +     if _a_ then output;
44446     +   run;
44447     +   proc datasets library=work nolist;
44448     +     delete sortedcoarse outlabel;
44449     +   run;
44450     +   quit;
44451     +   proc sort data=&resultstable nodupkey;
44452     +      by DESCENDING
44453     +        _gini_ display_Var;
44454     +   run;
44455     +   data &resultstable;
44456     +     set &resultstable;
44458     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
44459     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
44460     +     giniOrder = _N_;
44461     +     _gini_ = round(_GINI_, .001);
44462     +     drop _variable_;
44463     +   run;
44465     +   proc print data=&resultstable label;
44466     +   run;
44468     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
44469     +   data &coarse;
44470     +     set &coarse;
44471     +     length role $10;
44472     +     %let dsid = %sysfunc(open(&resultstable));
44473     +     %if &dsid %then %do;
44474     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
44475     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
44476     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
44478     +       %let obs = %sysfunc(fetch(&dsid));
44479     +       %do %while(&obs=0);
44480     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
44481     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
44482     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
44484     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
44485     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
44486     +            giniOrder = &order;
44487     +            role = "&role";
44488     +          end;
44490     +          %let obs = %sysfunc(fetch(&dsid));
44491     +       %end;
44492     +     %end;
44493     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
44494     +   run;
44497     +%mend EM_GENERATE_RESULTSTABLE;
44499     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
44501     +    /* instantiate the zchar macro to be used in adding bin definition */
44502     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
44503     +    %inc _temp;
44504     +    filename _temp;
44506     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
44507     +      by _variable_ binFlag _group_ LB;
44508     +    run;
44510     +    data tempExport;
44511     +      set sortedFine;
44512     +      by _variable_ binFlag _group_;
44513     +      length _split_value_ $200;
44515     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
44516     +      if binFlag = 0 then do;
44517     +        index = kindex(_variable_, "BIN_");
44518     +        if index gt 0 then do;
44519     +          _LEVEL_ = "INTERVAL";
44520     +        end;
44521     +        _Split_value_ = _split_value_;
44522     +        output;
44523     +      end;
44524     +      else do;
44525     +         * if last._group_ then do;
44526     +          index = kindex(_variable_, "BIN_");
44527     +          if index gt 0 then do;
44528     +            _LEVEL_ = "INTERVAL";
44529     +          end;
44530     +          _Split_value_ = %zchar(UB);
44531     +          output;
44532     +         * end;
44533     +      end;
44535     +      rename display_Var = _variable_;
44536     +      keep display_var _level_ _group_ _split_value_ binFlag;
44537     +    run;
44539     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
44540     +       data &EXPORTGROUPING;
44541     +         set tempexport;
44542     +       run;
44543     +    %end;
44544     +    %else %do;
44545     +       /* determine if EXPORTGROUPING already exists */
44546     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
44547     +         data &EXPORTGROUPING;
44548     +            set &EXPORTGROUPING tempexport;
44549     +         run;
44550     +       %end;
44551     +       %else %do;
44552     +         data &EXPORTGROUPING;
44553     +            set tempexport;
44554     +         run;
44555     +       %end;
44556     +    %end;
44558     +    proc datasets lib=work nolist;
44559     +      delete sortedFine tempexport;
44560     +    run;
44561     +    quit;
44563     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
44567     +
44568     +%macro report;
44569     +
44570     +   /* if createGrouping then create a dataset for export */
44571     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
44572     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
44573     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
44574     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
44575     +   %end;
44576     +   %else %do;
44577     +     proc datasets library=&EM_LIB nolist;
44578     +       delete &EM_NODEID._EXPORTGROUP;
44579     +     run;
44580     +     quit;
44581     +   %end;
44582     +
44583     +
44584     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
44585     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
44586     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
44587     +   %end;
44588     +   %else %do;
44589     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
44590     +   %end;
44591     +
44592     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
44593     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
44594     +
44595     +
44596     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS3 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS3.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.49303510854627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
44597      *------------------------------------------------------------*;
44598      * End REPORT: BINNING;
44599      *------------------------------------------------------------*;
44600      

44601      /* Reset EM Options */
44602      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
44603      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
44604      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
44605      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
44606      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
44607      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
