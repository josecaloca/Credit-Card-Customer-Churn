MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                14 de marzo de 2021
Hora:                13H51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3NDZ5FC "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3NDZ5FC new;
MPRINT(EM_DIAGRAM):   run;
41119      %let EMEXCEPTIONSTRING=;
41120      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
41121      * SCORE: BINNING;
MPRINT(EM_DIAGRAM):   * SCORE: BINNING;
41122      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41123      %let EM_ACTION = SCORE;
41124      %let syscc = 0;
41125      %macro main;
41126      
41127        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
41128        %include temp;
41129        filename temp;
41130      
41131        %setProperties;
41132      
41133        %if %upcase(&EM_ACTION) = CREATE %then %do;
41134          filename temp catalog 'sashelp.emmdfy.binning_create.source';
41135          %include temp;
41136          filename temp;
41137      
41138          %create;
41139        %end;
41140      
41141         %else
41142         %if %upcase(&EM_ACTION) = TRAIN %then %do;
41143      
41144             filename temp catalog 'sashelp.emmdfy.binning_train.source';
41145             %include temp;
41146             filename temp;
41147             %train;
41148         %end;
41149      
41150        %else
41151        %if %upcase(&EM_ACTION) = SCORE %then %do;
41152          filename temp catalog 'sashelp.emmdfy.binning_score.source';
41153          %include temp;
41154          filename temp;
41155      
41156          %score;
41157      
41158        %end;
41159      
41160        %else
41161        %if %upcase(&EM_ACTION) = REPORT %then %do;
41162      
41163             filename temp catalog 'sashelp.emmdfy.binning_report.source';
41164             %include temp;
41165             filename temp;
41166      
41167             %report;
41168         %end;
41169      
41170         %doendm:
41171      %mend main;
41172      
41173      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
41175     +%macro SetProperties;
41177     +     /* IGN options */
41178     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
41179     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
41180     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
41182     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
41183     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
41184     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
41185     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
41186     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
41187     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
41188     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
41189     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
41190     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
41191     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
41192     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
41193     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
41194     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
41195     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
41197     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
41198     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
41199     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
41202     +%mend SetProperties;
41203     +%macro appendfiles(fileref1, fileref2);
41204     +     data _null_;
41205     +       length c $256;
41206     +       fid1=fopen("&fileref1",'A');
41207     +       fid2=fopen("&fileref2",'I');
41208     +       cval = finfo(fid2,'lrecl');
41209     +       put cval= fid1= fid2=;
41210     +       if (fid2 > 0) then
41211     +         do while(fread(fid2)=0);
41212     +           rc = fget(fid2,c,256);
41213     +           _msg_=sysmsg();
41214     +           /* put rc= c= _msg_=; */
41215     +           rc = fput(fid1,strip(c));
41216     +           rc = fwrite(fid1);
41217     +         end;
41218     +         _msg_=sysmsg();
41219     +         put _msg_=;
41220     +       rc = fclose(fid1);
41221     +       rc = fclose(fid2);
41222     +     run;
41223     +%mend appendfiles;
41225     +%macro buildOptScoreCode;
41227     +    %em_register(key=BINCODE, type=FOLDER);
41229     +    filename x catalog 'sashelp.emutil.em_deldir.source';
41230     +    %inc x;
41231     +    filename x;
41232     +    %delDir(folder=%nrbquote(&em_user_bincode));
41234     +    data _null_; length rc $200;
41235     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
41236     +    run;
41238     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
41240     +    %let dsid = %sysfunc(open(class_nosv));
41241     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
41242     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
41244     +    %let oldname=;
41245     +    %do %while(^%sysfunc(fetch(&dsid)));
41246     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
41247     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
41249     +        %if &name ne &oldname %then %do;
41250     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
41251     +             data _null_;
41252     +                length string $1024 flag endflag 8;
41253     +                retain string flag endflag;
41254     +                set class_nosv end=eof;
41255     +                where DISPLAY_VAR ="&name";
41256     +                by _variable_ _group_;
41257     +                file _F1;
41258     +                index = kindex(_variable_, "BIN_");
41259     +                if index gt 0 then do;
41260     +                   if first._variable_ then do;
41261     +                      put ' ';
41262     +                      put "&EM_CODEBAR;";
41263     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
41264     +                      put string;
41265     +                      put "&EM_CODEBAR;";
41267     +                      if origLabel ne "" then do;
41268     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
41269     +                            put string;
41270     +                            string = tranwrd(origLabel,"'","''");
41271     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
41272     +                            put string;
41273     +                      end;
41274     +                      else do;
41275     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
41276     +                             put string;
41277     +                      end;
41279     +                      put ' ';
41281     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41282     +                      put string;
41283     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41284     +                      put string;
41285     +                      put "end;";
41286     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41287     +                      put string;
41288     +                   end;
41289     +                   if first._group_ then do;
41290     +                      flag = 0;
41291     +                      endflag = 1;
41292     +                      if ^first._variable_ then do;
41293     +                         put "else";
41294     +                      end;
41295     +                      if LB ne . then do;
41296     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
41297     +                      end;
41298     +                      else do;
41299     +                         flag = 1;
41300     +                         string = "if";
41301     +                      end;
41302     +                   end;
41303     +                   if last._Group_ then do;
41304     +                      if UB ne . then do;
41305     +                        if flag ne 1 then do;
41306     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
41307     +                        end;
41308     +                        else do;
41309     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
41310     +                        end;
41311     +                      end;
41312     +                      else do;
41313     +                         if flag=1 then do;
41314     +                            string = strip(DISPLAY_VAR) ;
41315     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
41316     +                            endflag=0;
41317     +                            string="";
41318     +                         end;
41319     +                         else do;
41320     +                            string = strip(string)!!" then do;";
41321     +                         end;
41322     +                      end;
41323     +                      put string;
41324     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41325     +                      put string;
41326     +                      if endflag eq 1 then do;
41327     +                        put "end;";
41328     +                      end;
41329     +                   end;
41330     +                   if last._variable_ then do;
41331     +                     string = "end;";
41332     +                     put string;
41333     +                   end;
41335     +                end;
41336     +                else do;
41337     +                   _split_value_ = tranwrd(_split_value_,"'","''");
41338     +                   if first._group_ then do;
41339     +                      flag=0;
41340     +                      if ^first._variable_ then
41341     +                         put 'else';
41342     +                      else do;
41343     +                         put ' ';
41344     +                         put "&EM_CODEBAR;";
41345     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
41346     +                         put string;
41347     +                         put "&EM_CODEBAR;";
41349     +                         if origLabel ne "" then do;
41350     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
41351     +                               put string;
41352     +                               string = tranwrd(origLabel,"'","''");
41353     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
41354     +                               put string;
41355     +                         end;
41356     +                         else do;
41357     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
41358     +                               put string;
41359     +                         end;
41361     +                         put ' ';
41363     +                         if format ne '' then do;
41364     +                            if first._variable_ then do;
41365     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
41366     +                               put string;
41367     +                               string = '%dmnormip(_UFormat200);';
41368     +                               put string;
41370     +                               string ="if MISSING(_UFormat200) then do;";
41371     +                               put string;
41372     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41373     +                               put string;
41374     +                               put "end;";
41376     +                               string="else if NOT MISSING(_UFormat200) then do;";
41377     +                               put string;
41379     +                            end;
41380     +                         end;
41381     +                         else do;
41382     +                            if type = 'N' then do;
41383     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41384     +                              put string;
41385     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41386     +                              put string;
41387     +                              put "end;";
41389     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41390     +                              put string;
41391     +                            end;
41392     +                            else if type='C' then do;
41393     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
41394     +                              put string;
41395     +                              string = '%dmnormip(_UFormat200);';
41396     +                              put string;
41398     +                              string ="if MISSING(_UFormat200) then do;";
41399     +                              put string;
41400     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41401     +                              put string;
41402     +                              put "end;";
41404     +                              string="else if NOT MISSING(_UFormat200) then do;";
41405     +                              put string;
41406     +                              string = '%dmnormip(_UFormat200);';
41407     +                              put string;
41408     +                           end;
41409     +                         end;
41410     +                      end;
41411     +                      if format ne '' OR type='C' then do;
41412     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41413     +                      end;
41414     +                      else do;
41415     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41416     +                      end;
41417     +                   end;
41418     +                   else do;
41419     +                      if flag ne 1 then do;
41420     +                       if format ne '' OR type='C' then do;
41421     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
41422     +                       end;
41423     +                       else do;
41424     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41425     +                       end;
41426     +                         length = length(tempstring);
41428     +                         if length < 195 then do;
41429     +                            string = tempstring;
41430     +                         end;
41431     +                         else do;
41433     +                            string = strip(string);
41434     +                            put string;
41435     +                            string = ") then do;";
41436     +                            put string;
41438     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41439     +                            put string;
41440     +                            put "end;";
41442     +                            put 'else';
41443     +                            if format ne '' OR type='C' then do;
41444     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41445     +                            end;
41446     +                            else do;
41447     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41448     +                            end;
41449     +                         end;
41450     +                      end;
41451     +                   end;
41453     +                   if last._group_ then do;
41454     +                      string = strip(string);
41455     +                      put string;
41457     +                      string = ") then do;";
41458     +                      put string;
41460     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41461     +                      put string;
41462     +                      put "end;";
41463     +                   end;
41465     +                   if last._variable_ then do;
41466     +                     put "else do;";
41468     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41469     +                     put string;
41471     +                     put "end;";
41472     +                     put "end;";
41473     +                   end;
41474     +                end;
41475     +             run;
41477     +             %let oldname = &name;
41478     +        %end;
41479     +    %end;
41480     +    %let dsid = %sysfunc(close(&dsid));
41482     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
41483     +    data _null_;
41484     +       file _F1;
41485     +       put "length _UFormat200 $200;";
41486     +       put "drop _UFormat200;";
41487     +       put "_UFormat200='';";
41488     +    run;
41489     +    filename _F1;
41491     +   %em_register(key=EMSCOREVAR, type=DATA);
41492     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
41493     +   proc datasets lib=&em_lib nolist;
41494     +      delete &scorevarDs;
41495     +   run;
41496     +   quit;
41498     +   %let filrf=mydir;
41499     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
41500     +   %let did=%sysfunc(dopen(&filrf));
41502     +   %if &did %then %do;  %PUT  did= &did;
41503     +       %let memcount=%sysfunc(dnum(&did));
41504     +       %if &memcount > 0 %then %do;
41505     +           data &em_user_emscorevar;
41506     +              length Name $32 formula $70 file $200;
41507     +              keep NAME Formula file;
41508     +              formula  = '';
41509     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
41510     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
41511     +               output;
41512     +           %end;
41513     +           %do i=1 %to &memcount;
41514     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
41515     +               %let newvar = %scan(&name, 1, .);
41516     +               %if "&newvar" ne "_ALL_" %then %do;
41517     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
41518     +                   output;
41519     +               %end;
41520     +           %end;
41522     +           run;
41523     +       %end;
41524     +       %let did = %sysfunc(dclose(&did));
41525     +  %end;
41527     +   %doendu:
41528     +%mend buildOptScoreCode;
41531     +%macro buildScoreCode(flowCode, publishCode);
41534     +  filename x "&flowCode";
41536     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
41537     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
41538     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
41540     +  data temp;
41541     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
41542     +    by display_var _Split_value_;
41543     +     if upcase(_Split_value_) ne 'MISSING';
41544     +   run;
41546     +   data temp_missing;
41547     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
41548     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
41549     +     by display_var _Split_value_;
41550     +     if upcase(_Split_value_) eq 'MISSING';
41551     +     keep _variable_ display_var missgrp;
41552     +   run;
41554     +   proc sort data=temp_missing; by display_var missgrp; run;
41556     +   data temp_missing;
41557     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
41558     +     by display_var missgrp;
41559     +     if ^_a then delete;
41560     +     keep _variable_ display_var missgrp ;
41561     +   run;
41563     +   data temp;
41564     +     merge temp temp_missing;
41565     +     by display_var;
41566     +     if display_Var eq '' then delete;
41567     +    run;
41569     +    /* pull in wtev values */
41570     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
41571     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
41572     +    proc sort data=temp;  by display_var _group_; run;
41574     +   data temp;
41575     +      merge temp tempcoarse(keep=display_var _group_  role) ;
41576     +      by display_var _group_;
41577     +    run;
41579     +    data temp;
41580     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
41581     +      by display_var;
41583     +      if _group_ = . then delete;
41584     +      if _variable_ = '' then delete;
41585     +    run;
41587     +    proc sort data=temp out=class;
41588     +       by _variable_ _group_ LB;
41589     +    run;
41591     +    data _null_;
41592     +      file X;
41594     +      put "length _UFormat200 $200;";
41595     +      put "drop _UFormat200;";
41596     +      put "_UFormat200='';";
41597     +    run;
41599     +    data class_nosv;
41600     +      set class;
41601     +      if upcase(role)="INPUT";
41602     +    run;
41604     +    data _null_;
41605     +       file X MOD;
41606     +       length string $1024 flag endflag 8;
41607     +       retain string flag endflag;
41608     +       set class_nosv end=eof;
41609     +       by _variable_ _group_;
41611     +       index = kindex(_variable_, "BIN_");
41612     +       if index gt 0 then do;
41614     +         if first._variable_ then do;
41615     +            put ' ';
41616     +            put "&EM_CODEBAR;";
41617     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
41618     +            put string;
41619     +            put "&EM_CODEBAR;";
41622     +            if origLabel ne "" then do;
41623     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
41624     +              put string;
41625     +              string = tranwrd(origLabel,"'","''");
41626     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
41627     +              put string;
41628     +            end;
41629     +            else do;
41630     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
41631     +             put string;
41632     +            end;
41634     +            put ' ';
41636     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41637     +            put string;
41638     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41639     +            put string;
41640     +            put "end;";
41641     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41642     +            put string;
41643     +          end;
41644     +           if first._group_ then do;
41645     +              flag = 0;
41646     +              endflag = 1;
41647     +              if ^first._variable_ then do;
41648     +                put "else";
41649     +              end;
41650     +              if LB ne . then do;
41651     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
41652     +              end;
41653     +              else do;
41654     +                 flag = 1;
41655     +                 string = "if";
41656     +              end;
41658     +           end;
41659     +           if last._Group_ then do;
41660     +              if UB ne . then do;
41661     +                if flag ne 1 then do;
41662     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
41663     +                end;
41664     +                else do;
41665     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
41666     +                end;
41667     +              end;
41668     +              else do;
41669     +                 if flag=1 then do;
41670     +                   string = strip(DISPLAY_VAR) ;
41671     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
41672     +                   endflag = 0;
41673     +                   string="";
41674     +                 end;
41675     +                 else do;
41676     +                   string = strip(string)!!" then do;";
41677     +                 end;
41678     +              end;
41679     +              put string;
41681     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41682     +              put string;
41683     +              if endflag eq 1 then do;
41684     +                put "end;";
41685     +              end;
41686     +           end;
41687     +           if last._variable_ then do;
41688     +             string = "end;";
41689     +             put string;
41690     +           end;
41691     +       end;
41692     +       else do;
41693     +           _split_value_ = tranwrd(_split_value_,"'","''");
41694     +           if first._group_ then do;
41695     +              flag=0;
41696     +              if ^first._variable_ then
41697     +                 put 'else';
41698     +              else do;
41699     +                 put ' ';
41700     +                 put "&EM_CODEBAR;";
41701     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
41702     +                 put string;
41703     +                 put "&EM_CODEBAR;";
41705     +                 if origLabel ne "" then do;
41706     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
41707     +                   put string;
41708     +                   string = tranwrd(origLabel,"'","''");
41709     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
41710     +                   put string;
41711     +                 end;
41712     +                 else do;
41713     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
41714     +                   put string;
41715     +                 end;
41717     +                 put ' ';
41719     +                if format ne '' then do;
41720     +                  if first._variable_ then do;
41721     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
41722     +                    put string;
41723     +                    string = '%dmnormip(_UFormat200);';
41724     +                    put string;
41726     +                     string ="if MISSING(_UFormat200) then do;";
41727     +                     put string;
41728     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41729     +                     put string;
41730     +                     put "end;";
41732     +                     string="else if NOT MISSING(_UFormat200) then do;";
41733     +                     put string;
41735     +                  end;
41736     +                end;
41737     +                else do;
41738     +                     if type = 'N' then do;
41739     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41740     +                       put string;
41741     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41742     +                       put string;
41743     +                       put "end;";
41745     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41746     +                       put string;
41748     +                     end;
41749     +                     else if type='C' then do;
41750     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
41751     +                        put string;
41752     +                        string = '%dmnormip(_UFormat200);';
41753     +                        put string;
41755     +                        string ="if MISSING(_UFormat200) then do;";
41756     +                        put string;
41757     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41758     +                        put string;
41759     +                        put "end;";
41761     +                        string="else if NOT MISSING(_UFormat200) then do;";
41762     +                        put string;
41763     +                        string = '%dmnormip(_UFormat200);';
41764     +                        put string;
41765     +                    end;
41766     +                end;
41767     +              end;
41768     +              if format ne '' OR type='C' then do;
41769     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41770     +              end;
41771     +              else do;
41772     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41773     +              end;
41774     +           end;
41775     +           else do;
41776     +              if flag ne 1 then do;
41777     +                if format ne '' OR type='C' then do;
41778     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
41779     +                end;
41780     +                else do;
41781     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41782     +                end;
41783     +                length = klength(tempstring);
41785     +                if length < 195 then do;
41786     +                   string = tempstring;
41787     +                end;
41788     +                else do;
41790     +                   string = strip(string);
41791     +                   put string;
41792     +                   string = ") then do;";
41793     +                   put string;
41795     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41796     +                   put string;
41797     +                   put "end;";
41799     +                 /*  string = strip(string)||",'...';"; */
41801     +                   put 'else';
41802     +                   if format ne '' OR type='C' then do;
41803     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41804     +                   end;
41805     +                   else do;
41806     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41807     +                   end;
41810     +                end;
41811     +              end;
41812     +           end;
41814     +           if last._group_ then do;
41815     +              string = strip(string);
41816     +              put string;
41817     +              string = ") then do;";
41818     +              put string;
41820     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41821     +              put string;
41822     +              put "end;";
41823     +           end;
41825     +           if last._variable_ then do;
41826     +             put "else do;";
41828     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41829     +             put string;
41831     +             put "end;";
41832     +             put "end;";
41833     +           end;
41834     +         *end;
41835     +       end;
41836     +    run;
41838     +    /* generate PublishCode the same as flowscorecode */
41839     +    filename Y "&publishCode";
41841     +    /* if publishCode already exists, wipe it out first */
41842     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
41843     +      %let rc = %sysfunc(fdelete(Y));
41844     +    %end;
41846     +    %appendfiles(Y, X);
41848     +    %if %EM_BINARY_TARGET= %then %do;
41849     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
41850     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
41851     +      %end;
41852     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
41853     +      %let ibn_inttarget_orig = &ibn_inttarget;
41855     +      %if %symexist(IGNBinTarget)=0 %then %do;
41856     +         %global ignbintarget ignfreqvar;
41857     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
41858     +         %include temp;
41859     +         filename temp;
41860     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
41862     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
41863     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
41864     +         %end;
41865     +      %end;
41866     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
41867     +         proc sql noprint;
41868     +            %if %EM_FREQ ne %then %do;
41869     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
41870     +            %end;
41871     +            %else %do;
41872     +               select mean(&ibn_inttarget)
41873     +            %end;
41874     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
41875     +         quit;
41876     +      %end;
41878     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
41879     +      %if &dsid %then %do;
41880     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
41881     +         %let rc=%sysfunc(close(&dsid));
41882     +      %end;
41883     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
41885     +      data _null_;
41886     +         file x mod;
41887     +         put ' ';
41889     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
41890     +             put "&EM_CODEBAR;";
41891     +             %let note = Mean Cutoff Binary Transformation for Target;
41892     +             put "* &note;";
41893     +             put "&EM_CODEBAR;";
41894     +         %end;
41895     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
41896     +             put "&EM_CODEBAR;";
41897     +             %let note = User-Specified Cutoff Binary Transformation for Target;
41898     +             put "* &note;";
41899     +             put "&EM_CODEBAR;";
41900     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
41901     +         %end;
41902     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
41903     +         put "else do;";
41904     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
41905     +         put "   else &IGNBinTarget=0;";
41906     +         put "end;";
41908     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
41909     +      run;
41911     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
41913     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
41915     +         data _null_;
41916     +            file deltaref;
41917     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
41918     +            put "if name='&IGNBinTarget' then do;";
41919     +            put "   role='TARGET';";
41920     +            put "   level='BINARY';";
41921     +            put "end;";
41922     +         run;
41924     +      %end;
41925     +      %else %do;
41927     +         data _null_;
41928     +            file deltaref;
41929     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
41930     +            put "if name='&IGNBinTarget' then do;";
41931     +            put "   role='REJECTED';";
41932     +            put "   level='BINARY';";
41933     +            put "end;";
41934     +         run;
41935     +      %end;
41937     +      filename deltaref;
41939     +   %end;
41941     +    filename X;
41942     +    filename Y;
41944     +    %buildOptScoreCode;
41946     +    proc datasets library=work nolist;
41947     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
41948     +    run;
41949     +    quit;
41951     +%mend buildScoreCode;
41953     +%macro buildMetaCode(DeltaCodeFile=);
41955     +   /* set variable roles based on New Role column in the Results table */
41956     +   data _null_;
41957     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
41958     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
41959     +      %if &dsid %then %do;
41960     +        %let obs = %sysfunc(fetch(&dsid));
41961     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
41962     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
41963     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
41965     +        %do %while(&obs=0);
41966     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
41967     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
41968     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
41970     +          /* retrieve grp and woe names from varmappings dataset */
41971     +          %let choice = _VARIABLE_ = "&inputname";
41972     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
41973     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
41974     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
41975     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
41976     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
41978     +          put "if name = '&inputname' then role='REJECTED';";
41979     +          %if "&role" ne "DEFAULT" %then %do;
41980     +            put "if name = '&grpname' then role='&role';";
41981     +          %end;
41982     +          %else %do;
41983     +            put "if name = '&grpname' then role='&oldrole';";
41984     +          %end;
41985     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
41987     +          %let obs = %sysfunc(fetch(&dsid));
41988     +        %end;
41989     +      %end;
41990     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
41991     +   run;
41993     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
41994     +   data _null_;
41995     +      file &DeltaCodeFile MOD;
41997     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
41998     +      %if &sdsid %then %do;
41999     +        %let sobs = %sysfunc(fetch(&sdsid));
42000     +        %do %while(&sobs=0);
42001     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
42002     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
42003     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
42004     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
42006     +          %let checkgrp = GRP_&checkname;
42007     +          %let lenname = %length(&checkgrp);
42008     +          %if %eval(&lenname-32) > 0 %then %do;
42009     +            %let checkgrp = %substr(&checkgrp, 1, 32);
42010     +          %end;
42012     +          %let choice = _VARIABLE_ ="&checkname";
42013     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
42015     +          /* if var not found in varmappings, delete variables; */
42016     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
42017     +          %if &vdsid eq 0 %then %do;
42018     +            put 'if name="&displayvar" then delete;';
42019     +            %let dispgrp = GRP_&displayvar;
42020     +            put 'if name="&dispgrp" then delete;';
42021     +          %end;
42023     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
42024     +          %let sobs = %sysfunc(fetch(&sdsid));
42025     +        %end;
42026     +      %end;
42027     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
42028     +   run;
42030     +%mend buildMetaCode;
42032     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
42034     +   proc sort data=&coarse out=sortedcoarse nodupkey;
42035     +     by display_var;
42036     +   run;
42037     +   proc sort data=&varmappings nodupkey;
42038     +     by _variable_;
42039     +   run;
42040     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
42041     +     proc sort data=&resultstable; by display_var; run;
42043     +     /* check that _new_role exists - did not exist in earlier releases */
42044     +     %let rds=%sysfunc(open(&resultstable));
42045     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
42046     +     %let rds=%sysfunc(close(&rds));
42047     +   %end;
42049     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
42050     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
42051     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
42052     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
42053     +     %end;
42054     +     ;
42055     +     by display_var;
42056     +     length _role_ _new_role_ $10;
42057     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
42058     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
42059     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
42060     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
42061     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
42062     +           ;
42064     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
42065     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
42066     +                _role_ = "Rejected";
42067     +             else _role_ = "Input";
42068     +           %end;
42069     +           %else %do;
42070     +             _role_ = "Input";
42071     +           %end;
42072     +           if _new_role_ eq "" then _new_role_="Default";
42073     +      if ^_a then do;
42074     +        _gini_ = 0;
42075     +        _role_ = 'Rejected';
42076     +        if _new_role_ eq "" then _new_role_="Default";
42077     +      end;
42078     +   run;
42079     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
42080     +     by NAME;
42081     +   run;
42082     +   data outlabel;
42083     +     set outlabel;
42084     +     if _label_ = '' then _label_ = _variable_;
42085     +   run;
42086     +   data &resultstable;
42087     +     merge &resultstable(in=_a_) outlabel;
42088     +     by display_Var;
42089     +     if _a_ then output;
42090     +   run;
42091     +   proc datasets library=work nolist;
42092     +     delete sortedcoarse outlabel;
42093     +   run;
42094     +   quit;
42095     +   proc sort data=&resultstable nodupkey;
42096     +      by DESCENDING
42097     +        _gini_ display_Var;
42098     +   run;
42099     +   data &resultstable;
42100     +     set &resultstable;
42102     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
42103     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
42104     +     giniOrder = _N_;
42105     +     _gini_ = round(_GINI_, .001);
42106     +     drop _variable_;
42107     +   run;
42109     +   proc print data=&resultstable label;
42110     +   run;
42112     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
42113     +   data &coarse;
42114     +     set &coarse;
42115     +     length role $10;
42116     +     %let dsid = %sysfunc(open(&resultstable));
42117     +     %if &dsid %then %do;
42118     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
42119     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
42120     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
42122     +       %let obs = %sysfunc(fetch(&dsid));
42123     +       %do %while(&obs=0);
42124     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
42125     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
42126     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
42128     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
42129     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
42130     +            giniOrder = &order;
42131     +            role = "&role";
42132     +          end;
42134     +          %let obs = %sysfunc(fetch(&dsid));
42135     +       %end;
42136     +     %end;
42137     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
42138     +   run;
42141     +%mend EM_GENERATE_RESULTSTABLE;
42143     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
42145     +    /* instantiate the zchar macro to be used in adding bin definition */
42146     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
42147     +    %inc _temp;
42148     +    filename _temp;
42150     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
42151     +      by _variable_ binFlag _group_ LB;
42152     +    run;
42154     +    data tempExport;
42155     +      set sortedFine;
42156     +      by _variable_ binFlag _group_;
42157     +      length _split_value_ $200;
42159     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
42160     +      if binFlag = 0 then do;
42161     +        index = kindex(_variable_, "BIN_");
42162     +        if index gt 0 then do;
42163     +          _LEVEL_ = "INTERVAL";
42164     +        end;
42165     +        _Split_value_ = _split_value_;
42166     +        output;
42167     +      end;
42168     +      else do;
42169     +         * if last._group_ then do;
42170     +          index = kindex(_variable_, "BIN_");
42171     +          if index gt 0 then do;
42172     +            _LEVEL_ = "INTERVAL";
42173     +          end;
42174     +          _Split_value_ = %zchar(UB);
42175     +          output;
42176     +         * end;
42177     +      end;
42179     +      rename display_Var = _variable_;
42180     +      keep display_var _level_ _group_ _split_value_ binFlag;
42181     +    run;
42183     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
42184     +       data &EXPORTGROUPING;
42185     +         set tempexport;
42186     +       run;
42187     +    %end;
42188     +    %else %do;
42189     +       /* determine if EXPORTGROUPING already exists */
42190     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
42191     +         data &EXPORTGROUPING;
42192     +            set &EXPORTGROUPING tempexport;
42193     +         run;
42194     +       %end;
42195     +       %else %do;
42196     +         data &EXPORTGROUPING;
42197     +            set tempexport;
42198     +         run;
42199     +       %end;
42200     +    %end;
42202     +    proc datasets lib=work nolist;
42203     +      delete sortedFine tempexport;
42204     +    run;
42205     +    quit;
42207     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_SCORE.SOURCE.
42213     +%macro buildMetaCode(DeltaCodeFile=);
42215     +   /* set variable roles based on New Role column in the Results table */
42216     +   data _null_;
42217     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
42218     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
42219     +      %if &dsid %then %do;
42220     +        %let obs = %sysfunc(fetch(&dsid));
42221     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
42222     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
42223     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
42225     +        %do %while(&obs=0);
42226     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
42227     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
42228     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
42230     +          /* retrieve grp and woe names from varmappings dataset */
42231     +          %let choice = _VARIABLE_ = "&inputname";
42232     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
42233     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
42234     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
42235     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
42236     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
42238     +          put "if name = '&inputname' then role='REJECTED';";
42239     +          %if "&role" ne "DEFAULT" %then %do;
42240     +            put "if name = '&grpname' then role='&role';";
42241     +          %end;
42242     +          %else %do;
42243     +            put "if name = '&grpname' then role='&oldrole';";
42244     +          %end;
42245     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
42247     +          %let obs = %sysfunc(fetch(&dsid));
42248     +        %end;
42249     +      %end;
42250     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
42251     +   run;
42253     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
42254     +   data _null_;
42255     +      file &DeltaCodeFile MOD;
42257     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
42258     +      %if &sdsid %then %do;
42259     +        %let sobs = %sysfunc(fetch(&sdsid));
42260     +        %do %while(&sobs=0);
42261     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
42262     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
42263     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
42264     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
42266     +          %let checkgrp = GRP_&checkname;
42267     +          %let lenname = %length(&checkgrp);
42268     +          %if %eval(&lenname-32) > 0 %then %do;
42269     +            %let checkgrp = %substr(&checkgrp, 1, 32);
42270     +          %end;
42272     +          %let choice = _VARIABLE_ ="&checkname";
42273     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
42275     +          /* if var not found in varmappings, delete variables; */
42276     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
42277     +          %if &vdsid eq 0 %then %do;
42278     +            put 'if name="&displayvar" then delete;';
42279     +            %let dispgrp = GRP_&displayvar;
42280     +            put 'if name="&dispgrp" then delete;';
42281     +          %end;
42283     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
42284     +          %let sobs = %sysfunc(fetch(&sdsid));
42285     +        %end;
42286     +      %end;
42287     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
42288     +   run;
42290     +%mend buildMetaCode;
42292     +%macro score;
42294     +   /* generate results table */
42295     +   %EM_GETNAME(key=COARSE, type=DATA);
42296     +   %EM_GETNAME(key=RESULTSTABLE, type=DATA);
42297     +   %EM_GETNAME(key=VARMAPPINGS, type=DATA);
42298     +   %EM_GETNAME(key=SPLITVALS, type=DATA);
42300     +   %EM_GENERATE_RESULTSTABLE(&EM_USER_COARSE, &EM_USER_RESULTSTABLE, &EM_USER_VARMAPPINGS);
42302     +   /* Generate Publish score code; same as flowscorecode */
42303     +   %EM_GETNAME(key=BINMAPPINGS, type=DATA);
42304     +   %buildScoreCode(&EM_FILE_EMFLOWSCORECODE, &EM_FILE_EMPUBLISHSCORECODE);
42306     +   filename deltaref "&EM_FILE_CDELTA_TRAIN";
42307     +   %buildMetaCode(DeltaCodeFile=deltaref);
42308     +   filename deltaref;
42310     +   /* generate results tables */
42311     +   %EM_REPORT(key=RESULTSTABLE, viewtype=DATA, block=MODEL, description=OUTPUTTABLE, autodisplay=Y);
42312     +   %EM_REPORT(key=RESULTSTABLE, viewtype=BAR, X=DISPLAY_VAR, Freq=_GINI_, TIPTEXT=_ROLE_, block=MODEL, description=STATPLOT, autodisplay=Y);
42314     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS3.BINNING_COARSE out=sortedcoarse nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 70 observations read from the data set EMWS3.BINNING_COARSE.
NOTE: 58 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDCOARSE has 12 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS3.BINNING_VARMAPPINGS nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS3.BINNING_VARMAPPINGS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS3.BINNING_VARMAPPINGS has 12 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS3.BINNING_RESULTSTABLE (Keep = display_var _gini_ _role_ _new_role_ procLevel);
MPRINT(EM_GENERATE_RESULTSTABLE):   merge sortedcoarse(in=_a) EMWS3.BINNING_VARMAPPINGS(rename=(_Variable_ = DISPLAY_VAR)) ;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   length _role_ _new_role_ $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   label display_var = "Variable" _gini_ = "Estadístico de Gini" _role_ = "Rol calculado" _new_role_ = "Nuevo rol" LEVEL = "Nivel" ;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _gini_ < 20 then _role_ = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   else _role_ = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   if ^_a then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = 0;
MPRINT(EM_GENERATE_RESULTSTABLE):   _role_ = 'Rejected';
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable LEVEL is uninitialized.
NOTE: There were 12 observations read from the data set WORK.SORTEDCOARSE.
NOTE: There were 12 observations read from the data set EMWS3.BINNING_VARMAPPINGS.
NOTE: The data set EMWS3.BINNING_RESULTSTABLE has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS3.BINNING_VariableSet out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
MPRINT(EM_GENERATE_RESULTSTABLE):   by NAME;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 14 observations read from the data set EMWS3.BINNING_VARIABLESET.
NOTE: The data set WORK.OUTLABEL has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   set outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _label_ = '' then _label_ = _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable _variable_ is uninitialized.
NOTE: There were 14 observations read from the data set WORK.OUTLABEL.
NOTE: The data set WORK.OUTLABEL has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS3.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   merge EMWS3.BINNING_RESULTSTABLE(in=_a_) outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _a_ then output;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_Var by input data sets. This might cause unexpected results.
NOTE: There were 12 observations read from the data set EMWS3.BINNING_RESULTSTABLE.
NOTE: There were 14 observations read from the data set WORK.OUTLABEL.
NOTE: The data set EMWS3.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_RESULTSTABLE):   delete sortedcoarse outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Deleting WORK.SORTEDCOARSE (memtype=DATA).
NOTE: Deleting WORK.OUTLABEL (memtype=DATA).
MPRINT(EM_GENERATE_RESULTSTABLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS3.BINNING_RESULTSTABLE nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by DESCENDING _gini_ display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS3.BINNING_RESULTSTABLE.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS3.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS3.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS3.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini" LEVEL = "Nivel";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = _N_;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = round(_GINI_, .001);
MPRINT(EM_GENERATE_RESULTSTABLE):   drop _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS3.BINNING_RESULTSTABLE.
NOTE: The data set EMWS3.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc print data=EMWS3.BINNING_RESULTSTABLE label;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS3.BINNING_RESULTSTABLE.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS3.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS3.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   length role $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "DEBTINC" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 1;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "DELINQ" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 2;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "CLAGE" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 3;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "NINQ" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 4;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "DEROG" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 5;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "VALUE" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 6;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "JOB" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 7;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "LOAN" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 8;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "YOJ" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 9;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "MORTDUE" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 10;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "CLNO" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 11;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "REASON" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Ordenación Gini";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 12;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 70 observations read from the data set EMWS3.BINNING_COARSE.
NOTE: The data set EMWS3.BINNING_COARSE has 70 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(BUILDSCORECODE):   filename x "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(BUILDSCORECODE):   proc sort data=EMWS3.BINNING_SPLITVALS;
MPRINT(BUILDSCORECODE):   by display_var _split_Value_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 88 observations read from the data set EMWS3.BINNING_SPLITVALS.
NOTE: The data set EMWS3.BINNING_SPLITVALS has 88 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS3.BINNING_BINMAPPINGS;
MPRINT(BUILDSCORECODE):   by display_var bin;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS3.BINNING_COARSE out=tempcoarse;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 70 observations read from the data set EMWS3.BINNING_COARSE.
NOTE: The data set WORK.TEMPCOARSE has 70 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge EMWS3.BINNING_SPLITVALS EMWS3.BINNING_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 88 observations read from the data set EMWS3.BINNING_SPLITVALS.
NOTE: There were 28 observations read from the data set EMWS3.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 76 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge EMWS3.BINNING_SPLITVALS(rename=(_GROUP_=MISSGRP)) EMWS3.BINNING_BINMAPPINGS(rename=( BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 88 observations read from the data set EMWS3.BINNING_SPLITVALS.
NOTE: There were 28 observations read from the data set EMWS3.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp_missing;
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 12 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP_MISSING has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   if ^_a then delete;
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp ;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 12 observations read from the data set WORK.TEMP_MISSING.
NOTE: There were 70 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP_MISSING has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp temp_missing;
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if display_Var eq '' then delete;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 76 observations read from the data set WORK.TEMP.
NOTE: There were 12 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP has 76 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS3.BINNING_VARMAPPINGS out=tempmappings;
MPRINT(BUILDSCORECODE):   by _variable_;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 12 observations read from the data set EMWS3.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAPPINGS has 12 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS3.Part_CMeta_TRAIN out=tempcmeta;
MPRINT(BUILDSCORECODE):   by NAME;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 14 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.TEMPCMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 76 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 76 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempcoarse(keep=display_var _group_ role) ;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 76 observations read from the data set WORK.TEMP.
NOTE: There were 70 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP has 88 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if _group_ = . then delete;
MPRINT(BUILDSCORECODE):   if _variable_ = '' then delete;
MPRINT(BUILDSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable DISPLAY_VAR by input data sets. This might cause unexpected results.
NOTE: There were 88 observations read from the data set WORK.TEMP.
NOTE: There were 12 observations read from the data set WORK.TEMPMAPPINGS.
NOTE: There were 14 observations read from the data set WORK.TEMPCMETA.
NOTE: The data set WORK.TEMP has 76 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp out=class;
MPRINT(BUILDSCORECODE):   by _variable_ _group_ LB;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 76 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 76 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X;
MPRINT(BUILDSCORECODE):   put "length _UFormat200 $200;";
MPRINT(BUILDSCORECODE):   put "drop _UFormat200;";
MPRINT(BUILDSCORECODE):   put "_UFormat200='';";
MPRINT(BUILDSCORECODE):   run;

NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 3 records were written to the file X.
      The minimum record length was 15.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data class_nosv;
MPRINT(BUILDSCORECODE):   set class;
MPRINT(BUILDSCORECODE):   if upcase(role)="INPUT";
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 76 observations read from the data set WORK.CLASS.
NOTE: The data set WORK.CLASS_NOSV has 52 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X MOD;
MPRINT(BUILDSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDSCORECODE):   retain string flag endflag;
MPRINT(BUILDSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDSCORECODE):   by _variable_ _group_;
MPRINT(BUILDSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDSCORECODE):   if index gt 0 then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag = 0;
MPRINT(BUILDSCORECODE):   endflag = 1;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if LB ne . then do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   flag = 1;
MPRINT(BUILDSCORECODE):   string = "if";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._Group_ then do;
MPRINT(BUILDSCORECODE):   if UB ne . then do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag=1 then do;
MPRINT(BUILDSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDSCORECODE):   endflag = 0;
MPRINT(BUILDSCORECODE):   string="";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "end;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag=0;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   if format ne '' then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if type = 'N' then do;
MPRINT(BUILDSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else if type='C' then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   length = klength(tempstring);
MPRINT(BUILDSCORECODE):   if length < 195 then do;
MPRINT(BUILDSCORECODE):   string = tempstring;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put 'else';
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._group_ then do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else do;";
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   *end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      338:165   379:137   414:178   424:174   474:40    622:165   663:165   714:165   835:40    913:40    939:38    
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 227 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 110.
NOTE: There were 52 observations read from the data set WORK.CLASS_NOSV.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   filename Y "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMPUBLISHSCORE.sas";
MPRINT(APPENDFILES):   data _null_;
MPRINT(APPENDFILES):   length c $256;
MPRINT(APPENDFILES):   fid1=fopen("Y",'A');
MPRINT(APPENDFILES):   fid2=fopen("X",'I');
MPRINT(APPENDFILES):   cval = finfo(fid2,'lrecl');
MPRINT(APPENDFILES):   put cval= fid1= fid2=;
MPRINT(APPENDFILES):   if (fid2 > 0) then do while(fread(fid2)=0);
MPRINT(APPENDFILES):   rc = fget(fid2,c,256);
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   rc = fput(fid1,strip(c));
MPRINT(APPENDFILES):   rc = fwrite(fid1);
MPRINT(APPENDFILES):   end;
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   put _msg_=;
MPRINT(APPENDFILES):   rc = fclose(fid1);
MPRINT(APPENDFILES):   rc = fclose(fid2);
MPRINT(APPENDFILES):   run;

cval=32767 fid1=1 fid2=2
_msg_=WARNING: End of file.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDSCORECODE):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("BINCODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "BINCODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
42315     +%macro delDir(folder=);
42316     +   %let filrf=mydir;
42317     +   %let rc=%sysfunc(filename(filrf,&folder));
42318     +   %let did=%sysfunc(dopen(&filrf));
42319     +
42320     +   %if &did %then %do;
42321     +       %let memcount=%sysfunc(dnum(&did));
42322     +       %if &memcount > 0 %then %do;
42323     +           %do i=1 %to &memcount;
42324     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
42325     +               data _null_;
42326     +                  fname="_temp&i";
42327     +                  rc=filename(fname,"&folder&em_dsep.&name");
42328     +                  if rc = 0 and fexist(fname) then
42329     +                     rc=fdelete(fname);
42330     +                  rc=filename(fname);
42331     +               run;
42332     +           %end;
42333     +       %end;
42334     +       %let rc=%sysfunc(dclose(&did));
42335     +   %end;
42336     +   %let rc = %sysfunc(fdelete(&filrf));
42337     +   %let rc=%sysfunc(filename(filrf));
42338     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(BUILDOPTSCORECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length rc $200;
MPRINT(BUILDOPTSCORECODE):   rc = dcreate('BINCODE', "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING");
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_CLAGE.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="CLAGE";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      176:165   228:137   268:178   280:174   340:165   532:165   582:165   642:165   794:40    882:40    914:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_CLAGE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='CLAGE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_DEBTINC.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="DEBTINC";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1078:165   1130:137   1170:178   1182:174   1242:165   1434:165   1484:165   1544:165   1696:40    1784:40    1816:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_DEBTINC.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='DEBTINC';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_VALUE.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="VALUE";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1980:165   2032:137   2072:178   2084:174   2144:165   2336:165   2386:165   2446:165   2598:40    2686:40    2718:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_VALUE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 26 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='VALUE';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_DELINQ.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="DELINQ";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2882:165   2934:137   2974:178   2986:174   3046:165   3238:165   3288:165   3348:165   3500:40    3588:40    3620:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_DELINQ.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 53 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 110.
NOTE: There were 14 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='DELINQ';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_DEROG.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="DEROG";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3784:165   3836:137   3876:178   3888:174   3948:165   4140:165   4190:165   4250:165   4402:40    4490:40    4522:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_DEROG.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 38 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 99.
NOTE: There were 11 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='DEROG';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_NINQ.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="NINQ";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4686:165   4738:137   4778:178   4790:174   4850:165   5042:165   5092:165   5152:165   5304:40    5392:40    5424:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\GRP_NINQ.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 58 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 96.
NOTE: There were 15 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='NINQ';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   put "length _UFormat200 $200;";
MPRINT(BUILDOPTSCORECODE):   put "drop _UFormat200;";
MPRINT(BUILDOPTSCORECODE):   put "_UFormat200='';";
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\BINCODE\_ALL_.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=14 de marzo de 2021 13H51

NOTE: 3 records were written to the file _F1.
      The minimum record length was 15.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "BINNING_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   proc datasets lib=EMWS3 nolist;
MPRINT(BUILDOPTSCORECODE):   delete BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The file EMWS3.BINNING_EMSCOREVAR (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(BUILDOPTSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

did= 1
MPRINT(BUILDOPTSCORECODE):   data EMWS3.BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   length Name $32 formula $70 file $200;
MPRINT(BUILDOPTSCORECODE):   keep NAME Formula file;
MPRINT(BUILDOPTSCORECODE):   formula = '';
MPRINT(BUILDOPTSCORECODE):   name='';
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_CLAGE";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_CLAGE.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_DEBTINC";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_DEBTINC.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_DELINQ";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_DELINQ.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_DEROG";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_DEROG.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_NINQ";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_NINQ.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_VALUE";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_VALUE.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The data set EMWS3.BINNING_EMSCOREVAR has 7 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   proc datasets library=work nolist;
MPRINT(BUILDSCORECODE):   delete class class_nosv temp temp_missing tempmappings tempcmeta;
MPRINT(BUILDSCORECODE):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.CLASS_NOSV (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPINGS (memtype=DATA).
NOTE: Deleting WORK.TEMPCMETA (memtype=DATA).
MPRINT(BUILDSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\CDELTA_TRAIN.sas";
MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file
MPRINT(BUILDMETACODE):   deltaref;
MPRINT(BUILDMETACODE):   put "if name = 'DEBTINC' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_DEBTINC' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_DEBTINC' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'DELINQ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_DELINQ' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_DELINQ' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'CLAGE' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_CLAGE' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_CLAGE' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'NINQ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NINQ' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_NINQ' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'DEROG' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_DEROG' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_DEROG' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'VALUE' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_VALUE' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_VALUE' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'JOB' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_JOB' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_JOB' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'LOAN' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_LOAN' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_LOAN' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'YOJ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_YOJ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_YOJ' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'MORTDUE' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MORTDUE' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_MORTDUE' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'CLNO' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_CLNO' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_CLNO' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'REASON' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_REASON' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_REASON' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=13 de marzo de 2021 21H20

NOTE: 36 records were written to the file DELTAREF.
      The minimum record length was 37.
      The maximum record length was 45.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref MOD;
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1551,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=13 de marzo de 2021 21H20

NOTE: 0 records were written to the file DELTAREF.
NOTE: DATA statement used (Total process time):
      real time           0.67 seconds
      cpu time            0.20 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref;
NOTE: Fileref DELTAREF has been deassigned.
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "OUTPUTTABLE";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.208480894197;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "STATPLOT";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_GINI_";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_ROLE_";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.69583022347457;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42339      *------------------------------------------------------------*;
42340      * End SCORE: BINNING;
42341      *------------------------------------------------------------*;
42342      

42343      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42344      *------------------------------------------------------------*;
42345      * BINNING: Scoring DATA data;
42346      *------------------------------------------------------------*;
42347      data EMWS3.BINNING_TRAIN
42348      / view=EMWS3.BINNING_TRAIN
42349      ;
MPRINT(EM_DIAGRAM):   data EMWS3.BINNING_TRAIN / view=EMWS3.BINNING_TRAIN ;
42350      set EMWS3.Part_TRAIN
42351      ;
MPRINT(EM_DIAGRAM):   set EMWS3.Part_TRAIN ;
42352      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas.
42353     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
42354     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
42355     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
42356     +
42357     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42358     +* Variable: CLAGE;
MPRINT(EM_DIAGRAM):   * Variable: CLAGE;
42359     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42360     +LABEL GRP_CLAGE = "Grouped: CLAGE";
MPRINT(EM_DIAGRAM):   LABEL GRP_CLAGE = "Grouped: CLAGE";
42361     +
42362     +if MISSING(CLAGE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CLAGE) then do;
42363     +GRP_CLAGE = 1;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 1;
42364     +end;
MPRINT(EM_DIAGRAM):   end;
42365     +else if NOT MISSING(CLAGE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(CLAGE) then do;
42366     +if CLAGE < 116.22 then do;
MPRINT(EM_DIAGRAM):   if CLAGE < 116.22 then do;
42367     +GRP_CLAGE = 2;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 2;
42368     +end;
MPRINT(EM_DIAGRAM):   end;
42369     +else
42370     +if 116.22 <= CLAGE AND CLAGE < 175.17 then do;
MPRINT(EM_DIAGRAM):   else if 116.22 <= CLAGE AND CLAGE < 175.17 then do;
42371     +GRP_CLAGE = 3;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 3;
42372     +end;
MPRINT(EM_DIAGRAM):   end;
42373     +else
42374     +if 175.17 <= CLAGE AND CLAGE < 230.93 then do;
MPRINT(EM_DIAGRAM):   else if 175.17 <= CLAGE AND CLAGE < 230.93 then do;
42375     +GRP_CLAGE = 4;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 4;
42376     +end;
MPRINT(EM_DIAGRAM):   end;
42377     +else
42378     +if 230.93 <= CLAGE then do;
MPRINT(EM_DIAGRAM):   else if 230.93 <= CLAGE then do;
42379     +GRP_CLAGE = 5;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 5;
42380     +end;
MPRINT(EM_DIAGRAM):   end;
42381     +end;
MPRINT(EM_DIAGRAM):   end;
42382     +
42383     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42384     +* Variable: DEBTINC;
MPRINT(EM_DIAGRAM):   * Variable: DEBTINC;
42385     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42386     +LABEL GRP_DEBTINC = "Grouped: DEBTINC";
MPRINT(EM_DIAGRAM):   LABEL GRP_DEBTINC = "Grouped: DEBTINC";
42387     +
42388     +if MISSING(DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DEBTINC) then do;
42389     +GRP_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 1;
42390     +end;
MPRINT(EM_DIAGRAM):   end;
42391     +else if NOT MISSING(DEBTINC) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DEBTINC) then do;
42392     +if DEBTINC < 28.87 then do;
MPRINT(EM_DIAGRAM):   if DEBTINC < 28.87 then do;
42393     +GRP_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 2;
42394     +end;
MPRINT(EM_DIAGRAM):   end;
42395     +else
42396     +if 28.87 <= DEBTINC AND DEBTINC < 34.73 then do;
MPRINT(EM_DIAGRAM):   else if 28.87 <= DEBTINC AND DEBTINC < 34.73 then do;
42397     +GRP_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 3;
42398     +end;
MPRINT(EM_DIAGRAM):   end;
42399     +else
42400     +if 34.73 <= DEBTINC AND DEBTINC < 39.2 then do;
MPRINT(EM_DIAGRAM):   else if 34.73 <= DEBTINC AND DEBTINC < 39.2 then do;
42401     +GRP_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 4;
42402     +end;
MPRINT(EM_DIAGRAM):   end;
42403     +else
42404     +if 39.2 <= DEBTINC then do;
MPRINT(EM_DIAGRAM):   else if 39.2 <= DEBTINC then do;
42405     +GRP_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 5;
42406     +end;
MPRINT(EM_DIAGRAM):   end;
42407     +end;
MPRINT(EM_DIAGRAM):   end;
42408     +
42409     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42410     +* Variable: VALUE;
MPRINT(EM_DIAGRAM):   * Variable: VALUE;
42411     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42412     +LABEL GRP_VALUE = "Grouped: VALUE";
MPRINT(EM_DIAGRAM):   LABEL GRP_VALUE = "Grouped: VALUE";
42413     +
42414     +if MISSING(VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(VALUE) then do;
42415     +GRP_VALUE = 1;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 1;
42416     +end;
MPRINT(EM_DIAGRAM):   end;
42417     +else if NOT MISSING(VALUE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(VALUE) then do;
42418     +if VALUE < 66345 then do;
MPRINT(EM_DIAGRAM):   if VALUE < 66345 then do;
42419     +GRP_VALUE = 2;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 2;
42420     +end;
MPRINT(EM_DIAGRAM):   end;
42421     +else
42422     +if 66345 <= VALUE AND VALUE < 89107 then do;
MPRINT(EM_DIAGRAM):   else if 66345 <= VALUE AND VALUE < 89107 then do;
42423     +GRP_VALUE = 3;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 3;
42424     +end;
MPRINT(EM_DIAGRAM):   end;
42425     +else
42426     +if 89107 <= VALUE AND VALUE < 121714 then do;
MPRINT(EM_DIAGRAM):   else if 89107 <= VALUE AND VALUE < 121714 then do;
42427     +GRP_VALUE = 4;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 4;
42428     +end;
MPRINT(EM_DIAGRAM):   end;
42429     +else
42430     +if 121714 <= VALUE then do;
MPRINT(EM_DIAGRAM):   else if 121714 <= VALUE then do;
42431     +GRP_VALUE = 5;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 5;
42432     +end;
MPRINT(EM_DIAGRAM):   end;
42433     +end;
MPRINT(EM_DIAGRAM):   end;
42434     +
42435     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42436     +* Variable: DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: DELINQ;
42437     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42438     +LABEL GRP_DELINQ = "Grouped: DELINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_DELINQ = "Grouped: DELINQ";
42439     +
42440     +if MISSING(DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DELINQ) then do;
42441     +GRP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 1;
42442     +end;
MPRINT(EM_DIAGRAM):   end;
42443     +else if NOT MISSING(DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DELINQ) then do;
42444     +if (DELINQ eq 0
42445     +) then do;
MPRINT(EM_DIAGRAM):   if (DELINQ eq 0 ) then do;
42446     +GRP_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 2;
42447     +end;
MPRINT(EM_DIAGRAM):   end;
42448     +else
42449     +if (DELINQ eq 1
42450     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 1 ) then do;
42451     +GRP_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 3;
42452     +end;
MPRINT(EM_DIAGRAM):   end;
42453     +else
42454     +if (DELINQ eq 2
42455     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 2 ) then do;
42456     +GRP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 4;
42457     +end;
MPRINT(EM_DIAGRAM):   end;
42458     +else
42459     +if (DELINQ eq 3
42460     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 3 ) then do;
42461     +GRP_DELINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 5;
42462     +end;
MPRINT(EM_DIAGRAM):   end;
42463     +else
42464     +if (DELINQ eq 4
42465     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 4 ) then do;
42466     +GRP_DELINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 6;
42467     +end;
MPRINT(EM_DIAGRAM):   end;
42468     +else
42469     +if (DELINQ eq 5
42470     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 5 ) then do;
42471     +GRP_DELINQ = 7;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 7;
42472     +end;
MPRINT(EM_DIAGRAM):   end;
42473     +else
42474     +if (DELINQ eq 6
42475     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 6 ) then do;
42476     +GRP_DELINQ = 8;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 8;
42477     +end;
MPRINT(EM_DIAGRAM):   end;
42478     +else
42479     +if (DELINQ eq 10 OR DELINQ eq 11 OR DELINQ eq 12 OR DELINQ eq 13 OR DELINQ eq 15 OR DELINQ eq 7 OR DELINQ eq 8
42480     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 10 OR DELINQ eq 11 OR DELINQ eq 12 OR DELINQ eq 13 OR DELINQ eq 15 OR DELINQ eq 7 OR DELINQ eq 8 ) then do;
42481     +GRP_DELINQ = 9;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 9;
42482     +end;
MPRINT(EM_DIAGRAM):   end;
42483     +else do;
MPRINT(EM_DIAGRAM):   else do;
42484     +GRP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 1;
42485     +end;
MPRINT(EM_DIAGRAM):   end;
42486     +end;
MPRINT(EM_DIAGRAM):   end;
42487     +
42488     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42489     +* Variable: DEROG;
MPRINT(EM_DIAGRAM):   * Variable: DEROG;
42490     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42491     +LABEL GRP_DEROG = "Grouped: DEROG";
MPRINT(EM_DIAGRAM):   LABEL GRP_DEROG = "Grouped: DEROG";
42492     +
42493     +if MISSING(DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DEROG) then do;
42494     +GRP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 1;
42495     +end;
MPRINT(EM_DIAGRAM):   end;
42496     +else if NOT MISSING(DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DEROG) then do;
42497     +if (DEROG eq 0
42498     +) then do;
MPRINT(EM_DIAGRAM):   if (DEROG eq 0 ) then do;
42499     +GRP_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 2;
42500     +end;
MPRINT(EM_DIAGRAM):   end;
42501     +else
42502     +if (DEROG eq 1
42503     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 1 ) then do;
42504     +GRP_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 3;
42505     +end;
MPRINT(EM_DIAGRAM):   end;
42506     +else
42507     +if (DEROG eq 2
42508     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 2 ) then do;
42509     +GRP_DEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 4;
42510     +end;
MPRINT(EM_DIAGRAM):   end;
42511     +else
42512     +if (DEROG eq 3
42513     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 3 ) then do;
42514     +GRP_DEROG = 5;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 5;
42515     +end;
MPRINT(EM_DIAGRAM):   end;
42516     +else
42517     +if (DEROG eq 10 OR DEROG eq 4 OR DEROG eq 5 OR DEROG eq 6 OR DEROG eq 7 OR DEROG eq 8 OR DEROG eq 9
42518     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 10 OR DEROG eq 4 OR DEROG eq 5 OR DEROG eq 6 OR DEROG eq 7 OR DEROG eq 8 OR DEROG eq 9 ) then do;
42519     +GRP_DEROG = 6;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 6;
42520     +end;
MPRINT(EM_DIAGRAM):   end;
42521     +else do;
MPRINT(EM_DIAGRAM):   else do;
42522     +GRP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 1;
42523     +end;
MPRINT(EM_DIAGRAM):   end;
42524     +end;
MPRINT(EM_DIAGRAM):   end;
42525     +
42526     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42527     +* Variable: NINQ;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
42528     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42529     +LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
42530     +
42531     +if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
42532     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
42533     +end;
MPRINT(EM_DIAGRAM):   end;
42534     +else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
42535     +if (NINQ eq 0
42536     +) then do;
MPRINT(EM_DIAGRAM):   if (NINQ eq 0 ) then do;
42537     +GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
42538     +end;
MPRINT(EM_DIAGRAM):   end;
42539     +else
42540     +if (NINQ eq 1
42541     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 1 ) then do;
42542     +GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
42543     +end;
MPRINT(EM_DIAGRAM):   end;
42544     +else
42545     +if (NINQ eq 2
42546     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 2 ) then do;
42547     +GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
42548     +end;
MPRINT(EM_DIAGRAM):   end;
42549     +else
42550     +if (NINQ eq 3
42551     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 3 ) then do;
42552     +GRP_NINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 5;
42553     +end;
MPRINT(EM_DIAGRAM):   end;
42554     +else
42555     +if (NINQ eq 4
42556     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 4 ) then do;
42557     +GRP_NINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 6;
42558     +end;
MPRINT(EM_DIAGRAM):   end;
42559     +else
42560     +if (NINQ eq 5
42561     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 5 ) then do;
42562     +GRP_NINQ = 7;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 7;
42563     +end;
MPRINT(EM_DIAGRAM):   end;
42564     +else
42565     +if (NINQ eq 6
42566     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 6 ) then do;
42567     +GRP_NINQ = 8;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 8;
42568     +end;
MPRINT(EM_DIAGRAM):   end;
42569     +else
42570     +if (NINQ eq 7
42571     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 7 ) then do;
42572     +GRP_NINQ = 9;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 9;
42573     +end;
MPRINT(EM_DIAGRAM):   end;
42574     +else
42575     +if (NINQ eq 10 OR NINQ eq 11 OR NINQ eq 12 OR NINQ eq 13 OR NINQ eq 14 OR NINQ eq 8 OR NINQ eq 9
42576     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 10 OR NINQ eq 11 OR NINQ eq 12 OR NINQ eq 13 OR NINQ eq 14 OR NINQ eq 8 OR NINQ eq 9 ) then do;
42577     +GRP_NINQ = 10;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 10;
42578     +end;
MPRINT(EM_DIAGRAM):   end;
42579     +else do;
MPRINT(EM_DIAGRAM):   else do;
42580     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
42581     +end;
MPRINT(EM_DIAGRAM):   end;
42582     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
42583      run;

NOTE: DATA STEP view saved on file EMWS3.BINNING_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
42584      quit;
42585      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
42586      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42587      *------------------------------------------------------------*;
42588      * BINNING: Scoring VALIDATE data;
42589      *------------------------------------------------------------*;
42590      data EMWS3.BINNING_VALIDATE
42591      / view=EMWS3.BINNING_VALIDATE
42592      ;
MPRINT(EM_DIAGRAM):   data EMWS3.BINNING_VALIDATE / view=EMWS3.BINNING_VALIDATE ;
42593      set EMWS3.Part_VALIDATE
42594      ;
MPRINT(EM_DIAGRAM):   set EMWS3.Part_VALIDATE ;
42595      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas.
42596     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
42597     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
42598     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
42599     +
42600     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42601     +* Variable: CLAGE;
MPRINT(EM_DIAGRAM):   * Variable: CLAGE;
42602     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42603     +LABEL GRP_CLAGE = "Grouped: CLAGE";
MPRINT(EM_DIAGRAM):   LABEL GRP_CLAGE = "Grouped: CLAGE";
42604     +
42605     +if MISSING(CLAGE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CLAGE) then do;
42606     +GRP_CLAGE = 1;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 1;
42607     +end;
MPRINT(EM_DIAGRAM):   end;
42608     +else if NOT MISSING(CLAGE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(CLAGE) then do;
42609     +if CLAGE < 116.22 then do;
MPRINT(EM_DIAGRAM):   if CLAGE < 116.22 then do;
42610     +GRP_CLAGE = 2;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 2;
42611     +end;
MPRINT(EM_DIAGRAM):   end;
42612     +else
42613     +if 116.22 <= CLAGE AND CLAGE < 175.17 then do;
MPRINT(EM_DIAGRAM):   else if 116.22 <= CLAGE AND CLAGE < 175.17 then do;
42614     +GRP_CLAGE = 3;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 3;
42615     +end;
MPRINT(EM_DIAGRAM):   end;
42616     +else
42617     +if 175.17 <= CLAGE AND CLAGE < 230.93 then do;
MPRINT(EM_DIAGRAM):   else if 175.17 <= CLAGE AND CLAGE < 230.93 then do;
42618     +GRP_CLAGE = 4;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 4;
42619     +end;
MPRINT(EM_DIAGRAM):   end;
42620     +else
42621     +if 230.93 <= CLAGE then do;
MPRINT(EM_DIAGRAM):   else if 230.93 <= CLAGE then do;
42622     +GRP_CLAGE = 5;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 5;
42623     +end;
MPRINT(EM_DIAGRAM):   end;
42624     +end;
MPRINT(EM_DIAGRAM):   end;
42625     +
42626     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42627     +* Variable: DEBTINC;
MPRINT(EM_DIAGRAM):   * Variable: DEBTINC;
42628     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42629     +LABEL GRP_DEBTINC = "Grouped: DEBTINC";
MPRINT(EM_DIAGRAM):   LABEL GRP_DEBTINC = "Grouped: DEBTINC";
42630     +
42631     +if MISSING(DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DEBTINC) then do;
42632     +GRP_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 1;
42633     +end;
MPRINT(EM_DIAGRAM):   end;
42634     +else if NOT MISSING(DEBTINC) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DEBTINC) then do;
42635     +if DEBTINC < 28.87 then do;
MPRINT(EM_DIAGRAM):   if DEBTINC < 28.87 then do;
42636     +GRP_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 2;
42637     +end;
MPRINT(EM_DIAGRAM):   end;
42638     +else
42639     +if 28.87 <= DEBTINC AND DEBTINC < 34.73 then do;
MPRINT(EM_DIAGRAM):   else if 28.87 <= DEBTINC AND DEBTINC < 34.73 then do;
42640     +GRP_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 3;
42641     +end;
MPRINT(EM_DIAGRAM):   end;
42642     +else
42643     +if 34.73 <= DEBTINC AND DEBTINC < 39.2 then do;
MPRINT(EM_DIAGRAM):   else if 34.73 <= DEBTINC AND DEBTINC < 39.2 then do;
42644     +GRP_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 4;
42645     +end;
MPRINT(EM_DIAGRAM):   end;
42646     +else
42647     +if 39.2 <= DEBTINC then do;
MPRINT(EM_DIAGRAM):   else if 39.2 <= DEBTINC then do;
42648     +GRP_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 5;
42649     +end;
MPRINT(EM_DIAGRAM):   end;
42650     +end;
MPRINT(EM_DIAGRAM):   end;
42651     +
42652     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42653     +* Variable: VALUE;
MPRINT(EM_DIAGRAM):   * Variable: VALUE;
42654     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42655     +LABEL GRP_VALUE = "Grouped: VALUE";
MPRINT(EM_DIAGRAM):   LABEL GRP_VALUE = "Grouped: VALUE";
42656     +
42657     +if MISSING(VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(VALUE) then do;
42658     +GRP_VALUE = 1;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 1;
42659     +end;
MPRINT(EM_DIAGRAM):   end;
42660     +else if NOT MISSING(VALUE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(VALUE) then do;
42661     +if VALUE < 66345 then do;
MPRINT(EM_DIAGRAM):   if VALUE < 66345 then do;
42662     +GRP_VALUE = 2;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 2;
42663     +end;
MPRINT(EM_DIAGRAM):   end;
42664     +else
42665     +if 66345 <= VALUE AND VALUE < 89107 then do;
MPRINT(EM_DIAGRAM):   else if 66345 <= VALUE AND VALUE < 89107 then do;
42666     +GRP_VALUE = 3;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 3;
42667     +end;
MPRINT(EM_DIAGRAM):   end;
42668     +else
42669     +if 89107 <= VALUE AND VALUE < 121714 then do;
MPRINT(EM_DIAGRAM):   else if 89107 <= VALUE AND VALUE < 121714 then do;
42670     +GRP_VALUE = 4;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 4;
42671     +end;
MPRINT(EM_DIAGRAM):   end;
42672     +else
42673     +if 121714 <= VALUE then do;
MPRINT(EM_DIAGRAM):   else if 121714 <= VALUE then do;
42674     +GRP_VALUE = 5;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 5;
42675     +end;
MPRINT(EM_DIAGRAM):   end;
42676     +end;
MPRINT(EM_DIAGRAM):   end;
42677     +
42678     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42679     +* Variable: DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: DELINQ;
42680     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42681     +LABEL GRP_DELINQ = "Grouped: DELINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_DELINQ = "Grouped: DELINQ";
42682     +
42683     +if MISSING(DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DELINQ) then do;
42684     +GRP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 1;
42685     +end;
MPRINT(EM_DIAGRAM):   end;
42686     +else if NOT MISSING(DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DELINQ) then do;
42687     +if (DELINQ eq 0
42688     +) then do;
MPRINT(EM_DIAGRAM):   if (DELINQ eq 0 ) then do;
42689     +GRP_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 2;
42690     +end;
MPRINT(EM_DIAGRAM):   end;
42691     +else
42692     +if (DELINQ eq 1
42693     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 1 ) then do;
42694     +GRP_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 3;
42695     +end;
MPRINT(EM_DIAGRAM):   end;
42696     +else
42697     +if (DELINQ eq 2
42698     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 2 ) then do;
42699     +GRP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 4;
42700     +end;
MPRINT(EM_DIAGRAM):   end;
42701     +else
42702     +if (DELINQ eq 3
42703     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 3 ) then do;
42704     +GRP_DELINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 5;
42705     +end;
MPRINT(EM_DIAGRAM):   end;
42706     +else
42707     +if (DELINQ eq 4
42708     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 4 ) then do;
42709     +GRP_DELINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 6;
42710     +end;
MPRINT(EM_DIAGRAM):   end;
42711     +else
42712     +if (DELINQ eq 5
42713     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 5 ) then do;
42714     +GRP_DELINQ = 7;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 7;
42715     +end;
MPRINT(EM_DIAGRAM):   end;
42716     +else
42717     +if (DELINQ eq 6
42718     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 6 ) then do;
42719     +GRP_DELINQ = 8;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 8;
42720     +end;
MPRINT(EM_DIAGRAM):   end;
42721     +else
42722     +if (DELINQ eq 10 OR DELINQ eq 11 OR DELINQ eq 12 OR DELINQ eq 13 OR DELINQ eq 15 OR DELINQ eq 7 OR DELINQ eq 8
42723     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 10 OR DELINQ eq 11 OR DELINQ eq 12 OR DELINQ eq 13 OR DELINQ eq 15 OR DELINQ eq 7 OR DELINQ eq 8 ) then do;
42724     +GRP_DELINQ = 9;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 9;
42725     +end;
MPRINT(EM_DIAGRAM):   end;
42726     +else do;
MPRINT(EM_DIAGRAM):   else do;
42727     +GRP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 1;
42728     +end;
MPRINT(EM_DIAGRAM):   end;
42729     +end;
MPRINT(EM_DIAGRAM):   end;
42730     +
42731     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42732     +* Variable: DEROG;
MPRINT(EM_DIAGRAM):   * Variable: DEROG;
42733     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42734     +LABEL GRP_DEROG = "Grouped: DEROG";
MPRINT(EM_DIAGRAM):   LABEL GRP_DEROG = "Grouped: DEROG";
42735     +
42736     +if MISSING(DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DEROG) then do;
42737     +GRP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 1;
42738     +end;
MPRINT(EM_DIAGRAM):   end;
42739     +else if NOT MISSING(DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DEROG) then do;
42740     +if (DEROG eq 0
42741     +) then do;
MPRINT(EM_DIAGRAM):   if (DEROG eq 0 ) then do;
42742     +GRP_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 2;
42743     +end;
MPRINT(EM_DIAGRAM):   end;
42744     +else
42745     +if (DEROG eq 1
42746     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 1 ) then do;
42747     +GRP_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 3;
42748     +end;
MPRINT(EM_DIAGRAM):   end;
42749     +else
42750     +if (DEROG eq 2
42751     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 2 ) then do;
42752     +GRP_DEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 4;
42753     +end;
MPRINT(EM_DIAGRAM):   end;
42754     +else
42755     +if (DEROG eq 3
42756     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 3 ) then do;
42757     +GRP_DEROG = 5;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 5;
42758     +end;
MPRINT(EM_DIAGRAM):   end;
42759     +else
42760     +if (DEROG eq 10 OR DEROG eq 4 OR DEROG eq 5 OR DEROG eq 6 OR DEROG eq 7 OR DEROG eq 8 OR DEROG eq 9
42761     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 10 OR DEROG eq 4 OR DEROG eq 5 OR DEROG eq 6 OR DEROG eq 7 OR DEROG eq 8 OR DEROG eq 9 ) then do;
42762     +GRP_DEROG = 6;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 6;
42763     +end;
MPRINT(EM_DIAGRAM):   end;
42764     +else do;
MPRINT(EM_DIAGRAM):   else do;
42765     +GRP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 1;
42766     +end;
MPRINT(EM_DIAGRAM):   end;
42767     +end;
MPRINT(EM_DIAGRAM):   end;
42768     +
42769     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42770     +* Variable: NINQ;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
42771     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42772     +LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
42773     +
42774     +if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
42775     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
42776     +end;
MPRINT(EM_DIAGRAM):   end;
42777     +else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
42778     +if (NINQ eq 0
42779     +) then do;
MPRINT(EM_DIAGRAM):   if (NINQ eq 0 ) then do;
42780     +GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
42781     +end;
MPRINT(EM_DIAGRAM):   end;
42782     +else
42783     +if (NINQ eq 1
42784     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 1 ) then do;
42785     +GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
42786     +end;
MPRINT(EM_DIAGRAM):   end;
42787     +else
42788     +if (NINQ eq 2
42789     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 2 ) then do;
42790     +GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
42791     +end;
MPRINT(EM_DIAGRAM):   end;
42792     +else
42793     +if (NINQ eq 3
42794     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 3 ) then do;
42795     +GRP_NINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 5;
42796     +end;
MPRINT(EM_DIAGRAM):   end;
42797     +else
42798     +if (NINQ eq 4
42799     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 4 ) then do;
42800     +GRP_NINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 6;
42801     +end;
MPRINT(EM_DIAGRAM):   end;
42802     +else
42803     +if (NINQ eq 5
42804     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 5 ) then do;
42805     +GRP_NINQ = 7;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 7;
42806     +end;
MPRINT(EM_DIAGRAM):   end;
42807     +else
42808     +if (NINQ eq 6
42809     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 6 ) then do;
42810     +GRP_NINQ = 8;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 8;
42811     +end;
MPRINT(EM_DIAGRAM):   end;
42812     +else
42813     +if (NINQ eq 7
42814     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 7 ) then do;
42815     +GRP_NINQ = 9;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 9;
42816     +end;
MPRINT(EM_DIAGRAM):   end;
42817     +else
42818     +if (NINQ eq 10 OR NINQ eq 11 OR NINQ eq 12 OR NINQ eq 13 OR NINQ eq 14 OR NINQ eq 8 OR NINQ eq 9
42819     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 10 OR NINQ eq 11 OR NINQ eq 12 OR NINQ eq 13 OR NINQ eq 14 OR NINQ eq 8 OR NINQ eq 9 ) then do;
42820     +GRP_NINQ = 10;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 10;
42821     +end;
MPRINT(EM_DIAGRAM):   end;
42822     +else do;
MPRINT(EM_DIAGRAM):   else do;
42823     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
42824     +end;
MPRINT(EM_DIAGRAM):   end;
42825     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
42826      run;

NOTE: DATA STEP view saved on file EMWS3.BINNING_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
42827      quit;
42828      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
42829      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42830      *------------------------------------------------------------*;
42831      * BINNING: Scoring TEST data;
42832      *------------------------------------------------------------*;
42833      data EMWS3.BINNING_TEST
42834      / view=EMWS3.BINNING_TEST
42835      ;
MPRINT(EM_DIAGRAM):   data EMWS3.BINNING_TEST / view=EMWS3.BINNING_TEST ;
42836      set EMWS3.Part_TEST
42837      ;
MPRINT(EM_DIAGRAM):   set EMWS3.Part_TEST ;
42838      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\EMFLOWSCORE.sas.
42839     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
42840     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
42841     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
42842     +
42843     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42844     +* Variable: CLAGE;
MPRINT(EM_DIAGRAM):   * Variable: CLAGE;
42845     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42846     +LABEL GRP_CLAGE = "Grouped: CLAGE";
MPRINT(EM_DIAGRAM):   LABEL GRP_CLAGE = "Grouped: CLAGE";
42847     +
42848     +if MISSING(CLAGE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CLAGE) then do;
42849     +GRP_CLAGE = 1;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 1;
42850     +end;
MPRINT(EM_DIAGRAM):   end;
42851     +else if NOT MISSING(CLAGE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(CLAGE) then do;
42852     +if CLAGE < 116.22 then do;
MPRINT(EM_DIAGRAM):   if CLAGE < 116.22 then do;
42853     +GRP_CLAGE = 2;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 2;
42854     +end;
MPRINT(EM_DIAGRAM):   end;
42855     +else
42856     +if 116.22 <= CLAGE AND CLAGE < 175.17 then do;
MPRINT(EM_DIAGRAM):   else if 116.22 <= CLAGE AND CLAGE < 175.17 then do;
42857     +GRP_CLAGE = 3;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 3;
42858     +end;
MPRINT(EM_DIAGRAM):   end;
42859     +else
42860     +if 175.17 <= CLAGE AND CLAGE < 230.93 then do;
MPRINT(EM_DIAGRAM):   else if 175.17 <= CLAGE AND CLAGE < 230.93 then do;
42861     +GRP_CLAGE = 4;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 4;
42862     +end;
MPRINT(EM_DIAGRAM):   end;
42863     +else
42864     +if 230.93 <= CLAGE then do;
MPRINT(EM_DIAGRAM):   else if 230.93 <= CLAGE then do;
42865     +GRP_CLAGE = 5;
MPRINT(EM_DIAGRAM):   GRP_CLAGE = 5;
42866     +end;
MPRINT(EM_DIAGRAM):   end;
42867     +end;
MPRINT(EM_DIAGRAM):   end;
42868     +
42869     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42870     +* Variable: DEBTINC;
MPRINT(EM_DIAGRAM):   * Variable: DEBTINC;
42871     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42872     +LABEL GRP_DEBTINC = "Grouped: DEBTINC";
MPRINT(EM_DIAGRAM):   LABEL GRP_DEBTINC = "Grouped: DEBTINC";
42873     +
42874     +if MISSING(DEBTINC) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DEBTINC) then do;
42875     +GRP_DEBTINC = 1;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 1;
42876     +end;
MPRINT(EM_DIAGRAM):   end;
42877     +else if NOT MISSING(DEBTINC) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DEBTINC) then do;
42878     +if DEBTINC < 28.87 then do;
MPRINT(EM_DIAGRAM):   if DEBTINC < 28.87 then do;
42879     +GRP_DEBTINC = 2;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 2;
42880     +end;
MPRINT(EM_DIAGRAM):   end;
42881     +else
42882     +if 28.87 <= DEBTINC AND DEBTINC < 34.73 then do;
MPRINT(EM_DIAGRAM):   else if 28.87 <= DEBTINC AND DEBTINC < 34.73 then do;
42883     +GRP_DEBTINC = 3;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 3;
42884     +end;
MPRINT(EM_DIAGRAM):   end;
42885     +else
42886     +if 34.73 <= DEBTINC AND DEBTINC < 39.2 then do;
MPRINT(EM_DIAGRAM):   else if 34.73 <= DEBTINC AND DEBTINC < 39.2 then do;
42887     +GRP_DEBTINC = 4;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 4;
42888     +end;
MPRINT(EM_DIAGRAM):   end;
42889     +else
42890     +if 39.2 <= DEBTINC then do;
MPRINT(EM_DIAGRAM):   else if 39.2 <= DEBTINC then do;
42891     +GRP_DEBTINC = 5;
MPRINT(EM_DIAGRAM):   GRP_DEBTINC = 5;
42892     +end;
MPRINT(EM_DIAGRAM):   end;
42893     +end;
MPRINT(EM_DIAGRAM):   end;
42894     +
42895     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42896     +* Variable: VALUE;
MPRINT(EM_DIAGRAM):   * Variable: VALUE;
42897     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42898     +LABEL GRP_VALUE = "Grouped: VALUE";
MPRINT(EM_DIAGRAM):   LABEL GRP_VALUE = "Grouped: VALUE";
42899     +
42900     +if MISSING(VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(VALUE) then do;
42901     +GRP_VALUE = 1;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 1;
42902     +end;
MPRINT(EM_DIAGRAM):   end;
42903     +else if NOT MISSING(VALUE) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(VALUE) then do;
42904     +if VALUE < 66345 then do;
MPRINT(EM_DIAGRAM):   if VALUE < 66345 then do;
42905     +GRP_VALUE = 2;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 2;
42906     +end;
MPRINT(EM_DIAGRAM):   end;
42907     +else
42908     +if 66345 <= VALUE AND VALUE < 89107 then do;
MPRINT(EM_DIAGRAM):   else if 66345 <= VALUE AND VALUE < 89107 then do;
42909     +GRP_VALUE = 3;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 3;
42910     +end;
MPRINT(EM_DIAGRAM):   end;
42911     +else
42912     +if 89107 <= VALUE AND VALUE < 121714 then do;
MPRINT(EM_DIAGRAM):   else if 89107 <= VALUE AND VALUE < 121714 then do;
42913     +GRP_VALUE = 4;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 4;
42914     +end;
MPRINT(EM_DIAGRAM):   end;
42915     +else
42916     +if 121714 <= VALUE then do;
MPRINT(EM_DIAGRAM):   else if 121714 <= VALUE then do;
42917     +GRP_VALUE = 5;
MPRINT(EM_DIAGRAM):   GRP_VALUE = 5;
42918     +end;
MPRINT(EM_DIAGRAM):   end;
42919     +end;
MPRINT(EM_DIAGRAM):   end;
42920     +
42921     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42922     +* Variable: DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: DELINQ;
42923     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42924     +LABEL GRP_DELINQ = "Grouped: DELINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_DELINQ = "Grouped: DELINQ";
42925     +
42926     +if MISSING(DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DELINQ) then do;
42927     +GRP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 1;
42928     +end;
MPRINT(EM_DIAGRAM):   end;
42929     +else if NOT MISSING(DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DELINQ) then do;
42930     +if (DELINQ eq 0
42931     +) then do;
MPRINT(EM_DIAGRAM):   if (DELINQ eq 0 ) then do;
42932     +GRP_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 2;
42933     +end;
MPRINT(EM_DIAGRAM):   end;
42934     +else
42935     +if (DELINQ eq 1
42936     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 1 ) then do;
42937     +GRP_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 3;
42938     +end;
MPRINT(EM_DIAGRAM):   end;
42939     +else
42940     +if (DELINQ eq 2
42941     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 2 ) then do;
42942     +GRP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 4;
42943     +end;
MPRINT(EM_DIAGRAM):   end;
42944     +else
42945     +if (DELINQ eq 3
42946     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 3 ) then do;
42947     +GRP_DELINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 5;
42948     +end;
The SAS System

MPRINT(EM_DIAGRAM):   end;
42949     +else
42950     +if (DELINQ eq 4
42951     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 4 ) then do;
42952     +GRP_DELINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 6;
42953     +end;
MPRINT(EM_DIAGRAM):   end;
42954     +else
42955     +if (DELINQ eq 5
42956     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 5 ) then do;
42957     +GRP_DELINQ = 7;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 7;
42958     +end;
MPRINT(EM_DIAGRAM):   end;
42959     +else
42960     +if (DELINQ eq 6
42961     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 6 ) then do;
42962     +GRP_DELINQ = 8;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 8;
42963     +end;
MPRINT(EM_DIAGRAM):   end;
42964     +else
42965     +if (DELINQ eq 10 OR DELINQ eq 11 OR DELINQ eq 12 OR DELINQ eq 13 OR DELINQ eq 15 OR DELINQ eq 7 OR DELINQ eq 8
42966     +) then do;
MPRINT(EM_DIAGRAM):   else if (DELINQ eq 10 OR DELINQ eq 11 OR DELINQ eq 12 OR DELINQ eq 13 OR DELINQ eq 15 OR DELINQ eq 7 OR DELINQ eq 8 ) then do;
42967     +GRP_DELINQ = 9;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 9;
42968     +end;
MPRINT(EM_DIAGRAM):   end;
42969     +else do;
MPRINT(EM_DIAGRAM):   else do;
42970     +GRP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_DELINQ = 1;
42971     +end;
MPRINT(EM_DIAGRAM):   end;
42972     +end;
MPRINT(EM_DIAGRAM):   end;
42973     +
42974     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42975     +* Variable: DEROG;
MPRINT(EM_DIAGRAM):   * Variable: DEROG;
42976     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42977     +LABEL GRP_DEROG = "Grouped: DEROG";
MPRINT(EM_DIAGRAM):   LABEL GRP_DEROG = "Grouped: DEROG";
42978     +
42979     +if MISSING(DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(DEROG) then do;
42980     +GRP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 1;
42981     +end;
MPRINT(EM_DIAGRAM):   end;
42982     +else if NOT MISSING(DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(DEROG) then do;
42983     +if (DEROG eq 0
42984     +) then do;
MPRINT(EM_DIAGRAM):   if (DEROG eq 0 ) then do;
42985     +GRP_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 2;
42986     +end;
MPRINT(EM_DIAGRAM):   end;
42987     +else
42988     +if (DEROG eq 1
42989     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 1 ) then do;
42990     +GRP_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 3;
42991     +end;
MPRINT(EM_DIAGRAM):   end;
42992     +else
42993     +if (DEROG eq 2
42994     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 2 ) then do;
42995     +GRP_DEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 4;
42996     +end;
MPRINT(EM_DIAGRAM):   end;
42997     +else
42998     +if (DEROG eq 3
42999     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 3 ) then do;
43000     +GRP_DEROG = 5;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 5;
43001     +end;
MPRINT(EM_DIAGRAM):   end;
43002     +else
43003     +if (DEROG eq 10 OR DEROG eq 4 OR DEROG eq 5 OR DEROG eq 6 OR DEROG eq 7 OR DEROG eq 8 OR DEROG eq 9
43004     +) then do;
MPRINT(EM_DIAGRAM):   else if (DEROG eq 10 OR DEROG eq 4 OR DEROG eq 5 OR DEROG eq 6 OR DEROG eq 7 OR DEROG eq 8 OR DEROG eq 9 ) then do;
43005     +GRP_DEROG = 6;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 6;
43006     +end;
MPRINT(EM_DIAGRAM):   end;
43007     +else do;
MPRINT(EM_DIAGRAM):   else do;
43008     +GRP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_DEROG = 1;
43009     +end;
MPRINT(EM_DIAGRAM):   end;
43010     +end;
MPRINT(EM_DIAGRAM):   end;
43011     +
43012     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43013     +* Variable: NINQ;
MPRINT(EM_DIAGRAM):   * Variable: NINQ;
43014     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
43015     +LABEL GRP_NINQ = "Grouped: NINQ";
MPRINT(EM_DIAGRAM):   LABEL GRP_NINQ = "Grouped: NINQ";
43016     +
43017     +if MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(NINQ) then do;
43018     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
43019     +end;
MPRINT(EM_DIAGRAM):   end;
43020     +else if NOT MISSING(NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(NINQ) then do;
43021     +if (NINQ eq 0
43022     +) then do;
MPRINT(EM_DIAGRAM):   if (NINQ eq 0 ) then do;
43023     +GRP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 2;
43024     +end;
MPRINT(EM_DIAGRAM):   end;
43025     +else
43026     +if (NINQ eq 1
43027     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 1 ) then do;
43028     +GRP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 3;
43029     +end;
MPRINT(EM_DIAGRAM):   end;
43030     +else
43031     +if (NINQ eq 2
43032     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 2 ) then do;
43033     +GRP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 4;
43034     +end;
MPRINT(EM_DIAGRAM):   end;
43035     +else
43036     +if (NINQ eq 3
43037     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 3 ) then do;
43038     +GRP_NINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 5;
43039     +end;
MPRINT(EM_DIAGRAM):   end;
43040     +else
43041     +if (NINQ eq 4
43042     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 4 ) then do;
43043     +GRP_NINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 6;
43044     +end;
MPRINT(EM_DIAGRAM):   end;
43045     +else
43046     +if (NINQ eq 5
43047     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 5 ) then do;
43048     +GRP_NINQ = 7;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 7;
43049     +end;
MPRINT(EM_DIAGRAM):   end;
43050     +else
43051     +if (NINQ eq 6
43052     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 6 ) then do;
43053     +GRP_NINQ = 8;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 8;
43054     +end;
MPRINT(EM_DIAGRAM):   end;
43055     +else
43056     +if (NINQ eq 7
43057     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 7 ) then do;
43058     +GRP_NINQ = 9;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 9;
43059     +end;
MPRINT(EM_DIAGRAM):   end;
43060     +else
43061     +if (NINQ eq 10 OR NINQ eq 11 OR NINQ eq 12 OR NINQ eq 13 OR NINQ eq 14 OR NINQ eq 8 OR NINQ eq 9
43062     +) then do;
MPRINT(EM_DIAGRAM):   else if (NINQ eq 10 OR NINQ eq 11 OR NINQ eq 12 OR NINQ eq 13 OR NINQ eq 14 OR NINQ eq 8 OR NINQ eq 9 ) then do;
43063     +GRP_NINQ = 10;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 10;
43064     +end;
MPRINT(EM_DIAGRAM):   end;
43065     +else do;
MPRINT(EM_DIAGRAM):   else do;
43066     +GRP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_NINQ = 1;
43067     +end;
MPRINT(EM_DIAGRAM):   end;
43068     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
43069      run;

NOTE: DATA STEP view saved on file EMWS3.BINNING_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
43070      quit;
43071      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
43073      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
43074      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
43075      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

43076      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
43077      * BINNING: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * BINNING: Computing metadata for TRAIN data;
43078      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS3.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS3\BINNING\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.BINNING_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.BINNING_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.BINNING_TRAIN out=WORK.M0NGA3IM noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0NGA3IM;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0NGA3IM(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0NGA3IM;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0NGA3IM;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3KGUIRD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1TDH0M3(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   set WORK.M3KGUIRD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT= 
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.BINNING_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "BINNING";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = 'DEBTINC' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_DEBTINC' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_DEBTINC' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'DELINQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_DELINQ' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_DELINQ' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'CLAGE' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_CLAGE' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_CLAGE' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'NINQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NINQ' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_NINQ' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'DEROG' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_DEROG' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_DEROG' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'VALUE' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_VALUE' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_VALUE' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'JOB' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_JOB' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_JOB' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'LOAN' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_LOAN' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_LOAN' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'YOJ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_YOJ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_YOJ' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'MORTDUE' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MORTDUE' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_MORTDUE' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'CLNO' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_CLNO' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_CLNO' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'REASON' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_REASON' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_REASON' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS3.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS3.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS3.BINNING_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
