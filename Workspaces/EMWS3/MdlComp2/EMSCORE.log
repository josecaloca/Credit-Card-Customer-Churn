MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15H46" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                14 de marzo de 2021
Hora:                15H46
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2Z7K4BU "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2Z7K4BU new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS3.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS3.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
44908      /* Generate assessment metadata, which will be used to generate assessment data step */
44909      /* code, such as retrieving names of temporary variables and summary variables,      */
44910      /* labels, etc.  It is used in almost all the assessment computations such as lift,  */
44911      /* roc, index, scoreDist and could be thought as a global variable in assessment     */
44912      /* computation.                                                                      */
44913      data work.ASSESS_22YI1I4_assessMeta_3oxLPx;
MPRINT(EM_DIAGRAM):    data work.ASSESS_22YI1I4_assessMeta_3oxLPx;
44914      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32
44914    ! RESULT_MAX_LABEL
44915         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX 
$32 RESULT_MAX_LABEL $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
44916      VARIABLE = "BAD";
MPRINT(EM_DIAGRAM):   VARIABLE = "BAD";
44917      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
44918      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
44919      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
44920      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
44921      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
44922      MEASUREMENT = "BINARY";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "BINARY";
44923      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
44924      GEN_VAR_IN_TEMP_DATA = "BAD";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "BAD";
44925      RESULT_MEAN = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "";
44926      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
44927      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
44928      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
44929      MIN_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "";
44930      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
44931      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
44932      MAX_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "";
44933      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
44934      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
44935      TEMPORARY_VARIABLE = "BAD_CQlAYnqmNTYvU5R";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "BAD_CQlAYnqmNTYvU5R";
44936      output;
MPRINT(EM_DIAGRAM):   output;
44937      VARIABLE = "F_BAD_1";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_BAD_1";
44938      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
44939      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
44940      PARENT = "F_BAD";
MPRINT(EM_DIAGRAM):   PARENT = "F_BAD";
44941      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
44942      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
44943      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
44944      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
44945      GEN_VAR_IN_TEMP_DATA = "F_BAD_1_Gl7WaY7L7xCMuuF";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_BAD_1_Gl7WaY7L7xCMuuF";
44946      RESULT_MEAN = "F_BAD_1_mean_l7M23h9LMYcMOXi";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_BAD_1_mean_l7M23h9LMYcMOXi";
44947      /* adjust for tied cases */
44948      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
44949      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
44950      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
44951      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
44952      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
44953      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
44954      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Número de eventos";
44955      TEMPORARY_VARIABLE = "F_BAD_1_rEq4PpqhKfioEFV";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_BAD_1_rEq4PpqhKfioEFV";
44956      output;
MPRINT(EM_DIAGRAM):   output;
44957      VARIABLE = "F_BAD_0";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_BAD_0";
44958      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
44959      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
44960      PARENT = "F_BAD";
MPRINT(EM_DIAGRAM):   PARENT = "F_BAD";
44961      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
44962      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
44963      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
44964      LAST_LEVEL = "0";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "0";
44965      GEN_VAR_IN_TEMP_DATA = "F_BAD_0_w6loHu5M6HMJOvb";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_BAD_0_w6loHu5M6HMJOvb";
44966      RESULT_MEAN = "F_BAD_0_mean_gdRqdecyymhGEDU";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_BAD_0_mean_gdRqdecyymhGEDU";
44967      /* adjust for tied cases */
44968      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
44969      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
44970      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
44971      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
44972      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
44973      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
44974      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Número de eventos";
44975      TEMPORARY_VARIABLE = "F_BAD_0_Movho1g19_vAy_T";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_BAD_0_Movho1g19_vAy_T";
44976      output;
MPRINT(EM_DIAGRAM):   output;
44977      VARIABLE = "P_BAD1";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_BAD1";
44978      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
44979      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
44980      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
44981      LEVEL = "1";
MPRINT(EM_DIAGRAM):   LEVEL = "1";
44982      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
44983      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
44984      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
44985      GEN_VAR_IN_TEMP_DATA = "P_BAD1";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_BAD1";
44986      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
44987      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Probabilidad posterior de la media";
44988      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
44989      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Probabilidad posterior mín";
44990      MIN_ADJUSTED = "P_BAD1_minAdjusted_EQKtneDqf";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_BAD1_minAdjusted_EQKtneDqf";
44991      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
44992      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Probabilidad posterior máx";
44993      MAX_ADJUSTED = "P_BAD1_maxAdjusted_PfsTL1EWa";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_BAD1_maxAdjusted_PfsTL1EWa";
44994      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
44995      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
44996      TEMPORARY_VARIABLE = "P_BAD1_6tQhAOGDFWRmRuO";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_BAD1_6tQhAOGDFWRmRuO";
44997      output;
MPRINT(EM_DIAGRAM):   output;
44998      VARIABLE = "P_BAD0";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_BAD0";
44999      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
45000      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
45001      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
45002      LEVEL = "0";
MPRINT(EM_DIAGRAM):   LEVEL = "0";
45003      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
45004      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
45005      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
45006      GEN_VAR_IN_TEMP_DATA = "P_BAD0";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_BAD0";
45007      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
45008      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Probabilidad posterior de la media";
45009      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
45010      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Probabilidad posterior mín";
45011      MIN_ADJUSTED = "P_BAD0_minAdjusted_XBXJJ_Aq0";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_BAD0_minAdjusted_XBXJJ_Aq0";
45012      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
45013      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Probabilidad posterior máx";
45014      MAX_ADJUSTED = "P_BAD0_maxAdjusted_m3dU32nMG";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_BAD0_maxAdjusted_m3dU32nMG";
45015      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
45016      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
45017      TEMPORARY_VARIABLE = "P_BAD0_3LCL9o3PTS0uFCP";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_BAD0_3LCL9o3PTS0uFCP";
45018      output;
MPRINT(EM_DIAGRAM):   output;
45019      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_22YI1I4_ASSESSMETA_3OXLPX has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

45020      /* Generate temporary dataset and obtain summary statistics such as total number of   */
45021      /* obserations, frequency of target.  However, summary statistics for class reporting */
45022      /* variabels are not computed here since if there exist class reporting variables,    */
45023      /* then PROC DMDB will be called. And there is no need to compute interval reporting  */
45024      /* summary statisitcs, if any.                                                        */
45025      data work.ASSESS_22YI1I4_normSD_fDNNYS(drop=
45026      _numberOfObservation_
45027      _levelFrequency_1
45028      _levelFrequency_2
45029      )
45030      work.ASSESS_22YI1I4_meansAndTi_0aWQ0U (keep=
45031      _numberOfObservation_
45032      _levelFrequency_1
45033      _levelFrequency_2
45034      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_22YI1I4_normSD_fDNNYS(drop= _numberOfObservation_ _levelFrequency_1 _levelFrequency_2 ) work.ASSESS_22YI1I4_meansAndTi_0aWQ0U (keep= _numberOfObservation_ _levelFrequency_1 _levelFrequency_2 );
45035      set EMWS3.MdlComp_TRAIN(
45036      where=(
45037      (BAD ^= .)
45038      )
45039      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS3.MdlComp_TRAIN( where=( (BAD ^= .) ) ) end=_lastObservation_;
45040      keep frequency_nBNtoJ;
MPRINT(EM_DIAGRAM):   keep frequency_nBNtoJ;
45041      frequency_nBNtoJ = 1;
MPRINT(EM_DIAGRAM):   frequency_nBNtoJ = 1;
45042      keep I_BAD F_BAD;
MPRINT(EM_DIAGRAM):   keep I_BAD F_BAD;
45043      keep F_BAD_1_Gl7WaY7L7xCMuuF;
MPRINT(EM_DIAGRAM):   keep F_BAD_1_Gl7WaY7L7xCMuuF;
45044      if (F_BAD = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '1') then do;
45045      F_BAD_1_Gl7WaY7L7xCMuuF = 1;
MPRINT(EM_DIAGRAM):   F_BAD_1_Gl7WaY7L7xCMuuF = 1;
45046      end;
MPRINT(EM_DIAGRAM):   end;
45047      else do;
MPRINT(EM_DIAGRAM):   else do;
45048      F_BAD_1_Gl7WaY7L7xCMuuF = 0;
MPRINT(EM_DIAGRAM):   F_BAD_1_Gl7WaY7L7xCMuuF = 0;
45049      end;
MPRINT(EM_DIAGRAM):   end;
45050      keep F_BAD_0_w6loHu5M6HMJOvb;
MPRINT(EM_DIAGRAM):   keep F_BAD_0_w6loHu5M6HMJOvb;
45051      if (F_BAD = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '0') then do;
45052      F_BAD_0_w6loHu5M6HMJOvb = 1;
MPRINT(EM_DIAGRAM):   F_BAD_0_w6loHu5M6HMJOvb = 1;
45053      end;
MPRINT(EM_DIAGRAM):   end;
45054      else do;
MPRINT(EM_DIAGRAM):   else do;
45055      F_BAD_0_w6loHu5M6HMJOvb = 0;
MPRINT(EM_DIAGRAM):   F_BAD_0_w6loHu5M6HMJOvb = 0;
45056      end;
MPRINT(EM_DIAGRAM):   end;
45057      keep P_BAD1;
MPRINT(EM_DIAGRAM):   keep P_BAD1;
45058      keep P_BAD0;
MPRINT(EM_DIAGRAM):   keep P_BAD0;
45059      output work.ASSESS_22YI1I4_normSD_fDNNYS;
MPRINT(EM_DIAGRAM):   output work.ASSESS_22YI1I4_normSD_fDNNYS;
45060      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
45061      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
45062      _numberOfObservation_ + frequency_nBNtoJ;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_nBNtoJ;
45063      keep _levelFrequency_1;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_1;
45064      retain _levelFrequency_1 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_1 0;
45065      if (F_BAD = '1') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '1') then do;
45066      _levelFrequency_1 + frequency_nBNtoJ;
MPRINT(EM_DIAGRAM):   _levelFrequency_1 + frequency_nBNtoJ;
45067      end;
MPRINT(EM_DIAGRAM):   end;
45068      keep _levelFrequency_2;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_2;
45069      retain _levelFrequency_2 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_2 0;
45070      if (F_BAD = '0') then do;
MPRINT(EM_DIAGRAM):   if (F_BAD = '0') then do;
45071      _levelFrequency_2 + frequency_nBNtoJ;
MPRINT(EM_DIAGRAM):   _levelFrequency_2 + frequency_nBNtoJ;
45072      end;
MPRINT(EM_DIAGRAM):   end;
45073      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
45074      output work.ASSESS_22YI1I4_meansAndTi_0aWQ0U;
MPRINT(EM_DIAGRAM):   output work.ASSESS_22YI1I4_meansAndTi_0aWQ0U;
45075      end;
MPRINT(EM_DIAGRAM):   end;
45076      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: View EMWS3.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2979 observations read from the data set EMWS3.TREE3_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS3.MDLCOMP_TRAIN.
      WHERE BAD not = .;
NOTE: The data set WORK.ASSESS_22YI1I4_NORMSD_FDNNYS has 2979 observations and 7 variables.
NOTE: The data set WORK.ASSESS_22YI1I4_MEANSANDTI_0AWQ0U has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

45077      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
45078      set EMWS3.MdlComp2_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS3.MdlComp2_EMRANK;
45079      where MODEL = "Tree3" and TARGET = "BAD" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Tree3" and TARGET = "BAD" and dataRole="TRAIN";
45080      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS3.MDLCOMP2_EMRANK.
      WHERE (MODEL='Tree3') and (TARGET='BAD') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

45081      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
45082      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
45083      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
45084      output;
MPRINT(EM_DIAGRAM):   output;
45085      end;
MPRINT(EM_DIAGRAM):   end;
45086      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45087      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
45088      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
45089      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
45090      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45091      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
45092      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
45093      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
45094      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
45095      keep event;
MPRINT(EM_DIAGRAM):   keep event;
45096      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
45097      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
45098      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
45099      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
45100      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
45101      /* tied */
45102      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
45103      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
45104      end;
MPRINT(EM_DIAGRAM):   end;
45105      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
45106      /* next tied */
45107      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
45108      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ ));
45109      end;
MPRINT(EM_DIAGRAM):   end;
45110      output;
MPRINT(EM_DIAGRAM):   output;
45111      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
45112      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
45113      *end;
MPRINT(EM_DIAGRAM):   *end;
45114      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
45115      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
45116      end;
MPRINT(EM_DIAGRAM):   end;
45117      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
45118      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
45119      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
45120      end;
MPRINT(EM_DIAGRAM):   end;
45121      end;
MPRINT(EM_DIAGRAM):   end;
45122      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
45123      /* correct the previous change */
45124      end;
MPRINT(EM_DIAGRAM):   end;
45125      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
45126      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
45127      output;
MPRINT(EM_DIAGRAM):   output;
45128      end;
MPRINT(EM_DIAGRAM):   end;
45129      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
45130      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
45131      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45132      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
45133      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
45134      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
45135      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
45136      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
45137      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
45138      end;
MPRINT(EM_DIAGRAM):   end;
45139      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
45140      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
45141      output;
MPRINT(EM_DIAGRAM):   output;
45142      end;
MPRINT(EM_DIAGRAM):   end;
45143      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 4 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: This SAS session is using a registry in WORK.  All changes will be lost at the end of this session.
45144      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring MDLCOMP_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45145      *------------------------------------------------------------*;
45146      * MdlComp2: Scoring MDLCOMP_TRAIN data;
45147      *------------------------------------------------------------*;
45148      data EMWS3.MdlComp2_TRAIN
45149      / view=EMWS3.MdlComp2_TRAIN
45150      ;
MPRINT(EM_DIAGRAM):   data EMWS3.MdlComp2_TRAIN / view=EMWS3.MdlComp2_TRAIN ;
45151      set EMWS3.MdlComp_TRAIN
45152      ;
MPRINT(EM_DIAGRAM):   set EMWS3.MdlComp_TRAIN ;
45153      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas.
45154     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
45155     +if (P_BAD1 ge 0.74242424242424) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.74242424242424) then do;
45156     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45157     +b_BAD = floor(1 + 3*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(1 + 3*_temp_);
45158     +end;
MPRINT(EM_DIAGRAM):   end;
45159     +else
45160     +if (P_BAD1 ge 0.29496402877697) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.29496402877697) then do;
45161     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
45162     +end;
MPRINT(EM_DIAGRAM):   end;
45163     +else
45164     +if (P_BAD1 ge 0.14201183431952) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.14201183431952) then do;
45165     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45166     +b_BAD = floor(5 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(5 + 2*_temp_);
45167     +end;
MPRINT(EM_DIAGRAM):   end;
45168     +else
45169     +do;
MPRINT(EM_DIAGRAM):   else do;
45170     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45171     +b_BAD = floor(7 + 14*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(7 + 14*_temp_);
45172     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
45173      run;

NOTE: DATA STEP view saved on file EMWS3.MDLCOMP2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
45174      quit;
45175      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
45176      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring MDLCOMP_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45177      *------------------------------------------------------------*;
45178      * MdlComp2: Scoring MDLCOMP_VALIDATE data;
45179      *------------------------------------------------------------*;
45180      data EMWS3.MdlComp2_VALIDATE
45181      / view=EMWS3.MdlComp2_VALIDATE
45182      ;
MPRINT(EM_DIAGRAM):   data EMWS3.MdlComp2_VALIDATE / view=EMWS3.MdlComp2_VALIDATE ;
45183      set EMWS3.MdlComp_VALIDATE
45184      ;
MPRINT(EM_DIAGRAM):   set EMWS3.MdlComp_VALIDATE ;
45185      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas.
45186     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
45187     +if (P_BAD1 ge 0.74242424242424) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.74242424242424) then do;
45188     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45189     +b_BAD = floor(1 + 3*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(1 + 3*_temp_);
45190     +end;
MPRINT(EM_DIAGRAM):   end;
45191     +else
45192     +if (P_BAD1 ge 0.29496402877697) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.29496402877697) then do;
45193     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
45194     +end;
MPRINT(EM_DIAGRAM):   end;
45195     +else
45196     +if (P_BAD1 ge 0.14201183431952) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.14201183431952) then do;
45197     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45198     +b_BAD = floor(5 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(5 + 2*_temp_);
45199     +end;
MPRINT(EM_DIAGRAM):   end;
45200     +else
45201     +do;
MPRINT(EM_DIAGRAM):   else do;
45202     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45203     +b_BAD = floor(7 + 14*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(7 + 14*_temp_);
45204     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
45205      run;

NOTE: DATA STEP view saved on file EMWS3.MDLCOMP2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
45206      quit;
45207      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
45208      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp2: Scoring MDLCOMP_TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45209      *------------------------------------------------------------*;
45210      * MdlComp2: Scoring MDLCOMP_TEST data;
45211      *------------------------------------------------------------*;
45212      data EMWS3.MdlComp2_TEST
45213      / view=EMWS3.MdlComp2_TEST
45214      ;
MPRINT(EM_DIAGRAM):   data EMWS3.MdlComp2_TEST / view=EMWS3.MdlComp2_TEST ;
45215      set EMWS3.MdlComp_TEST
45216      ;
MPRINT(EM_DIAGRAM):   set EMWS3.MdlComp_TEST ;
45217      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\MdlComp2\EMFLOWSCORE.sas.
45218     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
45219     +if (P_BAD1 ge 0.74242424242424) then do;
MPRINT(EM_DIAGRAM):   if (P_BAD1 ge 0.74242424242424) then do;
45220     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45221     +b_BAD = floor(1 + 3*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(1 + 3*_temp_);
45222     +end;
MPRINT(EM_DIAGRAM):   end;
45223     +else
45224     +if (P_BAD1 ge 0.29496402877697) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.29496402877697) then do;
45225     +b_BAD = 4;
MPRINT(EM_DIAGRAM):   b_BAD = 4;
45226     +end;
MPRINT(EM_DIAGRAM):   end;
45227     +else
45228     +if (P_BAD1 ge 0.14201183431952) then do;
MPRINT(EM_DIAGRAM):   else if (P_BAD1 ge 0.14201183431952) then do;
45229     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45230     +b_BAD = floor(5 + 2*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(5 + 2*_temp_);
45231     +end;
MPRINT(EM_DIAGRAM):   end;
45232     +else
45233     +do;
MPRINT(EM_DIAGRAM):   else do;
45234     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
45235     +b_BAD = floor(7 + 14*_temp_);
MPRINT(EM_DIAGRAM):   b_BAD = floor(7 + 14*_temp_);
45236     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
45237      run;

NOTE: DATA STEP view saved on file EMWS3.MDLCOMP2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.MDLCOMP_TEST.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
45238      quit;
45239      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
45240      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45241      * MdlComp2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp2: Computing metadata for TRAIN data;
45242      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS3.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.MdlComp2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.MdlComp2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.MdlComp2_TRAIN out=WORK.M2C_Q731 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C_Q731;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2C_Q731(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2C_Q731;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2C_Q731;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3C6IHA3 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M04IT0FA(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   set WORK.M3C6IHA3;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT= 
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.MdlComp_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.MdlComp_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.MdlComp2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp2";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS3.MDLCOMP2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS3.MDLCOMP2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS3.MDLCOMP2_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
