*------------------------------------------------------------*
Usuario:                Jose Caloca
Fecha:                14 de marzo de 2021
Hora:                15H42
Sitio:                70115216
Plataforma:            X64_10PRO
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
*------------------------------------------------------------*
NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18600      data EMWS3.EM_TREEINT_STARTTIME;
18601      starttime=1931355763.95;
18602      run;

NOTE: The data set EMWS3.EM_TREEINT_STARTTIME has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

18603      %let _emdsep = \;
18604      %em_getactionstatus(emlib =EMWS3, nodeid=Tree3);

18605      %let em_filemodtime=;
18606      data _null_;
18607      format modate best.;
18608      set sashelp.Vextfl;
18609      where fileref eq "#LN00141";
18610      call symput('EM_FILEMODTIME', put(modate, best.));
18611      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00141';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

18612      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
18613      %let em_Train = N;
18614      %let em_Score = N;
18615      %let em_Report = N;
18616      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


PERFORMANCE  DETAILS
19141      data EM_TARGETDECINFO;
19142      length TARGET $32 DECDATA DECMETA $43;
19143      TARGET="BAD";
19144      DECDATA="EMWS3.Ids_BAD_DD";
19145      DECMETA="EMWS3.Ids_BAD_DM";
19146      output;
19147      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19148      %let emexceptionString =;
19149      %let EMEXCEPTIONSTRING=;
19150      *------------------------------------------------------------*;
19151      * OPENINT: Tree3;
19152      *------------------------------------------------------------*;
19153      %let EM_ACTION = OPENINT;
19154      %let syscc = 0;
19155      %macro main;
19156      
19157        %if %upcase(&EM_ACTION) = CREATE %then %do;
19158          filename temp catalog 'sashelp.emmodl.tree_create.source';
19159          %include temp;
19160          filename temp;
19161      
19162          %em_tree_create;
19163        %end;
19164      
19165         %else
19166         %if %upcase(&EM_ACTION) = TRAIN %then %do;
19167      
19168             filename temp catalog 'sashelp.emmodl.tree_train.source';
19169             %include temp;
19170             filename temp;
19171             %em_tree_train;
19172         %end;
19173      
19174        %else
19175        %if %upcase(&EM_ACTION) = SCORE %then %do;
19176          filename temp catalog 'sashelp.emmodl.tree_score.source';
19177          %include temp;
19178          filename temp;
19179      
19180          %em_tree_score;
19181      
19182        %end;
19183      
19184        %else
19185        %if %upcase(&EM_ACTION) = REPORT %then %do;
19186      
19187             filename temp catalog 'sashelp.emmodl.tree_report.source';
19188             %include temp;
19189             filename temp;
19190      
19191             %em_tree_report;
19192         %end;
19193      
19194        %else
19195        %if %upcase(&EM_ACTION) = OPENINT %then %do;
19196      
19197             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19198             %include temp;
19199             filename temp;
19200             %EM_TREE_OPENTREEVIEWER;
19201      
19202         %end;
19203      
19204        %else
19205        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
19206      
19207             filename temp catalog 'sashelp.emmodl.tree_actions.source';
19208             %include temp;
19209             filename temp;
19210             %EM_TREE_CLOSETREEVIEWER;
19211      
19212         %end;
19213      
19214      
19215         %doendm:
19216      %mend main;
19217      
19218      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
19220     +%macro EM_TREE_OPENTREEVIEWER;
19222     +  options validvarname = v7;
19224     +  /* retrieve table names */
19225     +  %EM_GETNAME(key=EMTREE, type=DATA);
19226     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
19228     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
19229     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
19231     +  /* load trainmacros */
19232     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19233     +  %include temp;
19234     +  filename temp;
19236     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
19238     +    %if "&EM_IMPORT_DATA"="" %then %do;
19239     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
19240     +       %goto doendm;
19241     +   %end;
19242     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
19243     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
19244     +       %goto doendm;
19245     +   %end;
19247     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
19248     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
19250     +       /* determine if multiple targets will be processed */
19251     +       %let em_tree_multipleTargets=N;
19252     +       %let em_tree_numTarget=1;
19253     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19254     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19255     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19256     +            %let em_tree_multipleTargets=N;
19257     +         %end;
19258     +         %else %do;
19259     +            /* create macro array of targets  */
19260     +            data _null_;
19261     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19262     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19263     +              if eof then
19264     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19265     +           run;
19267     +           %if &em_tree_numTarget gt 1 %then %do;
19268     +            %let em_tree_multipleTargets=Y;
19269     +           %end;
19270     +         %end;
19271     +       %end;
19273     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
19275     +       /* Check return code and throw exception if error is detected */
19276     +       %if &SYSERR > 0 %then %do;
19277     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19278     +          %goto doendm;
19279     +       %end;
19281     +  %end;
19283     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
19284     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
19285     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
19286     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
19287     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
19289     +  /* determine if sample should be used within interactive training */
19290     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
19291     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
19293     +     /* determine number of obs in training table */
19294     +     %let trainobs = ;
19295     +     proc sql noprint;
19296     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
19297     +     quit;
19299     +     /* retrieve appropriate sample size */
19300     +     %let maxobs = ;
19301     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19302     +       %exploreObs(data=&EM_IMPORT_DATA);
19303     +       %let maxobs = &_EXPLOREOBS_MAX;
19304     +     %end;
19305     +     %else %do;
19306     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
19307     +     %end;
19309     +     /* create sample based on maxobs */
19310     +     %if &trainobs gt &maxobs %then %do;
19311     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
19312     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19313     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19314     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19315     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19316     +          %end;
19317     +        %end;
19318     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
19319     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
19320     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
19321     +              %let em_tree_tempmethod = RANDOM;
19322     +            %end;
19323     +            %else %do;
19324     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19325     +            %end;
19326     +          %end;
19327     +          %else %do;
19328     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
19329     +          %end;
19331     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
19332     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19333     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
19334     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
19335     +          %end;
19336     +        %end;
19338     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
19339     +          interact;
19340     +          subtree largest;
19341     +           /********** do i need CV options here? *********/
19342     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19343     +            assess validata=&&EM_USER_VALIDSAMPLE;
19344     +          %end;
19345     +          save model=&EM_USER_EMTREE;
19346     +        run;
19347     +        quit;
19348     +     %end;
19349     +  %end;
19351     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
19352     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
19353     +  data &EM_USER_BROWSETREE;
19354     +    set &EM_USER_EMTREE;
19355     +  run;
19357     +  /* reset validvarname options
19358     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
19359     +  options validvarname=&vvarname;  */
19360     +  %doendm:
19362     +%mend EM_TREE_OPENTREEVIEWER;
19366     +%macro EM_TREE_CLOSETREEVIEWER;
19368     +    /* clear syscc prior to running close Method */
19369     +    %let SYSCC = 0;
19370     +    options validvarname=V7;
19372     +    /* retrieve table names */
19373     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
19374     +    %EM_GETNAME(key=EMTREE,  type=DATA);
19375     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
19376     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
19377     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
19378     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
19379     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
19380     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
19381     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
19382     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
19384     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19385     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19387     +    /* load trainmacros */
19388     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
19389     +    %include temp;
19390     +    filename temp;
19392     +    /* send output to node output window ; this will replace */
19393     +    /* old print with the new  print                         */
19394     +    options validvarname = v7;
19396     +    /* determine if multiple targets will be processed */
19397     +    %let em_tree_multipleTargets=N;
19398     +    %let em_tree_numTarget=1;
19399     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19400     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19401     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19402     +         %let em_tree_multipleTargets=N;
19403     +      %end;
19404     +      %else %do;
19405     +         /* create macro array of targets  */
19406     +         data _null_;
19407     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19408     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
19409     +           if eof then
19410     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19411     +        run;
19413     +        %if &em_tree_numTarget gt 1 %then %do;
19414     +           %let em_tree_multipleTargets=Y;
19415     +        %end;
19416     +      %end;
19417     +    %end;
19420     + /* turn on pmml if requested */
19421     + %let nnpmml=0;
19422     + %if %symexist(EM_PMML) %then %do;
19423     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19424     +       %let nnpmml=1;
19426     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19427     +   %end;
19428     + %end;
19430     + %if &nnpmml %then %do;
19432     +    /* create dmdb needed for pmml generation */
19433     +    %let tree_maxlevel = 512;
19434     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19435     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19436     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19437     +      %end;
19438     +    %end;
19439     +    %if &tree_maxlevel gt 0 %then %do;
19440     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19441     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19442     +    %end;
19444     +    %let targetOrderString =;
19445     +    %let targetString = ;
19446     +    data _null_;
19447     +       length orderString nameString $10000;
19448     +       retain orderString nameString;
19449     +       set &em_data_variableset end=eof;
19450     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19451     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19452     +       %end;
19453     +       %else %do;
19454     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19455     +       %end;          select(order);
19456     +         when('')        order ='DESC';
19457     +         when('FMTASC')  order='ASCFMT';
19458     +         when('FMTDESC') order='DESFMT';
19459     +         otherwise;
19460     +       end;
19461     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19462     +       nameString = trim(nameString)!!' '!!trim(NAME);
19464     +       if eof then do;
19465     +          call symput('targetOrderString', trim(orderString));
19466     +          call symput('targetString', trim(nameString));
19467     +       end;
19468     +    run;
19470     +    %let arborkluge= "work._treeDMDB";
19472     +    proc dmdb batch data=&EM_IMPORT_DATA
19473     +    %if &nnpmml %then %do;
19474     +        PMML
19475     +    %end;
19476     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19478     +     %if "%EM_ID" ne "" %then %do;
19479     +       id %EM_ID;
19480     +     %end;
19481     +     %if &EM_NUM_CLASS gt 0 %then %do;
19482     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19483     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19484     +            &targetOrderString;
19485     +     %end;
19486     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
19487     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19488     +     %end;
19489     +     target &targetString %EM_INTERVAL_TARGET;
19490     +     %if "%EM_FREQ" ne "" %then %do;
19491     +       freq %EM_FREQ;
19492     +     %end;
19493     +    run;
19494     +    quit;
19496     +    proc datasets lib=work nolist;
19497     +       delete classout varout;
19498     +    run;
19499     +    quit;
19501     + %end;
19504     +    /* run arbor to generate new results and scoring code */
19505     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
19506     +       Performance &EM_PROPERTY_PERFORMANCE
19507     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19508     +         nodesize=&EM_PROPERTY_NODESAMPLE
19509     +       %end;
19510     +       ;
19511     +      interact;
19512     +      *subtree largest;
19515     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
19516     +         Assess
19517     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19518     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
19519     +              %put &em_codebar;
19520     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
19521     +              %put &errormsg;
19522     +              %put &em_codebar;
19523     +            %end;
19524     +            %else %do;
19525     +               Validata=&EM_IMPORT_VALIDATE;
19526     +            %end;
19527     +         %end;
19528     +         %else %do;
19529     +           NoValidata
19530     +         %end;
19531     +       %end;
19532     +      ;
19533     +      makemacro nleaves=nleaves;
19534     +      save
19535     +      %if "&EM_USER_EMTREE" ne "" %then %do;
19536     +         MODEL=&EM_USER_EMTREE
19537     +      %end;
19538     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
19539     +        SEQUENCE=&EM_USER_OUTSEQ
19540     +      %end;
19541     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
19542     +        IMPORTANCE=&EM_USER_OUTIMPORT
19543     +      %end;
19544     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
19545     +         NODESTAT=&EM_USER_OUTNODES
19546     +      %end;
19547     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
19548     +         SUMMARY=&EM_USER_OUTSUMMARY
19549     +      %end;
19550     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
19551     +         STATSBYNODE=&EM_USER_OUTSTATS
19552     +      %end;
19553     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
19554     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
19555     +      %end;
19556     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
19557     +         Pathlistnonmissing=&EM_USER_OUTPATH
19558     +      %end;
19559     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
19560     +         RULES = &EM_USER_OUTRULES
19561     +      %end;
19562     +      ;
19564     +      %let codetext=;
19565     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
19566     +        %let codetext=&codetext DUMMY;
19567     +      %end;
19568     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
19569     +        %let codetext=&codetext NOLEAFID;
19570     +      %end;
19572     +      %let norescodetxt=;
19573     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
19574     +        %let norescodetxt=&codetext NOPRED;
19575     +      %end;
19577     +      %let lookupString = ;
19578     +      %if ^%symexist(EM_OPTION) %then
19579     +         %let EM_OPTION=;
19581     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
19582     +         %let lookupString = LOOKUP=SELECT;
19583     +      %end;
19585     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
19586     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
19588     +      %if &nnpmml %then %do;
19589     +        code pmml;
19590     +      %end;
19592     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
19593     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
19594     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
19595     +      %end;
19596     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
19597     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
19598     +      %end;
19599     +    run;
19601     +    quit;
19603     +    %if &nnpmml %then %do;
19604     +       ods pmml close;
19605     +    %end;
19607     +   /* Check return code and throw exception if error is detected */
19608     +   %if &SYSERR > 0 %then %do;
19609     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
19610     +     %goto doendm;
19611     +   %end;
19613     +   /* create outfit dataset if multiple score statements have been executed */
19614     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
19616     +   /* print variable importance listing */
19617     +   %let em_tree_surrexists=.;
19618     +   data _null_;
19619     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
19620     +    if eof then do ;
19621     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19622     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19623     +    end;
19624     +   run;
19626     +   /* create English Rules */
19627     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
19628     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
19629     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
19630     +       %em_tree_makeEnglishRules;
19632     +      /* English Rules */
19633     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
19635     +     %end;
19636     +   filename x;
19638     +   %doendm:
19640     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
19641     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
19643     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

19645      %let em_filemodtime=;
19646      data _null_;
19647      format modate best.;
19648      set sashelp.Vextfl;
19649      where fileref eq "#LN00151";
19650      call symput('EM_FILEMODTIME', put(modate, best.));
19651      run;

NOTE: There were 1 observations read from the data set SASHELP.VEXTFL.
      WHERE fileref='#LN00151';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

19652      %symdel em_filemodtime;
WARNING: Attempt to delete macro variable EM_FILEMODTIME failed. Variable not found.
19653      %let em_Train = N;
19654      %let em_Score = N;
19655      %let em_Report = N;
19656      %let em_Run = N;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
19658     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
19659     +  %global &nLevel;
19660     +  proc dmdb batch data=&indata
19661     +    classout=_tmp_dmdbout;
19662     +    class &target;
19663     +  run;
19664     +  data _tmp_dmdbout;
19665     +    set _tmp_dmdbout;
19666     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
19667     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
19668     +  run;
19669     +  data _null_;
19670     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
19671     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
19672     +    %let dsid = %sysfunc(close(&dsid));
19673     +     call symput("&nLevel", put(&_obs, Best12.));
19674     +  run;
19676     +  proc datasets lib=work nolist;
19677     +     delete _tmp_dmdbout;
19678     +  run;
19679     +  quit;
19680     +%Mend EM_CheckBinaryTargetLevel;
19683     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
19685     +  /* determine the number of obs in training data */
19686     +  proc sql;
19687     +    reset noprint;
19688     +    select count(*) into :em_nobs from &indata;
19689     +  quit;
19691     +  /* determine the number of input variables */
19692     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
19693     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
19695     +  /* retrieve targetEvent from decmeta */
19696     +  %let targetEvent=;
19697     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19698     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
19699     +      data _null_;
19700     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
19701     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
19702     +      run;
19703     +    %end;
19704     +  %end;
19706     +  /* create targetTable if multipleTar eq Y */
19707     +  data temptarget;
19708     +    set &EM_DATA_VARIABLESET;
19709     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
19710     +  run;
19712     + /* data sets */
19713     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
19714     + %EM_GETNAME(key=EMTREE,        type=DATA);
19715     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
19716     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
19717     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
19718     + %EM_GETNAME(key=OUTNODES,      type=DATA);
19719     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
19720     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
19721     + %EM_GETNAME(key=OUTPATH,       type=DATA);
19722     + %EM_GETNAME(key=OUTRULES,      type=DATA);
19724     + /* files */
19725     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
19726     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
19728     + /* turn on pmml if requested */
19729     + %let nnpmml=0;
19730     + %if %symexist(EM_PMML) %then %do;
19731     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
19732     +       %let nnpmml=1;
19734     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
19735     +   %end;
19736     +%end;
19738     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
19740     +%if &nnpmml or &numClassTarget %then %do;
19742     +    /* create dmdb needed for pmml generation */
19743     +    %let tree_maxlevel = 512;
19744     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
19745     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
19746     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
19747     +      %end;
19748     +    %end;
19749     +    %if &tree_maxlevel gt 0 %then %do;
19750     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
19751     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
19752     +    %end;
19754     +    %let targetOrderString =;
19755     +    %let targetString = ;
19756     +    data _null_;
19757     +       length orderString nameString $10000;
19758     +       retain orderString nameString;
19759     +       set &em_data_variableset end=eof;
19760     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
19761     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
19762     +       %end;
19763     +       %else %do;
19764     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
19765     +       %end;          select(order);
19766     +         when('')        order ='DESC';
19767     +         when('FMTASC')  order='ASCFMT';
19768     +         when('FMTDESC') order='DESFMT';
19769     +         otherwise;
19770     +       end;
19771     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
19772     +       nameString = trim(nameString)!!' '!!trim(NAME);
19774     +       if eof then do;
19775     +          call symput('targetOrderString', trim(orderString));
19776     +          call symput('targetString', trim(nameString));
19777     +       end;
19778     +    run;
19780     +    %let arborkluge= "work._treeDMDB";
19782     +    proc dmdb batch data=&indata
19783     +    %if &nnpmml %then %do;
19784     +        PMML
19785     +    %end;
19786     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
19788     +      %if &nnpmml %then %do;
19789     +           %if "%EM_ID" ne "" %then %do;
19790     +             id %EM_ID;
19791     +           %end;
19792     +           %if &EM_NUM_CLASS gt 0 %then %do;
19793     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
19794     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
19795     +                  &targetOrderString;
19796     +           %end;
19797     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
19798     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
19799     +           %end;
19800     +           target &targetString %EM_INTERVAL_TARGET;
19801     +           %if "%EM_FREQ" ne "" %then %do;
19802     +             freq %EM_FREQ;
19803     +           %end;
19804     +      %end;
19805     +      %else %do;
19806     +         class  &targetOrderString;
19807     +         target &targetString %EM_INTERVAL_TARGET;
19808     +      %end;
19809     +    run;
19810     +    quit;
19812     +    proc datasets lib=work nolist;
19813     +       delete classout varout;
19814     +    run;
19815     +    quit;
19817     + %end;
19820     + /* run Arbor procedure */
19821     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19822     +  proc arbor data=&INDATA
19824     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
19825     +    Leafsize = &EM_PROPERTY_LEAFSIZE
19826     +  %end;
19828     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
19829     +    Splitsize = &EM_PROPERTY_SPLITSIZE
19830     +  %end;
19832     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
19833     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
19834     +  %end;
19836     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
19837     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
19838     +  %end;
19840     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
19841     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
19842     +  %end;
19844     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
19845     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
19846     +  %end;
19847     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
19848     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
19849     +  %end;
19850     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19851     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
19852     +  %end;
19854     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
19855     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
19856     +      alpha = &EM_PROPERTY_SIGLEVEL
19857     +    %end;
19858     +  %end;
19860     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
19861     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19862     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
19863     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
19864     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
19866     +        padjust =
19867     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
19868     +          &chaid
19869     +        %end;
19870     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
19871     +          DEPTH
19872     +        %end;
19873     +      %end;
19874     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
19875     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
19876     +         pvars = &num_inputs
19877     +      %end;
19878     +    %end;
19879     +  %end;
19880     +  %else %do;
19881     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
19882     +         padjust = NONE
19883     +      %end;
19884     +  %end;
19886     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
19887     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
19888     +    Maxrules = &num_nrules
19889     +  %end;
19891     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
19892     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
19893     +    Maxsurrs = &num_nsurrs
19894     +  %end;
19896     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
19897     +     Missing=&EM_PROPERTY_MISSINGVALUE
19898     +  %end;
19900     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
19901     +     USEVARONCE
19902     +  %end;
19904     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
19905     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
19906     +  %end;
19909     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
19910     +    event = "&targetEvent"
19911     +  %end;
19913     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
19914     +     DECSEARCH
19915     +  %end;
19917     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
19918     +     PRIORSSEARCH
19919     +  %end;
19921     +  %if &arbor_1 ne %then %do;
19922     +    &arbor_1
19923     +  %end;
19925     +  %if &em_arbor ne %then %do;
19926     +     &em_arbor
19927     +  %end;
19928     +  ;
19929     + %end;
19930     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
19931     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
19932     +       Performance &EM_PROPERTY_PERFORMANCE
19933     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19934     +         nodesize=&EM_PROPERTY_NODESAMPLE
19935     +       %end;
19936     +       ;
19937     +       interact;
19938     + %end;
19939     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
19940     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
19941     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19942     +    %put &em_codebar;
19943     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19944     +    %put &errormsg;
19945     +    %put &em_codebar;
19946     +    %goto doendm;
19947     +   %end;
19948     +   %else %do;
19949     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
19950     +       Performance &EM_PROPERTY_PERFORMANCE
19951     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19952     +         nodesize=&EM_PROPERTY_NODESAMPLE
19953     +       %end;
19954     +       ;
19955     +       interact;
19956     +   %end;
19957     + %end;
19959     + %else %do;
19960     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
19961     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
19962     +    %put &em_codebar;
19963     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
19964     +    %put &errormsg;
19965     +    %put &em_codebar;
19966     +    %goto doendm;
19967     +   %end;
19968     +   %else %do;
19969     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
19970     +       Performance &EM_PROPERTY_PERFORMANCE
19971     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
19972     +         nodesize=&EM_PROPERTY_NODESAMPLE
19973     +       %end;
19974     +       ;
19975     +        interact;
19976     +   %end;
19977     + %end;
19979     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
19980     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
19981     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
19982     +    %end;
19984     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
19985     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
19986     +    %end;
19988     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
19989     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
19990     +    %end;
19992     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
19993     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
19994     +    %end;
19996     +    %if "%EM_FREQ" ne "" %then %do;
19997     +       freq %EM_FREQ;
19998     +    %end;
20000     +    %if "&multipleTar" eq "Y" %then %do;
20001     +       /* cycle through all target vars in variableset */
20002     +       %let tdsid = %sysfunc(open(temptarget));
20003     +       %if &tdsid %then %do;
20004     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
20005     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
20006     +          %do %while(^ %sysfunc(fetch(&tdsid)));
20007     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
20008     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
20009     +             target &var / level = &lvl
20010     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
20011     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
20012     +             %end;
20013     +             %else %if "&lvl" eq "INTERVAL" %then %do;
20014     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
20015     +             %end;
20016     +             %else %if "&lvl" eq "ORDINAL" %then %do;
20017     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
20018     +             %end;
20019     +          %end;
20020     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
20021     +       %end;
20022     +       useTarget variable = %EM_TARGET;
20023     +    %end;
20024     +    %else %do;
20025     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
20026     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
20027     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
20028     +      %end;
20029     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
20030     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
20031     +      %end;
20032     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
20033     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
20034     +      %end;
20035     +    %end;
20037     +    %if "&multipleTar" eq "N" %then %do;
20038     +      &EM_DEC_STATEMENT;
20039     +    %end;
20041     +    Performance &EM_PROPERTY_PERFORMANCE
20042     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20043     +      nodesize=&EM_PROPERTY_NODESAMPLE
20044     +    %end;
20045     +    ;
20047     +    %if "&intFlag" eq "Y" %then %do;
20048     +       INTERACT Largest;
20049     +       Train maxnewdepth=0;
20050     +    %end;
20052     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
20053     +         Assess
20054     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20055     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20056     +              %put &em_codebar;
20057     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
20058     +              %put &errormsg;
20059     +              %put &em_codebar;
20060     +            %end;
20061     +            %else %do;
20062     +               Validata=&EM_IMPORT_VALIDATE
20063     +            %end;
20064     +         %end;
20065     +         %else %do;
20066     +           NoValidata
20067     +         %end;
20068     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
20069     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
20070     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20071     +               %if &dsid %then %do;
20072     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20073     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20074     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20075     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
20076     +                   %else %do;
20077     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
20078     +                      %else %let measure= MISC;
20079     +                   %end;
20080     +                 %end;
20081     +               %end;
20082     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20083     +            %end;
20084     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
20085     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
20086     +                 %let measure=ASE;
20087     +              %end;
20088     +              %else %do;
20089     +                 %let measure=MISC;
20090     +              %end;
20091     +            %end;
20092     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
20093     +              %let measure=ASE;
20094     +            %end;
20095     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
20096     +               %let measure = LIFT;
20097     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
20098     +               %if &dsid %then %do;
20099     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
20100     +                 %do %while(^ %sysfunc(fetch(&dsid)));
20101     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
20102     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
20103     +                 %end;
20104     +               %end;
20105     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
20106     +            %end;
20107     +            measure=&measure
20108     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
20109     +               event = "&targetEvent"
20110     +            %end;
20111     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
20112     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
20113     +            %end;
20114     +         %end;
20115     +         %if "&multipleTar" eq "N" %then %do;
20116     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20117     +               CV
20118     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
20119     +                 CVNITer = &EM_PROPERTY_CVNITER
20120     +               %end;
20121     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
20122     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
20123     +               %end;
20124     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
20125     +                 CVSeed = &EM_PROPERTY_CVSEED
20126     +               %end;
20127     +            %end;
20128     +         %end;
20129     +       %end;
20130     +      ;
20132     +      %if "&intFlag" ne "Y" %then %do;
20133     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
20134     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
20135     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
20136     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
20138     +          SUBTREE &subtree
20139     +          %if "&subtree" eq "NLEAVES" %then %do;
20140     +            =&EM_PROPERTY_NSUBTREE
20141     +          %end;
20142     +          ;
20143     +        %end;
20145     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
20146     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
20147     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
20148     +          %end;
20149     +       %end;
20150     +      %end;
20151     + %end;
20154     + MakeMacro nleaves = nleaves;
20155     + save
20156     + %if "&EM_USER_EMTREE" ne "" %then %do;
20157     +   MODEL=&EM_USER_EMTREE
20158     + %end;
20159     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
20160     +   SEQUENCE=&EM_USER_OUTSEQ
20161     + %end;
20162     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
20163     +   IMPORTANCE=&EM_USER_OUTIMPORT
20164     + %end;
20165     + %if "&EM_USER_OUTNODES" ne "" %then %do;
20166     +   NODESTAT=&EM_USER_OUTNODES
20167     + %end;
20168     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
20169     +   SUMMARY=&EM_USER_OUTSUMMARY
20170     + %end;
20171     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
20172     +   STATSBYNODE=&EM_USER_OUTSTATS
20173     + %end;
20174     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
20175     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
20176     + %end;
20177     + %if "&EM_USER_OUTPATH" ne "" %then %do;
20178     +   Pathlistnonmissing=&EM_USER_OUTPATH
20179     + %end;
20180     + %if "&EM_USER_OUTRULES" ne "" %then %do;
20181     +   RULES = &EM_USER_OUTRULES
20182     + %end;
20183     + ;
20185     + %if "&intFlag" ne "Y" %then %do;
20187     +   %let lookupString = ;
20188     +   %if ^%symexist(EM_OPTION) %then
20189     +      %let EM_OPTION=;
20191     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
20192     +      %let lookupString = LOOKUP=SELECT;
20193     +   %end;
20195     +   %let codetext=;
20196     +   %let norescodetxt=;
20198     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
20199     +     %let codetext=&codetext DUMMY;
20200     +     %let norescodetxt=&norescodetxt DUMMY;
20201     +   %end;
20202     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
20203     +     %let codetext=&codetext NOLEAFID;
20204     +     %let norescodetxt=&norescodetxt NOLEAFID;
20205     +   %end;
20206     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
20207     +     %let norescodetxt=&norescodetxt NOPRED;
20208     +   %end;
20210     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
20211     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
20213     +   %if &nnpmml %then %do;
20214     +     code pmml;
20215     +   %end;
20217     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
20218     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20219     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
20220     +   %end;
20221     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20222     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
20223     +   %end;
20224     + %end;
20226     + run;
20227     + quit;
20229     + /*%em_checkerror(); */
20230     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
20231     +   /* Delete DMDB catalog */
20232     +   proc datasets lib=work nolist;
20233     +       delete _treeDMDB / mt=cat;
20234     +  run;
20235     +  %end;
20237     + %if &nnpmml %then %do;
20238     +    ods pmml close;
20239     + %end;
20241     +  %doendm:
20243     +%mend em_tree_runTreeProcedure;
20245     +%macro em_tree_createFitStats( multipleTar= );
20248     +  /* create targetTable is multipleTar eq Y */
20249     +  data temptarget;
20250     +    set &EM_DATA_VARIABLESET;
20251     +    where ROLE="TARGET";
20252     +  run;
20254     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
20255     +   data &EM_USER_EMOUTFIT;
20256     +     length target $32;
20257     +     merge work.fit_train
20258     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20259     +       work.fit_valid
20260     +     %end;
20261     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
20262     +       work.fit_test
20263     +     %end;
20264     +     ;
20265     +     %if "&multipleTar" eq "N" %then %do;
20266     +       target="%EM_TARGET";
20267     +     %end;
20268     +     %else %do;
20269     +       target = _TARGET_;
20270     +     %end;
20271     +     drop _NW_ _SUMW_
20272     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20273     +        _VSUMW_
20274     +     %end;
20275     +     ;
20276     +   run;
20278     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
20279     +     proc datasets library=work nolist;
20280     +       delete fit_valid;
20281     +     run;
20282     +   %end;
20283     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
20284     +     proc datasets library=work nolist;
20285     +       delete fit_test;
20286     +     run;
20287     +   %end;
20289     +%mend em_tree_createFitStats;
20292     +%macro em_tree_makeEnglishRules;
20294     +  %EM_GETNAME(key=OUTNODES, type=DATA);
20295     +  %EM_GETNAME(key=OUTPATH, type=DATA);
20297     +  /* verify that necessary tables exist and if not, skip processing */
20298     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
20299     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20300     +    %goto doendm;
20301     +  %end;
20302     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
20303     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20304     +    %goto doendm;
20305     +  %end;
20307     +  /* determine length of variable in outpath dataset */
20308     +  %let vlength= ;
20309     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
20310     +  %if &dsid ne %then %do;
20311     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
20312     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
20313     +  %end;
20314     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
20316     +  data tempoutpath;
20317     +    length varname $&vlength;
20318     +    retain varname;
20319     +    set &EM_USER_OUTPATH;
20321     +    if ^missing(variable) then varname=variable;
20322     +    else if ^missing(var_name) then varname=var_name;
20323     +    output;
20324     +  run;
20326     +  /* create an array of generated predicted variable names */
20327     +  %let tree_pred_vars = ;
20328     +  %let tree_pred_label = ;
20329     +  %let numpred= 0;
20330     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
20332     +    data _null_;
20333     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
20334     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
20335     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
20336     +     if eof then
20337     +       call symput('numpred', strip(put(_N_, BEST.)));
20338     +    run;
20339     +  %end;
20341     +  /* determine if NPRIORS exists in outnodes  */
20342     +  %local nprior_flag;
20343     +  data _null_;
20344     +    set &EM_USER_OUTNODES(obs=2) end=eof;
20345     +    if eof then do;
20346     +      call symput('nprior_flag', strip(put(npriors, best.)));
20347     +    end;
20348     +  run;
20350     +  proc sort data=tempoutpath; by node; run;
20351     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
20353     +  data tempoutpath;
20354     +    merge tempoutpath(in=_a) outnodes(keep= node
20355     +    %if "&nprior_flag" ne "." %then %do;
20356     +      NPRIORS
20357     +    %end;
20358     +    %else %do;
20359     +      N
20360     +    %end;
20361     +    %if &numpred gt 0 %then %do;
20362     +      %do i=1 %to &numpred;
20363     +        &&tree_pred_vars&i
20364     +      %end;
20365     +    %end;
20366     +    );
20367     +    by node;
20368     +    if _a;
20369     +  run;
20371     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
20373     +  data _null_;
20374     +    file x;
20375     +    set tempoutpath;
20376     +    by node descending varname;
20377     +    retain origvar oldnode string;
20378     +    length origvar $32 oldnode 8 string $5000;
20380     +    if _N_ = 1 then do;
20381     +      origvar = varname;
20382     +      oldnode = node;
20383     +    end;
20385     +    if first.node then do;
20386     +       put "&EM_CODEBAR";
20387     +       put " Node = " node;
20388     +       put "&EM_CODEBAR";
20389     +    end;
20391     +      if first.varname then do;
20392     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20393     +            if MISSING(CHARACTER_VALUE) then do;
20394     +             if NUMERIC_VALUE ne .  then do;
20395     +              if ^first.node then do;
20396     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20397     +              end;
20398     +              else do;
20399     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20400     +              end;
20401     +             end;
20402     +            end;
20403     +            else do;
20404     +              if ^first.node then do;
20405     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20406     +              end;
20407     +              else do;
20408     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20409     +              end;
20410     +             end;
20411     +         end;
20412     +         else if RELATION in ("=") then do;
20413     +            if ^first.node then do;
20414     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
20415     +            end;
20416     +            else do;
20417     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
20418     +            end;
20419     +         end;
20420     +         else if RELATION in ("ISMISSING") then do;
20421     +            if ^first.node then do;
20422     +              string = " AND "|| strip(varname) || " equals Missing";
20423     +            end;
20424     +            else do;
20425     +              string = "if "|| strip(varname) ||" equals Missing";
20426     +            end;
20427     +         end;
20428     +         else if RELATION in ("ISNOTMISSING") then do;
20429     +            if ^first.node then do;
20430     +              string = " AND "|| strip(varname) || " equals All Values";
20431     +            end;
20432     +            else do;
20433     +              string = "if "|| strip(varname) ||" equals All Values";
20434     +            end;
20435     +         end;
20436     +         if ^missing(varname) then origvar = varname;
20437     +         oldnode=node;
20439     +      end;
20440     +      else do;
20441     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
20442     +          if MISSING(CHARACTER_VALUE) then do;
20443     +           if  NUMERIC_VALUE ne .  then do;
20444     +            if ^MISSING(string) then
20445     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20446     +            else
20447     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
20448     +           end;
20449     +          end;
20450     +          else do;
20451     +            if ^MISSING(string) then
20452     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20453     +            else
20454     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
20455     +          end;
20457     +         end;
20458     +         else if RELATION in ("=") then do;
20459     +           string = strip(string)||", "||strip(character_value);
20460     +         end;
20461     +         else if RELATION in ("ISMISSING") then do;
20463     +         end;
20464     +         if ^missing(varname) then origvar = varname;
20465     +         oldnode=node;
20466     +      end;
20467     +      if last.varname then do;
20468     +         if RELATION in ("ISMISSING") then do;
20469     +           if ^first.varname then do;
20470     +             string = strip(string) || " or MISSING";
20471     +           end;
20472     +         end;
20473     +         put string;
20474     +         if ^missing(varname) then origvar = varname;
20475     +         oldnode=node;
20476     +      end;
20478     +      if last.node then do;
20479     +         put "then ";
20480     +         put " Tree Node Identifier   = " node;
20482     +         %if "&nprior_flag" ne "." %then %do;
20483     +           put " Number of Observations = " NPRIORS;
20484     +         %end;
20485     +         %else %do;
20486     +           put " Number of Observations = " N;
20487     +         %end;
20489     +         %if &numpred gt 0 %then %do;
20490     +           %do i=1 %to &numpred;
20491     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
20492     +           %end;
20493     +         %end;
20495     +         put " ";
20496     +         if ^missing(varname) then origvar = varname;
20497     +         oldnode=node;
20498     +      end;
20500     +  run;
20502     +  proc datasets lib=work nolist;
20503     +    delete tempoutpath outnodes;
20504     +  run;
20506     +  %doendm:
20507     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: EXPLOREOBS EMWS3.Part_TRAIN : vars= 14 : recl= 112 : max=60000 : def= 6000

NOTE: There were 1348 observations read from the data set EMWS3.TREE3_EMTREE.
NOTE: The data set EMWS3.TREE3_BROWSETREE has 1348 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20509      
20510      *------------------------------------------------------------*;
20511      * End OPENINT: Tree3;
20512      *------------------------------------------------------------*;

20513      proc printto;
20514      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20013      filename newout "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMINTOUT.out" encoding="UTF-8" NOBOM;
20014      data _null_;
20015      call symput('NLDATE', strip(put(date(), NLDATE.)));
20016      call symput('NLTIME', strip(put(datetime(), NLTIME.)));
20017      run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

20018      data _null_;
20019      nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "&nldate" );
20020      nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "&nltime" );
20021      file newout;
20022      put "*------------------------------------------------------------*";
20023      put "%sysfunc(sasmsg(sashelp.dmine, log_user_note,      NOQUOTE, %nrbquote(&sysuserid)))";
20024      put nldate;
20025      put nltime;
20026      put "*------------------------------------------------------------*";
20027      put ' ';
20028      run;

NOTE: The file NEWOUT is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMINTOUT.out,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=14 de marzo de 2021 15H44

NOTE: 6 records were written to the file NEWOUT.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20029      proc printto print=newout;
20030      run;

NOTE: PROCEDURE PRINTTO used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

PERFORMANCE  DETAILS
20555      data EM_TARGETDECINFO;
20556      length TARGET $32 DECDATA DECMETA $43;
20557      TARGET="BAD";
20558      DECDATA="EMWS3.Ids_BAD_DD";
20559      DECMETA="EMWS3.Ids_BAD_DM";
20560      output;
20561      run;

NOTE: The data set WORK.EM_TARGETDECINFO has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

20562      %let emexceptionString =;
20563      %let EMEXCEPTIONSTRING=;
20564      *------------------------------------------------------------*;
20565      * CLOSEINT: Tree3;
20566      *------------------------------------------------------------*;
20567      %let EM_ACTION = CLOSEINT;
20568      %let syscc = 0;
20569      %macro main;
20570      
20571        %if %upcase(&EM_ACTION) = CREATE %then %do;
20572          filename temp catalog 'sashelp.emmodl.tree_create.source';
20573          %include temp;
20574          filename temp;
20575      
20576          %em_tree_create;
20577        %end;
20578      
20579         %else
20580         %if %upcase(&EM_ACTION) = TRAIN %then %do;
20581      
20582             filename temp catalog 'sashelp.emmodl.tree_train.source';
20583             %include temp;
20584             filename temp;
20585             %em_tree_train;
20586         %end;
20587      
20588        %else
20589        %if %upcase(&EM_ACTION) = SCORE %then %do;
20590          filename temp catalog 'sashelp.emmodl.tree_score.source';
20591          %include temp;
20592          filename temp;
20593      
20594          %em_tree_score;
20595      
20596        %end;
20597      
20598        %else
20599        %if %upcase(&EM_ACTION) = REPORT %then %do;
20600      
20601             filename temp catalog 'sashelp.emmodl.tree_report.source';
20602             %include temp;
20603             filename temp;
20604      
20605             %em_tree_report;
20606         %end;
20607      
20608        %else
20609        %if %upcase(&EM_ACTION) = OPENINT %then %do;
20610      
20611             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20612             %include temp;
20613             filename temp;
20614             %EM_TREE_OPENTREEVIEWER;
20615      
20616         %end;
20617      
20618        %else
20619        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
20620      
20621             filename temp catalog 'sashelp.emmodl.tree_actions.source';
20622             %include temp;
20623             filename temp;
20624             %EM_TREE_CLOSETREEVIEWER;
20625      
20626         %end;
20627      
20628      
20629         %doendm:
20630      %mend main;
20631      
20632      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_ACTIONS.SOURCE.
20634     +%macro EM_TREE_OPENTREEVIEWER;
20636     +  options validvarname = v7;
20638     +  /* retrieve table names */
20639     +  %EM_GETNAME(key=EMTREE, type=DATA);
20640     +  %EM_GETNAME(key=BROWSETREE, type=DATA);
20642     +  /* check if the path needs to be updated; if so, delete datasets and force user to update */
20643     +  %em_getActionStatus(emlib=&EM_LIB, nodeid=&EM_NODEID);
20645     +  /* load trainmacros */
20646     +  filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
20647     +  %include temp;
20648     +  filename temp;
20650     +  %em_checkmacro(name=EM_PROPERTY_IMPORTMODEL,value=N,global=Y);
20652     +    %if "&EM_IMPORT_DATA"="" %then %do;
20653     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
20654     +       %goto doendm;
20655     +   %end;
20656     +   %if ((%sysfunc(exist(&EM_IMPORT_DATA)) ne 1) AND (%sysfunc(exist(&EM_IMPORT_DATA, VIEW)) ne 1)) %then %do;
20657     +       %let EMEXCEPTIONSTRING = exception.server.EMTOOL.PATHNEEDSTORUN;
20658     +       %goto doendm;
20659     +   %end;
20661     +   /* if node needs to run or tree data doesn't exist, create a root node for interactive training */
20662     +   %if ( (%sysfunc(exist(&EM_USER_EMTREE)) ne 1 ) OR (&EM_TRAIN eq Y) ) %then %do;
20664     +       /* determine if multiple targets will be processed */
20665     +       %let em_tree_multipleTargets=N;
20666     +       %let em_tree_numTarget=1;
20667     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20668     +         /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20669     +         %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20670     +            %let em_tree_multipleTargets=N;
20671     +         %end;
20672     +         %else %do;
20673     +            /* create macro array of targets  */
20674     +            data _null_;
20675     +              set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20676     +              call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
20677     +              if eof then
20678     +                call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20679     +           run;
20681     +           %if &em_tree_numTarget gt 1 %then %do;
20682     +            %let em_tree_multipleTargets=Y;
20683     +           %end;
20684     +         %end;
20685     +       %end;
20687     +       %em_tree_runTreeProcedure(indata=&EM_IMPORT_DATA, multipleTar=&em_tree_multipleTargets, intFlag=Y);
20689     +       /* Check return code and throw exception if error is detected */
20690     +       %if &SYSERR > 0 %then %do;
20691     +          %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
20692     +          %goto doendm;
20693     +       %end;
20695     +  %end;
20697     +  /* set default values for sampling macros if they don't exist; this would happen on diagrams imported from release prior to 12.3 */
20698     +  %if "&EM_PROPERTY_CREATESAMPLE" eq "" %then %let EM_PROPERTY_CREATESAMPLE=DEFAULT;
20699     +  %if "&EM_PROPERTY_SAMPLEMETHOD" eq "" %then %let EM_PROPERTY_SAMPLEMETHOD=RANDOM;
20700     +  %if "&EM_PROPERTY_SAMPLESIZE" eq "." %then %let EM_PROPERTY_SAMPLESIZE=10000;
20701     +  %if "&EM_PROPERTY_SAMPLESEED" eq "." %then %let EM_PROPERTY_SAMPLESEED=12345;
20703     +  /* determine if sample should be used within interactive training */
20704     +  %EM_GETNAME(key=TRAINSAMPLE, type=DATA);
20705     +  %if "&EM_PROPERTY_CREATESAMPLE" ne "NONE" %then %do;
20707     +     /* determine number of obs in training table */
20708     +     %let trainobs = ;
20709     +     proc sql noprint;
20710     +       select count(*) into: trainobs from &EM_IMPORT_DATA;
20711     +     quit;
20713     +     /* retrieve appropriate sample size */
20714     +     %let maxobs = ;
20715     +     %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
20716     +       %exploreObs(data=&EM_IMPORT_DATA);
20717     +       %let maxobs = &_EXPLOREOBS_MAX;
20718     +     %end;
20719     +     %else %do;
20720     +       %let maxobs = &EM_PROPERTY_SAMPLESIZE;
20721     +     %end;
20723     +     /* create sample based on maxobs */
20724     +     %if &trainobs gt &maxobs %then %do;
20725     +        %if "&EM_PROPERTY_CREATESAMPLE" eq "DEFAULT" %then %do;
20726     +          %exploreSample(data=&EM_IMPORT_DATA, seed=12345, output=&EM_USER_TRAINSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
20727     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20728     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
20729     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=12345, output=&EM_USER_VALIDSAMPLE, method=RANDOM, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
20730     +          %end;
20731     +        %end;
20732     +        %else %if "&EM_PROPERTY_CREATESAMPLE" eq "USER" %then %do;
20733     +          %if "&EM_PROPERTY_SAMPLEMETHOD" eq "STRATIFY" %then %do;
20734     +            %if &EM_NUM_INTERVAL_TARGET %then %do;
20735     +              %let em_tree_tempmethod = RANDOM;
20736     +            %end;
20737     +            %else %do;
20738     +              %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
20739     +            %end;
20740     +          %end;
20741     +          %else %do;
20742     +            %let em_tree_tempmethod = &EM_PROPERTY_SAMPLEMETHOD;
20743     +          %end;
20745     +          %exploreSample(data=&EM_IMPORT_DATA, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_TRAINSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_DATA_CMETA);
20746     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20747     +            %EM_GETNAME(key=VALIDSAMPLE, type=DATA);
20748     +            %exploreSample(data=&EM_IMPORT_VALIDATE, seed=&EM_PROPERTY_SAMPLESEED, output=&EM_USER_VALIDSAMPLE, method=&em_tree_tempmethod, size=&maxobs, sizetype=obs, metadata=&EM_IMPORT_VALIDATE_CMETA);
20749     +          %end;
20750     +        %end;
20752     +        proc arbor data=&EM_USER_TRAINSAMPLE inmodel=&EM_USER_EMTREE refreshtrain;
20753     +          interact;
20754     +          subtree largest;
20755     +           /********** do i need CV options here? *********/
20756     +          %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20757     +            assess validata=&&EM_USER_VALIDSAMPLE;
20758     +          %end;
20759     +          save model=&EM_USER_EMTREE;
20760     +        run;
20761     +        quit;
20762     +     %end;
20763     +  %end;
20765     +  /* create browsetree table as a copy of EMTREE to process within interactive training */
20766     +  %EM_GETNAME(key=BROWSETREE,  type=DATA);
20767     +  data &EM_USER_BROWSETREE;
20768     +    set &EM_USER_EMTREE;
20769     +  run;
20771     +  /* reset validvarname options
20772     +  %let vvarname = %sysfunc(optgetc('VALIDVARNAME'));
20773     +  options validvarname=&vvarname;  */
20774     +  %doendm:
20776     +%mend EM_TREE_OPENTREEVIEWER;
20780     +%macro EM_TREE_CLOSETREEVIEWER;
20782     +    /* clear syscc prior to running close Method */
20783     +    %let SYSCC = 0;
20784     +    options validvarname=V7;
20786     +    /* retrieve table names */
20787     +    %EM_GETNAME(key=BROWSETREE,  type=DATA);
20788     +    %EM_GETNAME(key=EMTREE,  type=DATA);
20789     +    %EM_GETNAME(key=OUTSEQ,  type=DATA);
20790     +    %EM_GETNAME(key=OUTIMPORT,  type=DATA);
20791     +    %EM_GETNAME(key=OUTNODES,  type=DATA);
20792     +    %EM_GETNAME(key=OUTSUMMARY,  type=DATA);
20793     +    %EM_GETNAME(key=OUTSTATS,  type=DATA);
20794     +    %EM_GETNAME(key=OUTTOPOLOGY,  type=DATA);
20795     +    %EM_GETNAME(key=OUTPATH,  type=DATA);
20796     +    %EM_GETNAME(key=OUTRULES,  type=DATA);
20798     +    %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
20799     +    %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
20801     +    /* load trainmacros */
20802     +    filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
20803     +    %include temp;
20804     +    filename temp;
20806     +    /* send output to node output window ; this will replace */
20807     +    /* old print with the new  print                         */
20808     +    options validvarname = v7;
20810     +    /* determine if multiple targets will be processed */
20811     +    %let em_tree_multipleTargets=N;
20812     +    %let em_tree_numTarget=1;
20813     +    %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
20814     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
20815     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
20816     +         %let em_tree_multipleTargets=N;
20817     +      %end;
20818     +      %else %do;
20819     +         /* create macro array of targets  */
20820     +         data _null_;
20821     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
20822     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
20823     +           if eof then
20824     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
20825     +        run;
20827     +        %if &em_tree_numTarget gt 1 %then %do;
20828     +           %let em_tree_multipleTargets=Y;
20829     +        %end;
20830     +      %end;
20831     +    %end;
20834     + /* turn on pmml if requested */
20835     + %let nnpmml=0;
20836     + %if %symexist(EM_PMML) %then %do;
20837     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
20838     +       %let nnpmml=1;
20840     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
20841     +   %end;
20842     + %end;
20844     + %if &nnpmml %then %do;
20846     +    /* create dmdb needed for pmml generation */
20847     +    %let tree_maxlevel = 512;
20848     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
20849     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
20850     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
20851     +      %end;
20852     +    %end;
20853     +    %if &tree_maxlevel gt 0 %then %do;
20854     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
20855     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
20856     +    %end;
20858     +    %let targetOrderString =;
20859     +    %let targetString = ;
20860     +    data _null_;
20861     +       length orderString nameString $10000;
20862     +       retain orderString nameString;
20863     +       set &em_data_variableset end=eof;
20864     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
20865     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
20866     +       %end;
20867     +       %else %do;
20868     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
20869     +       %end;          select(order);
20870     +         when('')        order ='DESC';
20871     +         when('FMTASC')  order='ASCFMT';
20872     +         when('FMTDESC') order='DESFMT';
20873     +         otherwise;
20874     +       end;
20875     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
20876     +       nameString = trim(nameString)!!' '!!trim(NAME);
20878     +       if eof then do;
20879     +          call symput('targetOrderString', trim(orderString));
20880     +          call symput('targetString', trim(nameString));
20881     +       end;
20882     +    run;
20884     +    %let arborkluge= "work._treeDMDB";
20886     +    proc dmdb batch data=&EM_IMPORT_DATA
20887     +    %if &nnpmml %then %do;
20888     +        PMML
20889     +    %end;
20890     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
20892     +     %if "%EM_ID" ne "" %then %do;
20893     +       id %EM_ID;
20894     +     %end;
20895     +     %if &EM_NUM_CLASS gt 0 %then %do;
20896     +       class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
20897     +            %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
20898     +            &targetOrderString;
20899     +     %end;
20900     +     %if &EM_NUM_INTERVAL gt 0 %then %do;
20901     +       var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
20902     +     %end;
20903     +     target &targetString %EM_INTERVAL_TARGET;
20904     +     %if "%EM_FREQ" ne "" %then %do;
20905     +       freq %EM_FREQ;
20906     +     %end;
20907     +    run;
20908     +    quit;
20910     +    proc datasets lib=work nolist;
20911     +       delete classout varout;
20912     +    run;
20913     +    quit;
20915     + %end;
20918     +    /* run arbor to generate new results and scoring code */
20919     +    proc arbor data=&EM_IMPORT_DATA inmodel=&EM_USER_BROWSETREE refreshtrain;
20920     +       Performance &EM_PROPERTY_PERFORMANCE
20921     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
20922     +         nodesize=&EM_PROPERTY_NODESAMPLE
20923     +       %end;
20924     +       ;
20925     +      interact;
20926     +      *subtree largest;
20929     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
20930     +         Assess
20931     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
20932     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
20933     +              %put &em_codebar;
20934     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
20935     +              %put &errormsg;
20936     +              %put &em_codebar;
20937     +            %end;
20938     +            %else %do;
20939     +               Validata=&EM_IMPORT_VALIDATE;
20940     +            %end;
20941     +         %end;
20942     +         %else %do;
20943     +           NoValidata
20944     +         %end;
20945     +       %end;
20946     +      ;
20947     +      makemacro nleaves=nleaves;
20948     +      save
20949     +      %if "&EM_USER_EMTREE" ne "" %then %do;
20950     +         MODEL=&EM_USER_EMTREE
20951     +      %end;
20952     +      %if "&EM_USER_OUTSEQ" ne "" %then %do;
20953     +        SEQUENCE=&EM_USER_OUTSEQ
20954     +      %end;
20955     +      %if "&EM_USER_OUTIMPORT" ne "" %then %do;
20956     +        IMPORTANCE=&EM_USER_OUTIMPORT
20957     +      %end;
20958     +      %if "&EM_USER_OUTNODES" ne "" %then %do;
20959     +         NODESTAT=&EM_USER_OUTNODES
20960     +      %end;
20961     +      %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
20962     +         SUMMARY=&EM_USER_OUTSUMMARY
20963     +      %end;
20964     +      %if "&EM_USER_OUTSTATS" ne "" %then %do;
20965     +         STATSBYNODE=&EM_USER_OUTSTATS
20966     +      %end;
20967     +      %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
20968     +         TOPOLOGY=&EM_USER_OUTTOPOLOGY
20969     +      %end;
20970     +      %if "&EM_USER_OUTPATH" ne "" %then %do;
20971     +         Pathlistnonmissing=&EM_USER_OUTPATH
20972     +      %end;
20973     +      %if "&EM_USER_OUTRULES" ne "" %then %do;
20974     +         RULES = &EM_USER_OUTRULES
20975     +      %end;
20976     +      ;
20978     +      %let codetext=;
20979     +      %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
20980     +        %let codetext=&codetext DUMMY;
20981     +      %end;
20982     +      %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
20983     +        %let codetext=&codetext NOLEAFID;
20984     +      %end;
20986     +      %let norescodetxt=;
20987     +      %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
20988     +        %let norescodetxt=&codetext NOPRED;
20989     +      %end;
20991     +      %let lookupString = ;
20992     +      %if ^%symexist(EM_OPTION) %then
20993     +         %let EM_OPTION=;
20995     +      %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
20996     +         %let lookupString = LOOKUP=SELECT;
20997     +      %end;
20999     +      code file="&EM_USER_TREEFLOW" res &codetext &lookupString;
21000     +      code file="&EM_USER_TREEPUBLISH" nores &norescodetxt &lookupString;
21002     +      %if &nnpmml %then %do;
21003     +        code pmml;
21004     +      %end;
21006     +      score data=&EM_IMPORT_DATA out=_NULL_ outfit=work.fit_train role=TRAIN;
21007     +      %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
21008     +        score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
21009     +      %end;
21010     +      %if (("&EM_IMPORT_TEST" ne "") AND (%sysfunc(exist(&EM_IMPORT_TEST)) or %sysfunc(exist(&EM_IMPORT_TEST,VIEW)) )) %then %do;
21011     +        score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
21012     +      %end;
21013     +    run;
21015     +    quit;
21017     +    %if &nnpmml %then %do;
21018     +       ods pmml close;
21019     +    %end;
21021     +   /* Check return code and throw exception if error is detected */
21022     +   %if &SYSERR > 0 %then %do;
21023     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
21024     +     %goto doendm;
21025     +   %end;
21027     +   /* create outfit dataset if multiple score statements have been executed */
21028     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
21030     +   /* print variable importance listing */
21031     +   %let em_tree_surrexists=.;
21032     +   data _null_;
21033     +    set &EM_USER_OUTIMPORT (obs=2) end=eof;
21034     +    if eof then do ;
21035     +      call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
21036     +      call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
21037     +    end;
21038     +   run;
21040     +   /* create English Rules */
21041     +   %EM_GETNAME(key=ENGLISHRULES, type=FILE, extension=txt);
21042     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
21043     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
21044     +       %em_tree_makeEnglishRules;
21046     +      /* English Rules */
21047     +      %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
21049     +     %end;
21050     +   filename x;
21052     +   %doendm:
21054     +   %EM_REPORT(key=EMINTLOG, viewtype=LOG, block=Interactive, description=Log, autodisplay=N);
21055     +   %EM_REPORT(key=EMINTOUT, viewtype=OUTPUT, block=Interactive, description=Output, autodisplay=N);
21057     +%mend EM_TREE_CLOSETREEVIEWER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
21060     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
21061     +  %global &nLevel;
21062     +  proc dmdb batch data=&indata
21063     +    classout=_tmp_dmdbout;
21064     +    class &target;
21065     +  run;
21066     +  data _tmp_dmdbout;
21067     +    set _tmp_dmdbout;
21068     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
21069     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
21070     +  run;
21071     +  data _null_;
21072     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
21073     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
21074     +    %let dsid = %sysfunc(close(&dsid));
21075     +     call symput("&nLevel", put(&_obs, Best12.));
21076     +  run;
21078     +  proc datasets lib=work nolist;
21079     +     delete _tmp_dmdbout;
21080     +  run;
21081     +  quit;
21082     +%Mend EM_CheckBinaryTargetLevel;
21085     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
21087     +  /* determine the number of obs in training data */
21088     +  proc sql;
21089     +    reset noprint;
21090     +    select count(*) into :em_nobs from &indata;
21091     +  quit;
21093     +  /* determine the number of input variables */
21094     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
21095     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
21097     +  /* retrieve targetEvent from decmeta */
21098     +  %let targetEvent=;
21099     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
21100     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
21101     +      data _null_;
21102     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
21103     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
21104     +      run;
21105     +    %end;
21106     +  %end;
21108     +  /* create targetTable if multipleTar eq Y */
21109     +  data temptarget;
21110     +    set &EM_DATA_VARIABLESET;
21111     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
21112     +  run;
21114     + /* data sets */
21115     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
21116     + %EM_GETNAME(key=EMTREE,        type=DATA);
21117     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
21118     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
21119     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
21120     + %EM_GETNAME(key=OUTNODES,      type=DATA);
21121     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
21122     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
21123     + %EM_GETNAME(key=OUTPATH,       type=DATA);
21124     + %EM_GETNAME(key=OUTRULES,      type=DATA);
21126     + /* files */
21127     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
21128     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
21130     + /* turn on pmml if requested */
21131     + %let nnpmml=0;
21132     + %if %symexist(EM_PMML) %then %do;
21133     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
21134     +       %let nnpmml=1;
21136     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
21137     +   %end;
21138     +%end;
21140     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
21142     +%if &nnpmml or &numClassTarget %then %do;
21144     +    /* create dmdb needed for pmml generation */
21145     +    %let tree_maxlevel = 512;
21146     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
21147     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
21148     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
21149     +      %end;
21150     +    %end;
21151     +    %if &tree_maxlevel gt 0 %then %do;
21152     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
21153     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
21154     +    %end;
21156     +    %let targetOrderString =;
21157     +    %let targetString = ;
21158     +    data _null_;
21159     +       length orderString nameString $10000;
21160     +       retain orderString nameString;
21161     +       set &em_data_variableset end=eof;
21162     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
21163     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
21164     +       %end;
21165     +       %else %do;
21166     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
21167     +       %end;          select(order);
21168     +         when('')        order ='DESC';
21169     +         when('FMTASC')  order='ASCFMT';
21170     +         when('FMTDESC') order='DESFMT';
21171     +         otherwise;
21172     +       end;
21173     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
21174     +       nameString = trim(nameString)!!' '!!trim(NAME);
21176     +       if eof then do;
21177     +          call symput('targetOrderString', trim(orderString));
21178     +          call symput('targetString', trim(nameString));
21179     +       end;
21180     +    run;
21182     +    %let arborkluge= "work._treeDMDB";
21184     +    proc dmdb batch data=&indata
21185     +    %if &nnpmml %then %do;
21186     +        PMML
21187     +    %end;
21188     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
21190     +      %if &nnpmml %then %do;
21191     +           %if "%EM_ID" ne "" %then %do;
21192     +             id %EM_ID;
21193     +           %end;
21194     +           %if &EM_NUM_CLASS gt 0 %then %do;
21195     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
21196     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
21197     +                  &targetOrderString;
21198     +           %end;
21199     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
21200     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
21201     +           %end;
21202     +           target &targetString %EM_INTERVAL_TARGET;
21203     +           %if "%EM_FREQ" ne "" %then %do;
21204     +             freq %EM_FREQ;
21205     +           %end;
21206     +      %end;
21207     +      %else %do;
21208     +         class  &targetOrderString;
21209     +         target &targetString %EM_INTERVAL_TARGET;
21210     +      %end;
21211     +    run;
21212     +    quit;
21214     +    proc datasets lib=work nolist;
21215     +       delete classout varout;
21216     +    run;
21217     +    quit;
21219     + %end;
21222     + /* run Arbor procedure */
21223     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
21224     +  proc arbor data=&INDATA
21226     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
21227     +    Leafsize = &EM_PROPERTY_LEAFSIZE
21228     +  %end;
21230     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
21231     +    Splitsize = &EM_PROPERTY_SPLITSIZE
21232     +  %end;
21234     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
21235     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
21236     +  %end;
21238     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
21239     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
21240     +  %end;
21242     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
21243     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
21244     +  %end;
21246     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
21247     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
21248     +  %end;
21249     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
21250     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
21251     +  %end;
21252     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21253     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
21254     +  %end;
21256     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
21257     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
21258     +      alpha = &EM_PROPERTY_SIGLEVEL
21259     +    %end;
21260     +  %end;
21262     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
21263     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
21264     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
21265     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
21266     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
21268     +        padjust =
21269     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
21270     +          &chaid
21271     +        %end;
21272     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
21273     +          DEPTH
21274     +        %end;
21275     +      %end;
21276     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
21277     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
21278     +         pvars = &num_inputs
21279     +      %end;
21280     +    %end;
21281     +  %end;
21282     +  %else %do;
21283     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
21284     +         padjust = NONE
21285     +      %end;
21286     +  %end;
21288     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
21289     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
21290     +    Maxrules = &num_nrules
21291     +  %end;
21293     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
21294     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
21295     +    Maxsurrs = &num_nsurrs
21296     +  %end;
21298     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
21299     +     Missing=&EM_PROPERTY_MISSINGVALUE
21300     +  %end;
21302     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
21303     +     USEVARONCE
21304     +  %end;
21306     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
21307     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
21308     +  %end;
21311     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
21312     +    event = "&targetEvent"
21313     +  %end;
21315     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
21316     +     DECSEARCH
21317     +  %end;
21319     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
21320     +     PRIORSSEARCH
21321     +  %end;
21323     +  %if &arbor_1 ne %then %do;
21324     +    &arbor_1
21325     +  %end;
21327     +  %if &em_arbor ne %then %do;
21328     +     &em_arbor
21329     +  %end;
21330     +  ;
21331     + %end;
21332     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
21333     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
21334     +       Performance &EM_PROPERTY_PERFORMANCE
21335     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
21336     +         nodesize=&EM_PROPERTY_NODESAMPLE
21337     +       %end;
21338     +       ;
21339     +       interact;
21340     + %end;
21341     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
21342     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
21343     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
21344     +    %put &em_codebar;
21345     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
21346     +    %put &errormsg;
21347     +    %put &em_codebar;
21348     +    %goto doendm;
21349     +   %end;
21350     +   %else %do;
21351     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
21352     +       Performance &EM_PROPERTY_PERFORMANCE
21353     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
21354     +         nodesize=&EM_PROPERTY_NODESAMPLE
21355     +       %end;
21356     +       ;
21357     +       interact;
21358     +   %end;
21359     + %end;
21361     + %else %do;
21362     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
21363     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
21364     +    %put &em_codebar;
21365     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
21366     +    %put &errormsg;
21367     +    %put &em_codebar;
21368     +    %goto doendm;
21369     +   %end;
21370     +   %else %do;
21371     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
21372     +       Performance &EM_PROPERTY_PERFORMANCE
21373     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
21374     +         nodesize=&EM_PROPERTY_NODESAMPLE
21375     +       %end;
21376     +       ;
21377     +        interact;
21378     +   %end;
21379     + %end;
21381     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
21382     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
21383     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
21384     +    %end;
21386     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
21387     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
21388     +    %end;
21390     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
21391     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
21392     +    %end;
21394     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
21395     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
21396     +    %end;
21398     +    %if "%EM_FREQ" ne "" %then %do;
21399     +       freq %EM_FREQ;
21400     +    %end;
21402     +    %if "&multipleTar" eq "Y" %then %do;
21403     +       /* cycle through all target vars in variableset */
21404     +       %let tdsid = %sysfunc(open(temptarget));
21405     +       %if &tdsid %then %do;
21406     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
21407     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
21408     +          %do %while(^ %sysfunc(fetch(&tdsid)));
21409     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
21410     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
21411     +             target &var / level = &lvl
21412     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
21413     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
21414     +             %end;
21415     +             %else %if "&lvl" eq "INTERVAL" %then %do;
21416     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
21417     +             %end;
21418     +             %else %if "&lvl" eq "ORDINAL" %then %do;
21419     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
21420     +             %end;
21421     +          %end;
21422     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
21423     +       %end;
21424     +       useTarget variable = %EM_TARGET;
21425     +    %end;
21426     +    %else %do;
21427     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
21428     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
21429     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
21430     +      %end;
21431     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
21432     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
21433     +      %end;
21434     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
21435     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
21436     +      %end;
21437     +    %end;
21439     +    %if "&multipleTar" eq "N" %then %do;
21440     +      &EM_DEC_STATEMENT;
21441     +    %end;
21443     +    Performance &EM_PROPERTY_PERFORMANCE
21444     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
21445     +      nodesize=&EM_PROPERTY_NODESAMPLE
21446     +    %end;
21447     +    ;
21449     +    %if "&intFlag" eq "Y" %then %do;
21450     +       INTERACT Largest;
21451     +       Train maxnewdepth=0;
21452     +    %end;
21454     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
21455     +         Assess
21456     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
21457     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
21458     +              %put &em_codebar;
21459     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
21460     +              %put &errormsg;
21461     +              %put &em_codebar;
21462     +            %end;
21463     +            %else %do;
21464     +               Validata=&EM_IMPORT_VALIDATE
21465     +            %end;
21466     +         %end;
21467     +         %else %do;
21468     +           NoValidata
21469     +         %end;
21470     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
21471     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
21472     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
21473     +               %if &dsid %then %do;
21474     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
21475     +                 %do %while(^ %sysfunc(fetch(&dsid)));
21476     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
21477     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
21478     +                   %else %do;
21479     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
21480     +                      %else %let measure= MISC;
21481     +                   %end;
21482     +                 %end;
21483     +               %end;
21484     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
21485     +            %end;
21486     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
21487     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
21488     +                 %let measure=ASE;
21489     +              %end;
21490     +              %else %do;
21491     +                 %let measure=MISC;
21492     +              %end;
21493     +            %end;
21494     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
21495     +              %let measure=ASE;
21496     +            %end;
21497     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
21498     +               %let measure = LIFT;
21499     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
21500     +               %if &dsid %then %do;
21501     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
21502     +                 %do %while(^ %sysfunc(fetch(&dsid)));
21503     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
21504     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
21505     +                 %end;
21506     +               %end;
21507     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
21508     +            %end;
21509     +            measure=&measure
21510     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
21511     +               event = "&targetEvent"
21512     +            %end;
21513     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
21514     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
21515     +            %end;
21516     +         %end;
21517     +         %if "&multipleTar" eq "N" %then %do;
21518     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
21519     +               CV
21520     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
21521     +                 CVNITer = &EM_PROPERTY_CVNITER
21522     +               %end;
21523     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
21524     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
21525     +               %end;
21526     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
21527     +                 CVSeed = &EM_PROPERTY_CVSEED
21528     +               %end;
21529     +            %end;
21530     +         %end;
21531     +       %end;
21532     +      ;
21534     +      %if "&intFlag" ne "Y" %then %do;
21535     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
21536     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
21537     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
21538     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
21540     +          SUBTREE &subtree
21541     +          %if "&subtree" eq "NLEAVES" %then %do;
21542     +            =&EM_PROPERTY_NSUBTREE
21543     +          %end;
21544     +          ;
21545     +        %end;
21547     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
21548     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
21549     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
21550     +          %end;
21551     +       %end;
21552     +      %end;
21553     + %end;
21556     + MakeMacro nleaves = nleaves;
21557     + save
21558     + %if "&EM_USER_EMTREE" ne "" %then %do;
21559     +   MODEL=&EM_USER_EMTREE
21560     + %end;
21561     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
21562     +   SEQUENCE=&EM_USER_OUTSEQ
21563     + %end;
21564     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
21565     +   IMPORTANCE=&EM_USER_OUTIMPORT
21566     + %end;
21567     + %if "&EM_USER_OUTNODES" ne "" %then %do;
21568     +   NODESTAT=&EM_USER_OUTNODES
21569     + %end;
21570     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
21571     +   SUMMARY=&EM_USER_OUTSUMMARY
21572     + %end;
21573     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
21574     +   STATSBYNODE=&EM_USER_OUTSTATS
21575     + %end;
21576     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
21577     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
21578     + %end;
21579     + %if "&EM_USER_OUTPATH" ne "" %then %do;
21580     +   Pathlistnonmissing=&EM_USER_OUTPATH
21581     + %end;
21582     + %if "&EM_USER_OUTRULES" ne "" %then %do;
21583     +   RULES = &EM_USER_OUTRULES
21584     + %end;
21585     + ;
21587     + %if "&intFlag" ne "Y" %then %do;
21589     +   %let lookupString = ;
21590     +   %if ^%symexist(EM_OPTION) %then
21591     +      %let EM_OPTION=;
21593     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
21594     +      %let lookupString = LOOKUP=SELECT;
21595     +   %end;
21597     +   %let codetext=;
21598     +   %let norescodetxt=;
21600     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
21601     +     %let codetext=&codetext DUMMY;
21602     +     %let norescodetxt=&norescodetxt DUMMY;
21603     +   %end;
21604     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
21605     +     %let codetext=&codetext NOLEAFID;
21606     +     %let norescodetxt=&norescodetxt NOLEAFID;
21607     +   %end;
21608     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
21609     +     %let norescodetxt=&norescodetxt NOPRED;
21610     +   %end;
21612     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
21613     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
21615     +   %if &nnpmml %then %do;
21616     +     code pmml;
21617     +   %end;
21619     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
21620     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
21621     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
21622     +   %end;
21623     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
21624     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
21625     +   %end;
21626     + %end;
21628     + run;
21629     + quit;
21631     + /*%em_checkerror(); */
21632     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
21633     +   /* Delete DMDB catalog */
21634     +   proc datasets lib=work nolist;
21635     +       delete _treeDMDB / mt=cat;
21636     +  run;
21637     +  %end;
21639     + %if &nnpmml %then %do;
21640     +    ods pmml close;
21641     + %end;
21643     +  %doendm:
21645     +%mend em_tree_runTreeProcedure;
21647     +%macro em_tree_createFitStats( multipleTar= );
21650     +  /* create targetTable is multipleTar eq Y */
21651     +  data temptarget;
21652     +    set &EM_DATA_VARIABLESET;
21653     +    where ROLE="TARGET";
21654     +  run;
21656     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
21657     +   data &EM_USER_EMOUTFIT;
21658     +     length target $32;
21659     +     merge work.fit_train
21660     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
21661     +       work.fit_valid
21662     +     %end;
21663     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
21664     +       work.fit_test
21665     +     %end;
21666     +     ;
21667     +     %if "&multipleTar" eq "N" %then %do;
21668     +       target="%EM_TARGET";
21669     +     %end;
21670     +     %else %do;
21671     +       target = _TARGET_;
21672     +     %end;
21673     +     drop _NW_ _SUMW_
21674     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
21675     +        _VSUMW_
21676     +     %end;
21677     +     ;
21678     +   run;
21680     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
21681     +     proc datasets library=work nolist;
21682     +       delete fit_valid;
21683     +     run;
21684     +   %end;
21685     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
21686     +     proc datasets library=work nolist;
21687     +       delete fit_test;
21688     +     run;
21689     +   %end;
21691     +%mend em_tree_createFitStats;
21694     +%macro em_tree_makeEnglishRules;
21696     +  %EM_GETNAME(key=OUTNODES, type=DATA);
21697     +  %EM_GETNAME(key=OUTPATH, type=DATA);
21699     +  /* verify that necessary tables exist and if not, skip processing */
21700     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
21701     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
21702     +    %goto doendm;
21703     +  %end;
21704     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
21705     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
21706     +    %goto doendm;
21707     +  %end;
21709     +  /* determine length of variable in outpath dataset */
21710     +  %let vlength= ;
21711     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
21712     +  %if &dsid ne %then %do;
21713     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
21714     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
21715     +  %end;
21716     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
21718     +  data tempoutpath;
21719     +    length varname $&vlength;
21720     +    retain varname;
21721     +    set &EM_USER_OUTPATH;
21723     +    if ^missing(variable) then varname=variable;
21724     +    else if ^missing(var_name) then varname=var_name;
21725     +    output;
21726     +  run;
21728     +  /* create an array of generated predicted variable names */
21729     +  %let tree_pred_vars = ;
21730     +  %let tree_pred_label = ;
21731     +  %let numpred= 0;
21732     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
21734     +    data _null_;
21735     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
21736     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
21737     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
21738     +     if eof then
21739     +       call symput('numpred', strip(put(_N_, BEST.)));
21740     +    run;
21741     +  %end;
21743     +  /* determine if NPRIORS exists in outnodes  */
21744     +  %local nprior_flag;
21745     +  data _null_;
21746     +    set &EM_USER_OUTNODES(obs=2) end=eof;
21747     +    if eof then do;
21748     +      call symput('nprior_flag', strip(put(npriors, best.)));
21749     +    end;
21750     +  run;
21752     +  proc sort data=tempoutpath; by node; run;
21753     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
21755     +  data tempoutpath;
21756     +    merge tempoutpath(in=_a) outnodes(keep= node
21757     +    %if "&nprior_flag" ne "." %then %do;
21758     +      NPRIORS
21759     +    %end;
21760     +    %else %do;
21761     +      N
21762     +    %end;
21763     +    %if &numpred gt 0 %then %do;
21764     +      %do i=1 %to &numpred;
21765     +        &&tree_pred_vars&i
21766     +      %end;
21767     +    %end;
21768     +    );
21769     +    by node;
21770     +    if _a;
21771     +  run;
21773     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
21775     +  data _null_;
21776     +    file x;
21777     +    set tempoutpath;
21778     +    by node descending varname;
21779     +    retain origvar oldnode string;
21780     +    length origvar $32 oldnode 8 string $5000;
21782     +    if _N_ = 1 then do;
21783     +      origvar = varname;
21784     +      oldnode = node;
21785     +    end;
21787     +    if first.node then do;
21788     +       put "&EM_CODEBAR";
21789     +       put " Node = " node;
21790     +       put "&EM_CODEBAR";
21791     +    end;
21793     +      if first.varname then do;
21794     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
21795     +            if MISSING(CHARACTER_VALUE) then do;
21796     +             if NUMERIC_VALUE ne .  then do;
21797     +              if ^first.node then do;
21798     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21799     +              end;
21800     +              else do;
21801     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21802     +              end;
21803     +             end;
21804     +            end;
21805     +            else do;
21806     +              if ^first.node then do;
21807     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21808     +              end;
21809     +              else do;
21810     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21811     +              end;
21812     +             end;
21813     +         end;
21814     +         else if RELATION in ("=") then do;
21815     +            if ^first.node then do;
21816     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
21817     +            end;
21818     +            else do;
21819     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
21820     +            end;
21821     +         end;
21822     +         else if RELATION in ("ISMISSING") then do;
21823     +            if ^first.node then do;
21824     +              string = " AND "|| strip(varname) || " equals Missing";
21825     +            end;
21826     +            else do;
21827     +              string = "if "|| strip(varname) ||" equals Missing";
21828     +            end;
21829     +         end;
21830     +         else if RELATION in ("ISNOTMISSING") then do;
21831     +            if ^first.node then do;
21832     +              string = " AND "|| strip(varname) || " equals All Values";
21833     +            end;
21834     +            else do;
21835     +              string = "if "|| strip(varname) ||" equals All Values";
21836     +            end;
21837     +         end;
21838     +         if ^missing(varname) then origvar = varname;
21839     +         oldnode=node;
21841     +      end;
21842     +      else do;
21843     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
21844     +          if MISSING(CHARACTER_VALUE) then do;
21845     +           if  NUMERIC_VALUE ne .  then do;
21846     +            if ^MISSING(string) then
21847     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21848     +            else
21849     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
21850     +           end;
21851     +          end;
21852     +          else do;
21853     +            if ^MISSING(string) then
21854     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21855     +            else
21856     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
21857     +          end;
21859     +         end;
21860     +         else if RELATION in ("=") then do;
21861     +           string = strip(string)||", "||strip(character_value);
21862     +         end;
21863     +         else if RELATION in ("ISMISSING") then do;
21865     +         end;
21866     +         if ^missing(varname) then origvar = varname;
21867     +         oldnode=node;
21868     +      end;
21869     +      if last.varname then do;
21870     +         if RELATION in ("ISMISSING") then do;
21871     +           if ^first.varname then do;
21872     +             string = strip(string) || " or MISSING";
21873     +           end;
21874     +         end;
21875     +         put string;
21876     +         if ^missing(varname) then origvar = varname;
21877     +         oldnode=node;
21878     +      end;
21880     +      if last.node then do;
21881     +         put "then ";
21882     +         put " Tree Node Identifier   = " node;
21884     +         %if "&nprior_flag" ne "." %then %do;
21885     +           put " Number of Observations = " NPRIORS;
21886     +         %end;
21887     +         %else %do;
21888     +           put " Number of Observations = " N;
21889     +         %end;
21891     +         %if &numpred gt 0 %then %do;
21892     +           %do i=1 %to &numpred;
21893     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
21894     +           %end;
21895     +         %end;
21897     +         put " ";
21898     +         if ^missing(varname) then origvar = varname;
21899     +         oldnode=node;
21900     +      end;
21902     +  run;
21904     +  proc datasets lib=work nolist;
21905     +    delete tempoutpath outnodes;
21906     +  run;
21908     +  %doendm:
21909     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: 1608700 kilobytes of physical memory.
NOTE: The subtree sequence contains 11 subtrees. The largest has 21 nodes and 11 leaves.
NOTE: Will use 2979 out of 2979 training cases.
NOTE: Using memory pool with 122336256 bytes.
NOTE: The subtree sequence contains 11 subtrees. The largest has 21 nodes and 11 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
NOTE: Created macro variable NLEAVES equal to 11.
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS3.TREE3_EMTREE has 863 observations and 4 variables.
NOTE: The data set EMWS3.TREE3_OUTNODES has 21 observations and 24 variables.
NOTE: The data set EMWS3.TREE3_OUTPATH has 92 observations and 7 variables.
NOTE: The data set EMWS3.TREE3_OUTRULES has 292 observations and 6 variables.
NOTE: The data set EMWS3.TREE3_OUTSEQ has 11 observations and 20 variables.
NOTE: The data set EMWS3.TREE3_OUTSTATS has 147 observations and 5 variables.
NOTE: The data set EMWS3.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE3_OUTTOPOLOGY has 21 observations and 5 variables.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEFLOW.sas opened.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.


NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS3.TREE3_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_TEST (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 92 observations read from the data set EMWS3.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 92 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 92 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 92 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 21 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 92 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 92 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 92 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 92 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=14 de marzo de 2021 13H51

NOTE: 134 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 92 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

21911      
21912      *------------------------------------------------------------*;
21913      * End CLOSEINT: Tree3;
21914      *------------------------------------------------------------*;

21915      proc sort data=WORK.EM_USER_REPORT;
21916      by ID VIEW;
21917      run;

NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

21918      %let EMEXCEPTIONSTRING=;
21919      *------------------------------------------------------------*;
21920      * SCORE: Tree3;
21921      *------------------------------------------------------------*;
21922      %let EM_ACTION = SCORE;
21923      %let syscc = 0;
21924      %macro main;
21925      
21926        %if %upcase(&EM_ACTION) = CREATE %then %do;
21927          filename temp catalog 'sashelp.emmodl.tree_create.source';
21928          %include temp;
21929          filename temp;
21930      
21931          %em_tree_create;
21932        %end;
21933      
21934         %else
21935         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21936      
21937             filename temp catalog 'sashelp.emmodl.tree_train.source';
21938             %include temp;
21939             filename temp;
21940             %em_tree_train;
21941         %end;
21942      
21943        %else
21944        %if %upcase(&EM_ACTION) = SCORE %then %do;
21945          filename temp catalog 'sashelp.emmodl.tree_score.source';
21946          %include temp;
21947          filename temp;
21948      
21949          %em_tree_score;
21950      
21951        %end;
21952      
21953        %else
21954        %if %upcase(&EM_ACTION) = REPORT %then %do;
21955      
21956             filename temp catalog 'sashelp.emmodl.tree_report.source';
21957             %include temp;
21958             filename temp;
21959      
21960             %em_tree_report;
21961         %end;
21962      
21963        %else
21964        %if %upcase(&EM_ACTION) = OPENINT %then %do;
21965      
21966             filename temp catalog 'sashelp.emmodl.tree_actions.source';
21967             %include temp;
21968             filename temp;
21969             %EM_TREE_OPENTREEVIEWER;
21970      
21971         %end;
21972      
21973        %else
21974        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
21975      
21976             filename temp catalog 'sashelp.emmodl.tree_actions.source';
21977             %include temp;
21978             filename temp;
21979             %EM_TREE_CLOSETREEVIEWER;
21980      
21981         %end;
21982      
21983      
21984         %doendm:
21985      %mend main;
21986      
21987      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
21989     +%macro em_tree_score;
21991     +   /* determine if multiple targets will be processed */
21992     +   %let em_tree_multipleTargets=N;
21993     +   %let em_tree_numTarget=1;
21994     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
21995     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
21996     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
21997     +         %let em_tree_multipleTargets=N;
21998     +      %end;
21999     +      %else %do;
22000     +         /* create macro array of targets  */
22001     +         data _null_;
22002     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
22003     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
22004     +           if eof then
22005     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
22006     +        run;
22008     +        %if &em_tree_numTarget gt 1 %then %do;
22009     +           %let em_tree_multipleTargets=Y;
22010     +        %end;
22011     +      %end;
22012     +   %end;
22014     +   /* build flow and publish scoring code */
22015     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
22016     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
22018     +   filename treeflow "&EM_USER_TREEFLOW";
22019     +   filename treepub "&EM_USER_TREEPUBLISH";
22021     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
22022     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
22024     +   %em_copyfile(infref=treeflow, outfref=flowref);
22025     +   %em_copyfile(infref=treepub, outfref=pubref);
22027     +   filename treeflow;
22028     +   filename treepub;
22030     +   /* if priors are used, add code to generate unadjusted residuals in export */
22031     +   %let useAdjPriors = N;
22032     +   data _null_;
22033     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
22034     +     if USE="Y" then call symput('useAdjPriors', 'Y');
22035     +   run;
22036     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
22037     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
22038     +      %include temp;
22039     +      filename temp;
22041     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
22042     +      filename adjref "&EM_USER_adjResidualCode";
22043     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
22045     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
22047     +      filename adjref;
22048     +   %end;
22050     +   /* LEAF */
22051     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
22052     +      data _null_;
22053     +        file flowref mod;
22054     +        put 'drop _LEAF_;';
22055     +      run;
22057     +      data _null_;
22058     +        file pubref mod;
22059     +        put 'drop _LEAF_;';
22060     +      run;
22062     +   %end;
22064     +   filename flowref;
22065     +   filename pubref;
22067     +   /* em_metachange code */
22068     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
22069     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
22070     +   %end;
22072     +   /* variable selection based on importance stat    */
22073     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
22074     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
22075     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
22076     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
22077     +     %let obs = %sysfunc(fetch(&dsid));
22078     +     %do %while(&obs=0);
22079     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
22080     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
22081     +       %EM_METACHANGE(name=&varname, role=REJECTED);
22082     +       %let obs = %sysfunc(fetch(&dsid));
22083     +     %end;
22084     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
22085     +   %end;
22087     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
22088     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
22089     +    %let tree_pred_vars = ;
22090     +    %let tree_pred_lvl =;
22091     +    %let numpred= 0;
22093     +    data _null_;
22094     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
22095     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
22096     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
22097     +     if eof then
22098     +       call symput('numpred', strip(put(_N_, BEST.)));
22099     +    run;
22100     +   %end;
22102     +   %if &numpred ne 0 %then %do;
22103     +    %do i=1 %to &numpred;
22104     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
22105     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
22106     +    %end;
22107     +   %end;
22109     +   /* determine if multiple targets will be processed */
22110     +   %let em_tree_multipleTargets=N;
22111     +   %let em_tree_numTarget=1;
22112     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
22113     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
22114     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
22115     +         %let em_tree_multipleTargets=N;
22116     +      %end;
22117     +      %else %do;
22118     +        data _null_;
22119     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
22120     +          if eof then
22121     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
22122     +        run;
22124     +        %if &em_tree_numTarget gt 1 %then %do;
22125     +           %let em_tree_multipleTargets=Y;
22126     +        %end;
22127     +     %end;
22128     +   %end;
22130     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
22131     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
22133     +      /* variable importance */
22134     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
22135     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
22137     +         %let validexist=0;
22138     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
22139     +           %let validexist=1;
22140     +         %end;
22142     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
22143     +         /* and the columns may not be generated                                                                                 */
22144     +         %let em_tree_cvexists=;
22145     +         %let em_tree_surrexists=.;
22146     +         data _null_;
22147     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
22148     +            if eof then do ;
22149     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
22150     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
22151     +            end;
22152     +         run;
22154     +         data &EM_USER_OUTIMPORT;
22155     +            set &EM_USER_OUTIMPORT;
22157     +            /* format columns based on Precison value specified */
22158     +            format importance 15.&EM_PROPERTY_PRECISION
22159     +                 %if &validexist %then %do;
22160     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
22161     +                 %end;
22162     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
22163     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
22164     +                 %end;
22165     +            ;
22166     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
22167     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
22168     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
22169     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
22170     +                 %if "&em_tree_surrexists" ne "" %then %do;
22171     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
22172     +                 %end;
22173     +                 %if &validexist %then %do;
22174     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
22175     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
22176     +                 %end;
22177     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
22178     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
22179     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
22180     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
22181     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
22182     +                 %end;
22183     +            ;
22184     +         run;
22186     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
22187     +      %end;
22188     +   %end;
22190     +   %doendm:
22191     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=13 de marzo de 2021 21H20

NOTE: 218 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=13 de marzo de 2021 21H20

NOTE: 196 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.

NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=7376,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=13 de marzo de 2021 21H20

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=6835,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=13 de marzo de 2021 21H20

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

22192      
22193      *------------------------------------------------------------*;
22194      * End SCORE: Tree3;
22195      *------------------------------------------------------------*;

22196      proc sort data=WORK.EM_METACHANGE;
22197      by key uname;
22198      run;

NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22199      filename x "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\CDELTA_TRAIN.sas";
22200      data _null_;
22201      file x;
22202      put 'if upcase(NAME) = "CLNO" then do;';
22203      put 'ROLE = "REJECTED";';
22204      put 'end;';
22205      put 'else ';
22206      put 'if upcase(NAME) = "DEROG" then do;';
22207      put 'ROLE = "REJECTED";';
22208      put 'end;';
22209      put 'else ';
22210      put 'if upcase(NAME) = "JOB" then do;';
22211      put 'ROLE = "REJECTED";';
22212      put 'end;';
22213      put 'else ';
22214      put 'if upcase(NAME) = "MORTDUE" then do;';
22215      put 'ROLE = "REJECTED";';
22216      put 'end;';
22217      put 'else ';
22218      put 'if upcase(NAME) = "NINQ" then do;';
22219      put 'ROLE = "REJECTED";';
22220      put 'end;';
22221      put 'else ';
22222      put 'if upcase(NAME) = "Q_BAD0" then do;';
22223      put 'ROLE = "ASSESS";';
22224      put 'end;';
22225      put 'else ';
22226      put 'if upcase(NAME) = "Q_BAD1" then do;';
22227      put 'ROLE = "ASSESS";';
22228      put 'end;';
22229      put 'else ';
22230      put 'if upcase(NAME) = "REASON" then do;';
22231      put 'ROLE = "REJECTED";';
22232      put 'end;';
22233      put 'else ';
22234      put 'if upcase(NAME) = "YOJ" then do;';
22235      put 'ROLE = "REJECTED";';
22236      put 'end;';
22237      put 'else ';
22238      put 'if upcase(NAME) = "_NODE_" then do;';
22239      put 'ROLE = "SEGMENT";';
22240      put 'LEVEL = "NOMINAL";';
22241      put 'end;';
22242      run;

NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H44,
      Create Time=13 de marzo de 2021 21H20

NOTE: 40 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 36.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22243      filename x;
NOTE: Fileref X has been deassigned.
22244      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
22245      *------------------------------------------------------------*;
22246      * Tree3: Scoring DATA data;
22247      *------------------------------------------------------------*;
22248      data EMWS3.Tree3_TRAIN
22249      / view=EMWS3.Tree3_TRAIN
22250      ;
22251      set EMWS3.Part_TRAIN
22252      ;
22253      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas.
22254     +****************************************************************;
22255     +******             DECISION TREE SCORING CODE             ******;
22256     +****************************************************************;
22257     +
22258     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
22259     +LENGTH F_BAD  $   12;
22260     +LENGTH I_BAD  $   12;
22261     +LENGTH _WARN_  $    4;
22262     +
22263     +******              LABELS FOR NEW VARIABLES              ******;
22264     +label _NODE_ = 'Node' ;
22265     +label _LEAF_ = 'Leaf' ;
22266     +label P_BAD1 = 'Predicted: BAD=1' ;
22267     +label P_BAD0 = 'Predicted: BAD=0' ;
22268     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
22269     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
22270     +label V_BAD1 = 'Validated: BAD=1' ;
22271     +label V_BAD0 = 'Validated: BAD=0' ;
22272     +label R_BAD1 = 'Residual: BAD=1' ;
22273     +label R_BAD0 = 'Residual: BAD=0' ;
22274     +label F_BAD = 'From: BAD' ;
22275     +label I_BAD = 'Into: BAD' ;
22276     +label U_BAD = 'Unnormalized Into: BAD' ;
22277     +label _WARN_ = 'Warnings' ;
22278     +
22279     +
22280     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
22281     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
22282     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
22283     +
22284     +
22285     +_ARBFMT_12 = PUT( BAD , BEST12.);
22286     + %DMNORMCP( _ARBFMT_12, F_BAD );
22287     +
22288     +******             ASSIGN OBSERVATION TO NODE             ******;
22289     +IF  NOT MISSING(DEBTINC ) AND
22290     +  DEBTINC  <     44.7336573513381 THEN DO;
22291     +  IF  NOT MISSING(VALUE ) AND
22292     +    VALUE  <               303749 THEN DO;
22293     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
22294     +     %DMNORMIP( _ARBFMT_12);
22295     +    IF _ARBFMT_12 IN ('7' ) THEN DO;
22296     +      _NODE_  =                    8;
22297     +      _LEAF_  =                    1;
22298     +      P_BAD1  =                    1;
22299     +      P_BAD0  =                    0;
22300     +      Q_BAD1  =                    1;
22301     +      Q_BAD0  =                    0;
22302     +      V_BAD1  =                    0;
22303     +      V_BAD0  =                    0;
22304     +      I_BAD  = '1' ;
22305     +      U_BAD  =                    1;
22306     +      END;
22307     +    ELSE DO;
22308     +      _ARBFMT_12 = PUT( DELINQ , BEST12.);
22309     +       %DMNORMIP( _ARBFMT_12);
22310     +      IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
22311     +        IF  NOT MISSING(DEBTINC ) AND
22312     +          DEBTINC  <      9.5345039737618 THEN DO;
22313     +          _NODE_  =                   26;
22314     +          _LEAF_  =                    2;
22315     +          P_BAD1  =                    1;
22316     +          P_BAD0  =                    0;
22317     +          Q_BAD1  =                    1;
22318     +          Q_BAD0  =                    0;
22319     +          V_BAD1  =                    1;
22320     +          V_BAD0  =                    0;
22321     +          I_BAD  = '1' ;
22322     +          U_BAD  =                    1;
22323     +          END;
22324     +        ELSE DO;
22325     +          _NODE_  =                   27;
22326     +          _LEAF_  =                    3;
22327     +          P_BAD1  =     0.14201183431952;
22328     +          P_BAD0  =     0.85798816568047;
22329     +          Q_BAD1  =     0.14201183431952;
22330     +          Q_BAD0  =     0.85798816568047;
22331     +          V_BAD1  =      0.1231527093596;
22332     +          V_BAD0  =     0.87684729064039;
22333     +          I_BAD  = '0' ;
22334     +          U_BAD  =                    0;
22335     +          END;
22336     +        END;
22337     +      ELSE DO;
22338     +        IF  NOT MISSING(LOAN ) AND
22339     +          LOAN  <                 4150 THEN DO;
22340     +          _NODE_  =                   28;
22341     +          _LEAF_  =                    4;
22342     +          P_BAD1  =                  0.5;
22343     +          P_BAD0  =                  0.5;
22344     +          Q_BAD1  =                  0.5;
22345     +          Q_BAD0  =                  0.5;
22346     +          V_BAD1  =     0.36363636363636;
22347     +          V_BAD0  =     0.63636363636363;
22348     +          I_BAD  = '1' ;
22349     +          U_BAD  =                    1;
22350     +          END;
22351     +        ELSE DO;
22352     +          _NODE_  =                   29;
22353     +          _LEAF_  =                    5;
22354     +          P_BAD1  =      0.0453141091658;
22355     +          P_BAD0  =     0.95468589083419;
22356     +          Q_BAD1  =      0.0453141091658;
22357     +          Q_BAD0  =     0.95468589083419;
22358     +          V_BAD1  =     0.04247787610619;
22359     +          V_BAD0  =      0.9575221238938;
22360     +          I_BAD  = '0' ;
22361     +          U_BAD  =                    0;
22362     +          END;
22363     +        END;
22364     +      END;
22365     +    END;
22366     +  ELSE DO;
22367     +    _NODE_  =                    5;
22368     +    _LEAF_  =                    6;
22369     +    P_BAD1  =                 0.85;
22370     +    P_BAD0  =                 0.15;
22371     +    Q_BAD1  =                 0.85;
22372     +    Q_BAD0  =                 0.15;
22373     +    V_BAD1  =     0.81818181818181;
22374     +    V_BAD0  =     0.18181818181818;
22375     +    I_BAD  = '1' ;
22376     +    U_BAD  =                    1;
22377     +    END;
22378     +  END;
22379     +ELSE DO;
22380     +  IF  NOT MISSING(CLAGE ) AND
22381     +        165.524113475177 <= CLAGE  THEN DO;
22382     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
22383     +     %DMNORMIP( _ARBFMT_12);
22384     +    IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
22385     +      IF  NOT MISSING(VALUE ) AND
22386     +                       56000 <= VALUE  THEN DO;
22387     +        _NODE_  =                   23;
22388     +        _LEAF_  =                    9;
22389     +        P_BAD1  =     0.29496402877697;
22390     +        P_BAD0  =     0.70503597122302;
22391     +        Q_BAD1  =     0.29496402877697;
22392     +        Q_BAD0  =     0.70503597122302;
22393     +        V_BAD1  =     0.36363636363636;
22394     +        V_BAD0  =     0.63636363636363;
22395     +        I_BAD  = '0' ;
22396     +        U_BAD  =                    0;
22397     +        END;
22398     +      ELSE DO;
22399     +        _NODE_  =                   22;
22400     +        _LEAF_  =                    8;
22401     +        P_BAD1  =     0.64864864864864;
22402     +        P_BAD0  =     0.35135135135135;
22403     +        Q_BAD1  =     0.64864864864864;
22404     +        Q_BAD0  =     0.35135135135135;
22405     +        V_BAD1  =     0.47368421052631;
22406     +        V_BAD0  =     0.52631578947368;
22407     +        I_BAD  = '1' ;
22408     +        U_BAD  =                    1;
22409     +        END;
22410     +      END;
22411     +    ELSE DO;
22412     +      IF  NOT MISSING(CLAGE ) AND
22413     +            345.933333333333 <= CLAGE  THEN DO;
22414     +        _NODE_  =                   25;
22415     +        _LEAF_  =                   11;
22416     +        P_BAD1  =     0.16666666666666;
22417     +        P_BAD0  =     0.83333333333333;
22418     +        Q_BAD1  =     0.16666666666666;
22419     +        Q_BAD0  =     0.83333333333333;
22420     +        V_BAD1  =                    0;
22421     +        V_BAD0  =                    1;
22422     +        I_BAD  = '0' ;
22423     +        U_BAD  =                    0;
22424     +        END;
22425     +      ELSE DO;
22426     +        _NODE_  =                   24;
22427     +        _LEAF_  =                   10;
22428     +        P_BAD1  =     0.82278481012658;
22429     +        P_BAD0  =     0.17721518987341;
22430     +        Q_BAD1  =     0.82278481012658;
22431     +        Q_BAD0  =     0.17721518987341;
22432     +        V_BAD1  =     0.66129032258064;
22433     +        V_BAD0  =     0.33870967741935;
22434     +        I_BAD  = '1' ;
22435     +        U_BAD  =                    1;
22436     +        END;
22437     +      END;
22438     +    END;
22439     +  ELSE DO;
22440     +    _NODE_  =                    6;
22441     +    _LEAF_  =                    7;
22442     +    P_BAD1  =     0.74242424242424;
22443     +    P_BAD0  =     0.25757575757575;
22444     +    Q_BAD1  =     0.74242424242424;
22445     +    Q_BAD0  =     0.25757575757575;
22446     +    V_BAD1  =     0.73306772908366;
22447     +    V_BAD0  =     0.26693227091633;
22448     +    I_BAD  = '1' ;
22449     +    U_BAD  =                    1;
22450     +    END;
22451     +  END;
22452     +
22453     +*****  RESIDUALS R_ *************;
22454     +IF  F_BAD  NE '1'
22455     +AND F_BAD  NE '0'  THEN DO;
22456     +        R_BAD1  = .;
22457     +        R_BAD0  = .;
22458     + END;
22459     + ELSE DO;
22460     +       R_BAD1  =  -P_BAD1 ;
22461     +       R_BAD0  =  -P_BAD0 ;
22462     +       SELECT( F_BAD  );
22463     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
22464     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
22465     +       END;
22466     + END;
22467     +
22468     +****************************************************************;
22469     +******          END OF DECISION TREE SCORING CODE         ******;
22470     +****************************************************************;
22471     +
22472     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
22473      run;

NOTE: DATA STEP view saved on file EMWS3.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22474      quit;
22475      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22476      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
22477      *------------------------------------------------------------*;
22478      * Tree3: Scoring VALIDATE data;
22479      *------------------------------------------------------------*;
22480      data EMWS3.Tree3_VALIDATE
22481      / view=EMWS3.Tree3_VALIDATE
22482      ;
22483      set EMWS3.Part_VALIDATE
22484      ;
22485      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas.
22486     +****************************************************************;
22487     +******             DECISION TREE SCORING CODE             ******;
22488     +****************************************************************;
22489     +
22490     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
22491     +LENGTH F_BAD  $   12;
22492     +LENGTH I_BAD  $   12;
22493     +LENGTH _WARN_  $    4;
22494     +
22495     +******              LABELS FOR NEW VARIABLES              ******;
22496     +label _NODE_ = 'Node' ;
22497     +label _LEAF_ = 'Leaf' ;
22498     +label P_BAD1 = 'Predicted: BAD=1' ;
22499     +label P_BAD0 = 'Predicted: BAD=0' ;
22500     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
22501     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
22502     +label V_BAD1 = 'Validated: BAD=1' ;
22503     +label V_BAD0 = 'Validated: BAD=0' ;
22504     +label R_BAD1 = 'Residual: BAD=1' ;
22505     +label R_BAD0 = 'Residual: BAD=0' ;
22506     +label F_BAD = 'From: BAD' ;
22507     +label I_BAD = 'Into: BAD' ;
22508     +label U_BAD = 'Unnormalized Into: BAD' ;
22509     +label _WARN_ = 'Warnings' ;
22510     +
22511     +
22512     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
22513     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
22514     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
22515     +
22516     +
22517     +_ARBFMT_12 = PUT( BAD , BEST12.);
22518     + %DMNORMCP( _ARBFMT_12, F_BAD );
22519     +
22520     +******             ASSIGN OBSERVATION TO NODE             ******;
22521     +IF  NOT MISSING(DEBTINC ) AND
22522     +  DEBTINC  <     44.7336573513381 THEN DO;
22523     +  IF  NOT MISSING(VALUE ) AND
22524     +    VALUE  <               303749 THEN DO;
22525     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
22526     +     %DMNORMIP( _ARBFMT_12);
22527     +    IF _ARBFMT_12 IN ('7' ) THEN DO;
22528     +      _NODE_  =                    8;
22529     +      _LEAF_  =                    1;
22530     +      P_BAD1  =                    1;
22531     +      P_BAD0  =                    0;
22532     +      Q_BAD1  =                    1;
22533     +      Q_BAD0  =                    0;
22534     +      V_BAD1  =                    0;
22535     +      V_BAD0  =                    0;
22536     +      I_BAD  = '1' ;
22537     +      U_BAD  =                    1;
22538     +      END;
22539     +    ELSE DO;
22540     +      _ARBFMT_12 = PUT( DELINQ , BEST12.);
22541     +       %DMNORMIP( _ARBFMT_12);
22542     +      IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
22543     +        IF  NOT MISSING(DEBTINC ) AND
22544     +          DEBTINC  <      9.5345039737618 THEN DO;
22545     +          _NODE_  =                   26;
22546     +          _LEAF_  =                    2;
22547     +          P_BAD1  =                    1;
22548     +          P_BAD0  =                    0;
22549     +          Q_BAD1  =                    1;
22550     +          Q_BAD0  =                    0;
22551     +          V_BAD1  =                    1;
22552     +          V_BAD0  =                    0;
22553     +          I_BAD  = '1' ;
22554     +          U_BAD  =                    1;
22555     +          END;
22556     +        ELSE DO;
22557     +          _NODE_  =                   27;
22558     +          _LEAF_  =                    3;
22559     +          P_BAD1  =     0.14201183431952;
22560     +          P_BAD0  =     0.85798816568047;
22561     +          Q_BAD1  =     0.14201183431952;
22562     +          Q_BAD0  =     0.85798816568047;
22563     +          V_BAD1  =      0.1231527093596;
22564     +          V_BAD0  =     0.87684729064039;
22565     +          I_BAD  = '0' ;
22566     +          U_BAD  =                    0;
22567     +          END;
22568     +        END;
22569     +      ELSE DO;
22570     +        IF  NOT MISSING(LOAN ) AND
22571     +          LOAN  <                 4150 THEN DO;
22572     +          _NODE_  =                   28;
22573     +          _LEAF_  =                    4;
22574     +          P_BAD1  =                  0.5;
22575     +          P_BAD0  =                  0.5;
22576     +          Q_BAD1  =                  0.5;
22577     +          Q_BAD0  =                  0.5;
22578     +          V_BAD1  =     0.36363636363636;
22579     +          V_BAD0  =     0.63636363636363;
22580     +          I_BAD  = '1' ;
22581     +          U_BAD  =                    1;
22582     +          END;
22583     +        ELSE DO;
22584     +          _NODE_  =                   29;
22585     +          _LEAF_  =                    5;
22586     +          P_BAD1  =      0.0453141091658;
22587     +          P_BAD0  =     0.95468589083419;
22588     +          Q_BAD1  =      0.0453141091658;
22589     +          Q_BAD0  =     0.95468589083419;
22590     +          V_BAD1  =     0.04247787610619;
22591     +          V_BAD0  =      0.9575221238938;
22592     +          I_BAD  = '0' ;
22593     +          U_BAD  =                    0;
22594     +          END;
22595     +        END;
22596     +      END;
22597     +    END;
22598     +  ELSE DO;
22599     +    _NODE_  =                    5;
22600     +    _LEAF_  =                    6;
22601     +    P_BAD1  =                 0.85;
22602     +    P_BAD0  =                 0.15;
22603     +    Q_BAD1  =                 0.85;
22604     +    Q_BAD0  =                 0.15;
22605     +    V_BAD1  =     0.81818181818181;
22606     +    V_BAD0  =     0.18181818181818;
22607     +    I_BAD  = '1' ;
22608     +    U_BAD  =                    1;
22609     +    END;
22610     +  END;
22611     +ELSE DO;
22612     +  IF  NOT MISSING(CLAGE ) AND
22613     +        165.524113475177 <= CLAGE  THEN DO;
22614     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
22615     +     %DMNORMIP( _ARBFMT_12);
22616     +    IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
22617     +      IF  NOT MISSING(VALUE ) AND
22618     +                       56000 <= VALUE  THEN DO;
22619     +        _NODE_  =                   23;
22620     +        _LEAF_  =                    9;
22621     +        P_BAD1  =     0.29496402877697;
22622     +        P_BAD0  =     0.70503597122302;
22623     +        Q_BAD1  =     0.29496402877697;
22624     +        Q_BAD0  =     0.70503597122302;
22625     +        V_BAD1  =     0.36363636363636;
22626     +        V_BAD0  =     0.63636363636363;
22627     +        I_BAD  = '0' ;
22628     +        U_BAD  =                    0;
22629     +        END;
22630     +      ELSE DO;
22631     +        _NODE_  =                   22;
22632     +        _LEAF_  =                    8;
22633     +        P_BAD1  =     0.64864864864864;
22634     +        P_BAD0  =     0.35135135135135;
22635     +        Q_BAD1  =     0.64864864864864;
22636     +        Q_BAD0  =     0.35135135135135;
22637     +        V_BAD1  =     0.47368421052631;
22638     +        V_BAD0  =     0.52631578947368;
22639     +        I_BAD  = '1' ;
22640     +        U_BAD  =                    1;
22641     +        END;
22642     +      END;
22643     +    ELSE DO;
22644     +      IF  NOT MISSING(CLAGE ) AND
22645     +            345.933333333333 <= CLAGE  THEN DO;
22646     +        _NODE_  =                   25;
22647     +        _LEAF_  =                   11;
22648     +        P_BAD1  =     0.16666666666666;
22649     +        P_BAD0  =     0.83333333333333;
22650     +        Q_BAD1  =     0.16666666666666;
22651     +        Q_BAD0  =     0.83333333333333;
22652     +        V_BAD1  =                    0;
22653     +        V_BAD0  =                    1;
22654     +        I_BAD  = '0' ;
22655     +        U_BAD  =                    0;
22656     +        END;
22657     +      ELSE DO;
22658     +        _NODE_  =                   24;
22659     +        _LEAF_  =                   10;
22660     +        P_BAD1  =     0.82278481012658;
22661     +        P_BAD0  =     0.17721518987341;
22662     +        Q_BAD1  =     0.82278481012658;
22663     +        Q_BAD0  =     0.17721518987341;
22664     +        V_BAD1  =     0.66129032258064;
22665     +        V_BAD0  =     0.33870967741935;
22666     +        I_BAD  = '1' ;
22667     +        U_BAD  =                    1;
22668     +        END;
22669     +      END;
22670     +    END;
22671     +  ELSE DO;
22672     +    _NODE_  =                    6;
22673     +    _LEAF_  =                    7;
22674     +    P_BAD1  =     0.74242424242424;
22675     +    P_BAD0  =     0.25757575757575;
22676     +    Q_BAD1  =     0.74242424242424;
22677     +    Q_BAD0  =     0.25757575757575;
22678     +    V_BAD1  =     0.73306772908366;
22679     +    V_BAD0  =     0.26693227091633;
22680     +    I_BAD  = '1' ;
22681     +    U_BAD  =                    1;
22682     +    END;
22683     +  END;
22684     +
22685     +*****  RESIDUALS R_ *************;
22686     +IF  F_BAD  NE '1'
22687     +AND F_BAD  NE '0'  THEN DO;
22688     +        R_BAD1  = .;
22689     +        R_BAD0  = .;
22690     + END;
22691     + ELSE DO;
22692     +       R_BAD1  =  -P_BAD1 ;
22693     +       R_BAD0  =  -P_BAD0 ;
22694     +       SELECT( F_BAD  );
22695     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
22696     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
22697     +       END;
22698     + END;
22699     +
22700     +****************************************************************;
22701     +******          END OF DECISION TREE SCORING CODE         ******;
22702     +****************************************************************;
22703     +
22704     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
22705      run;

NOTE: DATA STEP view saved on file EMWS3.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22706      quit;
22707      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22708      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
22709      *------------------------------------------------------------*;
22710      * Tree3: Scoring TEST data;
22711      *------------------------------------------------------------*;
22712      data EMWS3.Tree3_TEST
22713      / view=EMWS3.Tree3_TEST
22714      ;
22715      set EMWS3.Part_TEST
22716      ;
22717      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas.
22718     +****************************************************************;
22719     +******             DECISION TREE SCORING CODE             ******;
22720     +****************************************************************;
22721     +
22722     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
22723     +LENGTH F_BAD  $   12;
22724     +LENGTH I_BAD  $   12;
22725     +LENGTH _WARN_  $    4;
22726     +
22727     +******              LABELS FOR NEW VARIABLES              ******;
22728     +label _NODE_ = 'Node' ;
22729     +label _LEAF_ = 'Leaf' ;
22730     +label P_BAD1 = 'Predicted: BAD=1' ;
22731     +label P_BAD0 = 'Predicted: BAD=0' ;
22732     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
22733     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
22734     +label V_BAD1 = 'Validated: BAD=1' ;
22735     +label V_BAD0 = 'Validated: BAD=0' ;
22736     +label R_BAD1 = 'Residual: BAD=1' ;
22737     +label R_BAD0 = 'Residual: BAD=0' ;
22738     +label F_BAD = 'From: BAD' ;
22739     +label I_BAD = 'Into: BAD' ;
22740     +label U_BAD = 'Unnormalized Into: BAD' ;
22741     +label _WARN_ = 'Warnings' ;
22742     +
22743     +
22744     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
22745     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
22746     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
22747     +
22748     +
22749     +_ARBFMT_12 = PUT( BAD , BEST12.);
22750     + %DMNORMCP( _ARBFMT_12, F_BAD );
22751     +
22752     +******             ASSIGN OBSERVATION TO NODE             ******;
22753     +IF  NOT MISSING(DEBTINC ) AND
22754     +  DEBTINC  <     44.7336573513381 THEN DO;
22755     +  IF  NOT MISSING(VALUE ) AND
22756     +    VALUE  <               303749 THEN DO;
22757     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
22758     +     %DMNORMIP( _ARBFMT_12);
22759     +    IF _ARBFMT_12 IN ('7' ) THEN DO;
22760     +      _NODE_  =                    8;
22761     +      _LEAF_  =                    1;
22762     +      P_BAD1  =                    1;
22763     +      P_BAD0  =                    0;
22764     +      Q_BAD1  =                    1;
22765     +      Q_BAD0  =                    0;
22766     +      V_BAD1  =                    0;
22767     +      V_BAD0  =                    0;
22768     +      I_BAD  = '1' ;
22769     +      U_BAD  =                    1;
22770     +      END;
22771     +    ELSE DO;
22772     +      _ARBFMT_12 = PUT( DELINQ , BEST12.);
22773     +       %DMNORMIP( _ARBFMT_12);
22774     +      IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
22775     +        IF  NOT MISSING(DEBTINC ) AND
22776     +          DEBTINC  <      9.5345039737618 THEN DO;
22777     +          _NODE_  =                   26;
22778     +          _LEAF_  =                    2;
22779     +          P_BAD1  =                    1;
22780     +          P_BAD0  =                    0;
22781     +          Q_BAD1  =                    1;
22782     +          Q_BAD0  =                    0;
22783     +          V_BAD1  =                    1;
22784     +          V_BAD0  =                    0;
22785     +          I_BAD  = '1' ;
22786     +          U_BAD  =                    1;
22787     +          END;
22788     +        ELSE DO;
22789     +          _NODE_  =                   27;
22790     +          _LEAF_  =                    3;
22791     +          P_BAD1  =     0.14201183431952;
22792     +          P_BAD0  =     0.85798816568047;
22793     +          Q_BAD1  =     0.14201183431952;
22794     +          Q_BAD0  =     0.85798816568047;
22795     +          V_BAD1  =      0.1231527093596;
22796     +          V_BAD0  =     0.87684729064039;
22797     +          I_BAD  = '0' ;
22798     +          U_BAD  =                    0;
22799     +          END;
22800     +        END;
22801     +      ELSE DO;
22802     +        IF  NOT MISSING(LOAN ) AND
22803     +          LOAN  <                 4150 THEN DO;
22804     +          _NODE_  =                   28;
22805     +          _LEAF_  =                    4;
22806     +          P_BAD1  =                  0.5;
22807     +          P_BAD0  =                  0.5;
22808     +          Q_BAD1  =                  0.5;
22809     +          Q_BAD0  =                  0.5;
22810     +          V_BAD1  =     0.36363636363636;
22811     +          V_BAD0  =     0.63636363636363;
22812     +          I_BAD  = '1' ;
22813     +          U_BAD  =                    1;
22814     +          END;
22815     +        ELSE DO;
22816     +          _NODE_  =                   29;
22817     +          _LEAF_  =                    5;
22818     +          P_BAD1  =      0.0453141091658;
22819     +          P_BAD0  =     0.95468589083419;
22820     +          Q_BAD1  =      0.0453141091658;
22821     +          Q_BAD0  =     0.95468589083419;
22822     +          V_BAD1  =     0.04247787610619;
22823     +          V_BAD0  =      0.9575221238938;
22824     +          I_BAD  = '0' ;
22825     +          U_BAD  =                    0;
22826     +          END;
22827     +        END;
22828     +      END;
22829     +    END;
22830     +  ELSE DO;
22831     +    _NODE_  =                    5;
22832     +    _LEAF_  =                    6;
22833     +    P_BAD1  =                 0.85;
22834     +    P_BAD0  =                 0.15;
22835     +    Q_BAD1  =                 0.85;
22836     +    Q_BAD0  =                 0.15;
22837     +    V_BAD1  =     0.81818181818181;
22838     +    V_BAD0  =     0.18181818181818;
22839     +    I_BAD  = '1' ;
22840     +    U_BAD  =                    1;
22841     +    END;
22842     +  END;
22843     +ELSE DO;
22844     +  IF  NOT MISSING(CLAGE ) AND
22845     +        165.524113475177 <= CLAGE  THEN DO;
22846     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
22847     +     %DMNORMIP( _ARBFMT_12);
22848     +    IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
22849     +      IF  NOT MISSING(VALUE ) AND
22850     +                       56000 <= VALUE  THEN DO;
22851     +        _NODE_  =                   23;
22852     +        _LEAF_  =                    9;
22853     +        P_BAD1  =     0.29496402877697;
22854     +        P_BAD0  =     0.70503597122302;
22855     +        Q_BAD1  =     0.29496402877697;
22856     +        Q_BAD0  =     0.70503597122302;
22857     +        V_BAD1  =     0.36363636363636;
22858     +        V_BAD0  =     0.63636363636363;
22859     +        I_BAD  = '0' ;
22860     +        U_BAD  =                    0;
22861     +        END;
22862     +      ELSE DO;
22863     +        _NODE_  =                   22;
22864     +        _LEAF_  =                    8;
22865     +        P_BAD1  =     0.64864864864864;
22866     +        P_BAD0  =     0.35135135135135;
22867     +        Q_BAD1  =     0.64864864864864;
22868     +        Q_BAD0  =     0.35135135135135;
22869     +        V_BAD1  =     0.47368421052631;
22870     +        V_BAD0  =     0.52631578947368;
22871     +        I_BAD  = '1' ;
22872     +        U_BAD  =                    1;
22873     +        END;
22874     +      END;
22875     +    ELSE DO;
22876     +      IF  NOT MISSING(CLAGE ) AND
22877     +            345.933333333333 <= CLAGE  THEN DO;
22878     +        _NODE_  =                   25;
22879     +        _LEAF_  =                   11;
22880     +        P_BAD1  =     0.16666666666666;
22881     +        P_BAD0  =     0.83333333333333;
22882     +        Q_BAD1  =     0.16666666666666;
22883     +        Q_BAD0  =     0.83333333333333;
22884     +        V_BAD1  =                    0;
22885     +        V_BAD0  =                    1;
22886     +        I_BAD  = '0' ;
22887     +        U_BAD  =                    0;
22888     +        END;
22889     +      ELSE DO;
22890     +        _NODE_  =                   24;
22891     +        _LEAF_  =                   10;
22892     +        P_BAD1  =     0.82278481012658;
22893     +        P_BAD0  =     0.17721518987341;
22894     +        Q_BAD1  =     0.82278481012658;
22895     +        Q_BAD0  =     0.17721518987341;
22896     +        V_BAD1  =     0.66129032258064;
22897     +        V_BAD0  =     0.33870967741935;
22898     +        I_BAD  = '1' ;
22899     +        U_BAD  =                    1;
22900     +        END;
22901     +      END;
22902     +    END;
22903     +  ELSE DO;
22904     +    _NODE_  =                    6;
22905     +    _LEAF_  =                    7;
22906     +    P_BAD1  =     0.74242424242424;
22907     +    P_BAD0  =     0.25757575757575;
22908     +    Q_BAD1  =     0.74242424242424;
22909     +    Q_BAD0  =     0.25757575757575;
22910     +    V_BAD1  =     0.73306772908366;
22911     +    V_BAD0  =     0.26693227091633;
22912     +    I_BAD  = '1' ;
22913     +    U_BAD  =                    1;
22914     +    END;
22915     +  END;
22916     +
22917     +*****  RESIDUALS R_ *************;
22918     +IF  F_BAD  NE '1'
22919     +AND F_BAD  NE '0'  THEN DO;
22920     +        R_BAD1  = .;
22921     +        R_BAD0  = .;
22922     + END;
22923     + ELSE DO;
22924     +       R_BAD1  =  -P_BAD1 ;
22925     +       R_BAD0  =  -P_BAD0 ;
22926     +       SELECT( F_BAD  );
22927     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
22928     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
22929     +       END;
22930     + END;
22931     +
22932     +****************************************************************;
22933     +******          END OF DECISION TREE SCORING CODE         ******;
22934     +****************************************************************;
22935     +
22936     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
22937      run;

NOTE: DATA STEP view saved on file EMWS3.TREE3_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

22938      quit;
22939      filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
22941      proc sort data=WORK.EM_USER_REPORT;
22942      by ID VIEW;
22943      run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

22944      *------------------------------------------------------------*;
22945      * Tree3: Computing metadata for TRAIN data;
22946      *------------------------------------------------------------*;

23334      data WORK.MODELTEMP_INFO;
23335      set EMWS3.Tree3_EMINFO;
23336      where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
23337      run;

NOTE: There were 0 observations read from the data set EMWS3.TREE3_EMINFO.
      WHERE (DATA='Tree3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23338      data EMWS3.Tree3_EMINFO;
23339      length TARGET KEY $32 DATA $43;
23340      input TARGET KEY DATA $;
23341      cards;

NOTE: The data set EMWS3.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23345      run;
23346      data EMWS3.Tree3_EMINFO;
23347      set EMWS3.Tree3_EMINFO WORK.MODELTEMP_INFO;
23348      run;

NOTE: There were 3 observations read from the data set EMWS3.TREE3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS3.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23349      proc sort data = EMWS3.Tree3_EMINFO NOTHREADS;
23350      by TARGET KEY;
23351      run;

NOTE: There were 3 observations read from the data set EMWS3.TREE3_EMINFO.
NOTE: The data set EMWS3.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23352      proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
23353      by TARGET KEY;
23354      run;

NOTE: There were 4 observations read from the data set EMWS3.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23355      proc sort data = EMWS3.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
23356      by TARGET KEY;
23357      run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23358      data EMWS3.Tree3_EMINFO;
23359      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
23360      by TARGET KEY;
23361      run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE3_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23362      proc datasets lib=work nolist;
23363      delete TEMP_INFO SORTEDEMINFO;
23364      run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
23365      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23366      data EMWS3.Tree3_EMOUTFIT;
23367      set EMWS3.Tree3_EMOUTFIT;
23368      length TargetLabel $200;
23369      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
23370      run;

NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS3.TREE3_EMOUTFIT.
NOTE: The data set EMWS3.TREE3_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23371      proc sort data=EMWS3.Tree3_EMREPORTFIT nothreads;
23372      by TARGET;
23373      run;

NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMREPORTFIT.
NOTE: The data set EMWS3.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23374      %let _EMwarndup = 0;
23375      %let _EMtargetdup =;
23376      %let _EMASEtargetdup =;
23377      data _null_;
23378      set EMWS3.Tree3_EMOUTFIT;
23379      if .<_ASE_<0.000001 then do;
23380      call symput('_EMwarndup', '1');
23381      call symput('_EMtargetdup', target);
23382      call symput('_EMASEtargetdup', put(_ASE_, best.));
23383      end;
23384      run;

NOTE: There were 1 observations read from the data set EMWS3.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

23385      %let EMEXCEPTIONSTRING=;
23386      *------------------------------------------------------------*;
23387      * REPORT: Tree3;
23388      *------------------------------------------------------------*;
23389      %let EM_ACTION = REPORT;
23390      %let syscc = 0;
23391      %macro main;
23392      
23393        %if %upcase(&EM_ACTION) = CREATE %then %do;
23394          filename temp catalog 'sashelp.emmodl.tree_create.source';
23395          %include temp;
23396          filename temp;
23397      
23398          %em_tree_create;
23399        %end;
23400      
23401         %else
23402         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23403      
23404             filename temp catalog 'sashelp.emmodl.tree_train.source';
23405             %include temp;
23406             filename temp;
23407             %em_tree_train;
23408         %end;
23409      
23410        %else
23411        %if %upcase(&EM_ACTION) = SCORE %then %do;
23412          filename temp catalog 'sashelp.emmodl.tree_score.source';
23413          %include temp;
23414          filename temp;
23415      
23416          %em_tree_score;
23417      
23418        %end;
23419      
23420        %else
23421        %if %upcase(&EM_ACTION) = REPORT %then %do;
23422      
23423             filename temp catalog 'sashelp.emmodl.tree_report.source';
23424             %include temp;
23425             filename temp;
23426      
23427             %em_tree_report;
23428         %end;
23429      
23430        %else
23431        %if %upcase(&EM_ACTION) = OPENINT %then %do;
23432      
23433             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23434             %include temp;
23435             filename temp;
23436             %EM_TREE_OPENTREEVIEWER;
23437      
23438         %end;
23439      
23440        %else
23441        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
23442      
23443             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23444             %include temp;
23445             filename temp;
23446             %EM_TREE_CLOSETREEVIEWER;
23447      
23448         %end;
23449      
23450      
23451         %doendm:
23452      %mend main;
23453      
23454      %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
23456     +%macro em_tree_makePlotDs( multipleTar= );
23458     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
23459     +  %EM_GETNAME(key=OUTNODES, type=DATA);
23460     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
23461     +  %EM_GETNAME(key=OUTRULES, type=DATA);
23463     +  /* determine if validation statistics will be displayed */
23464     +  %let validflag=N;
23465     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
23466     +    /* determine if validation data exists */
23467     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
23468     +      %let validflag=Y;
23469     +    %end;
23470     +  %end;
23472     +   /* retrieve name of decmeta even in presence of multiple targets */
23473     +   %let decmeta = ;
23474     +   %if &EM_DEC_DECMETA eq %then %do;
23475     +     data _Target;
23476     +       set &em_data_variableset;
23477     +       where ROLE='TARGET' and USE in('D', 'Y');
23478     +       keep NAME;
23479     +     run;
23480     +     proc sort data=_Target;
23481     +       by NAME;
23482     +     run;
23483     +     proc sort data=EM_TARGETDECINFO;
23484     +       by TARGET;
23485     +     run;
23486     +     data _Target;
23487     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
23488     +       by NAME;
23489     +       if _a then do;
23490     +         call symput('decmeta', trim(DECMETA));
23491     +       end;
23492     +     run;
23493     +     proc delete data=_Target;run;
23494     +   %end;
23495     +   %else %let decmeta = &EM_DEC_DECMETA;
23498     +  /* retrieve targetEvent from decmeta */
23499     +  %let targetEvent=;
23500     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
23501     +    %if %sysfunc(exist(&DECMETA)) %then %do;
23502     +      data _null_;
23503     +       set &DECMETA(where=(_TYPE_="TARGET"));
23504     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
23505     +      run;
23506     +    %end;
23507     +  %end;
23509     +  /* retrieve predicted var for targetEvent from decmeta */
23510     +  %let predTarget=;
23511     +  %let predLvl=;
23512     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
23513     +    %if %sysfunc(exist(&DECMETA)) %then %do;
23514     +      data _null_;
23515     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
23516     +       call symput('predTarget', strip(VARIABLE));
23517     +       call symput('predLvl', strip(LEVEL));
23518     +      run;
23519     +    %end;
23520     +  %end;
23521     +  %else %do;
23522     +    %if %sysfunc(exist(&DECMETA)) %then %do;
23523     +      data _null_;
23524     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
23525     +       call symput('predTarget', strip(VARIABLE));
23526     +      run;
23527     +    %end;
23528     +  %end;
23530     +  /* create BelowText value */
23531     +  data belowtext;
23532     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
23533     +    keep node belowtext;
23534     +  run;
23536     +  /* replace belowtext with variable label if it exists */
23537     +  data belowtext2;
23538     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
23539     +    keep node belowtextlbl;
23540     +  run;
23542     +  proc sort data=belowtext; by node; run;
23543     +  proc sort data=belowtext2; by node; run;
23545     +  data belowtext;
23546     +    merge belowtext belowtext2(in=_a);
23547     +    by node;
23548     +    if _a then belowtext=belowtextlbl;
23549     +    keep node belowtext;
23550     +  run;
23552     +  /* create AboveText value */
23553     +  data abovetext;
23554     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
23555     +  run;
23556     +  proc sort data=abovetext; by node numeric_value; run;
23558     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
23559     +  data abovetext;
23560     +    set abovetext(rename=(node=parent));
23561     +    by parent numeric_value;
23562     +    retain abovetext tempstring flag branch origval origchar ;
23563     +    length abovetext $256;
23564     +    length tempstring origchar $64;
23566     +    if STAT in ("INTERVAL", "ORDINAL") then do;
23567     +      if first.parent then do;
23568     +        if missing(character_value) then do;
23569     +          numeric_value = round(numeric_value, &sp_precision);
23570     +          abovetext = "< "||strip(NUMERIC_VALUE);
23571     +          branch = 1;
23572     +          origval = numeric_value;
23573     +          output;
23574     +        end;
23575     +        else do;
23576     +          abovetext = "< "||strip(CHARACTER_VALUE);
23577     +          branch = 1;
23578     +          origchar = character_value;
23579     +          output;
23580     +        end;
23582     +        if first.parent AND last.parent then do;
23583     +          if missing(character_value) then do;
23584     +            numeric_value = round(numeric_value, &sp_precision);
23585     +            branch = branch + 1;
23586     +            abovetext = ">= "||strip(NUMERIC_VALUE);
23587     +            output;
23588     +          end;
23589     +          else do;
23590     +            branch = branch + 1;
23591     +            abovetext = ">= "||strip(CHARACTER_VALUE);
23592     +            output;
23593     +          end;
23594     +        end;
23595     +      end;
23596     +      else if last.parent then do;
23597     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
23598     +          if missing(character_value) then do;
23599     +            numeric_value = round(numeric_value, &sp_precision);
23600     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
23601     +          end;
23602     +          else do;
23603     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
23604     +          end;
23605     +          branch = branch + 1;
23606     +          output;
23608     +          if missing(character_value) then do;
23609     +            numeric_value = round(numeric_value, &sp_precision);
23610     +            abovetext = ">= "||strip(NUMERIC_VALUE);
23611     +          end;
23612     +          else do;
23613     +            abovetext = ">= "||strip(CHARACTER_VALUE);
23614     +          end;
23615     +          branch = branch + 1;
23616     +          output;
23617     +        end;
23618     +        else do;
23619     +          if missing(character_value) then do;
23620     +            numeric_value = round(numeric_value, &sp_precision);
23621     +            abovetext = ">= "||strip(NUMERIC_VALUE);
23622     +          end;
23623     +          else do;
23624     +            abovetext = ">= "||strip(CHARACTER_VALUE);
23625     +          end;
23626     +          branch = branch + 1;
23627     +          output;
23628     +        end;
23629     +      end;
23630     +      else do;
23631     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
23632     +          if missing(character_value) then do;
23633     +            numeric_value = round(numeric_value,&sp_precision);
23634     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
23635     +            origval = numeric_value;
23636     +          end;
23637     +          else do;
23638     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
23639     +            origchar = character_value;
23640     +          end;
23641     +          branch = branch + 1;
23642     +          output;
23644     +        end;
23645     +        else do;
23646     +          if missing(character_value) then do;
23647     +            numeric_value = round(numeric_value, &sp_precision);
23648     +            abovetext = ">= "||strip(NUMERIC_VALUE);
23649     +            origval = numeric_value;
23650     +          end;
23651     +          else do;
23652     +            abovetext = ">= "||strip(CHARACTER_VALUE);
23653     +            origval = character_value;
23654     +          end;
23655     +          branch = branch + 1;
23656     +          output;
23657     +        end;
23658     +      end;
23659     +    end;
23660     +    else do;
23661     +       if first.numeric_value then do;
23662     +         flag = 0;
23663     +         abovetext = strip(CHARACTER_VALUE);
23664     +         branch = numeric_value;
23665     +         if first.numeric_value AND last.numeric_value then do;
23666     +           output;
23667     +         end;
23668     +       end;
23669     +       else if last.numeric_value then do;
23670     +         if flag=0 then do;
23671     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
23672     +           length = length(strip(tempstring));
23673     +           if length < 32 then do;
23674     +             abovetext = strip(tempstring);
23675     +           end;
23676     +           else do;
23677     +             abovetext = strip(abovetext)||", ...";
23678     +             flag = 1;
23679     +           end;
23680     +         end;
23681     +         branch = numeric_value;
23682     +         output;
23683     +       end;
23684     +       else do;
23685     +         if flag=0 then do;
23686     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
23687     +           length = length(strip(tempstring));
23688     +           if length < 32 then do;
23689     +             abovetext = strip(tempstring);
23690     +           end;
23691     +           else do;
23692     +             abovetext = strip(abovetext)||", ...";
23693     +             flag=1;
23694     +           end;
23695     +         end;
23696     +         branch = numeric_value;
23697     +       end;
23698     +    end;
23699     +    keep parent branch abovetext;
23700     +  run;
23702     +  /* Missing value to abovetext */
23703     +  data tempmissing;
23704     +    set &EM_USER_OUTRULES;
23705     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
23706     +    rename node=parent numeric_value=branch character_value=misschar;
23707     +  run;
23710     +  proc sort data=abovetext; by parent branch; run;
23711     +  proc sort data=tempmissing; by parent branch; run;
23712     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
23714     +  data tempoutnodes;
23715     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
23716     +    by parent branch;
23717     +    length traintotal validtotal 8;
23718     +    retain traintotal validtotal;
23720     +    if _a then do;
23721     +      if ^MISSING(abovetext) then do;
23722     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
23723     +      end;
23724     +      else do;
23725     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
23726     +      end;
23727     +    end;
23728     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
23730     +    if node=1 then do;
23731     +      traintotal = N;
23732     +      validtotal=VN;
23733     +    end;
23735     +    drop role rank stat misschar belowtext;
23736     +  run;
23737     +  proc sort data=tempoutnodes; by node; run;
23738     +  proc sort data=belowtext; by node; run;
23740     +  data tempoutnodes;
23741     +    merge tempoutnodes belowtext;
23742     +    by node;
23744     +  run;
23746     +  /* determine if adjusted counts exists; if so, use these vs true counts */
23747     +  %let adjusted = N;
23748     +  %let npriors = 0;
23749     +  data _null_ ;
23750     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
23751     +    if eof then do ;
23752     +      call symput("npriors" , strip(put(_N_,best.))) ;
23753     +    end;
23754     +  run;
23755     +  %if &npriors gt 0 %then %let adjusted=Y;
23758     +  /* create a table with targetUsed and targetLevel columns for each node */
23759     +  data temptarmeta;
23760     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
23761     +    %if &multipleTar eq N %then %do;
23762     +      AND USE in ('D', 'Y')
23763     +    %end;
23764     +    ));
23765     +    length TARGET $32;
23766     +    Target=name;
23767     +    keep target level;
23768     +  run;
23770     +  %if &multipleTar eq Y %then %do;
23771     +    data temptargetused;
23772     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
23773     +      keep node target;
23774     +    run;
23775     +    proc sort data=temptargetused; by target; run;
23776     +    proc sort data=temptarmeta; by target; run;
23777     +    data temptargetused;
23778     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
23779     +      by target;
23780     +      if _a and _b;
23781     +    run;
23782     +  %end;
23783     +  %else %do;
23784     +    data temptargetused;
23785     +      set &EM_USER_OUTSTATS;
23786     +      length target $32 tarlevel $10;
23787     +      target="%EM_TARGET";
23788     +      tarlevel="%EM_TARGET_LEVEL";
23789     +      keep node target tarlevel;
23790     +    run;
23791     +    proc sort data=temptargetused nodupkey; by node; run;
23792     +  %end;
23794     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
23795     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
23796     +  proc sort data=temptargetused; by node; run;
23799     +  /* create tables for all interval targets as well as all class targets */
23800     +  data tempinterval tempclass;
23801     +    merge tempoutstats temptargetused( rename=(target=targetused));
23802     +    by node;
23803     +    %if "&multipleTar" eq "Y" %then %do;
23804     +      if ((missing(Target)) OR (target=targetused ));
23805     +    %end;
23807     +    if tarlevel="INTERVAL" then output tempinterval;
23808     +    else output tempclass;
23809     +  run;
23811     +  /* initialize intTarget and classTarget flags */
23812     +  %let em_intNobs =0;
23813     +  %let em_classNobs = 0;
23814     +  %let em_intTarget= N;
23815     +  %let em_classTarget= N;
23817     +  proc sql;
23818     +    reset noprint;
23819     +    select count(*) into :em_intNobs from tempinterval;
23820     +  quit;
23821     +  proc sql;
23822     +    reset noprint;
23823     +    select count(*) into :em_classNobs from tempclass;
23824     +  quit;
23826     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
23827     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
23829     +  /* retrieve all information for interval targets */
23830     +  %if &em_intTarget eq Y %then %do;
23832     +    /* determine if leaf variable exists */
23833     +    %let dsid=%sysfunc(open(tempinterval,i));
23834     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
23835     +    %let rc=%sysfunc(close(&dsid));
23837     +    proc transpose data=tempinterval
23838     +      %if &leafexists %then %do;
23839     +        (drop=leaf)
23840     +      %end;
23841     +      %if &validexist %then %do;
23842     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
23843     +      %end;
23844     +      %else %do;
23845     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
23846     +      %end;
23847     +      by node;
23848     +      id statname;
23849     +    run;
23850     +    data tempinterval;
23851     +      set tempinterval;
23852     +      if missing(N) then delete;
23853     +    run;
23854     +  %end;
23856     +  /* retrieve all information for class targets */
23857     +  %if &em_classTarget eq Y %then %do;
23858     +    proc sort data=tempclass; by node category; run;
23859     +    %if &validflag eq N %then %do;
23860     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
23861     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
23862     +    %end;
23863     +    %else %do;
23864     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
23865     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
23866     +    %end;
23867     +      set tempclass;
23869     +      %if &validflag eq N %then %do;
23870     +        %if "&adjusted" eq "N" %then %do;
23871     +          if statname="N" then output tempn;
23872     +        %end;
23873     +        %else %do;
23874     +          if statname="NPRIORS" then output tempn;
23875     +        %end;
23876     +        else if statname="PREDICTION" then output temppredict;
23877     +        else if statname="PROBABILITY" then output tempprob;
23878     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
23879     +        else if statname="ALTERNATIVE LOSS" then output temploss;
23880     +      %end;
23881     +      %else %do;
23882     +        %if "&adjusted" eq "N" %then %do;
23883     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
23884     +        %end;
23885     +        %else %do;
23886     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
23887     +        %end;
23888     +        else if statname="PREDICTION" then output temppredict;
23889     +        else if statname="PROBABILITY" then output tempprob;
23890     +        else if statname="VALID: PROBABILITY" then output tempvprob;
23891     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
23892     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
23893     +      %end;
23894     +    run;
23897     +    /* determine if profit/loss exists in tempprofit */
23898     +    %let em_profitflag=0;
23899     +    %let em_lossflag=0;
23900     +    proc sql;
23901     +      reset noprint;
23902     +      select count(*) into :em_profitflag from tempprofit;
23903     +    quit;
23904     +    proc sql;
23905     +      reset noprint;
23906     +      select count(*) into :em_lossflag from temploss;
23907     +    quit;
23909     +    %if &validFlag eq Y %then %do;
23910     +      proc transpose data=tempn
23911     +        %if "&adjusted" eq "N" %then %do;
23912     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
23913     +        %end;
23914     +        %else %do;
23915     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
23916     +        %end;
23917     +        by node;
23918     +        id statname;
23919     +      run;
23920     +      %if &em_profitflag ne 0 %then %do;
23921     +        proc transpose data=tempprofit out=tempprofit;
23922     +          by node category;
23923     +          id statname ;
23924     +        run;
23925     +      %end;
23926     +      %if &em_lossflag ne 0 %then %do;
23927     +        proc transpose data=temploss out=temploss;
23928     +          by node category;
23929     +          id statname ;
23930     +        run;
23931     +      %end;
23932     +      data tempprob;
23933     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
23934     +        by node
23935     +        %if &multipleTar eq Y %then %do;
23936     +          target
23937     +        %end;
23938     +        category;
23939     +      run;
23940     +    %end;
23942     +    /* store percentcorrect value */
23943     +    data temppredict;
23944     +      merge tempprob temppredict(in=_a);
23945     +      by node category;
23946     +      if _a then do;
23947     +        percentCorrect = statvalue;
23948     +        %if &validFlag eq Y %then %do;
23949     +          vpercentCorrect= vstatvalue;
23950     +        %end;
23951     +      end;
23952     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
23953     +      %if &validFlag eq Y %then %do;
23954     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
23955     +      %end;
23956     +      ;
23957     +      if missing(percentCorrect) then delete;
23958     +      drop target;
23959     +    run;
23961     +    /* build profittext */
23962     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
23963     +      data tempprofittext(keep= node profittext profitloss);
23964     +        length profittext $800 profitloss 8.;
23965     +        retain profittext profitloss;
23967     +        merge tempprob
23968     +        %if &em_profitflag ne 0 %then %do;
23969     +          tempprofit
23970     +        %end;
23971     +        %else %if &em_lossflag ne 0 %then %do;
23972     +          temploss
23973     +        %end;
23974     +        ;
23975     +        by node category;
23977     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
23978     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
23979     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
23980     +          %let profittype = ALL;
23981     +        %end;
23983     +        /* create the profitloss variable for nodecolor if selected */
23984     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
23986     +        %if "&profittype" eq "ALL" %then %do;
23987     +          if strip(CATEGORY)="&targetEvent" then do;
23988     +            profitloss=statvalue;
23989     +          end;
23990     +          if first.node then do;
23991     +            %if &validFlag eq N %then %do;
23992     +             %if &em_profitflag ne 0 %then %do;
23993     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
23994     +             %end;
23995     +             %if &em_lossflag ne 0 %then %do;
23996     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
23997     +             %end;
23998     +            %end;
23999     +            %else %do;
24000     +             %if &em_profitflag ne 0 %then %do;
24001     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
24001    !+14.&EM_PROPERTY_SPLITPRECISION);
24002     +             %end;
24003     +             %if &em_lossflag ne 0 %then %do;
24004     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
24005     +             %end;
24006     +            %end;
24007     +          end;
24008     +          else if last.node then do;
24009     +            %if &validFlag eq N %then %do;
24010     +             %if &em_profitflag ne 0 %then %do;
24011     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
24012     +             %end;
24013     +             %if &em_lossflag ne 0 %then %do;
24014     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
24015     +             %end;
24016     +             /*if CATEGORY="&targetEvent" then do;
24017     +               profitloss=statvalue;
24018     +             end;*/
24019     +            %end;
24020     +            %else %do;
24021     +             %if &em_profitflag ne 0 %then %do;
24022     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
24022    !+14.&EM_PROPERTY_SPLITPRECISION);
24023     +                if CATEGORY="&targetEvent" then do;
24024     +                 profitloss=ALTERNATIVE_PROFIT;
24025     +                end;
24026     +             %end;
24027     +             %if &em_lossflag ne 0 %then %do;
24028     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
24028    !+14.&EM_PROPERTY_SPLITPRECISION);
24029     +                if CATEGORY="&targetEvent" then do;
24030     +                  profitloss=ALTERNATIVE_LOSS;
24031     +                end;
24032     +             %end;
24033     +            %end;
24034     +            output;
24035     +          end;
24036     +          else do;
24037     +            %if &validFlag eq N %then %do;
24038     +             %if &em_profitflag ne 0 %then %do;
24039     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
24040     +             %end;
24041     +             %if &em_lossflag ne 0 %then %do;
24042     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
24043     +             %end;
24044     +            %end;
24045     +            %else %do;
24046     +             %if &em_profitflag ne 0 %then %do;
24047     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
24047    !+14.&EM_PROPERTY_SPLITPRECISION);
24048     +             %end;
24049     +             %if &em_lossflag ne 0 %then %do;
24050     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
24050    !+14.&EM_PROPERTY_SPLITPRECISION);
24051     +             %end;
24052     +            %end;
24053     +          end;
24054     +        %end;
24055     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
24056     +          if strip(CATEGORY) = "&targetevent" then do;
24057     +            %if &validFlag eq N %then %do;
24058     +             %if &em_profitflag ne 0 %then %do;
24059     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
24060     +             %end;
24061     +             %if &em_lossflag ne 0 %then %do;
24062     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
24063     +             %end;
24064     +             profitloss=statvalue;
24065     +            %end;
24066     +            %else %do;
24067     +             %if &em_profitflag ne 0 %then %do;
24068     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
24068    !+14.&EM_PROPERTY_SPLITPRECISION);
24069     +                profitloss=ALTERNATIVE_PROFIT;
24070     +             %end;
24071     +             %if &em_lossflag ne 0 %then %do;
24072     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
24073     +                profitloss=ALTERNATIVE_LOSS;
24074     +             %end;
24075     +            %end;
24076     +            output;
24077     +          end;
24078     +        %end;
24079     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
24080     +          if strip(CATEGORY) = "&targetevent" then do;
24081     +            %if &validFlag eq N %then %do;
24082     +             profitloss=statvalue;
24083     +            %end;
24084     +            %else %do;
24085     +             %if &em_profitflag ne 0 %then %do;
24086     +                profitloss=ALTERNATIVE_PROFIT;
24087     +             %end;
24088     +             %if &em_lossflag ne 0 %then %do;
24089     +                profitloss=ALTERNATIVE_LOSS;
24090     +             %end;
24091     +            %end;
24092     +            output;
24093     +          end;
24094     +        %end;
24095     +      run;
24096     +    %end;
24098     +    data tempprob(keep= node probtext);
24099     +      length probtext $800;
24100     +      retain probtext;
24101     +      set tempprob ;
24102     +      by node;
24104     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
24105     +      %let probtype = &EM_PROPERTY_TARGET;
24106     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
24107     +        %let probtype = ALL;
24108     +      %end;
24110     +      %if "&probtype" eq "ALL" %then %do;
24111     +        if first.node then do;
24112     +          %if &validFlag eq N %then %do;
24113     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
24114     +          %end;
24115     +          %else %do;
24116     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
24117     +          %end;
24118     +        end;
24119     +        else if last.node then do;
24120     +          %if &validFlag eq N %then %do;
24121     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
24122     +          %end;
24123     +          %else %do;
24124     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
24125     +          %end;
24126     +          output;
24127     +        end;
24128     +        else do;
24129     +          %if &validFlag eq N %then %do;
24130     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
24131     +          %end;
24132     +          %else %do;
24133     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
24134     +          %end;
24135     +        end;
24136     +      %end;
24137     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
24138     +        if strip(CATEGORY) = "&targetevent" then do;
24139     +          %if &validFlag eq N %then %do;
24140     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
24141     +          %end;
24142     +          %else %do;
24143     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
24144     +          %end;
24145     +          output;
24146     +        end;
24147     +      %end;
24148     +      %else %if "&probtype" eq "NONE" %then %do;
24149     +        if last.node then do;
24150     +          output;
24151     +        end;
24152     +      %end;
24153     +    run;
24154     +  %end;
24156     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
24158     +  %let oldexists=0;
24159     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
24160     +     data old_tree_plot;
24161     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
24162     +        rename nodecolor=oldnodecolor;
24163     +     run;
24165     +     proc sort data=old_tree_plot;
24166     +        by node;
24167     +     run;
24169     +     %let oldexists=1;
24170     +  %end;
24172     +  data &EM_USER_TREE_PLOT;
24173     +    length textall $800;
24174     +    merge tempoutnodes temptargetused
24176     +    %if &em_intTarget eq Y %then %do;
24177     +      tempinterval
24178     +    %end;
24180     +    %if &em_classTarget eq Y %then %do;
24182     +      %if &validFlag eq N %then %do;
24183     +        tempn(rename=(statvalue=N))
24184     +      %end;
24185     +      %else %do;
24186     +        tempn
24187     +      %end;
24189     +      temppredict tempprob
24191     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
24192     +        tempprofittext
24193     +      %end;
24194     +    %end;
24195     +    ;
24196     +    by node;
24198     +    /* build nodetext based on user selection */
24199     +    textall="";
24201     +    %if &em_intTarget eq Y %then %do;
24202     +    if tarlevel="INTERVAL" then do;
24203     +      /* Nodeid */
24204     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
24205     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
24206     +      %end;
24208     +      /* Target identifier if multiple targets are used */
24209     +      %if "&multipleTar" eq "Y" %then %do;
24210     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
24211     +      %end;
24213     +      %if &validFlag eq Y %then %do;
24214     +         /* Column labels displayed in validflag eq Y only */
24215     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
24216     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
24216    !+ noquote ))";
24217     +         %end;
24219     +         /* Average values */
24220     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
24221     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
24222     +         %end;
24224     +         /* RASE */
24225     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
24226     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
24227     +         %end;
24229     +         /* Count */
24230     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
24231     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
24232     +         %end;
24233     +      %end;
24234     +      %else %do;
24235     +         /* Average values */
24236     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
24237     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
24238     +         %end;
24240     +         /* RASE */
24241     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
24242     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
24243     +         %end;
24245     +         /* Count */
24246     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
24247     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
24248     +         %end;
24249     +      %end;
24251     +      /* nodecolor */
24252     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
24253     +        nodecolor=PREDICTION;
24254     +      %end;
24255     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
24256     +        nodecolor=RASE;
24257     +      %end;
24258     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
24259     +        nodecolor=1;
24260     +      %end;
24262     +    end;
24263     +    %end;
24264     +    %if &em_classTarget eq Y %then %do;
24265     +    if tarlevel^="INTERVAL" then  do;
24267     +      /* Nodeid */
24268     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
24269     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
24270     +      %end;
24271     +      /* Target identifier if multiple targets are used */
24272     +      %if "&multipleTar" eq "Y" %then %do;
24273     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
24274     +      %end;
24276     +      /* Predicted values */
24277     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
24278     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
24279     +      %end;
24281     +      /* Column labels displayed in validflag eq Y only */
24282     +      %if "&ValidFlag" eq "Y" %then %do;
24283     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
24284     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
24284    !+ noquote ))";
24285     +        %end;
24286     +      %end;
24288     +      /* Target Values */
24289     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
24290     +        textall=strip(textall)||"0A"x||strip(probtext);
24291     +      %end;
24293     +      /* include profit or loss for all target levels */
24294     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
24295     +        textall=strip(textall)||"0A"x||strip(profittext);
24296     +      %end;
24298     +      %if &validFlag eq N %then %do;
24299     +        /* Percent Correct */
24300     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
24301     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
24302     +        %end;
24304     +         /* Count */
24305     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
24306     +          %if "&adjusted" eq "N" %then %do;
24307     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
24308     +          %end;
24309     +          %else %do;
24310     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
24311     +          %end;
24312     +         %end;
24313     +      %end;
24314     +      %else %do;
24315     +        /* Percent Correct */
24316     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
24317     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
24318     +        %end;
24320     +         /* Count */
24321     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
24322     +          %if "&adjusted" eq "N" %then %do;
24323     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
24324     +          %end;
24325     +          %else %do;
24326     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
24327     +          %end;
24328     +         %end;
24329     +      %end;
24331     +      /* nodecolor */
24332     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
24333     +       %if &multipleTar ne Y %then %do;
24334     +        nodecolor=&predTarget;
24335     +       %end;
24336     +       %else %do;
24337     +         nodecolor=percentcorrect;
24338     +       %end;
24339     +      %end;
24340     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
24341     +        nodecolor=percentcorrect;
24342     +      %end;
24343     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
24344     +        nodecolor=1;
24345     +      %end;
24346     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
24347     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
24348     +          nodecolor=percentcorrect;
24349     +        %end;
24350     +        %else %do;
24351     +          nodecolor=profitloss;
24352     +        %end;
24353     +      %end;
24355     +    end;
24356     +    %end;
24357     +    %if &em_intTarget eq Y %then %do;
24358     +     drop  PREDICTION  TARGET TARLEVEL
24359     +     %if &ValidFlag eq Y %then %do;
24360     +         VPREDICTION
24361     +     %end;
24362     +     ;
24363     +    %end;
24364     +    %if &em_classTarget eq Y %then %do;
24365     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
24366     +     %if &ValidFlag eq Y %then %do;
24367     +         VSTATVALUE
24368     +     %end;
24369     +     ;
24370     +    %end;
24372     +  run;
24374     +  /* add leaf index information to plotds - based on primary target only*/
24375     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24376     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
24377     +      set &EM_USER_OUTSTATS;
24378     +      if ((statname="PROBABILITY"
24379     +      %if &validexist %then %do;
24380     +       or statname="VALID: PROBABILITY"
24381     +      %end;
24382     +      ) AND (CATEGORY="&TARGETEVENT")
24383     +      %if "&multipleTar" eq "Y" %then %do;
24384     +        AND (Target="%EM_TARGET")
24385     +      %end;
24386     +      );
24387     +    run;
24389     +    %if &validexist %then %do;
24390     +      proc sort data=tempprob; by node; run;
24391     +      %let vpredTarget = V%substr(&predTarget, 2);
24392     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
24393     +         by node;
24394     +         id statname;
24395     +      run;
24396     +    %end;
24397     +  %end;
24398     +  %else %do;
24399     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
24400     +      set &EM_USER_OUTSTATS;
24401     +      if ((statname="PREDICTION"
24402     +      %if &validexist %then %do;
24403     +       or statname="VALID: PREDICTION"
24404     +      %end;
24405     +      )
24406     +      %if "&multipleTar" eq "Y" %then %do;
24407     +        AND (Target="%EM_TARGET")
24408     +      %end;
24409     +      );
24410     +    run;
24411     +    %if &validexist %then %do;
24412     +      proc sort data=tempprob; by node; run;
24413     +      %let vpredTarget = V%substr(&predTarget, 2);
24414     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
24415     +         by node;
24416     +         id statname;
24417     +      run;
24418     +    %end;
24419     +  %end;
24421     +  proc sort data=tempprob; by node; run;
24422     +  data tempoutnodes;
24423     +    merge tempoutnodes tempprob;
24424     +    by node;
24425     +  run;
24427     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
24428     +  data tempnodes;
24429     +    retain traintotal validtotal;
24430     +    set tempnodes(where=(leaf ne . ));
24431     +    tprob=round(&predTarget, .01);
24432     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24433     +      percevent_train=round(tprob*100, .01);
24434     +    %end;
24435     +    %else %do;
24436     +      percevent_train=tprob;
24437     +    %end;
24439     +    perc_train=round((n/traintotal)*100, 0.01);
24440     +    /* leafwidth already has a *10 multiplier */
24441     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
24443     +    %if &validexist %then %do;
24444     +      %let vpredTarget = V%substr(&predTarget,2);
24445     +      vprob=round(&vpredTarget, .01);
24446     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24447     +        percevent_valid=round(vprob*100, .01);
24448     +      %end;
24449     +      %else %do;
24450     +        percevent_valid=vprob;
24451     +      %end;
24452     +      perc_valid=round((vn/validtotal)*100, .01);
24453     +    %end;
24455     +    index=_N_;
24456     +    keep node index tprob perc_train percevent_train
24457     +    %if &validexist %then %do;
24458     +        vprob percevent_valid perc_valid
24459     +    %end;
24460     +    ;
24461     +  run;
24462     +  proc sort data=tempnodes; by node; run;
24463     +  data &EM_USER_TREE_PLOT;
24464     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
24465     +    by node;
24466     +    if missing(node) then delete;
24467     +    %if &oldexists %then %do;
24468     +      if missing(nodecolor) then nodecolor=oldnodecolor;
24469     +      drop oldnodecolor;
24470     +    %end;
24471     +    abovetext = compbl(abovetext);
24473     +    /* add variable labels */
24474     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
24475     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
24476     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
24477     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
24478     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
24479     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
24481     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24482     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
24483     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
24484     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
24485     +          %end;
24486     +          %else %do;
24487     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
24488     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
24489     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
24490     +          %end;
24491     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
24493     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
24494     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
24495     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24496     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
24497     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
24498     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
24499     +          %end;
24500     +          %else %do;
24501     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
24502     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
24503     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
24504     +          %end;
24505     +    ;
24506     +  run;
24508     +  /* delete temporary tables */
24509     +  proc datasets lib=work nolist;
24510     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
24511     +  run;
24513     +%mend em_tree_makePlotDs;
24517     +%macro em_tree_report;
24519     +   /* report properties */
24520     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
24521     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
24522     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
24523     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
24524     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
24525     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
24526     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
24527     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
24528     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
24529     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
24530     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
24531     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
24532     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
24534     +   %let validexist=0;
24535     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
24536     +     %let validexist=1;
24537     +   %end;
24539     +   /* determine if multiple targets will be processed */
24540     +   %let em_tree_multipleTargets=N;
24541     +   %let em_tree_numTarget=1;
24542     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
24543     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
24544     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
24545     +         %let em_tree_multipleTargets=N;
24546     +      %end;
24547     +      %else %do;
24548     +        data _null_;
24549     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
24550     +          if eof then
24551     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
24552     +        run;
24554     +        %if &em_tree_numTarget gt 1 %then %do;
24555     +           %let em_tree_multipleTargets=Y;
24556     +        %end;
24557     +     %end;
24558     +   %end;
24560     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
24562     +   /* variable importance */
24563     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
24564     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
24566     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
24567     +     /* and the columns may not be generated                                                                                 */
24568     +     %let em_tree_cvexists=;
24569     +     %let em_tree_surrexists=.;
24570     +     data _null_;
24571     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
24572     +       if eof then do ;
24573     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
24574     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
24575     +       end;
24576     +     run;
24578     +     data &EM_USER_OUTIMPORT;
24579     +         set &EM_USER_OUTIMPORT;
24580     +         /* format columns based on Precison value specified */
24581     +         format importance 15.&EM_PROPERTY_PRECISION
24582     +              %if &validexist %then %do;
24583     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
24584     +              %end;
24585     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
24586     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
24587     +              %end;
24588     +         ;
24589     +     run;
24591     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
24592     +     proc print data=&EM_USER_OUTIMPORT
24593     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
24594     +          (where=((nrules>0) OR (nsurrogates>0)))
24595     +        %end;
24596     +        %else %do;
24597     +           (where=(nrules>0))
24598     +        %end;
24599     +        label noobs
24600     +        ;
24601     +     run;
24602     +     title10;
24604     +   %end;
24606     +   /* Sequence */
24607     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
24608     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
24609     +   data _null_ ;
24610     +      set &EM_USER_outseq (obs=2) end=eof ;
24611     +      if eof then do ;
24612     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
24613     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
24614     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
24615     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
24616     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
24617     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
24618     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
24619     +      end;
24620     +    run;
24622     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
24623     +      data &EM_USER_OUTSEQ;
24624     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
24625     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
24626     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24627     +           _XMISC_=_VMISC_
24628     +        %end;
24629     +        %if "&em_tree_aprof" ne "."  %then %do;
24630     +           _XAPROF_=_VAPROF_
24631     +           _XPROF_ = _VPROF_
24632     +        %end;
24633     +        %if "&em_tree_aloss" ne "."  %then %do;
24634     +           _XALOSS_=_VALOSS_
24635     +        %end;
24636     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
24637     +           _XPASE_ = _VPASE_
24638     +           _XPMISC_ = _VPMISC_
24639     +        %end;
24641     +        ));
24642     +     %end;
24643     +     %else %do;
24644     +        set &EM_USER_OUTSEQ;
24645     +     %end;
24647     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
24648     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24649     +            _MISC_   15.&EM_PROPERTY_PRECISION
24650     +         %end;
24651     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
24652     +            _PASE_  15.&EM_PROPERTY_PRECISION
24653     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
24654     +         %end;
24655     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
24656     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
24657     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24658     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
24659     +            %end;
24660     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
24661     +              _VPASE_  15.&EM_PROPERTY_PRECISION
24662     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
24663     +            %end;
24664     +         %end;
24665     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
24666     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
24667     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24668     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
24669     +            %end;
24670     +         %end;
24671     +         %if "&em_tree_seq" ne "." %then %do;
24672     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
24673     +         %end;
24674     +         %if "&em_tree_vseq" ne "." %then %do;
24675     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
24676     +         %end;
24677     +         %if "&em_tree_aprof" ne "." %then %do;
24678     +           _APROF_ 15.&EM_PROPERTY_PRECISION
24679     +           _PROF_ 15.&EM_PROPERTY_PRECISION
24680     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
24681     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
24682     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
24683     +           %end;
24684     +         %end;
24685     +         %else %if "&em_tree_aloss" ne "." %then %do;
24686     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
24687     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
24688     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
24689     +           %end;
24690     +         %end;
24691     +      ;
24692     +    run;
24693     +   %end;
24695     +   /* Observation Based Importance */
24696     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
24698     +      /* need to check for 0 obs */
24699     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
24700     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
24701     +      %let rc=%sysfunc(close(&dsid));
24703     +      %if &onobs %then %do;
24704     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
24705     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
24707     +         data &EM_USER_OUTOBSIMP;
24708     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
24709     +           if _a;
24710     +           by _INPUT1_;
24711     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
24712     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
24713     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
24714     +                   %end;
24715     +                   ;
24716     +         run;
24717     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
24718     +      %end;
24719     +   %end;
24721     +  %end;
24723     +  /* create dataset to support tree diagram and icicle plot */
24724     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
24725     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
24727     +  /* display tree diagram */
24728     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
24729     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
24731     +  /* display icicle diagram */
24732     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
24733     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
24735     +  /* Leaf Statistics Plot */
24736     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
24738     +  /* print leaf information to output window */
24739     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
24741     +     proc sort data=&EM_USER_TREE_PLOT out=t;
24742     +       by descending N;
24743     +     run;
24745     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
24746     +     %local vn;
24747     +     data _null_;
24748     +       set t (obs=2) end=eof;
24749     +       if eof then do;
24750     +         call symput("vn", strip(put(vn, best.)));
24751     +       end;
24752     +     run;
24754     +     data t;
24755     +       set t;
24756     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
24757     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
24758     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
24759     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
24760     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
24761     +       %end;
24762     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
24763     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
24764     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
24765     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
24766     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
24767     +          %end;
24768     +       %end;
24769     +       ;
24770     +     run;
24772     +     /* determine if rase is found in t */
24773     +    %let dsid=%sysfunc(open(t,i));
24774     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
24775     +    %let rc=%sysfunc(close(&dsid));
24777     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
24778     +     proc print data=t noobs label;
24779     +       where tprob ne .;
24780     +       var node depth N tprob
24781     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
24782     +         %if "&vn" ne "." %then %do;
24783     +           VN
24784     +         %end;
24785     +         vprob
24786     +       %end;
24787     +       %if &raseexists %then %do;
24788     +            RASE
24789     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
24790     +              VRASE
24791     +            %end;
24792     +       %end;
24793     +       ;
24794     +     run;
24795     +     title10;
24796     +  %end;
24798     +  /* create plots that are done during training of node */
24799     +  /* display iterative plot, including reference line */
24800     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
24801     +   /* %if &nleaves eq  %then %do; */
24802     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
24803     +      data _null_;
24804     +        set &EM_USER_OUTTOPOLOGY end=eof;
24805     +        if eof then do;
24806     +          call symput('nleaves', LEAF);
24807     +        end;
24808     +      run;
24809     +   /* %end; */
24811     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
24812     +    /*%EM_REPORT(view=1, Y=_ASE_); */
24813     +  %end;
24815     +  /* display leaf statistics */
24816     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
24818     +  /* stats by node if multiple targets = Y */
24819     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
24820     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
24821     +    data &EM_USER_OUTSTATS;
24822     +      set &EM_USER_OUTSTATS;
24824     +     * if STATNAME="TARGET" then delete;
24825     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
24826     +      drop leaf;
24827     +    run;
24828     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
24830     +  %end;
24831     +  %else %do;
24832     +    /* add outstats and outdescribe to spk but not results */
24833     +    %EM_REPORT(viewtype=, key=OUTSTATS);
24834     +  %end;
24836     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 12 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 5 observations read from the data set EMWS3.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set EMWS3.TREE3_OUTSEQ.
NOTE: The data set EMWS3.TREE3_OUTSEQ has 11 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 25 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104   
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99   
NOTE: There were 25 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 292 observations read from the data set EMWS3.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 0 observations read from the data set EMWS3.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 147 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 147 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 147 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 126 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 147 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 147 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 147 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 147 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 147 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 42 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 42 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set WORK.OLD_TREE_PLOT has 25 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1167:196   
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 21 observations read from the data set WORK.TEMPN.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE3_TREE_PLOT has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 147 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 21 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 1315:94    1 at 1319:102   1 at 1319:113   
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 21 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: There were 25 observations read from the data set WORK.OLD_TREE_PLOT.
NOTE: The data set EMWS3.TREE3_TREE_PLOT has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      


NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 25 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 25 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 11 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141   
NOTE: There were 21 observations read from the data set EMWS3.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      


NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

24837      
24838      *------------------------------------------------------------*;
24839      * End REPORT: Tree3;
24840      *------------------------------------------------------------*;

24841      /* Reset EM Options */
24842      options formchar="|----|+|---+=|-/\<>*";
24843      options nocenter ls=256 ps=10000;
24844      goptions reset=all device=GIF NODISPLAY;
24845      proc sort data=WORK.EM_USER_REPORT;
24846      by ID VIEW;
24847      run;

NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24848      proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
24849      by NAME;
24850      run;

NOTE: There were 14 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24851      proc sort data=EMWS3.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
24852      by NAME;
24853      run;

NOTE: There were 14 observations read from the data set EMWS3.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24854      data WORK.ASSESS_META;
24855      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
24856      by NAME;
24857      run;

NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24858      data EM_temp_assessMeta;
24859      set EMWS3.Tree3_CMeta_TRAIN;
24860      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
24861      run;

NOTE: There were 12 observations read from the data set EMWS3.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24862      data EM_temp_assessdata;
24863      set EMWS3.Tree3_TRAIN(keep=
24864      F_BAD
24865      I_BAD
24866      P_BAD0
24867      P_BAD1
24868      Q_BAD0
24869      Q_BAD1
24870      R_BAD0
24871      R_BAD1
24872      U_BAD
24873      V_BAD0
24874      V_BAD1
24875      _WARN_
24876      BAD
24877      );
24878      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS3.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2979 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
















29156      data EM_temp_assessMeta;
29157      set EMWS3.Tree3_CMeta_TRAIN;
29158      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
29159      run;

NOTE: There were 12 observations read from the data set EMWS3.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29160      data EM_temp_assessdata;
29161      set EMWS3.Tree3_VALIDATE(keep=
29162      F_BAD
29163      I_BAD
29164      P_BAD0
29165      P_BAD1
29166      Q_BAD0
29167      Q_BAD1
29168      R_BAD0
29169      R_BAD1
29170      U_BAD
29171      V_BAD0
29172      V_BAD1
29173      _WARN_
29174      BAD
29175      );
29176      run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      
NOTE: There were 1788 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS3.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
















33463      %let _cn = %sysfunc(getoption(CENTER));
33464      options nocenter;
33465      proc print data=EMWS3.Tree3_EMREPORTFIT noobs label;
33466      var STAT LABEL TRAIN
33467      VALIDATE
33468      TEST
33469      ;
33470      by TARGET TARGETLABEL;
33471      title9 ' ';
33472      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
33473      run;

NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

33474      title10;
33475      options &_cn;
33476      proc sort data=EMWS3.Tree3_EMCLASSIFICATION nothreads;
33477      by DATAROLE TARGET TARGETLABEL;
33478      run;

NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

33479      %let _cn = %sysfunc(getoption(CENTER));
33480      options nocenter;
33481      proc print data=EMWS3.Tree3_EMCLASSIFICATION noobs label;
33482      var from into pct_row pct_col count percent
33483      ;
33484      by DATAROLE TARGET TARGETLABEL;
33485      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
33486      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
33487      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
33488      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
33489      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
33490      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
33491      where _TYPE_='PREDICTION';
33492      title9 ' ';
33493      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
33494      run;

NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

33495      title9;
33496      title10;
33497      options &_cn;
33498      %let _cn = %sysfunc(getoption(CENTER));
33499      options nocenter;
33500      data EMWS3.Tree3_EMEVENTREPORT;
33501      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
33502      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
33502    ! FALSEEVENT
33503      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
33504         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
33505      FALSEEVENT=0;
33506      FALSENEVENT=0;
33507      TRUEEVENT=0;
33508      TRUENEVENT=0;
33509      set EMWS3.Tree3_EMEVENTREPORT;
33510      run;

NOTE: There were 2 observations read from the data set EMWS3.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

33511      proc print data=EMWS3.Tree3_EMEVENTREPORT noobs label;
33512      title9 ' ';
33513      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
33514      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
33515      run;

NOTE: There were 2 observations read from the data set EMWS3.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

33516      title10;
33517      options &_cn;
33518      proc datasets library=EMWS3 nolist;
33519      modify Tree3_EMRANK;
33520      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
33521      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
33522      run;

NOTE: MODIFY was successful for EMWS3.TREE3_EMRANK.DATA.
33523      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

33524      %let _cn = %sysfunc(getoption(CENTER));
33525      options nocenter;
33526      proc print data=EMWS3.Tree3_EMRANK label noobs;
33527      var
33528      decile gain lift liftc resp respc N _meanP_;
33529      by
33530      notsorted DATAROLE
33531      notsorted TARGET
33532      notsorted TARGETLABEL
33533      ;
33534      title9 ' ';
33535      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
33536      run;

NOTE: There were 40 observations read from the data set EMWS3.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

33537      title10;
33538      options &_cn;
33539      proc datasets library=EMWS3 nolist;
33540      modify Tree3_EMSCOREDIST;
33541      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
33542      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
33543      run;

NOTE: MODIFY was successful for EMWS3.TREE3_EMSCOREDIST.DATA.
33544      quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

34368      proc printto;
34369      run;

