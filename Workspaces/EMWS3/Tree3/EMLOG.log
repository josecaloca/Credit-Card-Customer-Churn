*------------------------------------------------------------*
Usuario:                Jose Caloca
Fecha:                14 de marzo de 2021
Hora:                15H41
Sitio:                70115216
Plataforma:            X64_10PRO
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15H41" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                14 de marzo de 2021
Hora:                15H41
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3O42YQH "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3O42YQH new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15H41" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70115216";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15H41" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
22596      proc freq data=EMWS3.Tree3_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS3.Tree3_VariableSet noprint;
22597      table ROLE*LEVEL/out=WORK.Tree3META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree3META;
22598      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS3.TREE3_VARIABLESET.
NOTE: The data set WORK.TREE3META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
22599      proc print data=WORK.Tree3META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree3META label noobs;
22600      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
22601      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
22602      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22603      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
22604      run;
 
NOTE: There were 5 observations read from the data set WORK.TREE3META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
22605      title10;
MPRINT(EM_DIAGRAM):   title10;
22606      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS3.Part_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
22635      data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree3_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
22636      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
22637      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
22638         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Evento" NUMLEVELS = "Número de niveles" LEVEL = "Nivel de medida" ORDER = "Orden" LABEL = "Etiqueta";
22639      set EMWS3.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS3.IDS_BAD_DM( where=(_TYPE_="TARGET"));
22640      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
22641      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
22642      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
22643      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
22644      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
22645      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
22646      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
22647      end;
MPRINT(EM_DIAGRAM):   end;
22648      output;
MPRINT(EM_DIAGRAM):   output;
22649      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE3_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
22650      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22651      proc print data=WORK.Tree3_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree3_EVENT noobs label;
22652      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
22653      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22654      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Eventos del modelo";
MPRINT(EM_DIAGRAM):   run;
22655      run;
 
NOTE: There were 1 observations read from the data set WORK.TREE3_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22656      title10;
MPRINT(EM_DIAGRAM):   title10;
"No se han definido decisiones para el target "BAD"."
22657      proc print data = EMWS3.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS3.Ids_BAD_DM noobs label;
22658      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
22659      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
22660      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo" VARIABLE = "Variable" LABEL = "Etiqueta";
22661      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
22662      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variables predichas y de decisión";
MPRINT(EM_DIAGRAM):   run;
22663      run;
 
NOTE: There were 7 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
22664      title10;
MPRINT(EM_DIAGRAM):   title10;
22665      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'decision_tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree3: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.BAD;
MPRINT(EM_DECDATA):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   BAD="1";
MPRINT(EM_DECDATA):   COUNT=1189;
MPRINT(EM_DECDATA):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   BAD="0";
MPRINT(EM_DECDATA):   COUNT=4771;
MPRINT(EM_DECDATA):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify BAD(type=PROFIT label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="BAD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS3.Ids_BAD_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS3.Ids_BAD_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="BAD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS3.Ids_BAD_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS3.Ids_BAD_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
23205      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23206      * Tree3: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree3: Generation of macros and macro variables;
23207      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
23208      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
23209      %let EMEXCEPTIONSTRING=;
23210      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
23211      * TRAIN: Tree3;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree3;
23212      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
23213      %let EM_ACTION = TRAIN;
23214      %let syscc = 0;
23215      %macro main;
23216
23217        %if %upcase(&EM_ACTION) = CREATE %then %do;
23218          filename temp catalog 'sashelp.emmodl.tree_create.source';
23219          %include temp;
23220          filename temp;
23221
23222          %em_tree_create;
23223        %end;
23224
23225         %else
23226         %if %upcase(&EM_ACTION) = TRAIN %then %do;
23227
23228             filename temp catalog 'sashelp.emmodl.tree_train.source';
23229             %include temp;
23230             filename temp;
23231             %em_tree_train;
23232         %end;
23233
23234        %else
23235        %if %upcase(&EM_ACTION) = SCORE %then %do;
23236          filename temp catalog 'sashelp.emmodl.tree_score.source';
23237          %include temp;
23238          filename temp;
23239
23240          %em_tree_score;
23241
23242        %end;
23243
23244        %else
23245        %if %upcase(&EM_ACTION) = REPORT %then %do;
23246
23247             filename temp catalog 'sashelp.emmodl.tree_report.source';
23248             %include temp;
23249             filename temp;
23250
23251             %em_tree_report;
23252         %end;
23253
23254        %else
23255        %if %upcase(&EM_ACTION) = OPENINT %then %do;
23256
23257             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23258             %include temp;
23259             filename temp;
23260             %EM_TREE_OPENTREEVIEWER;
23261
23262         %end;
23263
23264        %else
23265        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
23266
23267             filename temp catalog 'sashelp.emmodl.tree_actions.source';
23268             %include temp;
23269             filename temp;
23270             %EM_TREE_CLOSETREEVIEWER;
23271
23272         %end;
23273
23274
23275         %doendm:
23276      %mend main;
23277
23278      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
23280     +%macro em_tree_train;
23282     +   %if &EM_IMPORT_DATA eq %then %do;
23283     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
23284     +       %put &em_codebar;
23285     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
23286     +       %put &errormsg;
23287     +       %put &em_codebar;
23288     +       %goto doendm;
23289     +   %end;
23290     +   %else
23291     +       %let EMEXCEPTIONSTRING =;
23293     +   %if  &EM_NUM_TARGET lt 1 %then %do;
23294     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
23295     +        %put &em_codebar;
23296     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
23297     +        %put &errormsg;
23298     +        %put &em_codebar;
23299     +        %goto doendm;
23300     +   %end;
23302     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
23303     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
23304     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
23305     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
23306     +        %put &em_codebar;
23307     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
23308     +        %put &errormsg;
23309     +        %put &em_codebar;
23310     +        %goto doendm;
23311     +   %end;
23313     +   /* Initialize property macro variables */
23314     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
23315     +   %include temp;
23316     +   filename temp;
23318     +   %EM_SetProperties;
23320     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
23321     +   %EM_GETNAME(key=EMTREE, type=DATA);
23322     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
23323     +     /* if import eq Y and no importtable defined, throw an exception */
23324     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
23325     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
23326     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
23327     +         %put &em_codebar;
23328     +         %put &errmsg;
23329     +         %put &em_codebar;
23330     +         %goto doendm;
23331     +      %end;
23332     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
23333     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
23334     +         %put &em_codebar;
23335     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
23336     +         %put &errormsg;
23337     +         %put &em_codebar;
23338     +         %goto doendm;
23339     +      %end;
23340     +      %else %do;
23341     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
23342     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
23343     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
23344     +         %let varnumX = %sysfunc(varnum(&dsid,X));
23345     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
23346     +         %let dsid = %sysfunc(close(&dsid));
23347     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
23348     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
23349     +            %put &em_codebar;
23350     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
23351     +            %put &errormsg;
23352     +            %put &em_codebar;
23353     +            %goto doendm;
23354     +         %end;
23355     +      %end;
23356     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
23357     +         proc delete data=&EM_USER_EMTREE;
23358     +         run;
23359     +      %end;
23360     +   %end;
23361     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
23362     +      proc delete data=&EM_USER_EMTREE;
23363     +      run;
23364     +   %end;
23366     +   /* load tree macros */
23367     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
23368     +   %include temp;
23369     +   filename temp;
23371     +   /* data sets */
23372     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
23373     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
23374     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
23376     +   /* files */
23377     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
23379     +   /* check actual num of target levels */
23380     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
23381     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
23382     +                              nLevel=_nTargetLevel );
23383     +      %if &_nTargetLevel  > 2 %then %do;
23384     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
23385     +        %put &em_codebar;
23386     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
23387     +        %put &errormsg;
23388     +        %put &em_codebar;
23389     +        %goto doendm;
23390     +      %end;
23391     +   %end;
23393     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
23394     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
23395     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
23396     +        %let costflag=0;
23397     +        data _null_;
23398     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
23399     +          if eof then call symput("costflag", _N_);
23400     +        run;
23401     +        %if &costflag gt 0 %then %do;
23402     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
23403     +          %put &em_codebar;
23404     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
23405     +          %put &errormsg;
23406     +          %put &em_codebar;
23407     +          %goto doendm;
23408     +       %end;
23409     +     %end;
23410     +   %end;
23412     +   /* determine if multiple targets will be processed */
23413     +   %let em_tree_multipleTargets=N;
23414     +   %let em_tree_numTarget = 1;
23415     +   %let em_tree_targetVars=;
23417     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
23418     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
23419     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
23420     +         %let em_tree_multipleTargets=N;
23421     +      %end;
23422     +      %else %do;
23423     +         /* create macro array of targets  */
23424     +         data _null_;
23425     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
23426     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
23427     +           if eof then
23428     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
23429     +        run;
23431     +        %if &em_tree_numTarget gt 1 %then %do;
23432     +           %let em_tree_multipleTargets=Y;
23433     +        %end;
23434     +      %end;
23435     +   %end;
23437     +   /* create view of only necessary variable for performance reasons */
23438     +   %let tempData = &EM_LIB..em_&EM_NODEID;
23439     +   data &tempData / view=&tempData;
23440     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
23441     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
23442     +       %EM_TARGET
23443     +     %end;
23444     +     %else %do;
23445     +       %if &em_tree_numTarget ne 0 %then %do;
23446     +         %do i=1 %to &em_tree_numTarget;
23447     +            &&em_tree_targetVars&i
23448     +         %end;
23449     +       %end;
23450     +     %end;
23451     +     );
23452     +   run;
23454     +   /* run Tree procedure */
23455     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
23457     +   /* Check return code and throw exception if error is detected */
23458     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
23459     +   %if &syserr %then %do;
23460     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
23461     +     %goto doendm;
23462     +   %end;
23464     +   /* add decision score code if multiple targets are processed */
23465     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
23466     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
23467     +   %end;
23469     +   /* create outfit dataset if multiple score statements have been executed */
23470     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
23472     +   /* create English Rules */
23473     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
23474     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
23475     +       %em_tree_makeEnglishRules;
23477     +       /* English Rules */
23478     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
23480     +     %end;
23481     +   filename x;
23483     +   %doendm:
23484     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
23485     +%macro EM_SetProperties;
23487     +   /* train properties */
23488     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
23489     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
23490     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
23491     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
23492     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
23493     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
23494     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
23495     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
23496     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
23497     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
23498     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
23499     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
23500     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
23501     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
23502     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
23503     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
23504     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
23505     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
23506     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
23507     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
23508     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
23509     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
23510     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
23511     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
23512     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
23513     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
23514     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
23515     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
23516     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
23517     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
23518     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
23519     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
23520     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
23521     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
23522     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
23523     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
23524     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
23525     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
23526     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
23527     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
23528     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
23530     +   /* properties for interactive sample */
23531     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
23532     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
23533     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
23534     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
23536     +   /* report properties */
23537     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
23538     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
23539     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
23540     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
23541     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
23542     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
23543     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
23544     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
23545     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
23546     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
23547     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
23548     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
23549     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
23551     +   /* score properties */
23552     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
23553     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
23555     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   proc delete data=EMWS3.Tree3_EMTREE;
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: Deleting EMWS3.TREE3_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
23557     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
23558     +  %global &nLevel;
23559     +  proc dmdb batch data=&indata
23560     +    classout=_tmp_dmdbout;
23561     +    class &target;
23562     +  run;
23563     +  data _tmp_dmdbout;
23564     +    set _tmp_dmdbout;
23565     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
23566     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
23567     +  run;
23568     +  data _null_;
23569     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
23570     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
23571     +    %let dsid = %sysfunc(close(&dsid));
23572     +     call symput("&nLevel", put(&_obs, Best12.));
23573     +  run;
23575     +  proc datasets lib=work nolist;
23576     +     delete _tmp_dmdbout;
23577     +  run;
23578     +  quit;
23579     +%Mend EM_CheckBinaryTargetLevel;
23582     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
23584     +  /* determine the number of obs in training data */
23585     +  proc sql;
23586     +    reset noprint;
23587     +    select count(*) into :em_nobs from &indata;
23588     +  quit;
23590     +  /* determine the number of input variables */
23591     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
23592     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
23594     +  /* retrieve targetEvent from decmeta */
23595     +  %let targetEvent=;
23596     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
23597     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
23598     +      data _null_;
23599     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
23600     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
23601     +      run;
23602     +    %end;
23603     +  %end;
23605     +  /* create targetTable if multipleTar eq Y */
23606     +  data temptarget;
23607     +    set &EM_DATA_VARIABLESET;
23608     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
23609     +  run;
23611     + /* data sets */
23612     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
23613     + %EM_GETNAME(key=EMTREE,        type=DATA);
23614     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
23615     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
23616     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
23617     + %EM_GETNAME(key=OUTNODES,      type=DATA);
23618     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
23619     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
23620     + %EM_GETNAME(key=OUTPATH,       type=DATA);
23621     + %EM_GETNAME(key=OUTRULES,      type=DATA);
23623     + /* files */
23624     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
23625     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
23627     + /* turn on pmml if requested */
23628     + %let nnpmml=0;
23629     + %if %symexist(EM_PMML) %then %do;
23630     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
23631     +       %let nnpmml=1;
23633     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
23634     +   %end;
23635     +%end;
23637     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
23639     +%if &nnpmml or &numClassTarget %then %do;
23641     +    /* create dmdb needed for pmml generation */
23642     +    %let tree_maxlevel = 512;
23643     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
23644     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
23645     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
23646     +      %end;
23647     +    %end;
23648     +    %if &tree_maxlevel gt 0 %then %do;
23649     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
23650     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
23651     +    %end;
23653     +    %let targetOrderString =;
23654     +    %let targetString = ;
23655     +    data _null_;
23656     +       length orderString nameString $10000;
23657     +       retain orderString nameString;
23658     +       set &em_data_variableset end=eof;
23659     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
23660     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
23661     +       %end;
23662     +       %else %do;
23663     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
23664     +       %end;          select(order);
23665     +         when('')        order ='DESC';
23666     +         when('FMTASC')  order='ASCFMT';
23667     +         when('FMTDESC') order='DESFMT';
23668     +         otherwise;
23669     +       end;
23670     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
23671     +       nameString = trim(nameString)!!' '!!trim(NAME);
23673     +       if eof then do;
23674     +          call symput('targetOrderString', trim(orderString));
23675     +          call symput('targetString', trim(nameString));
23676     +       end;
23677     +    run;
23679     +    %let arborkluge= "work._treeDMDB";
23681     +    proc dmdb batch data=&indata
23682     +    %if &nnpmml %then %do;
23683     +        PMML
23684     +    %end;
23685     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
23687     +      %if &nnpmml %then %do;
23688     +           %if "%EM_ID" ne "" %then %do;
23689     +             id %EM_ID;
23690     +           %end;
23691     +           %if &EM_NUM_CLASS gt 0 %then %do;
23692     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
23693     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
23694     +                  &targetOrderString;
23695     +           %end;
23696     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
23697     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
23698     +           %end;
23699     +           target &targetString %EM_INTERVAL_TARGET;
23700     +           %if "%EM_FREQ" ne "" %then %do;
23701     +             freq %EM_FREQ;
23702     +           %end;
23703     +      %end;
23704     +      %else %do;
23705     +         class  &targetOrderString;
23706     +         target &targetString %EM_INTERVAL_TARGET;
23707     +      %end;
23708     +    run;
23709     +    quit;
23711     +    proc datasets lib=work nolist;
23712     +       delete classout varout;
23713     +    run;
23714     +    quit;
23716     + %end;
23719     + /* run Arbor procedure */
23720     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
23721     +  proc arbor data=&INDATA
23723     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
23724     +    Leafsize = &EM_PROPERTY_LEAFSIZE
23725     +  %end;
23727     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
23728     +    Splitsize = &EM_PROPERTY_SPLITSIZE
23729     +  %end;
23731     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
23732     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
23733     +  %end;
23735     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
23736     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
23737     +  %end;
23739     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
23740     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
23741     +  %end;
23743     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
23744     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
23745     +  %end;
23746     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
23747     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
23748     +  %end;
23749     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
23750     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
23751     +  %end;
23753     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
23754     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
23755     +      alpha = &EM_PROPERTY_SIGLEVEL
23756     +    %end;
23757     +  %end;
23759     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
23760     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
23761     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
23762     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
23763     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
23765     +        padjust =
23766     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
23767     +          &chaid
23768     +        %end;
23769     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
23770     +          DEPTH
23771     +        %end;
23772     +      %end;
23773     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
23774     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
23775     +         pvars = &num_inputs
23776     +      %end;
23777     +    %end;
23778     +  %end;
23779     +  %else %do;
23780     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
23781     +         padjust = NONE
23782     +      %end;
23783     +  %end;
23785     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
23786     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
23787     +    Maxrules = &num_nrules
23788     +  %end;
23790     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
23791     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
23792     +    Maxsurrs = &num_nsurrs
23793     +  %end;
23795     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
23796     +     Missing=&EM_PROPERTY_MISSINGVALUE
23797     +  %end;
23799     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
23800     +     USEVARONCE
23801     +  %end;
23803     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
23804     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
23805     +  %end;
23808     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
23809     +    event = "&targetEvent"
23810     +  %end;
23812     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
23813     +     DECSEARCH
23814     +  %end;
23816     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
23817     +     PRIORSSEARCH
23818     +  %end;
23820     +  %if &arbor_1 ne %then %do;
23821     +    &arbor_1
23822     +  %end;
23824     +  %if &em_arbor ne %then %do;
23825     +     &em_arbor
23826     +  %end;
23827     +  ;
23828     + %end;
23829     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
23830     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
23831     +       Performance &EM_PROPERTY_PERFORMANCE
23832     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
23833     +         nodesize=&EM_PROPERTY_NODESAMPLE
23834     +       %end;
23835     +       ;
23836     +       interact;
23837     + %end;
23838     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
23839     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
23840     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
23841     +    %put &em_codebar;
23842     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
23843     +    %put &errormsg;
23844     +    %put &em_codebar;
23845     +    %goto doendm;
23846     +   %end;
23847     +   %else %do;
23848     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
23849     +       Performance &EM_PROPERTY_PERFORMANCE
23850     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
23851     +         nodesize=&EM_PROPERTY_NODESAMPLE
23852     +       %end;
23853     +       ;
23854     +       interact;
23855     +   %end;
23856     + %end;
23858     + %else %do;
23859     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
23860     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
23861     +    %put &em_codebar;
23862     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
23863     +    %put &errormsg;
23864     +    %put &em_codebar;
23865     +    %goto doendm;
23866     +   %end;
23867     +   %else %do;
23868     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
23869     +       Performance &EM_PROPERTY_PERFORMANCE
23870     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
23871     +         nodesize=&EM_PROPERTY_NODESAMPLE
23872     +       %end;
23873     +       ;
23874     +        interact;
23875     +   %end;
23876     + %end;
23878     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
23879     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
23880     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
23881     +    %end;
23883     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
23884     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
23885     +    %end;
23887     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
23888     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
23889     +    %end;
23891     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
23892     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
23893     +    %end;
23895     +    %if "%EM_FREQ" ne "" %then %do;
23896     +       freq %EM_FREQ;
23897     +    %end;
23899     +    %if "&multipleTar" eq "Y" %then %do;
23900     +       /* cycle through all target vars in variableset */
23901     +       %let tdsid = %sysfunc(open(temptarget));
23902     +       %if &tdsid %then %do;
23903     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
23904     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
23905     +          %do %while(^ %sysfunc(fetch(&tdsid)));
23906     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
23907     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
23908     +             target &var / level = &lvl
23909     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
23910     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
23911     +             %end;
23912     +             %else %if "&lvl" eq "INTERVAL" %then %do;
23913     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
23914     +             %end;
23915     +             %else %if "&lvl" eq "ORDINAL" %then %do;
23916     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
23917     +             %end;
23918     +          %end;
23919     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
23920     +       %end;
23921     +       useTarget variable = %EM_TARGET;
23922     +    %end;
23923     +    %else %do;
23924     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
23925     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
23926     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
23927     +      %end;
23928     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
23929     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
23930     +      %end;
23931     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
23932     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
23933     +      %end;
23934     +    %end;
23936     +    %if "&multipleTar" eq "N" %then %do;
23937     +      &EM_DEC_STATEMENT;
23938     +    %end;
23940     +    Performance &EM_PROPERTY_PERFORMANCE
23941     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
23942     +      nodesize=&EM_PROPERTY_NODESAMPLE
23943     +    %end;
23944     +    ;
23946     +    %if "&intFlag" eq "Y" %then %do;
23947     +       INTERACT Largest;
23948     +       Train maxnewdepth=0;
23949     +    %end;
23951     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
23952     +         Assess
23953     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
23954     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
23955     +              %put &em_codebar;
23956     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
23957     +              %put &errormsg;
23958     +              %put &em_codebar;
23959     +            %end;
23960     +            %else %do;
23961     +               Validata=&EM_IMPORT_VALIDATE
23962     +            %end;
23963     +         %end;
23964     +         %else %do;
23965     +           NoValidata
23966     +         %end;
23967     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
23968     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
23969     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
23970     +               %if &dsid %then %do;
23971     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
23972     +                 %do %while(^ %sysfunc(fetch(&dsid)));
23973     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
23974     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
23975     +                   %else %do;
23976     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
23977     +                      %else %let measure= MISC;
23978     +                   %end;
23979     +                 %end;
23980     +               %end;
23981     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
23982     +            %end;
23983     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
23984     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
23985     +                 %let measure=ASE;
23986     +              %end;
23987     +              %else %do;
23988     +                 %let measure=MISC;
23989     +              %end;
23990     +            %end;
23991     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
23992     +              %let measure=ASE;
23993     +            %end;
23994     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
23995     +               %let measure = LIFT;
23996     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
23997     +               %if &dsid %then %do;
23998     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
23999     +                 %do %while(^ %sysfunc(fetch(&dsid)));
24000     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
24001     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
24002     +                 %end;
24003     +               %end;
24004     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
24005     +            %end;
24006     +            measure=&measure
24007     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
24008     +               event = "&targetEvent"
24009     +            %end;
24010     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
24011     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
24012     +            %end;
24013     +         %end;
24014     +         %if "&multipleTar" eq "N" %then %do;
24015     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
24016     +               CV
24017     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
24018     +                 CVNITer = &EM_PROPERTY_CVNITER
24019     +               %end;
24020     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
24021     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
24022     +               %end;
24023     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
24024     +                 CVSeed = &EM_PROPERTY_CVSEED
24025     +               %end;
24026     +            %end;
24027     +         %end;
24028     +       %end;
24029     +      ;
24031     +      %if "&intFlag" ne "Y" %then %do;
24032     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
24033     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
24034     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
24035     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
24037     +          SUBTREE &subtree
24038     +          %if "&subtree" eq "NLEAVES" %then %do;
24039     +            =&EM_PROPERTY_NSUBTREE
24040     +          %end;
24041     +          ;
24042     +        %end;
24044     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
24045     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
24046     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
24047     +          %end;
24048     +       %end;
24049     +      %end;
24050     + %end;
24053     + MakeMacro nleaves = nleaves;
24054     + save
24055     + %if "&EM_USER_EMTREE" ne "" %then %do;
24056     +   MODEL=&EM_USER_EMTREE
24057     + %end;
24058     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
24059     +   SEQUENCE=&EM_USER_OUTSEQ
24060     + %end;
24061     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
24062     +   IMPORTANCE=&EM_USER_OUTIMPORT
24063     + %end;
24064     + %if "&EM_USER_OUTNODES" ne "" %then %do;
24065     +   NODESTAT=&EM_USER_OUTNODES
24066     + %end;
24067     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
24068     +   SUMMARY=&EM_USER_OUTSUMMARY
24069     + %end;
24070     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
24071     +   STATSBYNODE=&EM_USER_OUTSTATS
24072     + %end;
24073     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
24074     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
24075     + %end;
24076     + %if "&EM_USER_OUTPATH" ne "" %then %do;
24077     +   Pathlistnonmissing=&EM_USER_OUTPATH
24078     + %end;
24079     + %if "&EM_USER_OUTRULES" ne "" %then %do;
24080     +   RULES = &EM_USER_OUTRULES
24081     + %end;
24082     + ;
24084     + %if "&intFlag" ne "Y" %then %do;
24086     +   %let lookupString = ;
24087     +   %if ^%symexist(EM_OPTION) %then
24088     +      %let EM_OPTION=;
24090     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
24091     +      %let lookupString = LOOKUP=SELECT;
24092     +   %end;
24094     +   %let codetext=;
24095     +   %let norescodetxt=;
24097     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
24098     +     %let codetext=&codetext DUMMY;
24099     +     %let norescodetxt=&norescodetxt DUMMY;
24100     +   %end;
24101     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
24102     +     %let codetext=&codetext NOLEAFID;
24103     +     %let norescodetxt=&norescodetxt NOLEAFID;
24104     +   %end;
24105     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
24106     +     %let norescodetxt=&norescodetxt NOPRED;
24107     +   %end;
24109     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
24110     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
24112     +   %if &nnpmml %then %do;
24113     +     code pmml;
24114     +   %end;
24116     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
24117     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24118     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
24119     +   %end;
24120     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
24121     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
24122     +   %end;
24123     + %end;
24125     + run;
24126     + quit;
24128     + /*%em_checkerror(); */
24129     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
24130     +   /* Delete DMDB catalog */
24131     +   proc datasets lib=work nolist;
24132     +       delete _treeDMDB / mt=cat;
24133     +  run;
24134     +  %end;
24136     + %if &nnpmml %then %do;
24137     +    ods pmml close;
24138     + %end;
24140     +  %doendm:
24142     +%mend em_tree_runTreeProcedure;
24144     +%macro em_tree_createFitStats( multipleTar= );
24147     +  /* create targetTable is multipleTar eq Y */
24148     +  data temptarget;
24149     +    set &EM_DATA_VARIABLESET;
24150     +    where ROLE="TARGET";
24151     +  run;
24153     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
24154     +   data &EM_USER_EMOUTFIT;
24155     +     length target $32;
24156     +     merge work.fit_train
24157     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24158     +       work.fit_valid
24159     +     %end;
24160     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
24161     +       work.fit_test
24162     +     %end;
24163     +     ;
24164     +     %if "&multipleTar" eq "N" %then %do;
24165     +       target="%EM_TARGET";
24166     +     %end;
24167     +     %else %do;
24168     +       target = _TARGET_;
24169     +     %end;
24170     +     drop _NW_ _SUMW_
24171     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24172     +        _VSUMW_
24173     +     %end;
24174     +     ;
24175     +   run;
24177     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
24178     +     proc datasets library=work nolist;
24179     +       delete fit_valid;
24180     +     run;
24181     +   %end;
24182     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
24183     +     proc datasets library=work nolist;
24184     +       delete fit_test;
24185     +     run;
24186     +   %end;
24188     +%mend em_tree_createFitStats;
24191     +%macro em_tree_makeEnglishRules;
24193     +  %EM_GETNAME(key=OUTNODES, type=DATA);
24194     +  %EM_GETNAME(key=OUTPATH, type=DATA);
24196     +  /* verify that necessary tables exist and if not, skip processing */
24197     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
24198     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
24199     +    %goto doendm;
24200     +  %end;
24201     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
24202     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
24203     +    %goto doendm;
24204     +  %end;
24206     +  /* determine length of variable in outpath dataset */
24207     +  %let vlength= ;
24208     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
24209     +  %if &dsid ne %then %do;
24210     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
24211     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
24212     +  %end;
24213     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
24215     +  data tempoutpath;
24216     +    length varname $&vlength;
24217     +    retain varname;
24218     +    set &EM_USER_OUTPATH;
24220     +    if ^missing(variable) then varname=variable;
24221     +    else if ^missing(var_name) then varname=var_name;
24222     +    output;
24223     +  run;
24225     +  /* create an array of generated predicted variable names */
24226     +  %let tree_pred_vars = ;
24227     +  %let tree_pred_label = ;
24228     +  %let numpred= 0;
24229     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
24231     +    data _null_;
24232     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
24233     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
24234     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
24235     +     if eof then
24236     +       call symput('numpred', strip(put(_N_, BEST.)));
24237     +    run;
24238     +  %end;
24240     +  /* determine if NPRIORS exists in outnodes  */
24241     +  %local nprior_flag;
24242     +  data _null_;
24243     +    set &EM_USER_OUTNODES(obs=2) end=eof;
24244     +    if eof then do;
24245     +      call symput('nprior_flag', strip(put(npriors, best.)));
24246     +    end;
24247     +  run;
24249     +  proc sort data=tempoutpath; by node; run;
24250     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
24252     +  data tempoutpath;
24253     +    merge tempoutpath(in=_a) outnodes(keep= node
24254     +    %if "&nprior_flag" ne "." %then %do;
24255     +      NPRIORS
24256     +    %end;
24257     +    %else %do;
24258     +      N
24259     +    %end;
24260     +    %if &numpred gt 0 %then %do;
24261     +      %do i=1 %to &numpred;
24262     +        &&tree_pred_vars&i
24263     +      %end;
24264     +    %end;
24265     +    );
24266     +    by node;
24267     +    if _a;
24268     +  run;
24270     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
24272     +  data _null_;
24273     +    file x;
24274     +    set tempoutpath;
24275     +    by node descending varname;
24276     +    retain origvar oldnode string;
24277     +    length origvar $32 oldnode 8 string $5000;
24279     +    if _N_ = 1 then do;
24280     +      origvar = varname;
24281     +      oldnode = node;
24282     +    end;
24284     +    if first.node then do;
24285     +       put "&EM_CODEBAR";
24286     +       put " Node = " node;
24287     +       put "&EM_CODEBAR";
24288     +    end;
24290     +      if first.varname then do;
24291     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
24292     +            if MISSING(CHARACTER_VALUE) then do;
24293     +             if NUMERIC_VALUE ne .  then do;
24294     +              if ^first.node then do;
24295     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24296     +              end;
24297     +              else do;
24298     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24299     +              end;
24300     +             end;
24301     +            end;
24302     +            else do;
24303     +              if ^first.node then do;
24304     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24305     +              end;
24306     +              else do;
24307     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24308     +              end;
24309     +             end;
24310     +         end;
24311     +         else if RELATION in ("=") then do;
24312     +            if ^first.node then do;
24313     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
24314     +            end;
24315     +            else do;
24316     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
24317     +            end;
24318     +         end;
24319     +         else if RELATION in ("ISMISSING") then do;
24320     +            if ^first.node then do;
24321     +              string = " AND "|| strip(varname) || " equals Missing";
24322     +            end;
24323     +            else do;
24324     +              string = "if "|| strip(varname) ||" equals Missing";
24325     +            end;
24326     +         end;
24327     +         else if RELATION in ("ISNOTMISSING") then do;
24328     +            if ^first.node then do;
24329     +              string = " AND "|| strip(varname) || " equals All Values";
24330     +            end;
24331     +            else do;
24332     +              string = "if "|| strip(varname) ||" equals All Values";
24333     +            end;
24334     +         end;
24335     +         if ^missing(varname) then origvar = varname;
24336     +         oldnode=node;
24338     +      end;
24339     +      else do;
24340     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
24341     +          if MISSING(CHARACTER_VALUE) then do;
24342     +           if  NUMERIC_VALUE ne .  then do;
24343     +            if ^MISSING(string) then
24344     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24345     +            else
24346     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
24347     +           end;
24348     +          end;
24349     +          else do;
24350     +            if ^MISSING(string) then
24351     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24352     +            else
24353     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
24354     +          end;
24356     +         end;
24357     +         else if RELATION in ("=") then do;
24358     +           string = strip(string)||", "||strip(character_value);
24359     +         end;
24360     +         else if RELATION in ("ISMISSING") then do;
24362     +         end;
24363     +         if ^missing(varname) then origvar = varname;
24364     +         oldnode=node;
24365     +      end;
24366     +      if last.varname then do;
24367     +         if RELATION in ("ISMISSING") then do;
24368     +           if ^first.varname then do;
24369     +             string = strip(string) || " or MISSING";
24370     +           end;
24371     +         end;
24372     +         put string;
24373     +         if ^missing(varname) then origvar = varname;
24374     +         oldnode=node;
24375     +      end;
24377     +      if last.node then do;
24378     +         put "then ";
24379     +         put " Tree Node Identifier   = " node;
24381     +         %if "&nprior_flag" ne "." %then %do;
24382     +           put " Number of Observations = " NPRIORS;
24383     +         %end;
24384     +         %else %do;
24385     +           put " Number of Observations = " N;
24386     +         %end;
24388     +         %if &numpred gt 0 %then %do;
24389     +           %do i=1 %to &numpred;
24390     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
24391     +           %end;
24392     +         %end;
24394     +         put " ";
24395     +         if ^missing(varname) then origvar = varname;
24396     +         oldnode=node;
24397     +      end;
24399     +  run;
24401     +  proc datasets lib=work nolist;
24402     +    delete tempoutpath outnodes;
24403     +  run;
24405     +  %doendm:
24406     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS3.Part_TRAIN classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class BAD;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS3.em_Tree3 / view=EMWS3.em_Tree3;
MPRINT(EM_TREE_TRAIN):   set EMWS3.Part_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =CLAGE CLNO DEBTINC DELINQ DEROG JOB LOAN MORTDUE NINQ REASON VALUE YOJ BAD BAD );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS3.EM_TREE3.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS3.em_Tree3;
NOTE: View EMWS3.EM_TREE3.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS3.Ids_BAD_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS3.Tree3_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS3.Tree3_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS3.em_Tree3 dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class BAD(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target BAD
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: View EMWS3.EM_TREE3.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS3.EM_TREE3.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS3.em_Tree3 Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   CLAGE CLNO DEBTINC LOAN MORTDUE VALUE YOJ
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   DELINQ DEROG JOB NINQ
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_BINARY_INPUT):   REASON
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   BAD
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS3.Part_VALIDATE
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1587864 kilobytes of physical memory.
NOTE: Will use 2979 out of 2979 training cases.
NOTE: Using memory pool with 122336256 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 988448 bytes of work memory.
NOTE: The subtree sequence contains 22 subtrees. The largest has 43 nodes and 22 leaves.
NOTE: Using subtree with 25 nodes and 13 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 25 nodes and 13 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 13.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS3.Tree3_EMTREE SEQUENCE=EMWS3.Tree3_OUTSEQ IMPORTANCE=EMWS3.Tree3_OUTIMPORT NODESTAT=EMWS3.Tree3_OUTNODES SUMMARY=EMWS3.Tree3_OUTSUMMARY STATSBYNODE=EMWS3.Tree3_OUTSTATS TOPOLOGY=EMWS3.Tree3_OUTTOPOLOGY
Pathlistnonmissing=EMWS3.Tree3_OUTPATH RULES = EMWS3.Tree3_OUTRULES ;
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: The data set EMWS3.TREE3_EMTREE has 1348 observations and 4 variables.
NOTE: The data set EMWS3.TREE3_OUTNODES has 25 observations and 24 variables.
NOTE: The data set EMWS3.TREE3_OUTPATH has 116 observations and 7 variables.
NOTE: The data set EMWS3.TREE3_OUTRULES has 402 observations and 6 variables.
NOTE: The data set EMWS3.TREE3_OUTSEQ has 22 observations and 20 variables.
NOTE: The data set EMWS3.TREE3_OUTSTATS has 175 observations and 5 variables.
NOTE: The data set EMWS3.TREE3_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS3.TREE3_OUTTOPOLOGY has 25 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEFLOW.sas" res group=Tree3 ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEPUBLISH.sas" nores group=Tree3 ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS3.em_Tree3 out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS3.EM_TREE3.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS3.Part_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS3.Part_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: View EMWS3.EM_TREE3.VIEW used (Total process time):
      real time           0.30 seconds
      cpu time            0.21 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS3.EM_TREE3.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.32 seconds
      cpu time            0.21 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS3.Tree3_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS3.Tree3_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "BAD";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS3.TREE3_EMOUTFIT has 1 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $7;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS3.Tree3_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 116 observations read from the data set EMWS3.TREE3_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 116 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS3.Ids_BAD_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS3.Tree3_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 116 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 116 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS3.Tree3_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 25 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS P_BAD1 P_BAD0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 116 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 116 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 116 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 116 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $5000;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: BAD=1 = " P_BAD1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: BAD=0 = " P_BAD0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H41,
      Create Time=14 de marzo de 2021 13H51
 
NOTE: 162 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 116 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.48120025008972;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24408
24409      *------------------------------------------------------------*;
24410      * End TRAIN: Tree3;
24411      *------------------------------------------------------------*;
 
24412      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24413      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
24414      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24415      ;
MPRINT(EM_DIAGRAM):   ;
24416      ;
MPRINT(EM_DIAGRAM):   ;
24417      ;
MPRINT(EM_DIAGRAM):   ;
24418      ;
MPRINT(EM_DIAGRAM):   ;
24419      quit;
MPRINT(EM_DIAGRAM):   quit;
24420      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24421      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
24422      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24423      /*; *"; *'; */
24424      ;
MPRINT(EM_DIAGRAM):   ;
24425      run;
MPRINT(EM_DIAGRAM):   run;
24426      quit;
MPRINT(EM_DIAGRAM):   quit;
24427      /* Reset EM Options */
24428      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
24429      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
24430      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
24431      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
24432      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
24433      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15H41" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                14 de marzo de 2021
Hora:                15H41
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0GPJNNE "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0GPJNNE new;
MPRINT(EM_DIAGRAM):   run;
24535      %let EMEXCEPTIONSTRING=;
24536      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
24537      * SCORE: Tree3;
MPRINT(EM_DIAGRAM):   * SCORE: Tree3;
24538      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24539      %let EM_ACTION = SCORE;
24540      %let syscc = 0;
24541      %macro main;
24542
24543        %if %upcase(&EM_ACTION) = CREATE %then %do;
24544          filename temp catalog 'sashelp.emmodl.tree_create.source';
24545          %include temp;
24546          filename temp;
24547
24548          %em_tree_create;
24549        %end;
24550
24551         %else
24552         %if %upcase(&EM_ACTION) = TRAIN %then %do;
24553
24554             filename temp catalog 'sashelp.emmodl.tree_train.source';
24555             %include temp;
24556             filename temp;
24557             %em_tree_train;
24558         %end;
24559
24560        %else
24561        %if %upcase(&EM_ACTION) = SCORE %then %do;
24562          filename temp catalog 'sashelp.emmodl.tree_score.source';
24563          %include temp;
24564          filename temp;
24565
24566          %em_tree_score;
24567
24568        %end;
24569
24570        %else
24571        %if %upcase(&EM_ACTION) = REPORT %then %do;
24572
24573             filename temp catalog 'sashelp.emmodl.tree_report.source';
24574             %include temp;
24575             filename temp;
24576
24577             %em_tree_report;
24578         %end;
24579
24580        %else
24581        %if %upcase(&EM_ACTION) = OPENINT %then %do;
24582
24583             filename temp catalog 'sashelp.emmodl.tree_actions.source';
24584             %include temp;
24585             filename temp;
24586             %EM_TREE_OPENTREEVIEWER;
24587
24588         %end;
24589
24590        %else
24591        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
24592
24593             filename temp catalog 'sashelp.emmodl.tree_actions.source';
24594             %include temp;
24595             filename temp;
24596             %EM_TREE_CLOSETREEVIEWER;
24597
24598         %end;
24599
24600
24601         %doendm:
24602      %mend main;
24603
24604      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
24606     +%macro em_tree_score;
24608     +   /* determine if multiple targets will be processed */
24609     +   %let em_tree_multipleTargets=N;
24610     +   %let em_tree_numTarget=1;
24611     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
24612     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
24613     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
24614     +         %let em_tree_multipleTargets=N;
24615     +      %end;
24616     +      %else %do;
24617     +         /* create macro array of targets  */
24618     +         data _null_;
24619     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
24620     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
24621     +           if eof then
24622     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
24623     +        run;
24625     +        %if &em_tree_numTarget gt 1 %then %do;
24626     +           %let em_tree_multipleTargets=Y;
24627     +        %end;
24628     +      %end;
24629     +   %end;
24631     +   /* build flow and publish scoring code */
24632     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
24633     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
24635     +   filename treeflow "&EM_USER_TREEFLOW";
24636     +   filename treepub "&EM_USER_TREEPUBLISH";
24638     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
24639     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
24641     +   %em_copyfile(infref=treeflow, outfref=flowref);
24642     +   %em_copyfile(infref=treepub, outfref=pubref);
24644     +   filename treeflow;
24645     +   filename treepub;
24647     +   /* if priors are used, add code to generate unadjusted residuals in export */
24648     +   %let useAdjPriors = N;
24649     +   data _null_;
24650     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
24651     +     if USE="Y" then call symput('useAdjPriors', 'Y');
24652     +   run;
24653     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
24654     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
24655     +      %include temp;
24656     +      filename temp;
24658     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
24659     +      filename adjref "&EM_USER_adjResidualCode";
24660     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
24662     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
24664     +      filename adjref;
24665     +   %end;
24667     +   /* LEAF */
24668     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
24669     +      data _null_;
24670     +        file flowref mod;
24671     +        put 'drop _LEAF_;';
24672     +      run;
24674     +      data _null_;
24675     +        file pubref mod;
24676     +        put 'drop _LEAF_;';
24677     +      run;
24679     +   %end;
24681     +   filename flowref;
24682     +   filename pubref;
24684     +   /* em_metachange code */
24685     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
24686     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
24687     +   %end;
24689     +   /* variable selection based on importance stat    */
24690     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
24691     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
24692     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
24693     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
24694     +     %let obs = %sysfunc(fetch(&dsid));
24695     +     %do %while(&obs=0);
24696     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
24697     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
24698     +       %EM_METACHANGE(name=&varname, role=REJECTED);
24699     +       %let obs = %sysfunc(fetch(&dsid));
24700     +     %end;
24701     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
24702     +   %end;
24704     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
24705     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
24706     +    %let tree_pred_vars = ;
24707     +    %let tree_pred_lvl =;
24708     +    %let numpred= 0;
24710     +    data _null_;
24711     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
24712     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
24713     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
24714     +     if eof then
24715     +       call symput('numpred', strip(put(_N_, BEST.)));
24716     +    run;
24717     +   %end;
24719     +   %if &numpred ne 0 %then %do;
24720     +    %do i=1 %to &numpred;
24721     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
24722     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
24723     +    %end;
24724     +   %end;
24726     +   /* determine if multiple targets will be processed */
24727     +   %let em_tree_multipleTargets=N;
24728     +   %let em_tree_numTarget=1;
24729     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
24730     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
24731     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
24732     +         %let em_tree_multipleTargets=N;
24733     +      %end;
24734     +      %else %do;
24735     +        data _null_;
24736     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
24737     +          if eof then
24738     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
24739     +        run;
24741     +        %if &em_tree_numTarget gt 1 %then %do;
24742     +           %let em_tree_multipleTargets=Y;
24743     +        %end;
24744     +     %end;
24745     +   %end;
24747     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
24748     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
24750     +      /* variable importance */
24751     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
24752     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
24754     +         %let validexist=0;
24755     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
24756     +           %let validexist=1;
24757     +         %end;
24759     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
24760     +         /* and the columns may not be generated                                                                                 */
24761     +         %let em_tree_cvexists=;
24762     +         %let em_tree_surrexists=.;
24763     +         data _null_;
24764     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
24765     +            if eof then do ;
24766     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
24767     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
24768     +            end;
24769     +         run;
24771     +         data &EM_USER_OUTIMPORT;
24772     +            set &EM_USER_OUTIMPORT;
24774     +            /* format columns based on Precison value specified */
24775     +            format importance 15.&EM_PROPERTY_PRECISION
24776     +                 %if &validexist %then %do;
24777     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
24778     +                 %end;
24779     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
24780     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
24781     +                 %end;
24782     +            ;
24783     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
24784     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
24785     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
24786     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
24787     +                 %if "&em_tree_surrexists" ne "" %then %do;
24788     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
24789     +                 %end;
24790     +                 %if &validexist %then %do;
24791     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
24792     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
24793     +                 %end;
24794     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
24795     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
24796     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
24797     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
24798     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
24799     +                 %end;
24800     +            ;
24801     +         run;
24803     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
24804     +      %end;
24805     +   %end;
24807     +   %doendm:
24808     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H41,
      Create Time=13 de marzo de 2021 21H20
 
NOTE: 248 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H41,
      Create Time=13 de marzo de 2021 21H20
 
NOTE: 226 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS3.Ids_BAD_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8553,
      Last Modified=14 de marzo de 2021 15H41,
      Create Time=13 de marzo de 2021 21H20
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=8012,
      Last Modified=14 de marzo de 2021 15H41,
      Create Time=13 de marzo de 2021 21H20
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("YOJ                             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("JOB                             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("CLNO                            ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("DEROG                           ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("NINQ                            ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("REASON                          ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS3.Ids_BAD_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_BAD1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_BAD0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS3.Tree3_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data EMWS3.Tree3_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS3.Tree3_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Nombre de la variable" LABEL = "Etiqueta" NRULES = "Número de reglas de división" IMPORTANCE = "Importancia" NSURROGATES = "Número de reglas sustitutas" VIMPORTANCE = "Importancia de validación" RATIO = "Ratio de
validación para la importancia de entrenamiento" VIMPORTANCE = "Importancia de validación" CVIMPORTANCE = "Importancia relativa" CVRULES= "Número de reglas en árboles CV" RATIO = "Ratio de validación para la importancia de entrenamiento" ;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 12 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.36946361389451;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24809
24810      *------------------------------------------------------------*;
24811      * End SCORE: Tree3;
24812      *------------------------------------------------------------*;
 
24813      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
24814      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
24815      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24816      filename x "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\CDELTA_TRAIN.sas";
24817      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
24818      file x;
MPRINT(EM_DIAGRAM):   file x;
24819      put 'if upcase(NAME) = "CLNO" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "CLNO" then do;';
24820      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24821      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24822      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24823      put 'if upcase(NAME) = "DEROG" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "DEROG" then do;';
24824      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24825      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24826      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24827      put 'if upcase(NAME) = "JOB" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "JOB" then do;';
24828      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24829      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24830      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24831      put 'if upcase(NAME) = "NINQ" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "NINQ" then do;';
24832      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24833      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24834      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24835      put 'if upcase(NAME) = "Q_BAD0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_BAD0" then do;';
24836      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
24837      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24838      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24839      put 'if upcase(NAME) = "Q_BAD1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_BAD1" then do;';
24840      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
24841      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24842      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24843      put 'if upcase(NAME) = "REASON" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "REASON" then do;';
24844      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24845      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24846      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24847      put 'if upcase(NAME) = "YOJ" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "YOJ" then do;';
24848      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
24849      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24850      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
24851      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
24852      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
24853      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
24854      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
24855      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 15H41,
      Create Time=13 de marzo de 2021 21H20
 
NOTE: 36 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 35.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24856      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
24857      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
24858      *------------------------------------------------------------*;
24859      * Tree3: Scoring DATA data;
24860      *------------------------------------------------------------*;
24861      data EMWS3.Tree3_TRAIN
24862      / view=EMWS3.Tree3_TRAIN
24863      ;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_TRAIN / view=EMWS3.Tree3_TRAIN ;
24864      set EMWS3.Part_TRAIN
24865      ;
MPRINT(EM_DIAGRAM):   set EMWS3.Part_TRAIN ;
24866      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas.
24867     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24868     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
24869     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
24870     +
24871     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
24872     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
24873     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
24874     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
24875     +
24876     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
24877     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
24878     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
24879     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
24880     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
24881     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
24882     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
24883     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
24884     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
24885     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
24886     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
24887     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
24888     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
24889     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
24890     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
24891     +
24892     +
24893     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
24894     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
24895     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
24896     +
24897     +
24898     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
24899     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 44.7336573513381 THEN DO;
24900     +
MPRINT(EM_DIAGRAM):   IF NOT MISSING(VALUE ) AND VALUE < 303749 THEN DO;
24901     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
24902     +IF  NOT MISSING(DEBTINC ) AND
24903     +  DEBTINC  <     44.7336573513381 THEN DO;
24904     +  IF  NOT MISSING(VALUE ) AND
24905     +    VALUE  <               303749 THEN DO;
24906     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
24907     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
24908     +    IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 1;
24909     +      _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0;
24910     +      _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
24911     +      P_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0;
24912     +      P_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24913     +      Q_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
24914     +      Q_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   END;
24915     +      V_BAD1  =                    0;
24916     +      V_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   ELSE DO;
24917     +      I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
24918     +      U_BAD  =                    1;
24919     +      END;
24920     +    ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
24921     +      _ARBFMT_12 = PUT( DELINQ , BEST12.);
24922     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 9.5345039737618 THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
24923     +      IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1;
24924     +        IF  NOT MISSING(DEBTINC ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
24925     +          DEBTINC  <      9.5345039737618 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 1;
24926     +          _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0;
24927     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   V_BAD1 = 1;
24928     +          P_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0;
24929     +          P_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24930     +          Q_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
24931     +          Q_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   END;
24932     +          V_BAD1  =                    1;
24933     +          V_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   ELSE DO;
24934     +          I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
24935     +          U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
24936     +          END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.14201183431952;
24937     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.85798816568047;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.14201183431952;
24938     +          _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.85798816568047;
24939     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1231527093596;
24940     +          P_BAD1  =     0.14201183431952;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.87684729064039;
24941     +          P_BAD0  =     0.85798816568047;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
24942     +          Q_BAD1  =     0.14201183431952;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
24943     +          Q_BAD0  =     0.85798816568047;
MPRINT(EM_DIAGRAM):   END;
24944     +          V_BAD1  =      0.1231527093596;
MPRINT(EM_DIAGRAM):   END;
24945     +          V_BAD0  =     0.87684729064039;
24946     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
24947     +          U_BAD  =                    0;
24948     +          END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(LOAN ) AND LOAN < 4150 THEN DO;
24949     +        END;
24950     +      ELSE DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 32.71471154107 THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
24951     +        IF  NOT MISSING(LOAN ) AND
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
24952     +          LOAN  <                 4150 THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0;
24953     +          IF  NOT MISSING(DEBTINC ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 1;
24954     +            DEBTINC  <       32.71471154107 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0;
24955     +            _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 1;
24956     +            _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.25;
24957     +            P_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.75;
24958     +            P_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
24959     +            Q_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
24960     +            Q_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   END;
24961     +            V_BAD1  =                 0.25;
24962     +            V_BAD0  =                 0.75;
MPRINT(EM_DIAGRAM):   ELSE DO;
24963     +            I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
24964     +            U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
24965     +            END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85714285714285;
24966     +          ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85714285714285;
24967     +            _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.14285714285714;
24968     +            _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.66666666666666;
24969     +            P_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.33333333333333;
24970     +            P_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24971     +            Q_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
24972     +            Q_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   END;
24973     +            V_BAD1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   END;
24974     +            V_BAD0  =     0.33333333333333;
24975     +            I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
24976     +            U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
24977     +            END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
24978     +          END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.0453141091658;
24979     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.95468589083419;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.0453141091658;
24980     +          _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.95468589083419;
24981     +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.04247787610619;
24982     +          P_BAD1  =      0.0453141091658;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.9575221238938;
24983     +          P_BAD0  =     0.95468589083419;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
24984     +          Q_BAD1  =      0.0453141091658;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
24985     +          Q_BAD0  =     0.95468589083419;
MPRINT(EM_DIAGRAM):   END;
24986     +          V_BAD1  =     0.04247787610619;
MPRINT(EM_DIAGRAM):   END;
24987     +          V_BAD0  =      0.9575221238938;
MPRINT(EM_DIAGRAM):   END;
24988     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   END;
24989     +          U_BAD  =                    0;
24990     +          END;
MPRINT(EM_DIAGRAM):   ELSE DO;
24991     +        END;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
24992     +      END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
24993     +    END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85;
24994     +  ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.15;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85;
24995     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.15;
24996     +    _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81818181818181;
24997     +    P_BAD1  =                 0.85;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18181818181818;
24998     +    P_BAD0  =                 0.15;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
24999     +    Q_BAD1  =                 0.85;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25000     +    Q_BAD0  =                 0.15;
MPRINT(EM_DIAGRAM):   END;
25001     +    V_BAD1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   END;
25002     +    V_BAD0  =     0.18181818181818;
25003     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
25004     +    U_BAD  =                    1;
25005     +    END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 165.524113475177 <= CLAGE THEN DO;
25006     +  END;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25007     +ELSE DO;
25008     +  IF  NOT MISSING(CLAGE ) AND
25009     +        165.524113475177 <= CLAGE  THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
25010     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
25011     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(VALUE ) AND 56000 <= VALUE THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
25012     +    IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.29496402877697;
25013     +      IF  NOT MISSING(VALUE ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.70503597122302;
25014     +                       56000 <= VALUE  THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.29496402877697;
25015     +        _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.70503597122302;
25016     +        _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.36363636363636;
25017     +        P_BAD1  =     0.29496402877697;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.63636363636363;
25018     +        P_BAD0  =     0.70503597122302;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25019     +        Q_BAD1  =     0.29496402877697;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25020     +        Q_BAD0  =     0.70503597122302;
MPRINT(EM_DIAGRAM):   END;
25021     +        V_BAD1  =     0.36363636363636;
25022     +        V_BAD0  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   ELSE DO;
25023     +        I_BAD  = '0' ;
25024     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MORTDUE ) AND 16060 <= MORTDUE THEN DO;
25025     +        END;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
25026     +      ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85714285714285;
25027     +        IF  NOT MISSING(MORTDUE ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.14285714285714;
25028     +                         16060 <= MORTDUE  THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85714285714285;
25029     +          _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.14285714285714;
25030     +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.5625;
25031     +          P_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.4375;
25032     +          P_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25033     +          Q_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25034     +          Q_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   END;
25035     +          V_BAD1  =               0.5625;
25036     +          V_BAD0  =               0.4375;
MPRINT(EM_DIAGRAM):   ELSE DO;
25037     +          I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
25038     +          U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
25039     +          END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.375;
25040     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.625;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.375;
25041     +          _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.625;
25042     +          _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25043     +          P_BAD1  =                0.375;
MPRINT(EM_DIAGRAM):   V_BAD0 = 1;
25044     +          P_BAD0  =                0.625;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25045     +          Q_BAD1  =                0.375;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25046     +          Q_BAD0  =                0.625;
MPRINT(EM_DIAGRAM):   END;
25047     +          V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   END;
25048     +          V_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   END;
25049     +          I_BAD  = '0' ;
25050     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   ELSE DO;
25051     +          END;
25052     +        END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 345.933333333333 <= CLAGE THEN DO;
25053     +      END;
MPRINT(EM_DIAGRAM):   _NODE_ = 25;
25054     +    ELSE DO;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.16666666666666;
25055     +      IF  NOT MISSING(CLAGE ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.83333333333333;
25056     +            345.933333333333 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.16666666666666;
25057     +        _NODE_  =                   25;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.83333333333333;
25058     +        _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25059     +        P_BAD1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   V_BAD0 = 1;
25060     +        P_BAD0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25061     +        Q_BAD1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25062     +        Q_BAD0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   END;
25063     +        V_BAD1  =                    0;
25064     +        V_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   ELSE DO;
25065     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
25066     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
25067     +        END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.82278481012658;
25068     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.17721518987341;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.82278481012658;
25069     +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.17721518987341;
25070     +        _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.66129032258064;
25071     +        P_BAD1  =     0.82278481012658;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.33870967741935;
25072     +        P_BAD0  =     0.17721518987341;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25073     +        Q_BAD1  =     0.82278481012658;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25074     +        Q_BAD0  =     0.17721518987341;
MPRINT(EM_DIAGRAM):   END;
25075     +        V_BAD1  =     0.66129032258064;
MPRINT(EM_DIAGRAM):   END;
25076     +        V_BAD0  =     0.33870967741935;
MPRINT(EM_DIAGRAM):   END;
25077     +        I_BAD  = '1' ;
25078     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   ELSE DO;
25079     +        END;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
25080     +      END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
25081     +    END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.74242424242424;
25082     +  ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.25757575757575;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.74242424242424;
25083     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.25757575757575;
25084     +    _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.73306772908366;
25085     +    P_BAD1  =     0.74242424242424;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.26693227091633;
25086     +    P_BAD0  =     0.25757575757575;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25087     +    Q_BAD1  =     0.74242424242424;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25088     +    Q_BAD0  =     0.25757575757575;
MPRINT(EM_DIAGRAM):   END;
25089     +    V_BAD1  =     0.73306772908366;
MPRINT(EM_DIAGRAM):   END;
25090     +    V_BAD0  =     0.26693227091633;
25091     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
25092     +    U_BAD  =                    1;
25093     +    END;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
25094     +  END;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25095     +
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25096     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   END;
25097     +IF  F_BAD  NE '1'
25098     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25099     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
25100     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
25101     + END;
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
25102     + ELSE DO;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
25103     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   END;
25104     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   END;
25105     +       SELECT( F_BAD  );
25106     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25107     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
25108     +       END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25109     + END;
25110     +
MPRINT(EM_DIAGRAM):   drop _LEAF_;
25111     +****************************************************************;
25112     +******          END OF DECISION TREE SCORING CODE         ******;
25113     +****************************************************************;
25114     +
25115     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25116      run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE3_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25117      quit;
25118      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25119      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25120      *------------------------------------------------------------*;
25121      * Tree3: Scoring VALIDATE data;
25122      *------------------------------------------------------------*;
25123      data EMWS3.Tree3_VALIDATE
25124      / view=EMWS3.Tree3_VALIDATE
25125      ;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_VALIDATE / view=EMWS3.Tree3_VALIDATE ;
25126      set EMWS3.Part_VALIDATE
25127      ;
MPRINT(EM_DIAGRAM):   set EMWS3.Part_VALIDATE ;
25128      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas.
25129     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25130     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
25131     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25132     +
25133     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
25134     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
25135     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
25136     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
25137     +
25138     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
25139     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
25140     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
25141     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
25142     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
25143     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
25144     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
25145     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
25146     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
25147     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
25148     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
25149     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
25150     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
25151     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
25152     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
25153     +
25154     +
25155     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
25156     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
25157     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
25158     +
25159     +
25160     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
25161     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
25162     +
25163     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
25164     +IF  NOT MISSING(DEBTINC ) AND
25165     +  DEBTINC  <     44.7336573513381 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 44.7336573513381 THEN DO;
25166     +  IF  NOT MISSING(VALUE ) AND
25167     +    VALUE  <               303749 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(VALUE ) AND VALUE < 303749 THEN DO;
25168     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25169     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25170     +    IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
25171     +      _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
25172     +      _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
25173     +      P_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1;
25174     +      P_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
25175     +      Q_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 1;
25176     +      Q_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0;
25177     +      V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25178     +      V_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0;
25179     +      I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25180     +      U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25181     +      END;
MPRINT(EM_DIAGRAM):   END;
25182     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25183     +      _ARBFMT_12 = PUT( DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25184     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25185     +      IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
25186     +        IF  NOT MISSING(DEBTINC ) AND
25187     +          DEBTINC  <      9.5345039737618 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 9.5345039737618 THEN DO;
25188     +          _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
25189     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
25190     +          P_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1;
25191     +          P_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
25192     +          Q_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 1;
25193     +          Q_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0;
25194     +          V_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD1 = 1;
25195     +          V_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0;
25196     +          I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25197     +          U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25198     +          END;
MPRINT(EM_DIAGRAM):   END;
25199     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25200     +          _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
25201     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
25202     +          P_BAD1  =     0.14201183431952;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.14201183431952;
25203     +          P_BAD0  =     0.85798816568047;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.85798816568047;
25204     +          Q_BAD1  =     0.14201183431952;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.14201183431952;
25205     +          Q_BAD0  =     0.85798816568047;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.85798816568047;
25206     +          V_BAD1  =      0.1231527093596;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1231527093596;
25207     +          V_BAD0  =     0.87684729064039;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.87684729064039;
25208     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25209     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25210     +          END;
MPRINT(EM_DIAGRAM):   END;
25211     +        END;
MPRINT(EM_DIAGRAM):   END;
25212     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25213     +        IF  NOT MISSING(LOAN ) AND
25214     +          LOAN  <                 4150 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(LOAN ) AND LOAN < 4150 THEN DO;
25215     +          IF  NOT MISSING(DEBTINC ) AND
25216     +            DEBTINC  <       32.71471154107 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 32.71471154107 THEN DO;
25217     +            _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
25218     +            _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
25219     +            P_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0;
25220     +            P_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   P_BAD0 = 1;
25221     +            Q_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0;
25222     +            Q_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 1;
25223     +            V_BAD1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.25;
25224     +            V_BAD0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.75;
25225     +            I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25226     +            U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25227     +            END;
MPRINT(EM_DIAGRAM):   END;
25228     +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25229     +            _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
25230     +            _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
25231     +            P_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85714285714285;
25232     +            P_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.14285714285714;
25233     +            Q_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85714285714285;
25234     +            Q_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.14285714285714;
25235     +            V_BAD1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.66666666666666;
25236     +            V_BAD0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.33333333333333;
25237     +            I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25238     +            U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25239     +            END;
MPRINT(EM_DIAGRAM):   END;
25240     +          END;
MPRINT(EM_DIAGRAM):   END;
25241     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25242     +          _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
25243     +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
25244     +          P_BAD1  =      0.0453141091658;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.0453141091658;
25245     +          P_BAD0  =     0.95468589083419;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.95468589083419;
25246     +          Q_BAD1  =      0.0453141091658;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.0453141091658;
25247     +          Q_BAD0  =     0.95468589083419;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.95468589083419;
25248     +          V_BAD1  =     0.04247787610619;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.04247787610619;
25249     +          V_BAD0  =      0.9575221238938;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.9575221238938;
25250     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25251     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25252     +          END;
MPRINT(EM_DIAGRAM):   END;
25253     +        END;
MPRINT(EM_DIAGRAM):   END;
25254     +      END;
MPRINT(EM_DIAGRAM):   END;
25255     +    END;
MPRINT(EM_DIAGRAM):   END;
25256     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25257     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
25258     +    _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
25259     +    P_BAD1  =                 0.85;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85;
25260     +    P_BAD0  =                 0.15;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.15;
25261     +    Q_BAD1  =                 0.85;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85;
25262     +    Q_BAD0  =                 0.15;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.15;
25263     +    V_BAD1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81818181818181;
25264     +    V_BAD0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18181818181818;
25265     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25266     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25267     +    END;
MPRINT(EM_DIAGRAM):   END;
25268     +  END;
MPRINT(EM_DIAGRAM):   END;
25269     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25270     +  IF  NOT MISSING(CLAGE ) AND
25271     +        165.524113475177 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 165.524113475177 <= CLAGE THEN DO;
25272     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25273     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25274     +    IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
25275     +      IF  NOT MISSING(VALUE ) AND
25276     +                       56000 <= VALUE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(VALUE ) AND 56000 <= VALUE THEN DO;
25277     +        _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
25278     +        _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
25279     +        P_BAD1  =     0.29496402877697;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.29496402877697;
25280     +        P_BAD0  =     0.70503597122302;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.70503597122302;
25281     +        Q_BAD1  =     0.29496402877697;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.29496402877697;
25282     +        Q_BAD0  =     0.70503597122302;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.70503597122302;
25283     +        V_BAD1  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.36363636363636;
25284     +        V_BAD0  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.63636363636363;
25285     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25286     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25287     +        END;
MPRINT(EM_DIAGRAM):   END;
25288     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25289     +        IF  NOT MISSING(MORTDUE ) AND
25290     +                         16060 <= MORTDUE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MORTDUE ) AND 16060 <= MORTDUE THEN DO;
25291     +          _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
25292     +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
25293     +          P_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85714285714285;
25294     +          P_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.14285714285714;
25295     +          Q_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85714285714285;
25296     +          Q_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.14285714285714;
25297     +          V_BAD1  =               0.5625;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.5625;
25298     +          V_BAD0  =               0.4375;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.4375;
25299     +          I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25300     +          U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25301     +          END;
MPRINT(EM_DIAGRAM):   END;
25302     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25303     +          _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
25304     +          _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
25305     +          P_BAD1  =                0.375;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.375;
25306     +          P_BAD0  =                0.625;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.625;
25307     +          Q_BAD1  =                0.375;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.375;
25308     +          Q_BAD0  =                0.625;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.625;
25309     +          V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25310     +          V_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD0 = 1;
25311     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25312     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25313     +          END;
MPRINT(EM_DIAGRAM):   END;
25314     +        END;
MPRINT(EM_DIAGRAM):   END;
25315     +      END;
MPRINT(EM_DIAGRAM):   END;
25316     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25317     +      IF  NOT MISSING(CLAGE ) AND
25318     +            345.933333333333 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 345.933333333333 <= CLAGE THEN DO;
25319     +        _NODE_  =                   25;
MPRINT(EM_DIAGRAM):   _NODE_ = 25;
25320     +        _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
25321     +        P_BAD1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.16666666666666;
25322     +        P_BAD0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.83333333333333;
25323     +        Q_BAD1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.16666666666666;
25324     +        Q_BAD0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.83333333333333;
25325     +        V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25326     +        V_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD0 = 1;
25327     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25328     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25329     +        END;
MPRINT(EM_DIAGRAM):   END;
25330     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25331     +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
25332     +        _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
25333     +        P_BAD1  =     0.82278481012658;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.82278481012658;
25334     +        P_BAD0  =     0.17721518987341;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.17721518987341;
25335     +        Q_BAD1  =     0.82278481012658;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.82278481012658;
25336     +        Q_BAD0  =     0.17721518987341;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.17721518987341;
25337     +        V_BAD1  =     0.66129032258064;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.66129032258064;
25338     +        V_BAD0  =     0.33870967741935;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.33870967741935;
25339     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25340     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25341     +        END;
MPRINT(EM_DIAGRAM):   END;
25342     +      END;
MPRINT(EM_DIAGRAM):   END;
25343     +    END;
MPRINT(EM_DIAGRAM):   END;
25344     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25345     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
25346     +    _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
25347     +    P_BAD1  =     0.74242424242424;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.74242424242424;
25348     +    P_BAD0  =     0.25757575757575;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.25757575757575;
25349     +    Q_BAD1  =     0.74242424242424;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.74242424242424;
25350     +    Q_BAD0  =     0.25757575757575;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.25757575757575;
25351     +    V_BAD1  =     0.73306772908366;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.73306772908366;
25352     +    V_BAD0  =     0.26693227091633;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.26693227091633;
25353     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25354     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25355     +    END;
MPRINT(EM_DIAGRAM):   END;
25356     +  END;
MPRINT(EM_DIAGRAM):   END;
25357     +
25358     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
25359     +IF  F_BAD  NE '1'
25360     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
25361     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25362     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25363     + END;
MPRINT(EM_DIAGRAM):   END;
25364     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25365     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
25366     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
25367     +       SELECT( F_BAD  );
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
25368     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
25369     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
25370     +       END;
MPRINT(EM_DIAGRAM):   END;
25371     + END;
MPRINT(EM_DIAGRAM):   END;
25372     +
25373     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25374     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
25375     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25376     +
25377     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25378      run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE3_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25379      quit;
25380      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
25381      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25382      *------------------------------------------------------------*;
25383      * Tree3: Scoring TEST data;
25384      *------------------------------------------------------------*;
25385      data EMWS3.Tree3_TEST
25386      / view=EMWS3.Tree3_TEST
25387      ;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_TEST / view=EMWS3.Tree3_TEST ;
25388      set EMWS3.Part_TEST
25389      ;
MPRINT(EM_DIAGRAM):   set EMWS3.Part_TEST ;
25390      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMFLOWSCORE.sas.
25391     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25392     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
25393     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25394     +
25395     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
25396     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
25397     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
25398     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
25399     +
25400     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
25401     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
25402     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
25403     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
25404     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
25405     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
25406     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
25407     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
25408     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
25409     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
25410     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
25411     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
25412     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
25413     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
25414     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
25415     +
25416     +
25417     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
25418     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
25419     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
25420     +
25421     +
25422     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
25423     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
25424     +
25425     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
25426     +IF  NOT MISSING(DEBTINC ) AND
25427     +  DEBTINC  <     44.7336573513381 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 44.7336573513381 THEN DO;
25428     +  IF  NOT MISSING(VALUE ) AND
25429     +    VALUE  <               303749 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(VALUE ) AND VALUE < 303749 THEN DO;
25430     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25431     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25432     +    IF _ARBFMT_12 IN ('7' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ) THEN DO;
25433     +      _NODE_  =                    8;
MPRINT(EM_DIAGRAM):   _NODE_ = 8;
25434     +      _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
25435     +      P_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1;
25436     +      P_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
25437     +      Q_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 1;
25438     +      Q_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0;
25439     +      V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25440     +      V_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0;
25441     +      I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25442     +      U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25443     +      END;
MPRINT(EM_DIAGRAM):   END;
25444     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25445     +      _ARBFMT_12 = PUT( DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25446     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25447     +      IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'1' ,'3' ,'4' ) THEN DO;
25448     +        IF  NOT MISSING(DEBTINC ) AND
25449     +          DEBTINC  <      9.5345039737618 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 9.5345039737618 THEN DO;
25450     +          _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
25451     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
25452     +          P_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   P_BAD1 = 1;
25453     +          P_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0;
25454     +          Q_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 1;
25455     +          Q_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0;
25456     +          V_BAD1  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD1 = 1;
25457     +          V_BAD0  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0;
25458     +          I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25459     +          U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25460     +          END;
MPRINT(EM_DIAGRAM):   END;
25461     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25462     +          _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
25463     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
25464     +          P_BAD1  =     0.14201183431952;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.14201183431952;
25465     +          P_BAD0  =     0.85798816568047;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.85798816568047;
25466     +          Q_BAD1  =     0.14201183431952;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.14201183431952;
25467     +          Q_BAD0  =     0.85798816568047;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.85798816568047;
25468     +          V_BAD1  =      0.1231527093596;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1231527093596;
25469     +          V_BAD0  =     0.87684729064039;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.87684729064039;
25470     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25471     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25472     +          END;
MPRINT(EM_DIAGRAM):   END;
25473     +        END;
MPRINT(EM_DIAGRAM):   END;
25474     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25475     +        IF  NOT MISSING(LOAN ) AND
25476     +          LOAN  <                 4150 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(LOAN ) AND LOAN < 4150 THEN DO;
25477     +          IF  NOT MISSING(DEBTINC ) AND
25478     +            DEBTINC  <       32.71471154107 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(DEBTINC ) AND DEBTINC < 32.71471154107 THEN DO;
25479     +            _NODE_  =                   38;
MPRINT(EM_DIAGRAM):   _NODE_ = 38;
25480     +            _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
25481     +            P_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0;
25482     +            P_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   P_BAD0 = 1;
25483     +            Q_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0;
25484     +            Q_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 1;
25485     +            V_BAD1  =                 0.25;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.25;
25486     +            V_BAD0  =                 0.75;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.75;
25487     +            I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25488     +            U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25489     +            END;
MPRINT(EM_DIAGRAM):   END;
25490     +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25491     +            _NODE_  =                   39;
MPRINT(EM_DIAGRAM):   _NODE_ = 39;
25492     +            _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
25493     +            P_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85714285714285;
25494     +            P_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.14285714285714;
25495     +            Q_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85714285714285;
25496     +            Q_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.14285714285714;
25497     +            V_BAD1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.66666666666666;
25498     +            V_BAD0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.33333333333333;
25499     +            I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25500     +            U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25501     +            END;
MPRINT(EM_DIAGRAM):   END;
25502     +          END;
MPRINT(EM_DIAGRAM):   END;
25503     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25504     +          _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
25505     +          _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
25506     +          P_BAD1  =      0.0453141091658;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.0453141091658;
25507     +          P_BAD0  =     0.95468589083419;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.95468589083419;
25508     +          Q_BAD1  =      0.0453141091658;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.0453141091658;
25509     +          Q_BAD0  =     0.95468589083419;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.95468589083419;
25510     +          V_BAD1  =     0.04247787610619;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.04247787610619;
25511     +          V_BAD0  =      0.9575221238938;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.9575221238938;
25512     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25513     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25514     +          END;
MPRINT(EM_DIAGRAM):   END;
25515     +        END;
MPRINT(EM_DIAGRAM):   END;
25516     +      END;
MPRINT(EM_DIAGRAM):   END;
25517     +    END;
MPRINT(EM_DIAGRAM):   END;
25518     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25519     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
25520     +    _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
25521     +    P_BAD1  =                 0.85;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85;
25522     +    P_BAD0  =                 0.15;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.15;
25523     +    Q_BAD1  =                 0.85;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85;
25524     +    Q_BAD0  =                 0.15;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.15;
25525     +    V_BAD1  =     0.81818181818181;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.81818181818181;
25526     +    V_BAD0  =     0.18181818181818;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.18181818181818;
25527     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25528     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25529     +    END;
MPRINT(EM_DIAGRAM):   END;
25530     +  END;
MPRINT(EM_DIAGRAM):   END;
25531     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25532     +  IF  NOT MISSING(CLAGE ) AND
25533     +        165.524113475177 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 165.524113475177 <= CLAGE THEN DO;
25534     +    _ARBFMT_12 = PUT( DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( DELINQ , BEST12.);
25535     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
25536     +    IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ,'2' ) THEN DO;
25537     +      IF  NOT MISSING(VALUE ) AND
25538     +                       56000 <= VALUE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(VALUE ) AND 56000 <= VALUE THEN DO;
25539     +        _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
25540     +        _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
25541     +        P_BAD1  =     0.29496402877697;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.29496402877697;
25542     +        P_BAD0  =     0.70503597122302;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.70503597122302;
25543     +        Q_BAD1  =     0.29496402877697;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.29496402877697;
25544     +        Q_BAD0  =     0.70503597122302;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.70503597122302;
25545     +        V_BAD1  =     0.36363636363636;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.36363636363636;
25546     +        V_BAD0  =     0.63636363636363;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.63636363636363;
25547     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25548     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25549     +        END;
MPRINT(EM_DIAGRAM):   END;
25550     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25551     +        IF  NOT MISSING(MORTDUE ) AND
25552     +                         16060 <= MORTDUE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(MORTDUE ) AND 16060 <= MORTDUE THEN DO;
25553     +          _NODE_  =                   33;
MPRINT(EM_DIAGRAM):   _NODE_ = 33;
25554     +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
25555     +          P_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.85714285714285;
25556     +          P_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.14285714285714;
25557     +          Q_BAD1  =     0.85714285714285;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.85714285714285;
25558     +          Q_BAD0  =     0.14285714285714;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.14285714285714;
25559     +          V_BAD1  =               0.5625;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.5625;
25560     +          V_BAD0  =               0.4375;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.4375;
25561     +          I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25562     +          U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25563     +          END;
MPRINT(EM_DIAGRAM):   END;
25564     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25565     +          _NODE_  =                   32;
MPRINT(EM_DIAGRAM):   _NODE_ = 32;
25566     +          _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
25567     +          P_BAD1  =                0.375;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.375;
25568     +          P_BAD0  =                0.625;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.625;
25569     +          Q_BAD1  =                0.375;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.375;
25570     +          Q_BAD0  =                0.625;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.625;
25571     +          V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25572     +          V_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD0 = 1;
25573     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25574     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25575     +          END;
MPRINT(EM_DIAGRAM):   END;
25576     +        END;
MPRINT(EM_DIAGRAM):   END;
25577     +      END;
MPRINT(EM_DIAGRAM):   END;
25578     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25579     +      IF  NOT MISSING(CLAGE ) AND
25580     +            345.933333333333 <= CLAGE  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(CLAGE ) AND 345.933333333333 <= CLAGE THEN DO;
25581     +        _NODE_  =                   25;
MPRINT(EM_DIAGRAM):   _NODE_ = 25;
25582     +        _LEAF_  =                   13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 13;
25583     +        P_BAD1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.16666666666666;
25584     +        P_BAD0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.83333333333333;
25585     +        Q_BAD1  =     0.16666666666666;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.16666666666666;
25586     +        Q_BAD0  =     0.83333333333333;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.83333333333333;
25587     +        V_BAD1  =                    0;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0;
25588     +        V_BAD0  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD0 = 1;
25589     +        I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
25590     +        U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
25591     +        END;
MPRINT(EM_DIAGRAM):   END;
25592     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25593     +        _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
25594     +        _LEAF_  =                   12;
MPRINT(EM_DIAGRAM):   _LEAF_ = 12;
25595     +        P_BAD1  =     0.82278481012658;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.82278481012658;
25596     +        P_BAD0  =     0.17721518987341;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.17721518987341;
25597     +        Q_BAD1  =     0.82278481012658;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.82278481012658;
25598     +        Q_BAD0  =     0.17721518987341;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.17721518987341;
25599     +        V_BAD1  =     0.66129032258064;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.66129032258064;
25600     +        V_BAD0  =     0.33870967741935;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.33870967741935;
25601     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25602     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25603     +        END;
MPRINT(EM_DIAGRAM):   END;
25604     +      END;
MPRINT(EM_DIAGRAM):   END;
25605     +    END;
MPRINT(EM_DIAGRAM):   END;
25606     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25607     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
25608     +    _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
25609     +    P_BAD1  =     0.74242424242424;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.74242424242424;
25610     +    P_BAD0  =     0.25757575757575;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.25757575757575;
25611     +    Q_BAD1  =     0.74242424242424;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.74242424242424;
25612     +    Q_BAD0  =     0.25757575757575;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.25757575757575;
25613     +    V_BAD1  =     0.73306772908366;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.73306772908366;
25614     +    V_BAD0  =     0.26693227091633;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.26693227091633;
25615     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
25616     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
25617     +    END;
MPRINT(EM_DIAGRAM):   END;
25618     +  END;
MPRINT(EM_DIAGRAM):   END;
25619     +
25620     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
25621     +IF  F_BAD  NE '1'
25622     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
25623     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
25624     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
25625     + END;
MPRINT(EM_DIAGRAM):   END;
25626     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
25627     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
25628     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
25629     +       SELECT( F_BAD  );
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
25630     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
25631     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
25632     +       END;
MPRINT(EM_DIAGRAM):   END;
25633     + END;
MPRINT(EM_DIAGRAM):   END;
25634     +
25635     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25636     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
25637     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
25638     +
25639     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
25640      run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE3_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
25641      quit;
25642      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS3.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
25644      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
25645      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
25646      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
25647      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25648      * Tree3: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree3: Computing metadata for TRAIN data;
25649      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS3.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.Tree3_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.Tree3_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.Tree3_TRAIN out=WORK.M191RTZC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M191RTZC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M191RTZC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M191RTZC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M191RTZC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3NMA0XR NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M36RPKPN(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   set WORK.M3NMA0XR;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree3";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Nodo del modelo";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Tree3";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Tree3";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree3";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Tree3";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree3: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "CLNO" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "DEROG" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "JOB" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "NINQ" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_BAD0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_BAD1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "REASON" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "YOJ" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
26033      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
26034      set EMWS3.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMINFO;
26035      where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree3' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
26036      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TREE3_EMINFO.
      WHERE (DATA='Tree3') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26037      data EMWS3.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS3.Tree3_EMINFO;
26038      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
26039      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
26040      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS3.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
26044      run;
26045      data EMWS3.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMINFO;
26046      set EMWS3.Tree3_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMINFO WORK.MODELTEMP_INFO;
26047      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE3_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS3.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26048      proc sort data = EMWS3.Tree3_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS3.Tree3_EMINFO NOTHREADS;
26049      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26050      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE3_EMINFO.
NOTE: The data set EMWS3.TREE3_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26051      proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
26052      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26053      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS3.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26054      proc sort data = EMWS3.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS3.Tree3_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
26055      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26056      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE3_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26057      data EMWS3.Tree3_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMINFO;
26058      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
26059      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
26060      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE3_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26061      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
26062      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
26063      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
26064      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS3.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS3.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS3.TREE3_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "15H41" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                14 de marzo de 2021
Hora:                15H41
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3A86O1H "C:\Jose\DM_ang\Workspaces\EMWS3\Tree3\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3A86O1H new;
MPRINT(EM_DIAGRAM):   run;
26088      data EMWS3.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS3.Tree3_EMOUTFIT;
26089      set EMWS3.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMOUTFIT;
26090      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
26091      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Etiqueta target";
26092      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS3.TREE3_EMOUTFIT.
NOTE: The data set EMWS3.TREE3_EMOUTFIT has 1 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26093      proc sort data=EMWS3.Tree3_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Tree3_EMREPORTFIT nothreads;
26094      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
26095      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMREPORTFIT.
NOTE: The data set EMWS3.TREE3_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26096      %let _EMwarndup = 0;
26097      %let _EMtargetdup =;
26098      %let _EMASEtargetdup =;
26099      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
26100      set EMWS3.Tree3_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMOUTFIT;
26101      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
26102      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
26103      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
26104      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
26105      end;
MPRINT(EM_DIAGRAM):   end;
26106      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE3_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26107      %let EMEXCEPTIONSTRING=;
26108      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26109      * REPORT: Tree3;
MPRINT(EM_DIAGRAM):   * REPORT: Tree3;
26110      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26111      %let EM_ACTION = REPORT;
26112      %let syscc = 0;
26113      %macro main;
26114
26115        %if %upcase(&EM_ACTION) = CREATE %then %do;
26116          filename temp catalog 'sashelp.emmodl.tree_create.source';
26117          %include temp;
26118          filename temp;
26119
26120          %em_tree_create;
26121        %end;
26122
26123         %else
26124         %if %upcase(&EM_ACTION) = TRAIN %then %do;
26125
26126             filename temp catalog 'sashelp.emmodl.tree_train.source';
26127             %include temp;
26128             filename temp;
26129             %em_tree_train;
26130         %end;
26131
26132        %else
26133        %if %upcase(&EM_ACTION) = SCORE %then %do;
26134          filename temp catalog 'sashelp.emmodl.tree_score.source';
26135          %include temp;
26136          filename temp;
26137
26138          %em_tree_score;
26139
26140        %end;
26141
26142        %else
26143        %if %upcase(&EM_ACTION) = REPORT %then %do;
26144
26145             filename temp catalog 'sashelp.emmodl.tree_report.source';
26146             %include temp;
26147             filename temp;
26148
26149             %em_tree_report;
26150         %end;
26151
26152        %else
26153        %if %upcase(&EM_ACTION) = OPENINT %then %do;
26154
26155             filename temp catalog 'sashelp.emmodl.tree_actions.source';
26156             %include temp;
26157             filename temp;
26158             %EM_TREE_OPENTREEVIEWER;
26159
26160         %end;
26161
26162        %else
26163        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
26164
26165             filename temp catalog 'sashelp.emmodl.tree_actions.source';
26166             %include temp;
26167             filename temp;
26168             %EM_TREE_CLOSETREEVIEWER;
26169
26170         %end;
26171
26172
26173         %doendm:
26174      %mend main;
26175
26176      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
26178     +%macro em_tree_makePlotDs( multipleTar= );
26180     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
26181     +  %EM_GETNAME(key=OUTNODES, type=DATA);
26182     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
26183     +  %EM_GETNAME(key=OUTRULES, type=DATA);
26185     +  /* determine if validation statistics will be displayed */
26186     +  %let validflag=N;
26187     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
26188     +    /* determine if validation data exists */
26189     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
26190     +      %let validflag=Y;
26191     +    %end;
26192     +  %end;
26194     +   /* retrieve name of decmeta even in presence of multiple targets */
26195     +   %let decmeta = ;
26196     +   %if &EM_DEC_DECMETA eq %then %do;
26197     +     data _Target;
26198     +       set &em_data_variableset;
26199     +       where ROLE='TARGET' and USE in('D', 'Y');
26200     +       keep NAME;
26201     +     run;
26202     +     proc sort data=_Target;
26203     +       by NAME;
26204     +     run;
26205     +     proc sort data=EM_TARGETDECINFO;
26206     +       by TARGET;
26207     +     run;
26208     +     data _Target;
26209     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
26210     +       by NAME;
26211     +       if _a then do;
26212     +         call symput('decmeta', trim(DECMETA));
26213     +       end;
26214     +     run;
26215     +     proc delete data=_Target;run;
26216     +   %end;
26217     +   %else %let decmeta = &EM_DEC_DECMETA;
26220     +  /* retrieve targetEvent from decmeta */
26221     +  %let targetEvent=;
26222     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
26223     +    %if %sysfunc(exist(&DECMETA)) %then %do;
26224     +      data _null_;
26225     +       set &DECMETA(where=(_TYPE_="TARGET"));
26226     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
26227     +      run;
26228     +    %end;
26229     +  %end;
26231     +  /* retrieve predicted var for targetEvent from decmeta */
26232     +  %let predTarget=;
26233     +  %let predLvl=;
26234     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
26235     +    %if %sysfunc(exist(&DECMETA)) %then %do;
26236     +      data _null_;
26237     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
26238     +       call symput('predTarget', strip(VARIABLE));
26239     +       call symput('predLvl', strip(LEVEL));
26240     +      run;
26241     +    %end;
26242     +  %end;
26243     +  %else %do;
26244     +    %if %sysfunc(exist(&DECMETA)) %then %do;
26245     +      data _null_;
26246     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
26247     +       call symput('predTarget', strip(VARIABLE));
26248     +      run;
26249     +    %end;
26250     +  %end;
26252     +  /* create BelowText value */
26253     +  data belowtext;
26254     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
26255     +    keep node belowtext;
26256     +  run;
26258     +  /* replace belowtext with variable label if it exists */
26259     +  data belowtext2;
26260     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
26261     +    keep node belowtextlbl;
26262     +  run;
26264     +  proc sort data=belowtext; by node; run;
26265     +  proc sort data=belowtext2; by node; run;
26267     +  data belowtext;
26268     +    merge belowtext belowtext2(in=_a);
26269     +    by node;
26270     +    if _a then belowtext=belowtextlbl;
26271     +    keep node belowtext;
26272     +  run;
26274     +  /* create AboveText value */
26275     +  data abovetext;
26276     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
26277     +  run;
26278     +  proc sort data=abovetext; by node numeric_value; run;
26280     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
26281     +  data abovetext;
26282     +    set abovetext(rename=(node=parent));
26283     +    by parent numeric_value;
26284     +    retain abovetext tempstring flag branch origval origchar ;
26285     +    length abovetext $256;
26286     +    length tempstring origchar $64;
26288     +    if STAT in ("INTERVAL", "ORDINAL") then do;
26289     +      if first.parent then do;
26290     +        if missing(character_value) then do;
26291     +          numeric_value = round(numeric_value, &sp_precision);
26292     +          abovetext = "< "||strip(NUMERIC_VALUE);
26293     +          branch = 1;
26294     +          origval = numeric_value;
26295     +          output;
26296     +        end;
26297     +        else do;
26298     +          abovetext = "< "||strip(CHARACTER_VALUE);
26299     +          branch = 1;
26300     +          origchar = character_value;
26301     +          output;
26302     +        end;
26304     +        if first.parent AND last.parent then do;
26305     +          if missing(character_value) then do;
26306     +            numeric_value = round(numeric_value, &sp_precision);
26307     +            branch = branch + 1;
26308     +            abovetext = ">= "||strip(NUMERIC_VALUE);
26309     +            output;
26310     +          end;
26311     +          else do;
26312     +            branch = branch + 1;
26313     +            abovetext = ">= "||strip(CHARACTER_VALUE);
26314     +            output;
26315     +          end;
26316     +        end;
26317     +      end;
26318     +      else if last.parent then do;
26319     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
26320     +          if missing(character_value) then do;
26321     +            numeric_value = round(numeric_value, &sp_precision);
26322     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
26323     +          end;
26324     +          else do;
26325     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
26326     +          end;
26327     +          branch = branch + 1;
26328     +          output;
26330     +          if missing(character_value) then do;
26331     +            numeric_value = round(numeric_value, &sp_precision);
26332     +            abovetext = ">= "||strip(NUMERIC_VALUE);
26333     +          end;
26334     +          else do;
26335     +            abovetext = ">= "||strip(CHARACTER_VALUE);
26336     +          end;
26337     +          branch = branch + 1;
26338     +          output;
26339     +        end;
26340     +        else do;
26341     +          if missing(character_value) then do;
26342     +            numeric_value = round(numeric_value, &sp_precision);
26343     +            abovetext = ">= "||strip(NUMERIC_VALUE);
26344     +          end;
26345     +          else do;
26346     +            abovetext = ">= "||strip(CHARACTER_VALUE);
26347     +          end;
26348     +          branch = branch + 1;
26349     +          output;
26350     +        end;
26351     +      end;
26352     +      else do;
26353     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
26354     +          if missing(character_value) then do;
26355     +            numeric_value = round(numeric_value,&sp_precision);
26356     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
26357     +            origval = numeric_value;
26358     +          end;
26359     +          else do;
26360     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
26361     +            origchar = character_value;
26362     +          end;
26363     +          branch = branch + 1;
26364     +          output;
26366     +        end;
26367     +        else do;
26368     +          if missing(character_value) then do;
26369     +            numeric_value = round(numeric_value, &sp_precision);
26370     +            abovetext = ">= "||strip(NUMERIC_VALUE);
26371     +            origval = numeric_value;
26372     +          end;
26373     +          else do;
26374     +            abovetext = ">= "||strip(CHARACTER_VALUE);
26375     +            origval = character_value;
26376     +          end;
26377     +          branch = branch + 1;
26378     +          output;
26379     +        end;
26380     +      end;
26381     +    end;
26382     +    else do;
26383     +       if first.numeric_value then do;
26384     +         flag = 0;
26385     +         abovetext = strip(CHARACTER_VALUE);
26386     +         branch = numeric_value;
26387     +         if first.numeric_value AND last.numeric_value then do;
26388     +           output;
26389     +         end;
26390     +       end;
26391     +       else if last.numeric_value then do;
26392     +         if flag=0 then do;
26393     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
26394     +           length = length(strip(tempstring));
26395     +           if length < 32 then do;
26396     +             abovetext = strip(tempstring);
26397     +           end;
26398     +           else do;
26399     +             abovetext = strip(abovetext)||", ...";
26400     +             flag = 1;
26401     +           end;
26402     +         end;
26403     +         branch = numeric_value;
26404     +         output;
26405     +       end;
26406     +       else do;
26407     +         if flag=0 then do;
26408     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
26409     +           length = length(strip(tempstring));
26410     +           if length < 32 then do;
26411     +             abovetext = strip(tempstring);
26412     +           end;
26413     +           else do;
26414     +             abovetext = strip(abovetext)||", ...";
26415     +             flag=1;
26416     +           end;
26417     +         end;
26418     +         branch = numeric_value;
26419     +       end;
26420     +    end;
26421     +    keep parent branch abovetext;
26422     +  run;
26424     +  /* Missing value to abovetext */
26425     +  data tempmissing;
26426     +    set &EM_USER_OUTRULES;
26427     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
26428     +    rename node=parent numeric_value=branch character_value=misschar;
26429     +  run;
26432     +  proc sort data=abovetext; by parent branch; run;
26433     +  proc sort data=tempmissing; by parent branch; run;
26434     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
26436     +  data tempoutnodes;
26437     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
26438     +    by parent branch;
26439     +    length traintotal validtotal 8;
26440     +    retain traintotal validtotal;
26442     +    if _a then do;
26443     +      if ^MISSING(abovetext) then do;
26444     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
26445     +      end;
26446     +      else do;
26447     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
26448     +      end;
26449     +    end;
26450     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
26452     +    if node=1 then do;
26453     +      traintotal = N;
26454     +      validtotal=VN;
26455     +    end;
26457     +    drop role rank stat misschar belowtext;
26458     +  run;
26459     +  proc sort data=tempoutnodes; by node; run;
26460     +  proc sort data=belowtext; by node; run;
26462     +  data tempoutnodes;
26463     +    merge tempoutnodes belowtext;
26464     +    by node;
26466     +  run;
26468     +  /* determine if adjusted counts exists; if so, use these vs true counts */
26469     +  %let adjusted = N;
26470     +  %let npriors = 0;
26471     +  data _null_ ;
26472     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
26473     +    if eof then do ;
26474     +      call symput("npriors" , strip(put(_N_,best.))) ;
26475     +    end;
26476     +  run;
26477     +  %if &npriors gt 0 %then %let adjusted=Y;
26480     +  /* create a table with targetUsed and targetLevel columns for each node */
26481     +  data temptarmeta;
26482     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
26483     +    %if &multipleTar eq N %then %do;
26484     +      AND USE in ('D', 'Y')
26485     +    %end;
26486     +    ));
26487     +    length TARGET $32;
26488     +    Target=name;
26489     +    keep target level;
26490     +  run;
26492     +  %if &multipleTar eq Y %then %do;
26493     +    data temptargetused;
26494     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
26495     +      keep node target;
26496     +    run;
26497     +    proc sort data=temptargetused; by target; run;
26498     +    proc sort data=temptarmeta; by target; run;
26499     +    data temptargetused;
26500     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
26501     +      by target;
26502     +      if _a and _b;
26503     +    run;
26504     +  %end;
26505     +  %else %do;
26506     +    data temptargetused;
26507     +      set &EM_USER_OUTSTATS;
26508     +      length target $32 tarlevel $10;
26509     +      target="%EM_TARGET";
26510     +      tarlevel="%EM_TARGET_LEVEL";
26511     +      keep node target tarlevel;
26512     +    run;
26513     +    proc sort data=temptargetused nodupkey; by node; run;
26514     +  %end;
26516     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
26517     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
26518     +  proc sort data=temptargetused; by node; run;
26521     +  /* create tables for all interval targets as well as all class targets */
26522     +  data tempinterval tempclass;
26523     +    merge tempoutstats temptargetused( rename=(target=targetused));
26524     +    by node;
26525     +    %if "&multipleTar" eq "Y" %then %do;
26526     +      if ((missing(Target)) OR (target=targetused ));
26527     +    %end;
26529     +    if tarlevel="INTERVAL" then output tempinterval;
26530     +    else output tempclass;
26531     +  run;
26533     +  /* initialize intTarget and classTarget flags */
26534     +  %let em_intNobs =0;
26535     +  %let em_classNobs = 0;
26536     +  %let em_intTarget= N;
26537     +  %let em_classTarget= N;
26539     +  proc sql;
26540     +    reset noprint;
26541     +    select count(*) into :em_intNobs from tempinterval;
26542     +  quit;
26543     +  proc sql;
26544     +    reset noprint;
26545     +    select count(*) into :em_classNobs from tempclass;
26546     +  quit;
26548     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
26549     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
26551     +  /* retrieve all information for interval targets */
26552     +  %if &em_intTarget eq Y %then %do;
26554     +    /* determine if leaf variable exists */
26555     +    %let dsid=%sysfunc(open(tempinterval,i));
26556     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
26557     +    %let rc=%sysfunc(close(&dsid));
26559     +    proc transpose data=tempinterval
26560     +      %if &leafexists %then %do;
26561     +        (drop=leaf)
26562     +      %end;
26563     +      %if &validexist %then %do;
26564     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
26565     +      %end;
26566     +      %else %do;
26567     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
26568     +      %end;
26569     +      by node;
26570     +      id statname;
26571     +    run;
26572     +    data tempinterval;
26573     +      set tempinterval;
26574     +      if missing(N) then delete;
26575     +    run;
26576     +  %end;
26578     +  /* retrieve all information for class targets */
26579     +  %if &em_classTarget eq Y %then %do;
26580     +    proc sort data=tempclass; by node category; run;
26581     +    %if &validflag eq N %then %do;
26582     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
26583     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
26584     +    %end;
26585     +    %else %do;
26586     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
26587     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
26588     +    %end;
26589     +      set tempclass;
26591     +      %if &validflag eq N %then %do;
26592     +        %if "&adjusted" eq "N" %then %do;
26593     +          if statname="N" then output tempn;
26594     +        %end;
26595     +        %else %do;
26596     +          if statname="NPRIORS" then output tempn;
26597     +        %end;
26598     +        else if statname="PREDICTION" then output temppredict;
26599     +        else if statname="PROBABILITY" then output tempprob;
26600     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
26601     +        else if statname="ALTERNATIVE LOSS" then output temploss;
26602     +      %end;
26603     +      %else %do;
26604     +        %if "&adjusted" eq "N" %then %do;
26605     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
26606     +        %end;
26607     +        %else %do;
26608     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
26609     +        %end;
26610     +        else if statname="PREDICTION" then output temppredict;
26611     +        else if statname="PROBABILITY" then output tempprob;
26612     +        else if statname="VALID: PROBABILITY" then output tempvprob;
26613     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
26614     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
26615     +      %end;
26616     +    run;
26619     +    /* determine if profit/loss exists in tempprofit */
26620     +    %let em_profitflag=0;
26621     +    %let em_lossflag=0;
26622     +    proc sql;
26623     +      reset noprint;
26624     +      select count(*) into :em_profitflag from tempprofit;
26625     +    quit;
26626     +    proc sql;
26627     +      reset noprint;
26628     +      select count(*) into :em_lossflag from temploss;
26629     +    quit;
26631     +    %if &validFlag eq Y %then %do;
26632     +      proc transpose data=tempn
26633     +        %if "&adjusted" eq "N" %then %do;
26634     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
26635     +        %end;
26636     +        %else %do;
26637     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
26638     +        %end;
26639     +        by node;
26640     +        id statname;
26641     +      run;
26642     +      %if &em_profitflag ne 0 %then %do;
26643     +        proc transpose data=tempprofit out=tempprofit;
26644     +          by node category;
26645     +          id statname ;
26646     +        run;
26647     +      %end;
26648     +      %if &em_lossflag ne 0 %then %do;
26649     +        proc transpose data=temploss out=temploss;
26650     +          by node category;
26651     +          id statname ;
26652     +        run;
26653     +      %end;
26654     +      data tempprob;
26655     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
26656     +        by node
26657     +        %if &multipleTar eq Y %then %do;
26658     +          target
26659     +        %end;
26660     +        category;
26661     +      run;
26662     +    %end;
26664     +    /* store percentcorrect value */
26665     +    data temppredict;
26666     +      merge tempprob temppredict(in=_a);
26667     +      by node category;
26668     +      if _a then do;
26669     +        percentCorrect = statvalue;
26670     +        %if &validFlag eq Y %then %do;
26671     +          vpercentCorrect= vstatvalue;
26672     +        %end;
26673     +      end;
26674     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
26675     +      %if &validFlag eq Y %then %do;
26676     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
26677     +      %end;
26678     +      ;
26679     +      if missing(percentCorrect) then delete;
26680     +      drop target;
26681     +    run;
26683     +    /* build profittext */
26684     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
26685     +      data tempprofittext(keep= node profittext profitloss);
26686     +        length profittext $800 profitloss 8.;
26687     +        retain profittext profitloss;
26689     +        merge tempprob
26690     +        %if &em_profitflag ne 0 %then %do;
26691     +          tempprofit
26692     +        %end;
26693     +        %else %if &em_lossflag ne 0 %then %do;
26694     +          temploss
26695     +        %end;
26696     +        ;
26697     +        by node category;
26699     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
26700     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
26701     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
26702     +          %let profittype = ALL;
26703     +        %end;
26705     +        /* create the profitloss variable for nodecolor if selected */
26706     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
26708     +        %if "&profittype" eq "ALL" %then %do;
26709     +          if strip(CATEGORY)="&targetEvent" then do;
26710     +            profitloss=statvalue;
26711     +          end;
26712     +          if first.node then do;
26713     +            %if &validFlag eq N %then %do;
26714     +             %if &em_profitflag ne 0 %then %do;
26715     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26716     +             %end;
26717     +             %if &em_lossflag ne 0 %then %do;
26718     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26719     +             %end;
26720     +            %end;
26721     +            %else %do;
26722     +             %if &em_profitflag ne 0 %then %do;
26723     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
26723    !+14.&EM_PROPERTY_SPLITPRECISION);
26724     +             %end;
26725     +             %if &em_lossflag ne 0 %then %do;
26726     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
26727     +             %end;
26728     +            %end;
26729     +          end;
26730     +          else if last.node then do;
26731     +            %if &validFlag eq N %then %do;
26732     +             %if &em_profitflag ne 0 %then %do;
26733     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26734     +             %end;
26735     +             %if &em_lossflag ne 0 %then %do;
26736     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26737     +             %end;
26738     +             /*if CATEGORY="&targetEvent" then do;
26739     +               profitloss=statvalue;
26740     +             end;*/
26741     +            %end;
26742     +            %else %do;
26743     +             %if &em_profitflag ne 0 %then %do;
26744     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
26744    !+14.&EM_PROPERTY_SPLITPRECISION);
26745     +                if CATEGORY="&targetEvent" then do;
26746     +                 profitloss=ALTERNATIVE_PROFIT;
26747     +                end;
26748     +             %end;
26749     +             %if &em_lossflag ne 0 %then %do;
26750     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
26750    !+14.&EM_PROPERTY_SPLITPRECISION);
26751     +                if CATEGORY="&targetEvent" then do;
26752     +                  profitloss=ALTERNATIVE_LOSS;
26753     +                end;
26754     +             %end;
26755     +            %end;
26756     +            output;
26757     +          end;
26758     +          else do;
26759     +            %if &validFlag eq N %then %do;
26760     +             %if &em_profitflag ne 0 %then %do;
26761     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26762     +             %end;
26763     +             %if &em_lossflag ne 0 %then %do;
26764     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26765     +             %end;
26766     +            %end;
26767     +            %else %do;
26768     +             %if &em_profitflag ne 0 %then %do;
26769     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
26769    !+14.&EM_PROPERTY_SPLITPRECISION);
26770     +             %end;
26771     +             %if &em_lossflag ne 0 %then %do;
26772     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
26772    !+14.&EM_PROPERTY_SPLITPRECISION);
26773     +             %end;
26774     +            %end;
26775     +          end;
26776     +        %end;
26777     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
26778     +          if strip(CATEGORY) = "&targetevent" then do;
26779     +            %if &validFlag eq N %then %do;
26780     +             %if &em_profitflag ne 0 %then %do;
26781     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26782     +             %end;
26783     +             %if &em_lossflag ne 0 %then %do;
26784     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
26785     +             %end;
26786     +             profitloss=statvalue;
26787     +            %end;
26788     +            %else %do;
26789     +             %if &em_profitflag ne 0 %then %do;
26790     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
26790    !+14.&EM_PROPERTY_SPLITPRECISION);
26791     +                profitloss=ALTERNATIVE_PROFIT;
26792     +             %end;
26793     +             %if &em_lossflag ne 0 %then %do;
26794     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
26795     +                profitloss=ALTERNATIVE_LOSS;
26796     +             %end;
26797     +            %end;
26798     +            output;
26799     +          end;
26800     +        %end;
26801     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
26802     +          if strip(CATEGORY) = "&targetevent" then do;
26803     +            %if &validFlag eq N %then %do;
26804     +             profitloss=statvalue;
26805     +            %end;
26806     +            %else %do;
26807     +             %if &em_profitflag ne 0 %then %do;
26808     +                profitloss=ALTERNATIVE_PROFIT;
26809     +             %end;
26810     +             %if &em_lossflag ne 0 %then %do;
26811     +                profitloss=ALTERNATIVE_LOSS;
26812     +             %end;
26813     +            %end;
26814     +            output;
26815     +          end;
26816     +        %end;
26817     +      run;
26818     +    %end;
26820     +    data tempprob(keep= node probtext);
26821     +      length probtext $800;
26822     +      retain probtext;
26823     +      set tempprob ;
26824     +      by node;
26826     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
26827     +      %let probtype = &EM_PROPERTY_TARGET;
26828     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
26829     +        %let probtype = ALL;
26830     +      %end;
26832     +      %if "&probtype" eq "ALL" %then %do;
26833     +        if first.node then do;
26834     +          %if &validFlag eq N %then %do;
26835     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
26836     +          %end;
26837     +          %else %do;
26838     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
26839     +          %end;
26840     +        end;
26841     +        else if last.node then do;
26842     +          %if &validFlag eq N %then %do;
26843     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
26844     +          %end;
26845     +          %else %do;
26846     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
26847     +          %end;
26848     +          output;
26849     +        end;
26850     +        else do;
26851     +          %if &validFlag eq N %then %do;
26852     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
26853     +          %end;
26854     +          %else %do;
26855     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
26856     +          %end;
26857     +        end;
26858     +      %end;
26859     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
26860     +        if strip(CATEGORY) = "&targetevent" then do;
26861     +          %if &validFlag eq N %then %do;
26862     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
26863     +          %end;
26864     +          %else %do;
26865     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
26866     +          %end;
26867     +          output;
26868     +        end;
26869     +      %end;
26870     +      %else %if "&probtype" eq "NONE" %then %do;
26871     +        if last.node then do;
26872     +          output;
26873     +        end;
26874     +      %end;
26875     +    run;
26876     +  %end;
26878     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
26880     +  %let oldexists=0;
26881     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
26882     +     data old_tree_plot;
26883     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
26884     +        rename nodecolor=oldnodecolor;
26885     +     run;
26887     +     proc sort data=old_tree_plot;
26888     +        by node;
26889     +     run;
26891     +     %let oldexists=1;
26892     +  %end;
26894     +  data &EM_USER_TREE_PLOT;
26895     +    length textall $800;
26896     +    merge tempoutnodes temptargetused
26898     +    %if &em_intTarget eq Y %then %do;
26899     +      tempinterval
26900     +    %end;
26902     +    %if &em_classTarget eq Y %then %do;
26904     +      %if &validFlag eq N %then %do;
26905     +        tempn(rename=(statvalue=N))
26906     +      %end;
26907     +      %else %do;
26908     +        tempn
26909     +      %end;
26911     +      temppredict tempprob
26913     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
26914     +        tempprofittext
26915     +      %end;
26916     +    %end;
26917     +    ;
26918     +    by node;
26920     +    /* build nodetext based on user selection */
26921     +    textall="";
26923     +    %if &em_intTarget eq Y %then %do;
26924     +    if tarlevel="INTERVAL" then do;
26925     +      /* Nodeid */
26926     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
26927     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
26928     +      %end;
26930     +      /* Target identifier if multiple targets are used */
26931     +      %if "&multipleTar" eq "Y" %then %do;
26932     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
26933     +      %end;
26935     +      %if &validFlag eq Y %then %do;
26936     +         /* Column labels displayed in validflag eq Y only */
26937     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
26938     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
26938    !+ noquote ))";
26939     +         %end;
26941     +         /* Average values */
26942     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
26943     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
26944     +         %end;
26946     +         /* RASE */
26947     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
26948     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
26949     +         %end;
26951     +         /* Count */
26952     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
26953     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
26954     +         %end;
26955     +      %end;
26956     +      %else %do;
26957     +         /* Average values */
26958     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
26959     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
26960     +         %end;
26962     +         /* RASE */
26963     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
26964     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
26965     +         %end;
26967     +         /* Count */
26968     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
26969     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
26970     +         %end;
26971     +      %end;
26973     +      /* nodecolor */
26974     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
26975     +        nodecolor=PREDICTION;
26976     +      %end;
26977     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
26978     +        nodecolor=RASE;
26979     +      %end;
26980     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
26981     +        nodecolor=1;
26982     +      %end;
26984     +    end;
26985     +    %end;
26986     +    %if &em_classTarget eq Y %then %do;
26987     +    if tarlevel^="INTERVAL" then  do;
26989     +      /* Nodeid */
26990     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
26991     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
26992     +      %end;
26993     +      /* Target identifier if multiple targets are used */
26994     +      %if "&multipleTar" eq "Y" %then %do;
26995     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
26996     +      %end;
26998     +      /* Predicted values */
26999     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
27000     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
27001     +      %end;
27003     +      /* Column labels displayed in validflag eq Y only */
27004     +      %if "&ValidFlag" eq "Y" %then %do;
27005     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
27006     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
27006    !+ noquote ))";
27007     +        %end;
27008     +      %end;
27010     +      /* Target Values */
27011     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
27012     +        textall=strip(textall)||"0A"x||strip(probtext);
27013     +      %end;
27015     +      /* include profit or loss for all target levels */
27016     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
27017     +        textall=strip(textall)||"0A"x||strip(profittext);
27018     +      %end;
27020     +      %if &validFlag eq N %then %do;
27021     +        /* Percent Correct */
27022     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
27023     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
27024     +        %end;
27026     +         /* Count */
27027     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
27028     +          %if "&adjusted" eq "N" %then %do;
27029     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
27030     +          %end;
27031     +          %else %do;
27032     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
27033     +          %end;
27034     +         %end;
27035     +      %end;
27036     +      %else %do;
27037     +        /* Percent Correct */
27038     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
27039     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
27040     +        %end;
27042     +         /* Count */
27043     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
27044     +          %if "&adjusted" eq "N" %then %do;
27045     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
27046     +          %end;
27047     +          %else %do;
27048     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
27049     +          %end;
27050     +         %end;
27051     +      %end;
27053     +      /* nodecolor */
27054     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
27055     +       %if &multipleTar ne Y %then %do;
27056     +        nodecolor=&predTarget;
27057     +       %end;
27058     +       %else %do;
27059     +         nodecolor=percentcorrect;
27060     +       %end;
27061     +      %end;
27062     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
27063     +        nodecolor=percentcorrect;
27064     +      %end;
27065     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
27066     +        nodecolor=1;
27067     +      %end;
27068     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
27069     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
27070     +          nodecolor=percentcorrect;
27071     +        %end;
27072     +        %else %do;
27073     +          nodecolor=profitloss;
27074     +        %end;
27075     +      %end;
27077     +    end;
27078     +    %end;
27079     +    %if &em_intTarget eq Y %then %do;
27080     +     drop  PREDICTION  TARGET TARLEVEL
27081     +     %if &ValidFlag eq Y %then %do;
27082     +         VPREDICTION
27083     +     %end;
27084     +     ;
27085     +    %end;
27086     +    %if &em_classTarget eq Y %then %do;
27087     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
27088     +     %if &ValidFlag eq Y %then %do;
27089     +         VSTATVALUE
27090     +     %end;
27091     +     ;
27092     +    %end;
27094     +  run;
27096     +  /* add leaf index information to plotds - based on primary target only*/
27097     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27098     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
27099     +      set &EM_USER_OUTSTATS;
27100     +      if ((statname="PROBABILITY"
27101     +      %if &validexist %then %do;
27102     +       or statname="VALID: PROBABILITY"
27103     +      %end;
27104     +      ) AND (CATEGORY="&TARGETEVENT")
27105     +      %if "&multipleTar" eq "Y" %then %do;
27106     +        AND (Target="%EM_TARGET")
27107     +      %end;
27108     +      );
27109     +    run;
27111     +    %if &validexist %then %do;
27112     +      proc sort data=tempprob; by node; run;
27113     +      %let vpredTarget = V%substr(&predTarget, 2);
27114     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
27115     +         by node;
27116     +         id statname;
27117     +      run;
27118     +    %end;
27119     +  %end;
27120     +  %else %do;
27121     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
27122     +      set &EM_USER_OUTSTATS;
27123     +      if ((statname="PREDICTION"
27124     +      %if &validexist %then %do;
27125     +       or statname="VALID: PREDICTION"
27126     +      %end;
27127     +      )
27128     +      %if "&multipleTar" eq "Y" %then %do;
27129     +        AND (Target="%EM_TARGET")
27130     +      %end;
27131     +      );
27132     +    run;
27133     +    %if &validexist %then %do;
27134     +      proc sort data=tempprob; by node; run;
27135     +      %let vpredTarget = V%substr(&predTarget, 2);
27136     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
27137     +         by node;
27138     +         id statname;
27139     +      run;
27140     +    %end;
27141     +  %end;
27143     +  proc sort data=tempprob; by node; run;
27144     +  data tempoutnodes;
27145     +    merge tempoutnodes tempprob;
27146     +    by node;
27147     +  run;
27149     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
27150     +  data tempnodes;
27151     +    retain traintotal validtotal;
27152     +    set tempnodes(where=(leaf ne . ));
27153     +    tprob=round(&predTarget, .01);
27154     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27155     +      percevent_train=round(tprob*100, .01);
27156     +    %end;
27157     +    %else %do;
27158     +      percevent_train=tprob;
27159     +    %end;
27161     +    perc_train=round((n/traintotal)*100, 0.01);
27162     +    /* leafwidth already has a *10 multiplier */
27163     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
27165     +    %if &validexist %then %do;
27166     +      %let vpredTarget = V%substr(&predTarget,2);
27167     +      vprob=round(&vpredTarget, .01);
27168     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27169     +        percevent_valid=round(vprob*100, .01);
27170     +      %end;
27171     +      %else %do;
27172     +        percevent_valid=vprob;
27173     +      %end;
27174     +      perc_valid=round((vn/validtotal)*100, .01);
27175     +    %end;
27177     +    index=_N_;
27178     +    keep node index tprob perc_train percevent_train
27179     +    %if &validexist %then %do;
27180     +        vprob percevent_valid perc_valid
27181     +    %end;
27182     +    ;
27183     +  run;
27184     +  proc sort data=tempnodes; by node; run;
27185     +  data &EM_USER_TREE_PLOT;
27186     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
27187     +    by node;
27188     +    if missing(node) then delete;
27189     +    %if &oldexists %then %do;
27190     +      if missing(nodecolor) then nodecolor=oldnodecolor;
27191     +      drop oldnodecolor;
27192     +    %end;
27193     +    abovetext = compbl(abovetext);
27195     +    /* add variable labels */
27196     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
27197     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
27198     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
27199     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
27200     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
27201     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
27203     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27204     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
27205     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
27206     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
27207     +          %end;
27208     +          %else %do;
27209     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
27210     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
27211     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
27212     +          %end;
27213     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
27215     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
27216     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
27217     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27218     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
27219     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
27220     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
27221     +          %end;
27222     +          %else %do;
27223     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
27224     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
27225     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
27226     +          %end;
27227     +    ;
27228     +  run;
27230     +  /* delete temporary tables */
27231     +  proc datasets lib=work nolist;
27232     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
27233     +  run;
27235     +%mend em_tree_makePlotDs;
27239     +%macro em_tree_report;
27241     +   /* report properties */
27242     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
27243     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
27244     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
27245     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
27246     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
27247     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
27248     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
27249     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
27250     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
27251     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
27252     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
27253     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
27254     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
27256     +   %let validexist=0;
27257     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
27258     +     %let validexist=1;
27259     +   %end;
27261     +   /* determine if multiple targets will be processed */
27262     +   %let em_tree_multipleTargets=N;
27263     +   %let em_tree_numTarget=1;
27264     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
27265     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
27266     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
27267     +         %let em_tree_multipleTargets=N;
27268     +      %end;
27269     +      %else %do;
27270     +        data _null_;
27271     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
27272     +          if eof then
27273     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
27274     +        run;
27276     +        %if &em_tree_numTarget gt 1 %then %do;
27277     +           %let em_tree_multipleTargets=Y;
27278     +        %end;
27279     +     %end;
27280     +   %end;
27282     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
27284     +   /* variable importance */
27285     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
27286     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
27288     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
27289     +     /* and the columns may not be generated                                                                                 */
27290     +     %let em_tree_cvexists=;
27291     +     %let em_tree_surrexists=.;
27292     +     data _null_;
27293     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
27294     +       if eof then do ;
27295     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
27296     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
27297     +       end;
27298     +     run;
27300     +     data &EM_USER_OUTIMPORT;
27301     +         set &EM_USER_OUTIMPORT;
27302     +         /* format columns based on Precison value specified */
27303     +         format importance 15.&EM_PROPERTY_PRECISION
27304     +              %if &validexist %then %do;
27305     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
27306     +              %end;
27307     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
27308     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
27309     +              %end;
27310     +         ;
27311     +     run;
27313     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
27314     +     proc print data=&EM_USER_OUTIMPORT
27315     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
27316     +          (where=((nrules>0) OR (nsurrogates>0)))
27317     +        %end;
27318     +        %else %do;
27319     +           (where=(nrules>0))
27320     +        %end;
27321     +        label noobs
27322     +        ;
27323     +     run;
27324     +     title10;
27326     +   %end;
27328     +   /* Sequence */
27329     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
27330     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
27331     +   data _null_ ;
27332     +      set &EM_USER_outseq (obs=2) end=eof ;
27333     +      if eof then do ;
27334     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
27335     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
27336     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
27337     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
27338     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
27339     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
27340     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
27341     +      end;
27342     +    run;
27344     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
27345     +      data &EM_USER_OUTSEQ;
27346     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
27347     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
27348     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27349     +           _XMISC_=_VMISC_
27350     +        %end;
27351     +        %if "&em_tree_aprof" ne "."  %then %do;
27352     +           _XAPROF_=_VAPROF_
27353     +           _XPROF_ = _VPROF_
27354     +        %end;
27355     +        %if "&em_tree_aloss" ne "."  %then %do;
27356     +           _XALOSS_=_VALOSS_
27357     +        %end;
27358     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
27359     +           _XPASE_ = _VPASE_
27360     +           _XPMISC_ = _VPMISC_
27361     +        %end;
27363     +        ));
27364     +     %end;
27365     +     %else %do;
27366     +        set &EM_USER_OUTSEQ;
27367     +     %end;
27369     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
27370     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27371     +            _MISC_   15.&EM_PROPERTY_PRECISION
27372     +         %end;
27373     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
27374     +            _PASE_  15.&EM_PROPERTY_PRECISION
27375     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
27376     +         %end;
27377     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
27378     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
27379     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27380     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
27381     +            %end;
27382     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
27383     +              _VPASE_  15.&EM_PROPERTY_PRECISION
27384     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
27385     +            %end;
27386     +         %end;
27387     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
27388     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
27389     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27390     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
27391     +            %end;
27392     +         %end;
27393     +         %if "&em_tree_seq" ne "." %then %do;
27394     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
27395     +         %end;
27396     +         %if "&em_tree_vseq" ne "." %then %do;
27397     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
27398     +         %end;
27399     +         %if "&em_tree_aprof" ne "." %then %do;
27400     +           _APROF_ 15.&EM_PROPERTY_PRECISION
27401     +           _PROF_ 15.&EM_PROPERTY_PRECISION
27402     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
27403     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
27404     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
27405     +           %end;
27406     +         %end;
27407     +         %else %if "&em_tree_aloss" ne "." %then %do;
27408     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
27409     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
27410     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
27411     +           %end;
27412     +         %end;
27413     +      ;
27414     +    run;
27415     +   %end;
27417     +   /* Observation Based Importance */
27418     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
27420     +      /* need to check for 0 obs */
27421     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
27422     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
27423     +      %let rc=%sysfunc(close(&dsid));
27425     +      %if &onobs %then %do;
27426     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
27427     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
27429     +         data &EM_USER_OUTOBSIMP;
27430     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
27431     +           if _a;
27432     +           by _INPUT1_;
27433     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
27434     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
27435     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
27436     +                   %end;
27437     +                   ;
27438     +         run;
27439     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
27440     +      %end;
27441     +   %end;
27443     +  %end;
27445     +  /* create dataset to support tree diagram and icicle plot */
27446     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
27447     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
27449     +  /* display tree diagram */
27450     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
27451     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
27453     +  /* display icicle diagram */
27454     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
27455     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
27457     +  /* Leaf Statistics Plot */
27458     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
27460     +  /* print leaf information to output window */
27461     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
27463     +     proc sort data=&EM_USER_TREE_PLOT out=t;
27464     +       by descending N;
27465     +     run;
27467     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
27468     +     %local vn;
27469     +     data _null_;
27470     +       set t (obs=2) end=eof;
27471     +       if eof then do;
27472     +         call symput("vn", strip(put(vn, best.)));
27473     +       end;
27474     +     run;
27476     +     data t;
27477     +       set t;
27478     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
27479     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
27480     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
27481     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
27482     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
27483     +       %end;
27484     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
27485     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
27486     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
27487     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
27488     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
27489     +          %end;
27490     +       %end;
27491     +       ;
27492     +     run;
27494     +     /* determine if rase is found in t */
27495     +    %let dsid=%sysfunc(open(t,i));
27496     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
27497     +    %let rc=%sysfunc(close(&dsid));
27499     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
27500     +     proc print data=t noobs label;
27501     +       where tprob ne .;
27502     +       var node depth N tprob
27503     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
27504     +         %if "&vn" ne "." %then %do;
27505     +           VN
27506     +         %end;
27507     +         vprob
27508     +       %end;
27509     +       %if &raseexists %then %do;
27510     +            RASE
27511     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
27512     +              VRASE
27513     +            %end;
27514     +       %end;
27515     +       ;
27516     +     run;
27517     +     title10;
27518     +  %end;
27520     +  /* create plots that are done during training of node */
27521     +  /* display iterative plot, including reference line */
27522     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
27523     +   /* %if &nleaves eq  %then %do; */
27524     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
27525     +      data _null_;
27526     +        set &EM_USER_OUTTOPOLOGY end=eof;
27527     +        if eof then do;
27528     +          call symput('nleaves', LEAF);
27529     +        end;
27530     +      run;
27531     +   /* %end; */
27533     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
27534     +    /*%EM_REPORT(view=1, Y=_ASE_); */
27535     +  %end;
27537     +  /* display leaf statistics */
27538     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
27540     +  /* stats by node if multiple targets = Y */
27541     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
27542     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
27543     +    data &EM_USER_OUTSTATS;
27544     +      set &EM_USER_OUTSTATS;
27546     +     * if STATNAME="TARGET" then delete;
27547     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
27548     +      drop leaf;
27549     +    run;
27550     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
27552     +  %end;
27553     +  %else %do;
27554     +    /* add outstats and outdescribe to spk but not results */
27555     +    %EM_REPORT(viewtype=, key=OUTSTATS);
27556     +  %end;
27558     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS3.Tree3_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS3.Tree3_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   set EMWS3.Tree3_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE3_OUTIMPORT.
NOTE: The data set EMWS3.TREE3_OUTIMPORT has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Importancia de la variable";
MPRINT(EM_TREE_REPORT):   proc print data=EMWS3.Tree3_OUTIMPORT (where=(nrules>0)) label noobs ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.TREE3_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_ ;
MPRINT(EM_TREE_REPORT):   set EMWS3.Tree3_OUTSEQ (obs=2) end=eof ;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vase" , strip(put(_VASE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_seq" , strip(put(_SEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vseq" , strip(put(_VSEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_prior" , strip(put(_PASE_, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE3_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS3.Tree3_OUTSEQ;
MPRINT(EM_TREE_REPORT):   set EMWS3.Tree3_OUTSEQ;
MPRINT(EM_TREE_REPORT):   format _ASE_ _ASSESS_ _MAX_ _SSE_ _RASE_ 15.4
MPRINT(EM_TREE_REPORT):   _MISC_ 15.4 _VASE_ _VASSESS_ _VMAX_ _VSSE_ _VRASE_ 15.4
MPRINT(EM_TREE_REPORT):   _VMISC_ 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 22 observations read from the data set EMWS3.TREE3_OUTSEQ.
NOTE: The data set EMWS3.TREE3_OUTSEQ has 22 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Ids_BAD_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Ids_BAD_DM(where=(_TYPE_="PREDICTED" AND LEVEL="1"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predTarget', strip(VARIABLE));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predLvl', strip(LEVEL));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.IDS_BAD_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   merge belowtext belowtext2(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then belowtext=belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 27 observations read from the data set EMWS3.TREE3_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 27 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set abovetext(rename=(node=parent));
MPRINT(EM_TREE_MAKEPLOTDS):   by parent numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   retain abovetext tempstring flag branch origval origchar ;
MPRINT(EM_TREE_MAKEPLOTDS):   length abovetext $256;
MPRINT(EM_TREE_MAKEPLOTDS):   length tempstring origchar $64;
MPRINT(EM_TREE_MAKEPLOTDS):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent AND last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 0;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag=1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   keep parent branch abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 27 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTRULES;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_TREE_MAKEPLOTDS):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 402 observations read from the data set EMWS3.TREE3_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 24 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS3.Tree3_OUTNODES out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set EMWS3.TREE3_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   length traintotal validtotal 8;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ^MISSING(abovetext) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= strip(abovetext)||" Falta Or";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = " Sólo valores ausentes";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if MISSING(abovetext) then abovetext="Valores no ausentes";
MPRINT(EM_TREE_MAKEPLOTDS):   if node=1 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   traintotal = N;
MPRINT(EM_TREE_MAKEPLOTDS):   validtotal=VN;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop role rank stat misschar belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 24 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 12 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_ ;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTSTATS(where=(STATNAME="NPRIORS")) end=eof ;
MPRINT(EM_TREE_MAKEPLOTDS):   if eof then do ;
MPRINT(EM_TREE_MAKEPLOTDS):   call symput("npriors" , strip(put(_N_,best.))) ;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS3.TREE3_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptarmeta;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_VariableSet(where=(ROLE='TARGET' AND LEVEL^='ORDINAL' AND USE in ('D', 'Y') ));
MPRINT(EM_TREE_MAKEPLOTDS):   length TARGET $32;
MPRINT(EM_TREE_MAKEPLOTDS):   Target=name;
MPRINT(EM_TREE_MAKEPLOTDS):   keep target level;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE3_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   length target $32 tarlevel $10;
MPRINT(EM_TREE_MAKEPLOTDS):   target=
MPRINT(EM_TREE_MAKEPLOTDS):  "BAD";
MPRINT(EM_TREE_MAKEPLOTDS):   tarlevel=
MPRINT(EM_TREE_MAKEPLOTDS):  "BINARY";
MPRINT(EM_TREE_MAKEPLOTDS):   keep node target tarlevel;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 175 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 175 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused nodupkey;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 175 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 150 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS3.Tree3_OUTSTATS out=tempoutstats;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 175 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 175 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempinterval tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutstats temptargetused( rename=(target=targetused));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel="INTERVAL" then output tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   else output tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 175 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_intNobs from tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_classNobs from tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 175 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET ) tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY )
temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
MPRINT(EM_TREE_MAKEPLOTDS):   set tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="N") OR (statname="VALID: N")) then output tempn;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PREDICTION" then output temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PROBABILITY" then output tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="VALID: PROBABILITY" then output tempvprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 175 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 50 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_profitflag from tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_lossflag from temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempn out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 50 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob tempvprob(rename=(statvalue=vstatvalue));
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 50 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temppredict(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   percentCorrect = statvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   vpercentCorrect= vstatvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   label percentCorrect= "Porcentaje correcto" vpercentCorrect= "Porcentaje correcto válido" ;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(percentCorrect) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   drop target;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep= node probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   length probtext $800;
MPRINT(EM_TREE_MAKEPLOTDS):   retain probtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS3.Tree3_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   length textall $800;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes temptargetused tempn temppredict tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   textall="";
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel^="INTERVAL" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Id de nodo: "||"09"x||strip(Node);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Estadístico "||"09"x||"Entrenamiento" ||"09"x|| "Validación";
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||strip(probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||" Número: "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
MPRINT(EM_TREE_MAKEPLOTDS):   nodecolor=percentcorrect;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop CATEGORY PROBTEXT TARGET TARLEVEL STATVALUE VSTATVALUE ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 25 observations read from the data set WORK.TEMPN.
NOTE: There were 25 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE3_TREE_PLOT has 25 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep=node statname statvalue rename=(statvalue=P_BAD1));
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS3.Tree3_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="PROBABILITY" or statname="VALID: PROBABILITY" ) AND (CATEGORY="1") );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 175 observations read from the data set EMWS3.TREE3_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 50 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=P_BAD1 VALID__PROBABILITY=V_BAD1));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 50 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 25 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 25 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 25 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by descending P_BAD1;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 25 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempnodes(where=(leaf ne . ));
MPRINT(EM_TREE_MAKEPLOTDS):   tprob=round(P_BAD1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_train=round(tprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_train=round((n/traintotal)*100, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   vprob=round(V_BAD1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_valid=round(vprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_valid=round((vn/validtotal)*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   index=_N_;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node index tprob perc_train percevent_train vprob percevent_valid perc_valid ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 1289:94    1 at 1293:102   1 at 1293:113
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 13 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS3.Tree3_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   merge EMWS3.Tree3_TREE_PLOT tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(node) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = compbl(abovetext);
MPRINT(EM_TREE_MAKEPLOTDS):   label textall = "Todo el texto" parent = "Id padre" node = "Id de nodo" abovetext = "Por encima del texto" traintotal = "Total de entrenamiento" nodecolor =
MPRINT(EM_TREE_MAKEPLOTDS):   "Color del nodo" tprob = "Porcentaje de entrenamiento 1" percevent_train = "Porcentaje de evento" perc_train = "Casos de porcentaje" index = "Índice" validtotal = "Total válido" VN =
MPRINT(EM_TREE_MAKEPLOTDS):   "Validar: número de observaciones" vprob = "Porcentaje de validación 1" perc_valid = "Validar: Casos de porcentaje" percevent_valid = "Validar: Porcentaje de evento" ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 25 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: There were 13 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE3_TREE_PLOT has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEPLOTDS):   delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
MPRINT(EM_TREE_REPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DTree";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TREE";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "ABOVETEXT";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "BELOWTEXT";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "LINKWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02293794696356;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Icicle";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ICICLE";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
The SAS System
 
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44188119584782;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "AREABAR";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "VARWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "PERCEVENT_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "PERC_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.05237032102996;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   proc sort data=EMWS3.Tree3_TREE_PLOT out=t;
MPRINT(EM_TREE_REPORT):   by descending N;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 25 observations read from the data set EMWS3.TREE3_TREE_PLOT.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set t (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput("vn", strip(put(vn, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data t;
MPRINT(EM_TREE_REPORT):   set t;
MPRINT(EM_TREE_REPORT):   label N= "Observaciones de entrenamiento" DEPTH=
MPRINT(EM_TREE_REPORT):   "Profundidad" VN=
MPRINT(EM_TREE_REPORT):   "Observaciones de validación" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 25 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 25 observations and 37 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Informe de hoja de árbol";
MPRINT(EM_TREE_REPORT):   proc print data=t noobs label;
MPRINT(EM_TREE_REPORT):   where tprob ne .;
MPRINT(EM_TREE_REPORT):   var node depth N tprob VN vprob ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 13 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS3.Tree3_OUTTOPOLOGY end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput('nleaves', LEAF);
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 25 observations read from the data set EMWS3.TREE3_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSEQ";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "ITERATIONPLOT";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBTREE";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "13";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.91719823792446;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "RESPONSEBAR";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "INDEX ne .";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LEAFSTATS";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "INDEX";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "tprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "vprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSTATS";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.11318285628835;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Tree3;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27559
27560      *------------------------------------------------------------*;
27561      * End REPORT: Tree3;
27562      *------------------------------------------------------------*;
 
27563      /* Reset EM Options */
27564      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
27565      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
27566      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
27567      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
27568      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
27569      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
27570      proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
27571      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
27572      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
27573      proc sort data=EMWS3.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Tree3_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
27574      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
27575      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set EMWS3.TREE3_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 14 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27576      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
27577      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
27578      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
27579      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 14 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 14 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 14 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27580      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
27581      set EMWS3.Tree3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_CMeta_TRAIN;
27582      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
27583      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27584      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
27585      set EMWS3.Tree3_TRAIN(keep=
27586      F_BAD
27587      I_BAD
27588      P_BAD0
27589      P_BAD1
27590      Q_BAD0
27591      Q_BAD1
27592      R_BAD0
27593      R_BAD1
27594      U_BAD
27595      V_BAD0
27596      V_BAD1
27597      _WARN_
27598      BAD
27599      );
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_TRAIN(keep= F_BAD I_BAD P_BAD0 P_BAD1 Q_BAD0 Q_BAD1 R_BAD0 R_BAD1 U_BAD V_BAD0 V_BAD1 _WARN_ BAD );
27600      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS3.TREE3_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2979 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Tree3_1SKNBC3 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree3_1SKNBC3;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo de resultado";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label TARGET = "Variable target";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Texto correcto";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correcto";
MPRINT(EM_DIAGRAM):   set WORK.Tree3_1SKNBC3(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correcto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrecto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS3.Tree3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree3_1SKNBC3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree3_1SKNBC3;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS3.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: todas las probabilidades posteriores son valores ausentes ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1993957704 _NEVENTS 594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2979/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2979/20) ) / ( AVGNUMRESP / (2979/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2979/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2979/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Evento" DECILE = "Profundidad" BIN = "Clase" NUMOBS = "Número de observaciones" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Clase" N = "Número de observaciones" P_LABEL = "Rango de la probabilidad posterior" EVENT = "Evento" LOWPOSTERIOR = "Probabilidad posterior del límite inferior" PERCENTAGEOFEVENTS = "Porcentaje de eventos"
CUMULATIVEPERCENTAGEOFNONEVENTS = "Porcentaje acumulado de no eventos" CUMULATIVEPERCENTAGE = "Porcentaje acumulado" PERCENTAGEOFEVENTS = "Porcentaje de eventos" PERCENTAGEOFNONEVENTS = "Porcentaje de no eventos" CUMULATIVEPERCENTAGEOFEVENTS = "Porcentaje
acumulado de eventos" UPPOSTERIOR = "Probabilidad posterior del límite superior" NUMBEROFEVENTS = "Número de eventos" PERCENTAGE = "Porcentaje" NUMBEROFNONEVENTS = "Número de no eventos" _MEANP_ = "Probabilidad posterior de la media" _MINP_ =
"Probabilidad posterior mín" _MAXP_ = "Probabilidad posterior máx" SCORE = "Puntuación del modelo" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Probabilidad posterior máx" _MINP_ = "Probabilidad posterior mín" _MEANP_ = "Probabilidad posterior de la media" BASECAP = "Respuesta capturada % básica" BASECAPC = "Respuesta capturada % acumulada básica"
BASENUMBEROFEVENTS = "Número de eventos básicos" BASEGAIN = "Ganancia básica" BASELIFT = "Mejora básica" BASELIFTC = "Mejora acumulada básica" BASERESP = "Respuesta % básica" BASERESPC = "Respuesta % acumulada básica" BASELIFTC = "Mejora acumulada básica"
BESTCAP = "Mejor respuesta % capturada" BESTCAPC = "Mejor respuesta capturada % acumulada" BESTGAIN = "Mejor ganancia" BESTRESP = "Mejor % respuesta" BESTRESPC = "Mejor respuesta % acumulada" BESTLIFT = "Mejor mejora" BESTLIFTC = "Mejor mejora acumulada"
BESTNUMBEROFEVENTS = "Número de mejores eventos" CAP = "Respuesta capturada %" CAPC = "Respuesta capturada % acumulada" DECILE = "Profundidad" GAIN = "Ganancia" LIFT = "Mejora" LIFTC = "Mejora acumulada" NUMNEVENT = "Número de no eventos" N = "Número de
observaciones" EVENT = "Evento" RESPC = "Respuesta % acumulada" NUMBEROFEVENTS = "Número de eventos" RESP = "Respuesta %" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
31878      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
31879      set EMWS3.Tree3_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_CMeta_TRAIN;
31880      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
31881      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS3.TREE3_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
31882      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
31883      set EMWS3.Tree3_VALIDATE(keep=
31884      F_BAD
31885      I_BAD
31886      P_BAD0
31887      P_BAD1
31888      Q_BAD0
31889      Q_BAD1
31890      R_BAD0
31891      R_BAD1
31892      U_BAD
31893      V_BAD0
31894      V_BAD1
31895      _WARN_
31896      BAD
31897      );
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_VALIDATE(keep= F_BAD I_BAD P_BAD0 P_BAD1 Q_BAD0 Q_BAD1 R_BAD0 R_BAD1 U_BAD V_BAD0 V_BAD1 _WARN_ BAD );
31898      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE3_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 1788 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS3.TREE3_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Tree3_289CSEE nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree3_289CSEE;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Tipo de resultado";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos";
MPRINT(EM_DIAGRAM):   label TARGET = "Variable target";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Texto correcto";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correcto";
MPRINT(EM_DIAGRAM):   set WORK.Tree3_289CSEE(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correcto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrecto";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS3.Tree3_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMCLASSIFICATION WORK.Tree3_289CSEE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree3_289CSEE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS3.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: todas las probabilidades posteriores son valores ausentes ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1996644295 _NEVENTS 357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0 OVLMAX 1 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / ( AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Evento" DECILE = "Profundidad" BIN = "Clase" NUMOBS = "Número de observaciones" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Clase" N = "Número de observaciones" P_LABEL = "Rango de la probabilidad posterior" EVENT = "Evento" LOWPOSTERIOR = "Probabilidad posterior del límite inferior" PERCENTAGEOFEVENTS = "Porcentaje de eventos"
CUMULATIVEPERCENTAGEOFNONEVENTS = "Porcentaje acumulado de no eventos" CUMULATIVEPERCENTAGE = "Porcentaje acumulado" PERCENTAGEOFEVENTS = "Porcentaje de eventos" PERCENTAGEOFNONEVENTS = "Porcentaje de no eventos" CUMULATIVEPERCENTAGEOFEVENTS = "Porcentaje
acumulado de eventos" UPPOSTERIOR = "Probabilidad posterior del límite superior" NUMBEROFEVENTS = "Número de eventos" PERCENTAGE = "Porcentaje" NUMBEROFNONEVENTS = "Número de no eventos" _MEANP_ = "Probabilidad posterior de la media" _MINP_ =
"Probabilidad posterior mín" _MAXP_ = "Probabilidad posterior máx" SCORE = "Puntuación del modelo" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Probabilidad posterior máx" _MINP_ = "Probabilidad posterior mín" _MEANP_ = "Probabilidad posterior de la media" BASECAP = "Respuesta capturada % básica" BASECAPC = "Respuesta capturada % acumulada básica"
BASENUMBEROFEVENTS = "Número de eventos básicos" BASEGAIN = "Ganancia básica" BASELIFT = "Mejora básica" BASELIFTC = "Mejora acumulada básica" BASERESP = "Respuesta % básica" BASERESPC = "Respuesta % acumulada básica" BASELIFTC = "Mejora acumulada básica"
BESTCAP = "Mejor respuesta % capturada" BESTCAPC = "Mejor respuesta capturada % acumulada" BESTGAIN = "Mejor ganancia" BESTRESP = "Mejor % respuesta" BESTRESPC = "Mejor respuesta % acumulada" BESTLIFT = "Mejor mejora" BESTLIFTC = "Mejor mejora acumulada"
BESTNUMBEROFEVENTS = "Número de mejores eventos" CAP = "Respuesta capturada %" CAPC = "Respuesta capturada % acumulada" DECILE = "Profundidad" GAIN = "Ganancia" LIFT = "Mejora" LIFTC = "Mejora acumulada" NUMNEVENT = "Número de no eventos" N = "Número de
observaciones" EVENT = "Evento" RESPC = "Respuesta % acumulada" NUMBEROFEVENTS = "Número de eventos" RESP = "Respuesta %" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Etiqueta target";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
36185      %let _cn = %sysfunc(getoption(CENTER));
36186      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
36187      proc print data=EMWS3.Tree3_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Tree3_EMREPORTFIT noobs label;
36188      var STAT LABEL TRAIN
36189      VALIDATE
36190      TEST
36191      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
36192      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
36193      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
36194      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Estadísticos de ajuste";
MPRINT(EM_DIAGRAM):   run;
36195      run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36196      title10;
MPRINT(EM_DIAGRAM):   title10;
36197      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
36198      proc sort data=EMWS3.Tree3_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS3.Tree3_EMCLASSIFICATION nothreads;
36199      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
36200      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE3_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36201      %let _cn = %sysfunc(getoption(CENTER));
36202      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
36203      proc print data=EMWS3.Tree3_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Tree3_EMCLASSIFICATION noobs label;
36204      var from into pct_row pct_col count percent
36205      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
36206      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
36207      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
36208      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Resultado";
36209      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Porcentaje del target";
36210      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Porcentaje resultado";
36211      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Número de ocurrencias";
36212      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Porcentaje total";
36213      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
36214      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
36215      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Tabla de clasificación";
MPRINT(EM_DIAGRAM):   run;
36216      run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE3_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
36217      title9;
MPRINT(EM_DIAGRAM):   title9;
36218      title10;
MPRINT(EM_DIAGRAM):   title10;
36219      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
36220      %let _cn = %sysfunc(getoption(CENTER));
36221      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
36222      data EMWS3.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS3.Tree3_EMEVENTREPORT;
36223      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
36224      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
36224    ! FALSEEVENT
36225      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
36226         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Rol de los datos" TARGET = "Target" TARGETLABEL = "Etiqueta target" FALSEEVENT = "Falso positivo" FALSENEVENT = "Falso negativo" TRUEEVENT = "Verdadero positivo" TRUENEVENT = "Verdadero negativo";
36227      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
36228      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
36229      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
36230      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
36231      set EMWS3.Tree3_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS3.Tree3_EMEVENTREPORT;
36232      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE3_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE3_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
36233      proc print data=EMWS3.Tree3_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Tree3_EMEVENTREPORT noobs label;
36234      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
36235      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Tabla de evento de clasificación";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
36236      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
36237      run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE3_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36238      title10;
MPRINT(EM_DIAGRAM):   title10;
36239      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
36240      proc datasets library=EMWS3 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS3 nolist;
36241      modify Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree3_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Variable target";
36242      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Rol de los datos";
36243      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
36244      run;
 
NOTE: MODIFY was successful for EMWS3.TREE3_EMRANK.DATA.
36245      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
36246      %let _cn = %sysfunc(getoption(CENTER));
36247      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
36248      proc print data=EMWS3.Tree3_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Tree3_EMRANK label noobs;
36249      var
36250      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
36251      by
36252      notsorted DATAROLE
36253      notsorted TARGET
36254      notsorted TARGETLABEL
36255      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
36256      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
36257      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Clasificaciones de puntuación de evaluación";
MPRINT(EM_DIAGRAM):   run;
36258      run;
 
NOTE: There were 40 observations read from the data set EMWS3.TREE3_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36259      title10;
MPRINT(EM_DIAGRAM):   title10;
36260      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
36261      proc datasets library=EMWS3 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS3 nolist;
36262      modify Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree3_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Variable target";
36263      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Rol de los datos";
36264      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
36265      run;
 
NOTE: MODIFY was successful for EMWS3.TREE3_EMSCOREDIST.DATA.
36266      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS3.Tree3_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Distribución de puntuación de evaluación";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
