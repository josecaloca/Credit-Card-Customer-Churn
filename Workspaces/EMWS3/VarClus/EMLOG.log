*------------------------------------------------------------*
Usuario:                Jose Caloca
Fecha:                14 de marzo de 2021
Hora:                13H51
Sitio:                70115216
Plataforma:            X64_10PRO
Versión de mantenimiento: 9.04.01M6P111518
Versión de EM:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de entrenamiento";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de entrenamiento
Fecha:                14 de marzo de 2021
Hora:                13H51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2BMU1J5 "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2BMU1J5 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Sitio:                70115216";
MPRINT(EM_DIAGRAM):   put "Plataforma:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Versión de mantenimiento: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "Versión de EM:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "Usuario:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de entrenamiento";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida de puntuación";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Salida del informe";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
97308      proc freq data=EMWS3.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS3.VarClus_VariableSet noprint;
97309      table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
97310      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 11 observations read from the data set EMWS3.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
97311      proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
97312      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
97313      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Rol" LEVEL = "Nivel de medida" COUNT = "Número de ocurrencias";
97314      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
97315      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Resumen de variables";
MPRINT(EM_DIAGRAM):   run;
97316      run;
 
NOTE: There were 5 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 35.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
97317      title10;
MPRINT(EM_DIAGRAM):   title10;
97318      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'decision_tree';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS3.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97672      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97673      * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
97674      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
97675      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
97676      %let EMEXCEPTIONSTRING=;
97677      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
97678      * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
97679      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
97680      %let EM_ACTION = TRAIN;
97681      %let syscc = 0;
97682
97683      %macro main;
97684
97685         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
97686         %include temp;
97687         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
97688         %include temp;
97689         filename temp;
97690
97691        %SetProperties;
97692
97693         %if %upcase(&EM_ACTION) = CREATE %then %do;
97694             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
97695             %include temp;
97696             filename temp;
97697             %create;
97698         %end;
97699         %else
97700         %if %upcase(&EM_ACTION) = TRAIN %then %do;
97701              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
97702                 %include temp;
97703                 filename temp;
97704                 %train;
97705         %end;
97706         %else
97707         %if %upcase(&EM_ACTION) = SCORE %then %do;
97708                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
97709                 %include temp;
97710                 filename temp;
97711                 %score;
97712         %end;
97713         %else
97714         %if %upcase(&EM_ACTION) = REPORT %then %do;
97715                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
97716                 %include temp;
97717                 filename temp;
97718                 %report;
97719         %end;
97720         /*
97721         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
97722             %put 'OPENING TABLE';
97723         %end;
97724         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
97725             %put 'CLOSE TABLE';
97726         %end;
97727         */
97728      %mend main;
97729      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
97730     +
97731     +/* Initialize property macro variables */
97732     +%macro SetProperties;
97733     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
97734     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
97735     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
97736     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
97737     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
97738     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
97739     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
97740     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
97741     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
97742     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
97743     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
97744     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
97745     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
97746     +
97747     +%mend SetProperties;
97748     +
97749     +%Macro MakeDummyVariables(indata=,
97750     +                          outvar=,
97751     +                          outdata=,
97752     +                          fileref=,
97753     +                          recreatecmeta=N, /* optional */
97754     +                          incmeta=,     /* optional */
97755     +                          outcmeta=,    /* optional */
97756     +                          ndummyvars=_ndummyvars
97757     +                          );
97758     +    %global &ndummyvars;
97759     +
97760     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
97761     +       class
97762     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
97763     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
97764     +    ;
97765     +    run;
97766     +    %let &ndummyvars = 0;
97767     +    data _null_;
97768     +    %let dsid = %sysfunc(open(work._classout));
97769     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
97770     +    %let dsid = %sysfunc(close(&dsid));
97771     +    run;
97772     +
97773     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
97774     +       input
97775     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
97776     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
97777     +        / level=nominal stdize=no;
97778     +       make outvar = &outvar;
97779     +       score data = &indata out =&outdata;
97780     +       code  file=  "&fileref";
97781     +    run;
97782     +    %if &recreatecmeta eq Y %then %do;
97783     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
97784     +    data _tmpds;
97785     +        set _tmpds;
97786     +           ROLE = 'INPUT';
97787     +           LEVEL = 'INTERVAL';
97788     +           CREATOR='DMZIP';
97789     +           if NAME = '_TYPE_' then delete;
97790     +    run;
97791     +    data &outcmeta;
97792     +         set &incmeta _tmpds;
97793     +    run;
97794     +    %end;
97795     +    proc datasets lib=work nolist;
97796     +      delete  _dmdbdat _dmdbcat _classout
97797     +    %if &recreatecmeta eq Y %then %do;
97798     +    _tmpds
97799     +    %end;
97800     +    ;
97801     +    quit;
97802     +%Mend MakeDummyVariables;
97803     +
97804     +/*--- Determine Optimal Number of Cluster ----
97805     +%macro FindClusNum(statds=, groupds=, minvariation=);
97806     +   %global optnclus;
97807     +   data varclus_tmp(drop=_NAME_);
97808     +      set &statDs;
97809     +      where _type_ ='PROPOR';
97810     +   run;
97811     +   proc sort data=varclus_tmp;
97812     +      by _NCL_;
97813     +   run;
97814     +   proc transpose data=varclus_tmp out=varclus_tmp;
97815     +      by _NCL_;
97816     +      var %EM_INTERVAL_INPUT
97817     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
97818     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
97819     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
97820     +          %do i = 2 %to &nvar;
97821     +          %let varname = %sysfunc(varname(&dsid, &i));
97822     +          &varname
97823     +          %end;
97824     +      %end;
97825     +   ;
97826     +   run;
97827     +
97828     +   %if &minVariation eq %then %do;
97829     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
97830     +   %end;
97831     +   %if ^(0<&minVariation<100) %then %do;
97832     +       %let minVariation = 90;
97833     +   %end;
97834     +
97835     +   data _null_;
97836     +      set varclus_tmp end=eof;
97837     +      by _NCL_;
97838     +      retain flag 0;
97839     +      if first._ncl_ then flag=0;
97840     +      if .<col1 < &minVariation then flag=1;
97841     +      if last._ncl_ and ^flag then do;
97842     +         call symput('OPTNCL', _ncl_);
97843     +         stop;
97844     +      end;
97845     +     if eof then call symput('OPTNCL', _ncl_);
97846     +   run;
97847     +
97848     +   %let optnclus = &OPTNCL;
97849     +
97850     +   data varclus_tmp(drop=_NCL_ _NAME_);
97851     +      set &statDs;
97852     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
97853     +   run;
97854     +   proc sort data=varclus_tmp;
97855     +      by _TYPE_;
97856     +   run;
97857     +   proc transpose data=varclus_tmp out=varclus_tmp;
97858     +      by _TYPE_;
97859     +   run;
97860     +   proc sort data=varclus_tmp;
97861     +      by _name_ _type_;
97862     +   run;
97863     +
97864     +  proc transpose data=varclus_tmp out=&groupds;
97865     +      by _NAME_;
97866     +   run;
97867     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
97868     +      by Cluster descending Rsquare;
97869     +      where Cluster ne 0;
97870     +   run;
97871     +   proc datasets lib=work nolist mt=(DATA VIEW);
97872     +      delete varclus_tmp;
97873     +   run;
97874     +   quit;
97875     +%mend findClusNum;
97876     +*/
97877     +
97878     +%macro getNclusfromTrain(inoutstat=, nc=);
97879     +%global &nc;
97880     +data _null_;
97881     +    set &inoutstat end=eof;
97882     +    if eof then do;
97883     +    call symput("&nc", _ncl_);
97884     +    end;
97885     +run;
97886     +%mend  getNclusfromTrain;
97887     +
97888     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
97889     +
97890     +     *--- Build Code to Modify Metadata ---*;
97891     +     filename X "&deltacodefile";
97892     +     data _null_;
97893     +        FILE X;
97894     +        set &groupds end=eof;
97895     +        /*by Cluster;*/
97896     +         if _N_=1 then do;
97897     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
97898     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
97899     +           %end;
97900     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
97901     +           put "if upcase(strip(NAME)) in (";
97902     +        end;
97903     +        if Strip(upcase(Selected)) eq 'YES' then do;
97904     +           string = '"'!!trim(left(VARIABLE))!!'"';
97905     +           put string;
97906     +        end;
97907     +        if eof then do;
97908     +           put ') then ROLE="INPUT";';
97909     +           put 'else ROLE="REJECTED";';
97910     +           put 'end;';
97911     +
97912     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
97913     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
97914     +           %end;
97915     +        end;
97916     +     run;
97917     +     quit;
97918     +
97919     +     filename X;
97920     +
97921     +     quit;
97922     +%mend MakeDeltaCode;
97923     +
97924     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
97925     +    %if ^%sysfunc(exist(&statds)) %then %do;
97926     +         %goto doendc;
97927     +    %end;
97928     +
97929     +    data &corrds(drop=_TYPE_ _NCL_) ;
97930     +       set &statds;
97931     +       where _type_ eq 'CORR' ;
97932     +    run ;
97933     +    proc sort data=&corrds;
97934     +       by _NAME_ ;
97935     +    run ;
97936     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
97937     +      BY _NAME_ ;
97938     +    run ;
97939     +    data &corrplotds;
97940     +       length _Y_ $100;
97941     +       set &corrplotDs;
97942     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
97943     +    run ;
97944     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
97945     +       set &corrplotds;
97946     +       where _LABEL_ ne '' ;
97947     +       keep _TMP_ _LABEL_ ;
97948     +    run ;
97949     +    data _null_;
97950     +       nobs=0;
97951     +       dsid = open('varclus_match');
97952     +       if dsid then do;
97953     +          nobs = attrn(dsid, 'NOBS');
97954     +          dsid = close(dsid);
97955     +       end;
97956     +       call symput ('CORR_NOBS', nobs);
97957     +    run;
97958     +    %if &corr_nobs %then %do;
97959     +        proc sort data=varclus_match;
97960     +           by _name_;
97961     +        run ;
97962     +        proc sort data=&corrplotds;
97963     +           by _name_;
97964     +        run ;
97965     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
97966     +           merge varclus_match &corrplotds;
97967     +           by _NAME_ ;
97968     +           if _X_ eq '' then _X_=_NAME_ ;
97969     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
97970     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
97971     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
97972     +
97973     +       run ;
97974     +    %end;
97975     +    %else %do;
97976     +        proc sort data=&corrplotds;
97977     +           by _name_;
97978     +        run ;
97979     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
97980     +           set &corrplotds;
97981     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97982     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
97983     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
97984     +
97985     +        run ;
97986     +    %end;
97987     +    proc sort data=&corrplotds;
97988     +       by _X_ _Y_;
97989     +    run ;
97990     +    proc datasets lib=work nolist mt=(DATA VIEW);
97991     +       delete varclus_match;
97992     +    run;
97993     +    quit;
97994     +
97995     +%doendc:
97996     +
97997     +%mend MakeVarClusCorrData;
97998     +
97999     +%macro MakeStatPlotData(statds= , outstatplotds=);
98000     +   %if %sysfunc(exist(&statds)) %then %do;
98001     +
98002     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
98003     +          set &statDs;
98004     +          where _type_ in('MEAN', 'STD', 'N');
98005     +       run ;
98006     +       proc transpose data=varclus_tmp out=&outstatplotds;
98007     +          id _TYPE_ ;
98008     +       run ;
98009     +       data &outstatplotds;
98010     +          set &outstatplotds(obs=1000);
98011     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
98012     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
98013     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
98014     +          else SCALEDSTD= STD ;
98015     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
98016     +       run ;
98017     +       proc sort data=&outstatplotds;
98018     +          by descending SCALEDSTD ;
98019     +       run ;
98020     +       proc datasets lib=work nolist mt=(DATA VIEW);
98021     +          delete varclus_tmp;
98022     +       run;
98023     +       quit;
98024     +    %end;
98025     +
98026     +%mend MakeStatPlotData;
98027     +
98028     +
98029     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
98030     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
98031     +    data &EM_USER_OUTSTATSCORE;
98032     +          set &indata;
98033     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
98034     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
98035     +          if _TYPE_ = 'STD' then _NAME_='STD';
98036     +          DROP _TYPE_ _NCL_;
98037     +     run;
98038     +
98039     +     filename _file_  "&fileRef";
98040     +
98041     +     data _null_;
98042     +        FILE _file_ MOD;
98043     +        put ' ';
98044     +        put '/*-------------------------------------------------*/';
98045     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
98046     +        put '/*-------------------------------------------------*/';
98047     +        put ' ';
98048     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
98049     +
98050     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
98051     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
98052     +
98053     +        %let k = 1;
98054     +        %do %while(^%sysfunc(fetch(&dsid)));
98055     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
98056     +                %if &k > 2 %then %do;
98057     +                 %let cn = %eval(&k-2);
98058     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
98059     +                %end;
98060     +                %let k = %eval(&k+1);
98061     +        %end;
98062     +
98063     +        %let rc = %sysfunc(rewind(&dsid));
98064     +
98065     +        %do i= 2 %to &nvar;
98066     +            %let _varname =  %sysfunc(varname(&dsid, &i));
98067     +            %do %while(^%sysfunc(fetch(&dsid)));
98068     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
98069     +                %if &_name = MEAN %then
98070     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
98071     +                %else %if &_name = STD %then
98072     +                %let _std = %sysfunc(getvarn(&dsid, &i));
98073     +                %else %do;
98074     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
98075     +                      %let abscoeff = %sysfunc(abs(&coeff));
98076     +                          %if &abscoeff >  0 %then %do;
98077     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
98078     +                           %end;
98079     +                 %end;
98080     +             %end;
98081     +             %let rc = %sysfunc(rewind(&dsid));
98082     +         %end;
98083     +
98084     +        %let dsid= %sysfunc(close(&dsid));
98085     +       run;
98086     +%mend CreateScoreCode;
98087     +
98088     +
98089     +
98090     +/*----------------------------------------------------------
98091     +    Instead of using %MakeRSquareData,
98092     +    %MakeVarClusResultTable at macro2.source is used
98093     + +----------------------------------------------------------*/
98094     +
98095     +
98096     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
98097     +
98098     +/* modifying  from ods rsquare = data */
98099     +
98100     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
98101     +    Length Cluster $16;
98102     +    length Variable $32;
98103     +    Length VariableLabel $64;
98104     +    set &indata; retain CurrentCluster;
98105     +    if NumberOfClusters ^= &ncluster then delete;
98106     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
98107     +    CurrentCluster = Cluster;
98108     +   run;
98109     +proc sort data =&outdata ;
98110     +     by Cluster RsquareRatio;
98111     +run;
98112     +data _tmprsq(drop=index);
98113     +     set &outdata; by Cluster;
98114     +     if first.Cluster then do;
98115     +     index = strip(scan(Cluster,2 ));
98116     +     Variable = "Clus"||index;
98117     +     VariableLabel = "Cluster Component "||index;
98118     +     OwnCluster = 1;
98119     +     NextClosest = .;
98120     +     RsquareRatio = 0;
98121     +     output;
98122     +     end;
98123     +run;
98124     +
98125     +proc sort data = _tmprsq ;
98126     +     by Cluster RsquareRatio;
98127     +run;
98128     +data &outdata;
98129     +     set &outdata _tmprsq;
98130     +by Cluster;
98131     +run;
98132     +
98133     +
98134     +/* Just create the Selected variable with all YES */
98135     +
98136     +data &outdata;
98137     +    set &outdata; by cluster;
98138     +    length Selected $8;
98139     +    Selected = 'YES';
98140     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
98141     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
98142     +    rename OwnCluster = RSqWithClusterComp;
98143     +    rename NextClosest = RSqWithNextClusComp;
98144     +run;
98145     +
98146     +
98147     +/* Selected = Y/N will be done %score section -----
98148     +
98149     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
98150     +data &outdata;
98151     +    set &outdata; by cluster;
98152     +    length Selected $8;
98153     +    if first.Cluster then Selected = 'YES';
98154     +    else Selected = 'NO';
98155     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
98156     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
98157     +    rename OwnCluster = RSqWithClusterComp;
98158     +    rename NextClosest = RSqWithNextClusComp;
98159     +run;
98160     +%end;
98161     +%else %do;
98162     +data &outdata;
98163     +    set &outdata; by cluster;
98164     +    if last.Cluster then Selected = 'YES';
98165     +    else Selected = 'NO';
98166     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
98167     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
98168     +    rename OwnCluster = RSqWithClusterComp;
98169     +    rename NextClosest = RSqWithNextClusComp;
98170     +run;
98171     +%end;
98172     +---------------------------------------------------------------*/
98173     +
98174     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
98175     +/* to calculate NextClosestClusRsq */
98176     +proc transpose data = &inClusRSquare  out=_clusRsq;
98177     +      by cluster;
98178     +      run;
98179     +data _clusRsq;
98180     +     set _clusRsq;
98181     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
98182     +run;
98183     +
98184     +proc sort data=_clusRsq;
98185     +    by cluster col1;
98186     +    run;
98187     +data _clusRsq(drop=_NAME_ _LABEL_);
98188     +     set _clusRsq; by cluster;
98189     +     if last.Cluster then output;
98190     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
98191     +     rename COL1 = RSqWithNextClusComp;
98192     +     rename Cluster = Variable;
98193     +     label  Cluster = "Variable";
98194     +run;
98195     +
98196     +proc sort data =&outdata;
98197     +     by Variable;
98198     +run;
98199     +data &outdata;
98200     +    merge &outdata _clusRsq;
98201     +    by Variable;
98202     +run;
98203     +proc sort data =&outdata;
98204     +by Cluster  RsquareRatio;
98205     +run;
98206     +quit;
98207     +%end;
98208     +
98209     +proc datasets lib = work nolist;
98210     +     delete _tmprsq _clusRsq;
98211     +     run;
98212     +quit;
98213     +
98214     +%mend MakeRSquareData;
98215     +
98216     +
98217     +/*-------------------------------------------------------------------------*/
98218     +
98219     +
98220     +
98221     +%macro ModifyCorr(indata=,
98222     +                  outdata=,
98223     +                  rsquare = Y
98224     +                  );
98225     +    data corr_tmp;
98226     +        set &indata;
98227     +    run;
98228     +     proc sql;
98229     +           update &indata
98230     +           set
98231     +     %let dsid = %sysfunc(open(work.corr_tmp));
98232     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
98233     +          %do i = 4 %to &nvar;
98234     +          %let _name = %sysfunc(varname(&dsid, &i));
98235     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
98236     +            %else  %let _name_md = &_name;
98237     +            %if &i < &nvar %then %do;
98238     +               &_name = 1- &_name_md ,
98239     +            %end;
98240     +            %else %do;
98241     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
98242     +            %end;
98243     +          %end;
98244     +      %let dsid= %sysfunc(close(&dsid));
98245     +
98246     +      select * from &indata;
98247     +      run;
98248     +      proc datasets lib = work nolist;
98249     +           delete corr_tmp;
98250     +      run;
98251     +      quit;
98252     +
98253     + %mend ModifyCorr;
98254     +
98255     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
98256     +    data &outdata(drop= _NCL_  _TYPE_);
98257     +       set &indata;
98258     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
98259     +       rename _NAME_ = Cluster;
98260     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
98261     +    run;
98262     +    %if &RSquare eq Y %then %do;
98263     +     data corr_tmp;
98264     +        set &outdata;
98265     +     run;
98266     +
98267     +     data &outdata(drop=i);
98268     +          set &outdata;
98269     +          %let dsid = %sysfunc(open(work.corr_tmp));
98270     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
98271     +          %do i = 2 %to &nvar;
98272     +            %let _name = %sysfunc(varname(&dsid, &i));
98273     +            %let _name_md = &_name.**2;
98274     +                &_name = &_name_md;
98275     +          %end;
98276     +      %let dsid= %sysfunc(close(&dsid));
98277     +      run;
98278     +      proc datasets lib = work nolist;
98279     +           delete corr_tmp;
98280     +      run;
98281     +
98282     +    %end;
98283     +     quit;
98284     +%mend MakeClusStructCorrData;
98285     +
98286     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
98287     +    data &outdata(drop= _NCL_  _TYPE_);
98288     +       set &indata;
98289     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
98290     +       rename _NAME_ = Cluster;
98291     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
98292     +    run;
98293     +    data corr_tmp;
98294     +        set &outdata;
98295     +    run;
98296     +
98297     +    %let dsid = %sysfunc(open(work.corr_tmp));
98298     +    %let nclus2= %eval(&ncluster+1);
98299     +    data &outdata;
98300     +         set &outdata;
98301     +          %do i = 2 %to &nclus2;
98302     +          %let i_1 = %eval(&i-1);
98303     +            %let _name = %sysfunc(varname(&dsid, &i));
98304     +            %let _newName = Clus&i_1;
98305     +                rename &_name = &_newName; ;
98306     +                *label &_name ="Cluster &i_1";
98307     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
98308     +          %end;
98309     +          keep Cluster
98310     +          %do i = 2 %to &nclus2;
98311     +                %let _name = %sysfunc(varname(&dsid, &i));
98312     +                &_name
98313     +          %end;
98314     +          ;
98315     +    %let dsid= %sysfunc(close(&dsid));
98316     +     run;
98317     +     quit;
98318     +
98319     +    %if &RSquare eq Y %then %do;
98320     +
98321     +       data corr_tmp;
98322     +        set &outdata;
98323     +     run;
98324     +
98325     +     data &outdata(drop=i);
98326     +          set &outdata;
98327     +          %let dsid = %sysfunc(open(work.corr_tmp));
98328     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
98329     +          %do i = 2 %to &nvar;
98330     +            %let _name = %sysfunc(varname(&dsid, &i));
98331     +            %let _name_md = &_name.**2;
98332     +                &_name = &_name_md;
98333     +          %end;
98334     +      %let dsid= %sysfunc(close(&dsid));
98335     +      run;
98336     +    %end;
98337     +
98338     +    %if &makeplotds eq Y %then %do;
98339     +     proc transpose data = &outdata
98340     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
98341     +          by cluster;
98342     +     run;
98343     +     data &plotds;
98344     +          set  &plotds;
98345     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
98346     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
98347     +     run;
98348     +     %end;
98349     +     proc datasets lib = work nolist;
98350     +           delete corr_tmp;
98351     +     run;
98352     +     quit;
98353     +%mend MakeInterClusCorrData;
98354     +
98355     +
98356     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
98357     +
98358     +data &outlink(drop = Selected);
98359     +     set &indata;
98360     +     LINKID = _N_;
98361     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
98362     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
98363     +run;
98364     +data &outnode(keep=NODEID TYPE LABEL);
98365     +    set &indata;
98366     +    length TYPE $16;
98367     +    rename Variable = NODEID;
98368     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
98369     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
98370     +    then  TYPE = "CLUSTER";
98371     +    else  TYPE="VARIABLE";
98372     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
98373     +run;
98374     +quit;
98375     +%mend MakeClusConstellData;
98376     +
98377     +
98378     +
98379     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
98380     +
98381     +data &outlink(drop = Selected);
98382     +     set &indata;
98383     +     LINKID = _N_;
98384     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
98385     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
98386     +run;
98387     +data &outnode(keep=NODEID TYPE LABEL);
98388     +    set &indata;
98389     +    length TYPE $16;
98390     +    rename Variable = NODEID;
98391     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
98392     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
98393     +    then  TYPE = "CLUSTER";
98394     +    else  TYPE="VARIABLE";
98395     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
98396     +run;
98397     +quit;
98398     +%mend MakeClusConstellData;
98399     +
98400     +
98401     +/*--- This will work only when inds is not a view data -------
98402     +
98403     +%macro getNVarNObs(inds=, nvar=, nobs=);
98404     +
98405     +    %global &nvar;
98406     +    %global &nobs;
98407     +    data _null_;
98408     +         dsid = open("&inds");
98409     +         nv = attrn(dsid, 'NVAR');
98410     +         no = attrn(dsid, 'NOBS');
98411     +         dsid = close(dsid);
98412     +         call symput("&nvar", nv);
98413     +         call symput("&nobs", no);
98414     +    run;
98415     +    quit;
98416     +%mend  getNVarNObs;
98417     +
98418     ++---------------------------------------------------------------*/
98419     +
98420     +
98421     +%macro getNVar(inds=, nvar=);
98422     +    %global &nvar;
98423     +    data _null_;
98424     +         dsid = open("&inds");
98425     +         nv = attrn(dsid, 'NVAR');
98426     +         dsid = close(dsid);
98427     +         call symput("&nvar", nv);
98428     +    run;
98429     +    quit;
98430     +%mend  getNVar;
98431     +
98432     +
98433     +
98434     +%macro getNObs(inds=, nobs=);
98435     +    %global &nobs;
98436     +    data _null_;
98437     +        set &inds end=eof;
98438     +        if eof then call symput("&nobs", _N_);
98439     +    run;
98440     +    quit;
98441     +%mend  getNObs;
98442     +
98443     +%Macro CreateVarclusMeta(trainnum=);
98444     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
98445     +    data &EM_USER_VARCLUSMETA;
98446     +         length TrainNum 8.;
98447     +         length NewTrain $8;
98448     +         length NGCluster 8.;
98449     +         length ExportedComp $16;
98450     +         length HideVariable $8;
98451     +         TrainNum = &trainnum;
98452     +         NewTrain = "Y";
98453     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
98454     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
98455     +         NGCluster = 0; /* zero means no twostage */
98456     +   run;
98457     +   quit;
98458     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
98459     +
98460     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
98461     +    data &outdata(drop= _NCL_  _TYPE_);
98462     +       set &indata;
98463     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
98464     +       %if &globalclusid ne %then %do;
98465     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
98466     +       rename _NAME_ = Cluster;
98467     +       %end;
98468     +       %else %do;
98469     +        _NAME_ = upcase(_NAME_);
98470     +       rename _NAME_ = Cluster;
98471     +       %end;
98472     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
98473     +    run;
98474     +    data corr_tmp;
98475     +        set &outdata;
98476     +    run;
98477     +
98478     +    %let dsid = %sysfunc(open(work.corr_tmp));
98479     +    %let nclus2= %eval(&ncluster+1);
98480     +    data &outdata;
98481     +         set &outdata;
98482     +          %do i = 2 %to &nclus2;
98483     +          %let i_1 = %eval(&i-1);
98484     +            %let _name = %sysfunc(varname(&dsid, &i));
98485     +            %if &globalclusid ne %then
98486     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
98487     +                     rename &_name = &_newName;
98488     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
98489     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
98490     +                %end;
98491     +            %else
98492     +                %do; %let _newName = CLUS&i_1;
98493     +                     rename &_name = &_newName;
98494     +                     *label &_name ="Cluster &i_1";
98495     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
98496     +                %end;
98497     +          %end;
98498     +          keep Cluster
98499     +          %do i = 2 %to &nclus2;
98500     +                %let _name = %sysfunc(varname(&dsid, &i));
98501     +                &_name
98502     +          %end;
98503     +          ;
98504     +    %let dsid= %sysfunc(close(&dsid));
98505     +     run;
98506     +     quit;
98507     +
98508     +    %if &RSquare eq Y %then %do;
98509     +
98510     +       data corr_tmp;
98511     +        set &outdata;
98512     +     run;
98513     +
98514     +     data &outdata;
98515     +          set &outdata;
98516     +          %let dsid = %sysfunc(open(work.corr_tmp));
98517     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
98518     +          %do i = 2 %to &nvar;
98519     +            %let _name = %sysfunc(varname(&dsid, &i));
98520     +            %let _name_md = &_name.**2;
98521     +                &_name = &_name_md;
98522     +          %end;
98523     +      %let dsid= %sysfunc(close(&dsid));
98524     +      run;
98525     +    %end;
98526     +
98527     +    %if &makeplotds eq Y %then %do;
98528     +     proc transpose data = &outdata
98529     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
98530     +          by cluster;
98531     +     run;
98532     +     data &plotds;
98533     +          set  &plotds;
98534     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
98535     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
98536     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
98537     +     run;
98538     +     %end;
98539     +     proc datasets lib = work nolist;
98540     +           delete corr_tmp;
98541     +     run;
98542     +     quit;
98543     +%mend MakeInterClusCorrData;
98544     +
98545     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
98546     +    data _tmpds(drop= _NCL_);
98547     +       set &indata;
98548     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
98549     +       %if &globalclusid ne %then %do;
98550     +           _NAME_ = "GC&globalclusid.";
98551     +       rename _NAME_ = Cluster;
98552     +       %end;
98553     +       %else %do;
98554     +        _NAME_ = "CLUS";
98555     +        rename _NAME_ = Cluster;
98556     +       %end;
98557     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
98558     +    run;
98559     +    proc transpose data =_tmpds out =&outdata;
98560     +    run;
98561     +
98562     +    data &outdata(drop=COL1);
98563     +        %if &globalclusid ne %then %do;
98564     +        length GCluster $16;
98565     +        %end;
98566     +        length Cluster $32;
98567     +        length _NAME_ $32;
98568     +         set &outdata;
98569     +         _NAME_ = upcase(_NAME_);
98570     +         rename _NAME_=Variable;
98571     +         *label _NAME_="Variable";
98572     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
98573     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
98574     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
98575     +
98576     +         %if &globalclusid ne %then %do;
98577     +          GCluster = "GC&globalclusid";
98578     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
98579     +         %end;
98580     +         %else %do;
98581     +         Cluster = "CLUS"||strip(COL1);
98582     +        %end;
98583     +         rename COL2 = RSqWithOwnClusComp;
98584     +         *label COL2 = "R-Square With Own Cluster Component";
98585     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
98586     +
98587     +   run;
98588     +   proc sort data =&outdata;
98589     +        by Cluster RSqWithOwnClusComp;
98590     +   run;
98591     +   proc datasets lib = work nolist;
98592     +           delete _tmpds;
98593     +   run;
98594     +   quit;
98595     +%mend MakeOwnRSquare;
98596     +
98597     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
98598     +    data &outdata(drop= _NCL_  _TYPE_);
98599     +       %if &globalclusid ne %then %do;
98600     +        length GCluster $16;
98601     +        %end;
98602     +       set &indata;
98603     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
98604     +       %if &globalclusid ne %then %do;
98605     +         GCluster = "GC&globalclusid";
98606     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
98607     +         rename _NAME_ = Cluster;
98608     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
98609     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
98610     +
98611     +       %end;
98612     +       %else %do;
98613     +         _NAME_ = upcase(_NAME_);
98614     +         rename _NAME_ = Cluster;
98615     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
98616     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
98617     +
98618     +       %end;
98619     +     run;
98620     +    %if &RSquare eq Y %then %do;
98621     +     data corr_tmp;
98622     +          set &outdata;
98623     +     run;
98624     +     %let istart = 2;
98625     +     %if &globalclusid ne %then %let istart = 3;
98626     +     data &outdata;
98627     +          set &outdata;
98628     +          %let dsid = %sysfunc(open(work.corr_tmp));
98629     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
98630     +          %do i =&istart %to &nvar;
98631     +            %let _name = %sysfunc(varname(&dsid, &i));
98632     +            %let _name_md = &_name.**2;
98633     +                &_name = &_name_md;
98634     +          %end;
98635     +      %let dsid= %sysfunc(close(&dsid));
98636     +      run;
98637     +      proc datasets lib = work nolist;
98638     +           delete corr_tmp;
98639     +      run;
98640     +    %end;
98641     +     quit;
98642     +%mend MakeClusStructCorrData;
98643     +
98644     +/*
98645     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
98646     +*/
98647     +
98648     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
98649     +
98650     +     /* The indata should be the outdata
98651     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
98652     +
98653     +     proc sort data =&indata out=_tmpclusRsq;
98654     +     by cluster;
98655     +     run;
98656     +
98657     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
98658     +      by cluster;
98659     +     run;
98660     +
98661     +     proc sort data=_tmpclusRsq;
98662     +        by _NAME_ COL1;
98663     +     run;
98664     +
98665     +     data _tmpclusRsq;
98666     +         length _NAME_ $32;
98667     +         set _tmpclusRsq; by _NAME_;
98668     +          _NAME_ = upcase(_NAME_);
98669     +          %if &ncluster ne 1 %then %do;
98670     +             if last._NAME_ then delete;
98671     +          %end;
98672     +          %else %do;
98673     +             COL1 = 0;
98674     +          %end;
98675     +     run;
98676     +     /* need to sort again */
98677     +     proc sort data=_tmpclusRsq;
98678     +        by _NAME_ COL1;
98679     +     run;
98680     +
98681     +     data &outdata;
98682     +         set _tmpclusRsq; by _NAME_;
98683     +         Cluster = upcase(Cluster);
98684     +         if last._NAME_ then output;
98685     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
98686     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
98687     +         rename COL1 = RSqWithNextClusComp;
98688     +         Cluster = upcase(Cluster);
98689     +         rename Cluster = ClosestCluster;
98690     +         *label  Cluster = "Next Closest Cluster";
98691     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
98692     +         rename _NAME_ = Variable;
98693     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
98694     +    run;
98695     +
98696     +
98697     +    %if &globalclusid ne %then %do;
98698     +    data &outdata;
98699     +       length GCluster $16;
98700     +       set &outdata;
98701     +       GCluster = "GC&globalclusid";
98702     +       run;
98703     +    %end;
98704     +    proc datasets lib = work nolist;
98705     +           delete _tmpclusRsq;
98706     +    run;
98707     +    quit;
98708     +%mend FindNextClosestClusByVar;
98709     +
98710     +
98711     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
98712     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
98713     +     proc sort data =&indata out=_tmpclusRsq;
98714     +     by cluster;
98715     +     run;
98716     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
98717     +     by cluster;
98718     +     run;
98719     +     proc sort data=_tmpclusRsq;
98720     +        by _NAME_ col1;
98721     +     run;
98722     +     data _tmpclusRsq;
98723     +         length _NAME_ $32;
98724     +         set _tmpclusRsq; by _NAME_;
98725     +          _NAME_ = upcase(_NAME_);
98726     +          %if &ncluster ne 1 %then %do;
98727     +             if last._NAME_ then delete;
98728     +          %end;
98729     +          %else %do;
98730     +             COL1 = 0;
98731     +          %end;
98732     +     run;
98733     +     data &outdata;
98734     +         set _tmpclusRsq; by _NAME_;
98735     +         Cluster = upcase(Cluster);
98736     +         if last._NAME_ then output;
98737     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
98738     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
98739     +         rename COL1 = RSqWithNextClusComp;
98740     +         Cluster = upcase(Cluster);
98741     +         rename Cluster = ClosestCluster;
98742     +         *label  Cluster = "Next Closest Cluster";
98743     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
98744     +         rename _NAME_ = Variable;
98745     +         *label  _NAME_ = "Variable";
98746     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
98747     +
98748     +    run;
98749     +    %if &globalclusid ne %then %do;
98750     +    data &outdata;
98751     +       length GCluster $16;
98752     +       set &outdata;
98753     +       GCluster = "GC&globalclusid";
98754     +       run;
98755     +    %end;
98756     +
98757     +    proc datasets lib = work nolist;
98758     +           delete _tmpclusRsq;
98759     +    run;
98760     +
98761     +    quit;
98762     +%mend FindNextClosestClusByCluster;
98763     +
98764     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
98765     +/*----
98766     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
98767     +-----------*/
98768     +
98769     +proc sort data =&indata1;
98770     +    by Variable;
98771     +run;
98772     +proc sort data =&indata2;
98773     +    by Variable;
98774     +run;
98775     +data &outdata;
98776     +    merge &indata1 &indata2;
98777     +    by Variable;
98778     +    length Type $16;
98779     +    Type = 'Variable';
98780     +    *label Type ='Type';
98781     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
98782     +run;
98783     +
98784     +
98785     +data &indata3;
98786     +    set  &indata3 ;
98787     +    length RSqWithOwnClusComp 8.;
98788     +    Cluster = Variable;
98789     +    RSqWithOwnClusComp = 1;
98790     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
98791     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
98792     +    length Type $16;
98793     +    Type = 'ClusterComp';
98794     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
98795     +
98796     +;
98797     +run;
98798     +
98799     +proc sort data=&outdata;
98800     +    by Cluster;
98801     +run;
98802     +proc sort data =&indata3;
98803     +    by Cluster;
98804     +run;
98805     +
98806     +data &outdata;
98807     +     set &outdata &indata3;
98808     +     by Cluster;
98809     +run;
98810     +
98811     +
98812     +/* Create the Selected variable with all YES */
98813     +
98814     +data &outdata;
98815     +     set &outdata;
98816     +     length RsqRatio 8.;
98817     +     length Selected $8;
98818     +     *label RSqRatio = "1-R**2 Ratio";
98819     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
98820     +     *label Selected = "Variable Selected";
98821     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
98822     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
98823     +     Selected ='YES';
98824     +     rename _LABEL_ = Label;
98825     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
98826     +run;
98827     +
98828     +
98829     +/*----  Selected = Y/N will be assigened at the %score                   -------+
98830     +        Just create the Selected variable with all YES at the step above
98831     + +------------------------------------------------------------------------------+
98832     +
98833     +proc sort data=&outdata;
98834     +    by Cluster RsqRatio;
98835     +run;
98836     +
98837     +%if &selectedcomp eq CLUSTERCOMP %then %do;
98838     +data &outdata;
98839     +     set &outdata; by Cluster;
98840     +     length Selected $8;
98841     +     label Selected = "Variable Selected";
98842     +     if  first.Cluster then Selected ='Yes';
98843     +     else Selected = 'No';
98844     +    run;
98845     +%end;
98846     +%else %do;
98847     +data &outdata(drop = _var _varchange);
98848     +     set &outdata; retain _var 0; by Cluster;
98849     +     length Selected $8;
98850     +     label Selected = "Variable Selected";
98851     +     if first.Cluster then  _varchange = 0;
98852     +     else _varchange =1;
98853     +     if _var ne _varchange then  Selected  = 'Yes';
98854     +     else Selected = 'No';
98855     +     if last.cluster then  _var = 0;
98856     +     else _var = _varchange;
98857     +run;
98858     +%end;
98859     +
98860     +--------------------------------------------------------------*/
98861     +
98862     +quit;
98863     +%mend MakeVarClusResultTable;
98864     +
98865     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
98866     +     proc sort data =&indata;
98867     +        by cluster;
98868     +     run;
98869     +     proc transpose data =&indata
98870     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
98871     +          by cluster;
98872     +     run;
98873     +     data &outdata;
98874     +          set  &outdata;
98875     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
98876     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
98877     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
98878     +     run;
98879     +     %if &globalclusid ne %then %do;
98880     +     data &outdata;
98881     +          Length GCluster $16;
98882     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
98883     +          set  &outdata;
98884     +          GCluster ="GC&globalclusid.";
98885     +          run;
98886     +     %end;
98887     +
98888     +%Mend MakePlotDataFromCorrTable;
98889     +
98890     +
98891     +%macro MakeCorrelation(indata=,
98892     +                       outstat=_tmpoutstat,
98893     +                       corrmatrix=N,
98894     +                       outcorr=_tmpoutcorr,
98895     +                       includeclassvar=N,
98896     +                       target=,
98897     +                       freq=,
98898     +                       weight=);
98899     +   %if &target eq  %then %do;
98900     +
98901     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
98902     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
98903     +       %if &includeclassvar eq Y %then %do;
98904     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
98905     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
98906     +          %do i = 2 %to &nvar;
98907     +          %let varname = %sysfunc(varname(&dsid, &i));
98908     +          &varname
98909     +          %end;
98910     +       %end;
98911     +       ;
98912     +      %if &freq ne  %then %do;
98913     +          freq &freq;
98914     +      %end;
98915     +      %if &weight ne  %then %do;
98916     +          weight &weight;
98917     +      %end;
98918     +
98919     +      run;
98920     +      %if &corrmatrix eq Y %then %do;
98921     +      data  &outcorr (drop = _NCL_ _TYPE_);
98922     +           set  &outstat ;
98923     +           if _TYPE_ ='CORR' then output;
98924     +      run;
98925     +      %end;
98926     +    %end;
98927     +    %else %do;
98928     +       proc corr data=&indata outp=&outstat noprint;
98929     +            var
98930     +       %let dsid = %sysfunc(open(&indata));
98931     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
98932     +          %do i = 1 %to &nvar;
98933     +              %let _name = %sysfunc(varname(&dsid, &i));
98934     +              %if &_name ne &target %then;
98935     +              &_name
98936     +           %end;
98937     +        %let dsid= %sysfunc(close(&dsid));
98938     +        ;
98939     +        with &target;
98940     +        run;
98941     +    %end;
98942     +    quit;
98943     +%mend MakeCorrelation;
98944     +
98945     +
98946     +%macro MakeCorrelationDistance(indata=,
98947     +                               outdata=,
98948     +                               rsquare = N
98949     +                               );
98950     +    data corr_tmp;
98951     +        set &indata;
98952     +        if _N_ = 1 then do;
98953     +           output;
98954     +           stop;
98955     +         end;
98956     +    run;
98957     +    %if &outdata ne  %then %let  _outdata = &outdata;
98958     +    %else %let _outdata = &indata;
98959     +
98960     +    data &_outdata;
98961     +         set &indata;
98962     +
98963     +         %let dsid = %sysfunc(open(work.corr_tmp));
98964     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
98965     +          %do i = 2 %to &nvar;
98966     +              %let _name = %sysfunc(varname(&dsid, &i));
98967     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
98968     +              %else  %let _name_md = &_name;
98969     +              &_name = 1- &_name_md;
98970     +          %end;
98971     +      %let dsid= %sysfunc(close(&dsid));
98972     +      run;
98973     +      proc datasets lib = work nolist;
98974     +           delete corr_tmp;
98975     +      run;
98976     +      quit;
98977     +  %mend MakeCorrelationDistance;
98978     +
98979     +
98980     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
98981     +                                   rsquare = N
98982     +                                   );
98983     +    data corr_tmp;
98984     +        set &indata;
98985     +    run;
98986     +    proc sql noprint;
98987     +           update &indata
98988     +           set
98989     +     %let dsid = %sysfunc(open(work.corr_tmp));
98990     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
98991     +          %do i = 4 %to &nvar;
98992     +          %let _name = %sysfunc(varname(&dsid, &i));
98993     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
98994     +            %else  %let _name_md = &_name;
98995     +            %if &i < &nvar %then %do;
98996     +               &_name = 1- &_name_md ,
98997     +            %end;
98998     +            %else %do;
98999     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
99000     +            %end;
99001     +          %end;
99002     +      %let dsid= %sysfunc(close(&dsid));
99003     +
99004     +      select * from &indata;
99005     +      run;
99006     +     data &indata( drop = _NCL_);
99007     +           set &indata;
99008     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
99009     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
99010     +     run;
99011     +     data &indata(DROP = _NCL_);
99012     +           set &indata;
99013     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
99014     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
99015     +           rename _NAME_ = _VAR_;
99016     +     run;
99017     +     proc datasets lib = work nolist;
99018     +           delete corr_tmp;
99019     +     run;
99020     +     quit;
99021     + %mend UpdateOutStatCorrToDistance;
99022     +
99023     +
99024     +%macro HierClusWithCorr(indata= ,
99025     +                        ncluster=,
99026     +                        method = Ward,
99027     +                        outtree = _outtree,
99028     +                        idvar =_VAR_,
99029     +                        outdata=,
99030     +                        rescore = N,
99031     +                        newncluster=
99032     +                        );
99033     +      %global &newncluster;
99034     +      %if &rescore ne Y %then %do;
99035     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
99036     +                   method=&method outtree=&outtree noprint;
99037     +           id &idvar;
99038     +      run;
99039     +      %end;
99040     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
99041     +      run;
99042     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
99043     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
99044     +      run;
99045     +      data _outcontent;
99046     +          set _outcontent;
99047     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
99048     +          index = 1;
99049     +          rename NAME = _NAME_;
99050     +      run;
99051     +      proc sort data=_outcontent;
99052     +          by _NAME_;
99053     +      run;
99054     +      proc sort data =&outdata;
99055     +           by _NAME_;
99056     +      run;
99057     +      data &outdata(drop=index);
99058     +          merge &outdata _outcontent;
99059     +          by _NAME_;
99060     +          if index = . then delete;
99061     +      run;
99062     +      /*-----------------------------------------------------------*/
99063     +      data &outdata;
99064     +           length CLUSNAME $16;
99065     +           set &outdata;
99066     +           if CLUSTER > &ncluster then delete;
99067     +           CLUSNAME='GC'||strip(CLUSTER);
99068     +           *label CLUSNAME = "Cluster Name";
99069     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
99070     +           rename _NAME_ = VARIABLE ;
99071     +           *label _NAME_ = "Variable";
99072     +           *label CLUSTER = "Cluster";
99073     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
99074     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
99075     +      run;
99076     +      proc sort data=&outdata out=&outdata;
99077     +           by CLUSTER;
99078     +      run;
99079     +      proc means data =&outdata noprint;
99080     +           output out=_meanout;
99081     +      run;
99082     +      data _null_;
99083     +            set _meanout;
99084     +            if strip(_STAT_) eq 'MAX' then do;
99085     +            call symput("&newncluster", CLUSTER);
99086     +            stop;
99087     +            end;
99088     +      run;
99089     +
99090     +      proc datasets lib = work nolist;
99091     +           delete _outcontent _meanout;
99092     +      run;
99093     +      quit;
99094     +%mend  HierClusWithCorr;
99095     +
99096     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
99097     +
99098     +     data _tmpindata;
99099     +          set &indata;
99100     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
99101     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
99102     +          if _TYPE_ = 'STD' then _NAME_='STD';
99103     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
99104     +          DROP _TYPE_ _NCL_;
99105     +     run;
99106     +
99107     +     filename _file_  "&fileRef";
99108     +
99109     +     data _null_;
99110     +        FILE _file_ MOD;
99111     +        put ' ';
99112     +        put "/*-------------------------------------------------*/";
99113     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
99114     +        put "/*-------------------------------------------------*/";
99115     +        put ' ';
99116     +        %let dsid = %sysfunc(open(work._tmpindata));
99117     +
99118     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
99119     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
99120     +        %let k = 1;
99121     +        %do %while(^%sysfunc(fetch(&dsid)));
99122     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
99123     +               %if &k > 2 %then %do;
99124     +                %let cn = %eval(&k-2);
99125     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
99126     +                %end;
99127     +                %let k = %eval(&k+1);
99128     +
99129     +        %end;
99130     +        %let rc = %sysfunc(rewind(&dsid));
99131     +
99132     +        %do j= 2 %to &nvar;
99133     +            %let _varname = %sysfunc(varname(&dsid, &j));
99134     +            %do %while(^%sysfunc(fetch(&dsid)));
99135     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
99136     +                %if &_name = MEAN %then
99137     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
99138     +                %else %if &_name = STD %then
99139     +                %let _std = %sysfunc(getvarn(&dsid, &j));
99140     +                %else %do;
99141     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
99142     +                      %let abscoeff = %sysfunc(abs(&coeff));
99143     +                          %if &abscoeff >  0 %then %do;
99144     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
99145     +                           %end;
99146     +                 %end;
99147     +             %end;
99148     +             %let rc = %sysfunc(rewind(&dsid));
99149     +         %end;
99150     +
99151     +        %let dsid= %sysfunc(close(&dsid));
99152     +
99153     +     run;
99154     +
99155     +     filename _file_;
99156     +     proc datasets lib = work nolist;
99157     +           delete _tmpindata;
99158     +     run;
99159     +     quit;
99160     +%mend CreateScoreCode2;
99161     +
99162     +
99163     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
99164     +
99165     +     /*--- Build Code to Modify Metadata ---*/
99166     +     filename X "&deltacodefile";
99167     +     data _null_;
99168     +        FILE X;
99169     +        set &groupds end=eof;
99170     +        if _N_=1 then do;
99171     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
99172     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
99173     +           %end;
99174     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
99175     +           put "if upcase(strip(NAME)) in (";
99176     +        end;
99177     +        if Strip(upcase(Selected)) eq 'YES' then do;
99178     +           string = '"'!!trim(left(VARIABLE))!!'"';
99179     +           put string;
99180     +        end;
99181     +        if eof then do;
99182     +           put ') then ROLE="INPUT";';
99183     +           put 'else ROLE="REJECTED";';
99184     +           put 'end;';
99185     +
99186     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
99187     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
99188     +           %end;
99189     +        end;
99190     +     run;
99191     +     quit;
99192     +
99193     +     filename X;
99194     +     quit;
99195     +%mend MakeDeltaCode2;
99196     +
99197     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
99198     +  %global &ngc;
99199     +  data _null_;
99200     +  %if &indata ne %then %do;
99201     +      %let dsid = %sysfunc(open(&indata));
99202     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
99203     +      %let dsid = %sysfunc(close(&dsid));
99204     +  %end;
99205     +  %else %do;
99206     +       %let nvar = %eval(&ninput+&ndummy); ;
99207     +  %end;
99208     +  %let numgc = %eval(&nvar/&div+2);
99209     +  %let &ngc = &numgc;
99210     +   run;
99211     +  quit;
99212     +%mend getInitialGClusterNumber;
99213     +
99214     +
99215     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
99216     +data &outlink(drop = Selected);
99217     +     set &indata;
99218     +     LINKID = _N_;
99219     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
99220     +run;
99221     +data &outnode(keep=NODEID TYPE LABEL);
99222     +    set &indata;
99223     +    length TYPE $16;
99224     +    rename VARIABLE = NODEID;
99225     +    *label  CLUSNAME="Node ID";
99226     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
99227     +    TYPE = "VARIABLE";
99228     +    *label TYPE = "Node Type";
99229     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
99230     +    run;
99231     +data _tmp(keep=NODEID TYPE LABEL);
99232     +    set &indata;
99233     +    length TYPE $16;
99234     +    rename CLUSNAME = NODEID;
99235     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
99236     +    TYPE = "GCLUSTER";
99237     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
99238     +    run;
99239     +proc sort data=_tmp;
99240     +    by NODEID;
99241     +run;
99242     +data _tmp;
99243     +    set _tmp; by NODEID;
99244     +    if first.NODEID then output;
99245     +run;
99246     +proc sort data=&outnode;
99247     +    by NODEID;
99248     +run;
99249     +data  &outnode;
99250     +    set _tmp &outnode;
99251     +run;
99252     +proc datasets lib = work nolist;
99253     +     delete _tmp;
99254     +run;
99255     +quit;
99256     +%mend MakeGobalConstellData;
99257     +
99258     +/* Make contellation plot data among GCLUSTERS */
99259     +
99260     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
99261     +
99262     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
99263     +     set &indata;
99264     +     LINKID = _N_;
99265     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
99266     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
99267     +     end;
99268     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
99269     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
99270     +     end;
99271     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
99272     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
99273     +    end;
99274     +run;
99275     +
99276     +data _tmp_outrsquare;
99277     +        set &inoutrsq;
99278     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
99279     +run;
99280     +
99281     +proc freq data =_tmp_outrsquare noprint;
99282     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
99283     +run;
99284     +
99285     +data &outnode(keep=_NAME_ TYPE LABEL);
99286     +    set &outlink;
99287     +    length TYPE $16;
99288     +    length LABEL $100;
99289     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
99290     +
99291     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
99292     +    TYPE = "GCLUSTER";
99293     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
99294     +    end;
99295     +    else do;
99296     +    TYPE= "ROOT";
99297     +    LABEL= _NAME_;
99298     +    end;
99299     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
99300     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
99301     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
99302     +    run;
99303     +
99304     +proc sort data=&outnode;
99305     +     by _NAME_;
99306     +proc sort data=_tmp_GCLUSFREQ;
99307     +     by _NAME_;
99308     +run;
99309     +
99310     +data  &outnode;
99311     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
99312     +     if COUNT=. then COUNT=1;
99313     +run;
99314     +
99315     +proc datasets lib = work nolist;
99316     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
99317     +run;
99318     +
99319     +quit;
99320     +%Mend MakeGClusterConstData;
99321     +
99322     +
99323     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
99324     +
99325     +    data _gscoretmpds;
99326     +          set &indata;
99327     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
99328     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
99329     +          if _TYPE_ = 'STD' then _NAME_='STD';
99330     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
99331     +          DROP _TYPE_ _NCL_;
99332     +     run;
99333     +
99334     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
99335     +        GCluster Component &globalclusid ------ */
99336     +
99337     +    filename _file_  "&fileref";
99338     +
99339     +    data _null_;
99340     +        %if &globalclusid eq 1 %then %do;
99341     +          FILE _file_;
99342     +        %end;
99343     +        %else %do;
99344     +          FILE _file_ MOD;
99345     +        %end;
99346     +
99347     +        %let dsid = %sysfunc(open(work._gscoretmpds));
99348     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
99349     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
99350     +
99351     +        %let k = 1;
99352     +        %do %while(^%sysfunc(fetch(&dsid)));
99353     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
99354     +                %if &k > 2 %then %do;
99355     +                put "&_name = 0 ; ";
99356     +                %end;
99357     +                %let k = %eval(&k+1);
99358     +        %end;
99359     +
99360     +        %let rc = %sysfunc(rewind(&dsid));
99361     +        %do i= 2 %to &nvar;
99362     +            %let _varname =  %sysfunc(varname(&dsid, &i));
99363     +            %do %while(^%sysfunc(fetch(&dsid)));
99364     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
99365     +                %if &_name = MEAN %then
99366     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
99367     +                %else %if &_name = STD %then
99368     +                %let _std = %sysfunc(getvarn(&dsid, &i));
99369     +                %else %do;
99370     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
99371     +                      %let abscoeff = %sysfunc(abs(&coeff));
99372     +                          %if &abscoeff >  0 %then %do;
99373     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
99374     +                           %end;
99375     +                 %end;
99376     +             %end;
99377     +             %let rc = %sysfunc(rewind(&dsid));
99378     +
99379     +         %end;
99380     +
99381     +        %let dsid= %sysfunc(close(&dsid));
99382     +       run;
99383     +
99384     +
99385     +       proc datasets lib=work nolist;
99386     +            delete _gscoretmpds;
99387     +       run;
99388     +      quit;
99389     +
99390     +%mend CreateGClusterScoreCode;
99391     +
99392     +
99393     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
99394     +
99395     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
99396     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
99397     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
99398     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
99399     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
99400     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
99401     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
99402     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
99403     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
99404     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
99405     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
99406     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
99407     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
99408     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
99409     +
99410     +   filename gsfile "&gscorecode";
99411     +
99412     +   data &EM_USER_GSCORE;
99413     +             set &indata;
99414     +             %include  gsfile;
99415     +        keep
99416     +        %do i=1 %to &ngcluster;
99417     +         %let gcvarname = GC&i;
99418     +         &gcvarname
99419     +        %end;
99420     +     ;
99421     +   run;
99422     +
99423     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
99424     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
99425     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
99426     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
99427     +    noprint  ;
99428     +     var
99429     +       %do i=1 %to &ngcluster;
99430     +         %let gcvarname = GC&i;
99431     +         &gcvarname
99432     +        %end;
99433     +   ;
99434     +   run;
99435     +
99436     +
99437     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
99438     +   data &EM_USER_GSCORECORRPLOT ;
99439     +        set &EM_USER_GSCORECORRPLOT;
99440     +        rename _X_ = X;
99441     +        rename _Y_ = Y;
99442     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
99443     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
99444     +   run;
99445     +
99446     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
99447     +
99448     +   data &EM_USER_GSCORETREE;
99449     +        length _NAME_ $32;
99450     +        length _LABEL_ $100;
99451     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
99452     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
99453     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
99454     +        end;else do;
99455     +         _LABEL_ = _NAME_;
99456     +        end;
99457     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
99458     +
99459     +   run;
99460     +
99461     +   quit;
99462     +
99463     +%mend MakeGClusterCorrelation;
99464     +
99465     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
99468     +%macro train;
99470     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
99471     +   %include temp;
99472     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
99473     +   %include temp;
99474     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
99475     +   %include temp;
99476     +   filename temp;
99478     +   %let VARCLUS_MAXNUMOBS = 100000;
99479     +   %let VARCLUS_MAXNUMVAR = 200;
99480     +   %let trainnum = 0;
99481     +   %let error = 0;
99483     +   %if &EM_IMPORT_DATA eq %then %do;
99484     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
99485     +       %let  error = 1;
99486     +       %goto endtrain;
99487     +   %end;
99489     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
99490     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
99491     +        %let  error = 1;
99492     +        %goto endline;
99493     +    %end;
99495     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
99496     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
99497     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
99498     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
99499     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
99500     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
99502     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
99503     +        %if  &_num_input_total < 2 %then %do;
99504     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
99505     +            %let error = 2;
99506     +            %goto endtrain;
99507     +        %end;
99508     +   %end;
99509     +   %else %do;
99510     +         %if  &_num_input_interval < 2 %then %do;
99511     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
99512     +         %let error = 2;
99513     +         %goto endtrain;
99514     +         %end;
99515     +   %end;
99517     +   %em_checkerror();
99519     +   %if &EMEXCEPTIONSTRING ne %then %do;
99520     +       %goto endtrain;
99521     +   %end;
99523     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
99525     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
99526     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
99527     +                             outvar=&EM_USER_OUTDUMMY,
99528     +                             outdata=_newtrainds,
99529     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
99531     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
99532     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
99533     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
99534     +                proc datasets lib=work nolist;
99535     +                delete  _newtrainds;
99536     +                run;
99537     +                quit;
99538     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
99539     +                %let error = 3;
99540     +               %goto endtrain;
99541     +            %end;
99542     +        %end;
99544     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
99545     +             %getNVar(inds=_newtrainds, nvar=_nvar);
99547     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
99548     +                %let trainnum = 2;
99549     +            %end;
99550     +            %else %do;
99551     +                %let trainnum = 1;
99552     +            %end;
99553     +        %end;
99554     +    %end;
99555     +    %else %do;
99557     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
99559     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
99561     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
99563     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
99564     +                  %let error = 3;
99565     +                 %goto endtrain;
99566     +            %end;
99567     +        %end;
99570     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
99571     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
99572     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
99573     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
99574     +                %let trainnum = 2;
99575     +            %end;
99576     +            %else %do;
99577     +                %let trainnum = 1;
99578     +            %end;
99579     +        %end;
99581     +   %end;
99583     +    %em_checkerror();
99585     +    %if &EMEXCEPTIONSTRING ne %then %do;
99586     +       %let error = 4;
99587     +       %goto endtrain;
99588     +    %end;
99590     +    %CreateVarclusMeta(trainnum=&trainnum);
99592     +    %if &error > 0 %then  %goto endtrain;
99594     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
99596     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
99597     +           %train1;
99598     +       %end;
99599     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
99600     +           %train2;
99601     +       %end;
99603     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
99604     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
99605     +      data _null_;
99606     +         length line $20000;
99607     +         file _out lrecl=20000;
99608     +         fid=fopen("_in",'i',20000,'v');
99609     +         if fid > 0  then do;
99610     +            do while(^fread(fid));
99611     +               rlen = frlen(fid);
99612     +               rc= fget(fid,line,20000);
99613     +               start = length(line)-length(left(line))+1;
99614     +               line=strip(line);
99615     +               if line ne 'delete;' then do;
99616     +                  put @start line;
99617     +               end;
99618     +            end;
99619     +            if fid > 0  then rc=fclose(fid);
99620     +         end;
99621     +      run;
99622     +      filename _in;
99623     +      filename _out;
99625     +   %endtrain:
99628     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
99630     +%macro VarClus(indata=,
99631     +               outstat=,
99632     +               outtree=,
99633     +               vars=,
99634     +               freq=,
99635     +               weight=,
99636     +               includeclassvar=
99637     +               );
99639     +   %if &vars eq %then
99640     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
99642     +        /*Add by ruzhan, May 28, 2013*/
99643     +        ods graphics on;
99644     +        %let odspath =;
99645     +        data _null_;
99646     +            path = pathname('WORK');
99647     +            call symput('odspath', path);
99648     +        run;
99649     +        ods listing gpath="&odspath";
99650     +        ods output DENDROGRAM=&outtree;
99651     +       proc varclus data = &indata outstat= &outstat
99652     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
99653     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
99654     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
99655     +        /*-----------------------
99656     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
99657     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
99658     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
99659     +       %end;
99660     +       -------------------------*/
99661     +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
99662     +            maxc = &EM_PROPERTY_MAXCLUS
99663     +       %end;
99665     +       /*------------------------------------------------------------------------------------------------------
99666     +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
99667     +        ------------------------------------------------------------------------------------------------------*/
99669     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
99670     +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
99671     +            maxeigen = &EM_PROPERTY_MAXEIGEN
99672     +       %end;
99674     +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
99675     +            proportion = &EM_PROPERTY_PROPORTION
99676     +       %end;
99677     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
99678     +               summary
99679     +       %end;
99681     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
99682     +           short
99683     +       %end;
99684     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
99685     +           corr trace simple
99686     +       %end;
99687     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
99688     +          noprint
99689     +       %end;
99690     +        /*Comment out by ruzhan, May 28, 2013*/
99691     +       /*       outtree=&outtree*/
99692     +       ;
99693     +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
99695     +      %if &includeclassvar eq Y %then %do;
99696     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
99697     +          %if &dsid > 0 %then %do;
99698     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
99699     +              %do i = 2 %to &nvar;
99700     +                  %let varname = %sysfunc(varname(&dsid, &i));
99701     +                   &varname
99702     +              %end;
99704     +          %end;
99705     +      %end;
99707     +      ;
99708     +      /*------------------------
99709     +      %if &freq ne  %then %do;
99710     +          freq &freq;
99711     +      %end;
99712     +      %if &weight ne  %then %do;
99713     +          weight &weight;
99714     +      %end;
99715     +      ----------------------------*/
99716     +      %if %EM_FREQ ne %then %do;
99717     +           Freq %EM_FREQ;
99718     +      %end;
99719     +      ;
99720     +    run;
99721     +    ods graphics off;
99722     +    %endline:
99723     +    quit;
99724     +%mend VarClus;
99726     +%macro Train1;
99728     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
99729     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
99730     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
99731     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
99732     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
99733     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
99734     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
99735     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
99736     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
99737     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
99738     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
99739     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
99740     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
99742     +   /*
99743     +     %let VARCLUS_MAXNUMOBS = 100;
99744     +     %let VARCLUS_MAXNUMVAR = 200;
99745     +   */
99747     +   /* Train
99749     +   %if &EM_IMPORT_DATA eq %then %do;
99750     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
99751     +       %goto endtrain1;
99752     +   %end;
99754     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
99755     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
99756     +        %goto endtrain1;
99757     +   %end;
99758     +   */
99759     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
99760     +       /* moved this to pretrain ------------
99762     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
99763     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
99764     +                             outvar=&EM_USER_OUTDUMMY,
99765     +                             outdata=_newtrainds,
99766     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
99768     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
99769     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
99770     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
99771     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
99772     +                %goto endtrain;
99773     +            %end;
99774     +        %end;
99776     +        +-------------------------------------*/
99778     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
99779     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
99780     +          There is no _newtrainds */
99781     +         %VarClus( indata=&EM_IMPORT_DATA,
99782     +                  outstat=&EM_USER_OUTSTAT,
99783     +                  outtree = &EM_USER_OUTTREE,
99784     +                  includeclassvar=N
99785     +                 );
99786     +        %end;
99787     +        %else %do;
99788     +        %VarClus( indata=_newtrainds,
99789     +                  outstat=&EM_USER_OUTSTAT,
99790     +                  outtree = &EM_USER_OUTTREE,
99791     +                  includeclassvar=Y
99792     +                 );
99793     +         proc datasets lib=work nolist;
99794     +              delete  _newtrainds;
99795     +         run;
99796     +         %end;
99797     +    %end;
99798     +    %else %do;
99800     +        /*----- moved this to pretrain ------------
99801     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
99802     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
99803     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
99804     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
99805     +                 %goto endtrain;
99806     +            %end;
99807     +        %end;
99808     +        +-------------------------------------*/
99810     +        %VarClus(indata=&EM_IMPORT_DATA,
The SAS System
 
99811     +                  outstat=&EM_USER_OUTSTAT,
99812     +                  outtree =&EM_USER_OUTTREE,
99813     +                  includeclassvar=N
99814     +               );
99816     +   %end;
99818     +   %em_checkerror();
99820     +   %if &EMEXCEPTIONSTRING ne %then %do;
99821     +       %goto endtrain1;
99822     +   %end;
99823     +    /*
99824     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
99825     +    */
99827     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
99829     +    %let gid=;
99831     +    /*--- To make the main result table ----------------------*/
99833     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
99834     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
99835     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
99836     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
99837     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
99838     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
99840     +   /* Inter Cluster Correlation Plot ------------------------*/
99842     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
99843     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
99845     +   /* Create some other data sets for results ----*/
99847     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
99848     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
99849     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
99851     +  /*---- move this to Score action ------------
99852     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
99853     +   */
99855     +   /* create score code at training time */
99856     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
99857     +   %endtrain1:
99858     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
99861     +%macro VarClus2( indata=,
99862     +                 outdata=,
99863     +                 outstat =outstat,
99864     +                 outrsquare=outrsquare,
99865     +                 outtree = outtree,
99866     +                 outclusstruct = outclusstruct,
99867     +                 outcluscorr =outcluscorr,
99868     +                 outcluscorrplot =outcluscorrplot,
99869     +                 outclusrsquare =outclusrsquare,
99870     +                 outstatplot = outstatplot,
99871     +                 outcorr = outcorr,
99872     +                 outcorrplot = outcorrplot,
99873     +                 clusdata=,
99874     +                 outnode=outnode,
99875     +                 outlink=outlink,
99876     +                 ngroup =1  );
99877     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
99878     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
99879     +              %goto endline;
99880     +         %end;
99882     +        %global numglobalcluster;
99883     +        %let  numglobalcluster = &ngroup;
99884     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
99885     +        %do vci =1 %to &ngroup;
99886     +           data tmp_clusdata;
99887     +                set &clusdata;
99888     +                if CLUSTER ne &vci then delete;
99889     +           run;
99890     +           %let outstatds = &outstat.&vci;
99891     +           %let outrsquareds = &outrsquare.&vci;
99892     +           %let outtreeds = &outtree.&vci;
99893     +           %let outclusstuctds = &outclusstruct.&vci;
99894     +           %let outcluscorrds = &outcluscorr.&vci;
99895     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
99896     +           %let outclusrsquareds = &outclussquare.&vci;
99897     +           %let outstatplotds = &outstatplot.&vci;
99898     +           %let outcorrds = &outcorr.&vci;
99899     +           %let outcorrplotds = &outcorrplot.&vci;
99900     +           %let outnodeds = &outnode.&vci;
99901     +           %let outlinkds = &outlink.&vci;
99903     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
99904     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
99905     +           %let emuseroutstat = &EM_USER_&outstatds;
99907     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
99908     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
99909     +           %let emuserouttree = &EM_USER_&outtreeds;
99911     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
99912     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
99913     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
99915     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
99916     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
99917     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
99919     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
99920     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
99921     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
99923     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
99924     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
99925     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
99927     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
99928     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
99929     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
99931     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
99932     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
99933     +           %let emuseroutcorr = &EM_USER_&outcorrds;
99935     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
99936     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
99937     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
99939     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
99940     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
99941     +           %let emuseroutnode = &EM_USER_&outnodeds;
99943     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
99944     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
99945     +           %let emuseroutlink = &EM_USER_&outlinkds;
99947     +           /*Add by ruzhan, May 28, 2013*/
99948     +           ods graphics on;
99949     +            %let odspath =;
99950     +            data _null_;
99951     +                path = pathname('WORK');
99952     +                call symput('odspath', path);
99953     +            run;
99954     +            ods listing gpath="&odspath";
99956     +           ods output DENDROGRAM=&emuserouttree;
99958     +           proc varclus data=&indata outstat=&emuseroutstat
99959     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
99960     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
99961     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
99962     +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
99963     +                  maxc=&EM_PROPERTY_MAXCLUS
99964     +           %end;
99966     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
99967     +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
99968     +            maxeigen = &EM_PROPERTY_MAXEIGEN
99969     +            %end;
99971     +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
99972     +                proportion = &EM_PROPERTY_PROPORTION
99973     +           %end;
99974     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
99975     +               summary
99976     +           %end;
99977     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
99978     +               short
99979     +           %end;
99980     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
99981     +               corr trace simple
99982     +           %end;
99983     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
99984     +               noprint
99985     +           %end;
99986     +            /*Comment out by ruzhan, May 28, 2013*/
99987     +              /*outtree=&emuserouttree*/
99988     +           ;
99989     +           var
99990     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
99991     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
99992     +                %do %while(^%sysfunc(fetch(&dsid)));
99993     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
99994     +                    &_varname
99995     +                %end;
99996     +            %let dsid = %sysfunc(close(&dsid));
99997     +           ;
99998     +           %if %EM_FREQ ne %then %do;
99999     +           Freq %EM_FREQ;
100000    +           %end;
100001    +           run;
100002    +            ods graphics off;
100003    +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
100005    +            %let gid=&vci;
100006    +            /*--- To make the main result table ----------------------*/
100007    +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
100008    +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
100009    +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
100010    +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
100011    +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
100012    +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
100014    +            /* Inter Cluster Correlation Plot ------------------------*/
100016    +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
100017    +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
100019    +           /* Create some other data sets for results ---------------*/
100021    +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
100022    +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
100023    +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
100025    +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
100027    +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
100029    +           %if &vci = 1 %then %do;
100030    +           data &EM_USER_OUTRSQUARE;
100031    +                set &emuseroutrsquare;
100032    +           run;
100033    +           %end;
100034    +           %else %do;
100035    +           data &EM_USER_OUTRSQUARE;
100036    +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
100037    +           run;
100038    +           %end;
100039    +           quit;
100040    +       %end;
100042    +       /*---- move this to Score action ------------
100043    +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
100044    +       */
100046    +       /* Make Score Gcluster component & correlation  */
100047    +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
100049    +       quit;
100050    +       %endline:
100051    +%mend VarClus2;
100054    +%macro Train2;
100056    +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
100057    +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
100058    +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
100059    +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
100060    +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
100061    +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
100062    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
100063    +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
100064    +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
100065    +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
100066    +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
100067    +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
100068    +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
100069    +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
100070    +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
100071    +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
100072    +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
100073    +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
100077    +    /* Train */
100079    +   /* moved to pretrain ------------
100081    +   %if &EM_IMPORT_DATA eq %then %do;
100082    +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
100083    +       %goto endtrain2;
100084    +   %end;
100086    +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
100087    +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
100088    +        %goto endtrain2;
100089    +   %end;
100090    +   +-------------------------------------------*/
100092    +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
100095    +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
100097    +        /*----- moved to pretrain ------------
100099    +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
100100    +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
100101    +                             outvar=&EM_USER_OUTDUMMY,
100102    +                             outdata=_newtrainds,
100103    +                             fileref=&EM_FILE_EMFLOWSCORECODE,
100104    +                              ndummyvars=_ndummyvars
100105    +                            );
100107    +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
100108    +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
100109    +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
100110    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
100111    +                %goto endtrain;
100112    +            %end;
100113    +        %end;
100115    +        +---------------------------------------*/
100116    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
100117    +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
100118    +          There is no _newtrainds */
100119    +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
100120    +                             outstat=&EM_USER_GOUTSTAT,
100121    +                             corrmatrix=Y,
100122    +                             outcorr=&EM_USER_GOUTCORR,
100123    +                             includeclassvar=N,
100124    +                             freq =%EM_FREQ
100125    +                          );
100126    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
100128    +        %end;
100129    +        %else %do;
100130    +         %MakeCorrelation(   indata=_newtrainds,
100131    +                             outstat=&EM_USER_GOUTSTAT,
100132    +                             corrmatrix=Y,
100133    +                             outcorr=&EM_USER_GOUTCORR,
100134    +                             includeclassvar=Y,
100135    +                             freq =%EM_FREQ
100136    +                          );
100137    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
100139    +        %end;
100141    +    %end;
100142    +    %else %do;
100144    +        /* moved to pretrain -------------------
100146    +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
100147    +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
100148    +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
100149    +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
100150    +                %goto endtrain;
100151    +            %end;
100152    +        %end;
100153    +         +------------------------------------------*/
100155    +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
100156    +                          outstat=&EM_USER_GOUTSTAT,
100157    +                          corrmatrix=Y,
100158    +                          outcorr=&EM_USER_GOUTCORR,
100159    +                          includeclassvar=N,
100160    +                          freq =%EM_FREQ
100161    +                          );
100162    +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
100163    +    %end;
100165    +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
100166    +                                rsquare = N
100167    +                                );
100168    +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
100169    +                      ncluster=&_ngc,
100170    +                      method = Ward,
100171    +                      outtree =&EM_USER_GOUTTREE,
100172    +                      idvar = _VAR_,
100173    +                      outdata=&EM_USER_GOUTGROUP,
100174    +                      rescore = N,
100175    +                      newncluster=_newnclus
100176    +                        );
100178    +   /* store the number of global cluster */
100180    +   data &EM_USER_VARCLUSMETA;
100181    +        set &EM_USER_VARCLUSMETA;
100182    +        NGCluster = &_newnclus;
100183    +   run;
100185    +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
100187    +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
100188    +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
100189    +            %VarClus2(indata=&EM_IMPORT_DATA,
100190    +                 clusdata=&EM_USER_GOUTGROUP,
100191    +                 ngroup=&_newnclus);
100192    +         %end;
100193    +         %else %do;
100194    +             %VarClus2(indata=_newtrainds,
100195    +                 clusdata=&EM_USER_GOUTGROUP,
100196    +                 ngroup=&_newnclus);
100198    +         %end;
100200    +   %end;
100201    +   %else %do;
100202    +       %VarClus2(indata=&EM_IMPORT_DATA,
100203    +                 clusdata=&EM_USER_GOUTGROUP,
100204    +                 ngroup=&_newnclus);
100205    +   %end;
100207    +   %em_checkerror();
100208    +   %if &EMEXCEPTIONSTRING ne %then %do;
100209    +       %put &em_codebar;
100210    +       %put Error: Variable clustering failed.;
100211    +       %put &em_codebar;
100212    +       %goto endtrain2;
100213    +   %end;
100214    +   /*
100215    +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
100216    +   */
100217    +   %endtrain2:
100218    +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
100220    +%macro em_copyfile(infref=, outfref=, append=N);
100221    +
100222    +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
100223    +
100224    +       %let omode =;
100225    +       %if &append=Y %then
100226    +           %let omode = MOD;
100227    +       data _null_;
100228    +          length line $20000;
100229    +          file &outfref &omode lrecl=20000;
100230    +          fid=fopen("&infref",'i',20000,'v');
100231    +          if fid > 0  then do;
100232    +             do while(^fread(fid));
100233    +                rlen = frlen(fid);
100234    +                rc= fget(fid,line,20000);
100235    +                start = length(line)-length(left(line))+1;
100236    +                line=strip(line);
100237    +                put @start line;
100238    +             end;
100239    +             if fid > 0  then rc=fclose(fid);
100240    +          end;
100241    +       run;
100242    +
100243    +   %end;
100244    +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
100245     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS3.Varsel_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: View EMWS3.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS3.VARSEL_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
100246     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS3.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "BESTVARWITHCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;
 
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   ods graphics on;
MPRINT(VARCLUS):   data _null_;
MPRINT(VARCLUS):   path = pathname('WORK');
MPRINT(VARCLUS):   call symput('odspath', path);
MPRINT(VARCLUS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARCLUS):   ods listing gpath="C:\Users\JOSECA~1\AppData\Local\Temp\SAS Temporary Files\_TD9076_DESKTOP-97HB97B_\Prc2                                                                                                                  ";
MPRINT(VARCLUS):   ods output DENDROGRAM=EMWS3.VarClus_OUTTREE;
MPRINT(VARCLUS):   proc varclus data = EMWS3.Varsel_TRAIN outstat= EMWS3.VarClus_OUTSTAT hi short ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   CLAGE DEBTINC MORTDUE VALUE
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;
 
WARNING: 889 of 2979 observations in data set EMWS3.VARSEL_TRAIN omitted due to missing values.
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: View EMWS3.VARSEL_TRAIN.VIEW used (Total process time):
      real time           1.85 seconds
      cpu time            0.22 seconds
 
NOTE: There were 2979 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set EMWS3.VARCLUS_OUTTREE has 6 observations and 3 variables.
NOTE: The data set EMWS3.VARCLUS_OUTSTAT has 26 observations and 7 variables.
NOTE: The PROCEDURE VARCLUS printed page 36.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           1.95 seconds
      cpu time            0.23 seconds
 
 
MPRINT(VARCLUS):   ods graphics off;
MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
100247     %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS3.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 26 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS3.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Nombre de clúster";
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 26 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORR has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS3.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename CLAGE = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label CLAGE = "Clúster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename DEBTINC = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label DEBTINC = "Clúster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster CLAGE DEBTINC ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS3.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS3.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-cuadrado con siguiente componente clúster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Siguiente clúster más cercano" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS3.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Nombre de clúster";
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 26 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 4 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Clúster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Clúster global" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-cuadrado con componente clúster propio" ;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 4 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: There were 4 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS3.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS3.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Clúster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Clúster global" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 26 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSSTRUCT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS3.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS3.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS3.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   CLAGE = CLAGE**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   DEBTINC = DEBTINC**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   MORTDUE = MORTDUE**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   VALUE = VALUE**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSSTRUCT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS3.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 8 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-cuadrado con siguiente componente clúster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Siguiente clúster más cercano" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 4 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 4 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Tipo" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 4 observations read from the data set WORK._OWNRSQ.
NOTE: There were 4 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 4 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-cuadrado con componente clúster propio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Tipo" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 4 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS3.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 6 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable seleccionada" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Etiqueta" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS3.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Nombre de clúster";
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      411180:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      411180:84
NOTE: There were 26 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS3.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS3.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename CLAGE = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label CLAGE = "Clúster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename DEBTINC = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label DEBTINC = "Clúster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster CLAGE DEBTINC ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS3.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS3.VarClus_OUTCLUSCORRPLOT out=EMWS3.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS3.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS3.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Clúster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Clúster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlación" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS3.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS3.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS3.VARCLUS_OUTSTATPLOT has 4 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   data EMWS3.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS3.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Nombre";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Etiqueta" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "STD escalado";
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: Variable _label_ is uninitialized.
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTSTATPLOT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS3.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTSTATPLOT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS3.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS3.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS3.VARCLUS_OUTCORR has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS3.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCORR has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS3.VarClus_OUTCORR out=EMWS3.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 4 observations read from the data set EMWS3.VARCLUS_OUTCORR.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 16 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS3.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS3.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: Variable _LABEL_ is uninitialized.
NOTE: There were 16 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 16 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS3.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 0 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS3.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 16 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 16 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS3.VarClus_OUTCORRPLOT(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS3.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   label _NAME_ = "Variable" ;
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable" ;
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlación";
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 16 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 16 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS3.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 16 observations read from the data set EMWS3.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS3.VARCLUS_OUTCORRPLOT has 16 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS3.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "ID del enlace";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTLINK has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS3.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS3.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "ID de nodo";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Tipo de nodo";
MPRINT(MAKECLUSCONSTELLDATA):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTNODE has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS3.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS3.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 2 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;
 
NOTE: There were 26 observations read from the data set EMWS3.VARCLUS_OUTSTAT.
NOTE: The data set EMWS3.VARCLUS_OUTSTATSCORE has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CREATESCORECODE):   filename _file_ "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Código de puntuación de Varclus" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Componente clúster 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Componente clúster 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;";
MPRINT(CREATESCORECODE):   run;
 
NOTE: The file _FILE_ is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=13 de marzo de 2021 21H19
 
NOTE: 11 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 79.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMPUBLISHSCORE.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length line $20000;
MPRINT(TRAIN):   file _out lrecl=20000;
MPRINT(TRAIN):   fid=fopen("_in",'i',20000,'v');
MPRINT(TRAIN):   if fid > 0 then do;
MPRINT(TRAIN):   do while(^fread(fid));
MPRINT(TRAIN):   rlen = frlen(fid);
MPRINT(TRAIN):   rc= fget(fid,line,20000);
MPRINT(TRAIN):   start = length(line)-length(left(line))+1;
MPRINT(TRAIN):   line=strip(line);
MPRINT(TRAIN):   if line ne 'delete;' then do;
MPRINT(TRAIN):   put @start line;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if fid > 0 then rc=fclose(fid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;
 
NOTE: The file _OUT is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=13 de marzo de 2021 21H19
 
NOTE: 11 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 79.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
100248     *------------------------------------------------------------*;
100249     * End TRAIN: VarClus;
100250     *------------------------------------------------------------*;
100251
 
100252     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
100253     * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
100254     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
100255     ;
MPRINT(EM_DIAGRAM):   ;
100256     ;
MPRINT(EM_DIAGRAM):   ;
100257     ;
MPRINT(EM_DIAGRAM):   ;
100258     ;
MPRINT(EM_DIAGRAM):   ;
100259     quit;
MPRINT(EM_DIAGRAM):   quit;
100260     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
100261     * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
100262     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
100263     /*; *"; *'; */
100264     ;
MPRINT(EM_DIAGRAM):   ;
100265     run;
MPRINT(EM_DIAGRAM):   run;
100266     quit;
MPRINT(EM_DIAGRAM):   quit;
100267     /* Reset EM Options */
100268     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
100269     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
100270     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log de puntuación";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log de puntuación
Fecha:                14 de marzo de 2021
Hora:                13H51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2V4LS_R "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2V4LS_R new;
MPRINT(EM_DIAGRAM):   run;
100372     %let EMEXCEPTIONSTRING=;
100373     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
100374     * SCORE: VarClus;
MPRINT(EM_DIAGRAM):   * SCORE: VarClus;
100375     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
100376     %let EM_ACTION = SCORE;
100377     %let syscc = 0;
100378
100379     %macro main;
100380
100381        filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
100382        %include temp;
100383        filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
100384        %include temp;
100385        filename temp;
100386
100387       %SetProperties;
100388
100389        %if %upcase(&EM_ACTION) = CREATE %then %do;
100390            filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
100391            %include temp;
100392            filename temp;
100393            %create;
100394        %end;
100395        %else
100396        %if %upcase(&EM_ACTION) = TRAIN %then %do;
100397             filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
100398                %include temp;
100399                filename temp;
100400                %train;
100401        %end;
100402        %else
100403        %if %upcase(&EM_ACTION) = SCORE %then %do;
100404                filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
100405                %include temp;
100406                filename temp;
100407                %score;
100408        %end;
100409        %else
100410        %if %upcase(&EM_ACTION) = REPORT %then %do;
100411                filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
100412                %include temp;
100413                filename temp;
100414                %report;
100415        %end;
100416        /*
100417        %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
100418            %put 'OPENING TABLE';
100419        %end;
100420        %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
100421            %put 'CLOSE TABLE';
100422        %end;
100423        */
100424     %mend main;
100425     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
100426    +
100427    +/* Initialize property macro variables */
100428    +%macro SetProperties;
100429    +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
100430    +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
100431    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
100432    +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
100433    +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
100434    +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
100435    +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
100436    +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
100437    +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
100438    +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
100439    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
100440    +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
100441    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
100442    +
100443    +%mend SetProperties;
100444    +
100445    +%Macro MakeDummyVariables(indata=,
100446    +                          outvar=,
100447    +                          outdata=,
100448    +                          fileref=,
100449    +                          recreatecmeta=N, /* optional */
100450    +                          incmeta=,     /* optional */
100451    +                          outcmeta=,    /* optional */
100452    +                          ndummyvars=_ndummyvars
100453    +                          );
100454    +    %global &ndummyvars;
100455    +
100456    +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
100457    +       class
100458    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
100459    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
100460    +    ;
100461    +    run;
100462    +    %let &ndummyvars = 0;
100463    +    data _null_;
100464    +    %let dsid = %sysfunc(open(work._classout));
100465    +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
100466    +    %let dsid = %sysfunc(close(&dsid));
100467    +    run;
100468    +
100469    +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
100470    +       input
100471    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
100472    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
100473    +        / level=nominal stdize=no;
100474    +       make outvar = &outvar;
100475    +       score data = &indata out =&outdata;
100476    +       code  file=  "&fileref";
100477    +    run;
100478    +    %if &recreatecmeta eq Y %then %do;
100479    +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
100480    +    data _tmpds;
100481    +        set _tmpds;
100482    +           ROLE = 'INPUT';
100483    +           LEVEL = 'INTERVAL';
100484    +           CREATOR='DMZIP';
100485    +           if NAME = '_TYPE_' then delete;
100486    +    run;
100487    +    data &outcmeta;
100488    +         set &incmeta _tmpds;
100489    +    run;
100490    +    %end;
100491    +    proc datasets lib=work nolist;
100492    +      delete  _dmdbdat _dmdbcat _classout
100493    +    %if &recreatecmeta eq Y %then %do;
100494    +    _tmpds
100495    +    %end;
100496    +    ;
100497    +    quit;
100498    +%Mend MakeDummyVariables;
100499    +
100500    +/*--- Determine Optimal Number of Cluster ----
100501    +%macro FindClusNum(statds=, groupds=, minvariation=);
100502    +   %global optnclus;
100503    +   data varclus_tmp(drop=_NAME_);
100504    +      set &statDs;
100505    +      where _type_ ='PROPOR';
100506    +   run;
100507    +   proc sort data=varclus_tmp;
100508    +      by _NCL_;
100509    +   run;
100510    +   proc transpose data=varclus_tmp out=varclus_tmp;
100511    +      by _NCL_;
100512    +      var %EM_INTERVAL_INPUT
100513    +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
100514    +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
100515    +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
100516    +          %do i = 2 %to &nvar;
100517    +          %let varname = %sysfunc(varname(&dsid, &i));
100518    +          &varname
100519    +          %end;
100520    +      %end;
100521    +   ;
100522    +   run;
100523    +
100524    +   %if &minVariation eq %then %do;
100525    +       %let minVariation = &EM_PROPERTY_MINVARIATION;
100526    +   %end;
100527    +   %if ^(0<&minVariation<100) %then %do;
100528    +       %let minVariation = 90;
100529    +   %end;
100530    +
100531    +   data _null_;
100532    +      set varclus_tmp end=eof;
100533    +      by _NCL_;
100534    +      retain flag 0;
100535    +      if first._ncl_ then flag=0;
100536    +      if .<col1 < &minVariation then flag=1;
100537    +      if last._ncl_ and ^flag then do;
100538    +         call symput('OPTNCL', _ncl_);
100539    +         stop;
100540    +      end;
100541    +     if eof then call symput('OPTNCL', _ncl_);
100542    +   run;
100543    +
100544    +   %let optnclus = &OPTNCL;
100545    +
100546    +   data varclus_tmp(drop=_NCL_ _NAME_);
100547    +      set &statDs;
100548    +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
100549    +   run;
100550    +   proc sort data=varclus_tmp;
100551    +      by _TYPE_;
100552    +   run;
100553    +   proc transpose data=varclus_tmp out=varclus_tmp;
100554    +      by _TYPE_;
100555    +   run;
100556    +   proc sort data=varclus_tmp;
100557    +      by _name_ _type_;
100558    +   run;
100559    +
100560    +  proc transpose data=varclus_tmp out=&groupds;
100561    +      by _NAME_;
100562    +   run;
100563    +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
100564    +      by Cluster descending Rsquare;
100565    +      where Cluster ne 0;
100566    +   run;
100567    +   proc datasets lib=work nolist mt=(DATA VIEW);
100568    +      delete varclus_tmp;
100569    +   run;
100570    +   quit;
100571    +%mend findClusNum;
100572    +*/
100573    +
100574    +%macro getNclusfromTrain(inoutstat=, nc=);
100575    +%global &nc;
100576    +data _null_;
100577    +    set &inoutstat end=eof;
100578    +    if eof then do;
100579    +    call symput("&nc", _ncl_);
100580    +    end;
100581    +run;
100582    +%mend  getNclusfromTrain;
100583    +
100584    +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
100585    +
100586    +     *--- Build Code to Modify Metadata ---*;
100587    +     filename X "&deltacodefile";
100588    +     data _null_;
100589    +        FILE X;
100590    +        set &groupds end=eof;
100591    +        /*by Cluster;*/
100592    +         if _N_=1 then do;
100593    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
100594    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
100595    +           %end;
100596    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
100597    +           put "if upcase(strip(NAME)) in (";
100598    +        end;
100599    +        if Strip(upcase(Selected)) eq 'YES' then do;
100600    +           string = '"'!!trim(left(VARIABLE))!!'"';
100601    +           put string;
100602    +        end;
100603    +        if eof then do;
100604    +           put ') then ROLE="INPUT";';
100605    +           put 'else ROLE="REJECTED";';
100606    +           put 'end;';
100607    +
100608    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
100609    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
100610    +           %end;
100611    +        end;
100612    +     run;
100613    +     quit;
100614    +
100615    +     filename X;
100616    +
100617    +     quit;
100618    +%mend MakeDeltaCode;
100619    +
100620    +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
100621    +    %if ^%sysfunc(exist(&statds)) %then %do;
100622    +         %goto doendc;
100623    +    %end;
100624    +
100625    +    data &corrds(drop=_TYPE_ _NCL_) ;
100626    +       set &statds;
100627    +       where _type_ eq 'CORR' ;
100628    +    run ;
100629    +    proc sort data=&corrds;
100630    +       by _NAME_ ;
100631    +    run ;
100632    +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
100633    +      BY _NAME_ ;
100634    +    run ;
100635    +    data &corrplotds;
100636    +       length _Y_ $100;
100637    +       set &corrplotDs;
100638    +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
100639    +    run ;
100640    +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
100641    +       set &corrplotds;
100642    +       where _LABEL_ ne '' ;
100643    +       keep _TMP_ _LABEL_ ;
100644    +    run ;
100645    +    data _null_;
100646    +       nobs=0;
100647    +       dsid = open('varclus_match');
100648    +       if dsid then do;
100649    +          nobs = attrn(dsid, 'NOBS');
100650    +          dsid = close(dsid);
100651    +       end;
100652    +       call symput ('CORR_NOBS', nobs);
100653    +    run;
100654    +    %if &corr_nobs %then %do;
100655    +        proc sort data=varclus_match;
100656    +           by _name_;
100657    +        run ;
100658    +        proc sort data=&corrplotds;
100659    +           by _name_;
100660    +        run ;
100661    +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
100662    +           merge varclus_match &corrplotds;
100663    +           by _NAME_ ;
100664    +           if _X_ eq '' then _X_=_NAME_ ;
100665    +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
100666    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
100667    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
100668    +
100669    +       run ;
100670    +    %end;
100671    +    %else %do;
100672    +        proc sort data=&corrplotds;
100673    +           by _name_;
100674    +        run ;
100675    +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
100676    +           set &corrplotds;
100677    +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
100678    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
100679    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
100680    +
100681    +        run ;
100682    +    %end;
100683    +    proc sort data=&corrplotds;
100684    +       by _X_ _Y_;
100685    +    run ;
100686    +    proc datasets lib=work nolist mt=(DATA VIEW);
100687    +       delete varclus_match;
100688    +    run;
100689    +    quit;
100690    +
100691    +%doendc:
100692    +
100693    +%mend MakeVarClusCorrData;
100694    +
100695    +%macro MakeStatPlotData(statds= , outstatplotds=);
100696    +   %if %sysfunc(exist(&statds)) %then %do;
100697    +
100698    +       data varclus_tmp(drop=_NAME_ _NCL_) ;
100699    +          set &statDs;
100700    +          where _type_ in('MEAN', 'STD', 'N');
100701    +       run ;
100702    +       proc transpose data=varclus_tmp out=&outstatplotds;
100703    +          id _TYPE_ ;
100704    +       run ;
100705    +       data &outstatplotds;
100706    +          set &outstatplotds(obs=1000);
100707    +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
100708    +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
100709    +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
100710    +          else SCALEDSTD= STD ;
100711    +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
100712    +       run ;
100713    +       proc sort data=&outstatplotds;
100714    +          by descending SCALEDSTD ;
100715    +       run ;
100716    +       proc datasets lib=work nolist mt=(DATA VIEW);
100717    +          delete varclus_tmp;
100718    +       run;
100719    +       quit;
100720    +    %end;
100721    +
100722    +%mend MakeStatPlotData;
100723    +
100724    +
100725    +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
100726    +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
100727    +    data &EM_USER_OUTSTATSCORE;
100728    +          set &indata;
100729    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
100730    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
100731    +          if _TYPE_ = 'STD' then _NAME_='STD';
100732    +          DROP _TYPE_ _NCL_;
100733    +     run;
100734    +
100735    +     filename _file_  "&fileRef";
100736    +
100737    +     data _null_;
100738    +        FILE _file_ MOD;
100739    +        put ' ';
100740    +        put '/*-------------------------------------------------*/';
100741    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
100742    +        put '/*-------------------------------------------------*/';
100743    +        put ' ';
100744    +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
100745    +
100746    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
100747    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
100748    +
100749    +        %let k = 1;
100750    +        %do %while(^%sysfunc(fetch(&dsid)));
100751    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
100752    +                %if &k > 2 %then %do;
100753    +                 %let cn = %eval(&k-2);
100754    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
100755    +                %end;
100756    +                %let k = %eval(&k+1);
100757    +        %end;
100758    +
100759    +        %let rc = %sysfunc(rewind(&dsid));
100760    +
100761    +        %do i= 2 %to &nvar;
100762    +            %let _varname =  %sysfunc(varname(&dsid, &i));
100763    +            %do %while(^%sysfunc(fetch(&dsid)));
100764    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
100765    +                %if &_name = MEAN %then
100766    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
100767    +                %else %if &_name = STD %then
100768    +                %let _std = %sysfunc(getvarn(&dsid, &i));
100769    +                %else %do;
100770    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
100771    +                      %let abscoeff = %sysfunc(abs(&coeff));
100772    +                          %if &abscoeff >  0 %then %do;
100773    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
100774    +                           %end;
100775    +                 %end;
100776    +             %end;
100777    +             %let rc = %sysfunc(rewind(&dsid));
100778    +         %end;
100779    +
100780    +        %let dsid= %sysfunc(close(&dsid));
100781    +       run;
100782    +%mend CreateScoreCode;
100783    +
100784    +
100785    +
100786    +/*----------------------------------------------------------
100787    +    Instead of using %MakeRSquareData,
100788    +    %MakeVarClusResultTable at macro2.source is used
100789    + +----------------------------------------------------------*/
100790    +
100791    +
100792    +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
100793    +
100794    +/* modifying  from ods rsquare = data */
100795    +
100796    +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
100797    +    Length Cluster $16;
100798    +    length Variable $32;
100799    +    Length VariableLabel $64;
100800    +    set &indata; retain CurrentCluster;
100801    +    if NumberOfClusters ^= &ncluster then delete;
100802    +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
100803    +    CurrentCluster = Cluster;
100804    +   run;
100805    +proc sort data =&outdata ;
100806    +     by Cluster RsquareRatio;
100807    +run;
100808    +data _tmprsq(drop=index);
100809    +     set &outdata; by Cluster;
100810    +     if first.Cluster then do;
100811    +     index = strip(scan(Cluster,2 ));
100812    +     Variable = "Clus"||index;
100813    +     VariableLabel = "Cluster Component "||index;
100814    +     OwnCluster = 1;
100815    +     NextClosest = .;
100816    +     RsquareRatio = 0;
100817    +     output;
100818    +     end;
100819    +run;
100820    +
100821    +proc sort data = _tmprsq ;
100822    +     by Cluster RsquareRatio;
100823    +run;
100824    +data &outdata;
100825    +     set &outdata _tmprsq;
100826    +by Cluster;
100827    +run;
100828    +
100829    +
100830    +/* Just create the Selected variable with all YES */
100831    +
100832    +data &outdata;
100833    +    set &outdata; by cluster;
100834    +    length Selected $8;
100835    +    Selected = 'YES';
100836    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
100837    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
100838    +    rename OwnCluster = RSqWithClusterComp;
100839    +    rename NextClosest = RSqWithNextClusComp;
100840    +run;
100841    +
100842    +
100843    +/* Selected = Y/N will be done %score section -----
100844    +
100845    +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
100846    +data &outdata;
100847    +    set &outdata; by cluster;
100848    +    length Selected $8;
100849    +    if first.Cluster then Selected = 'YES';
100850    +    else Selected = 'NO';
100851    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
100852    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
100853    +    rename OwnCluster = RSqWithClusterComp;
100854    +    rename NextClosest = RSqWithNextClusComp;
100855    +run;
100856    +%end;
100857    +%else %do;
100858    +data &outdata;
100859    +    set &outdata; by cluster;
100860    +    if last.Cluster then Selected = 'YES';
100861    +    else Selected = 'NO';
100862    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
100863    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
100864    +    rename OwnCluster = RSqWithClusterComp;
100865    +    rename NextClosest = RSqWithNextClusComp;
100866    +run;
100867    +%end;
100868    +---------------------------------------------------------------*/
100869    +
100870    +%if %sysfunc(exist(&inClusRSquare)) %then %do;
100871    +/* to calculate NextClosestClusRsq */
100872    +proc transpose data = &inClusRSquare  out=_clusRsq;
100873    +      by cluster;
100874    +      run;
100875    +data _clusRsq;
100876    +     set _clusRsq;
100877    +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
100878    +run;
100879    +
100880    +proc sort data=_clusRsq;
100881    +    by cluster col1;
100882    +    run;
100883    +data _clusRsq(drop=_NAME_ _LABEL_);
100884    +     set _clusRsq; by cluster;
100885    +     if last.Cluster then output;
100886    +     label  COL1 = 'R-Sqaure with Next Cluster Component';
100887    +     rename COL1 = RSqWithNextClusComp;
100888    +     rename Cluster = Variable;
100889    +     label  Cluster = "Variable";
100890    +run;
100891    +
100892    +proc sort data =&outdata;
100893    +     by Variable;
100894    +run;
100895    +data &outdata;
100896    +    merge &outdata _clusRsq;
100897    +    by Variable;
100898    +run;
100899    +proc sort data =&outdata;
100900    +by Cluster  RsquareRatio;
100901    +run;
100902    +quit;
100903    +%end;
100904    +
100905    +proc datasets lib = work nolist;
100906    +     delete _tmprsq _clusRsq;
100907    +     run;
100908    +quit;
100909    +
100910    +%mend MakeRSquareData;
100911    +
100912    +
100913    +/*-------------------------------------------------------------------------*/
100914    +
100915    +
100916    +
100917    +%macro ModifyCorr(indata=,
100918    +                  outdata=,
100919    +                  rsquare = Y
100920    +                  );
100921    +    data corr_tmp;
100922    +        set &indata;
100923    +    run;
100924    +     proc sql;
100925    +           update &indata
100926    +           set
100927    +     %let dsid = %sysfunc(open(work.corr_tmp));
100928    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
100929    +          %do i = 4 %to &nvar;
100930    +          %let _name = %sysfunc(varname(&dsid, &i));
100931    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
100932    +            %else  %let _name_md = &_name;
100933    +            %if &i < &nvar %then %do;
100934    +               &_name = 1- &_name_md ,
100935    +            %end;
100936    +            %else %do;
100937    +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
100938    +            %end;
100939    +          %end;
100940    +      %let dsid= %sysfunc(close(&dsid));
100941    +
100942    +      select * from &indata;
100943    +      run;
100944    +      proc datasets lib = work nolist;
100945    +           delete corr_tmp;
100946    +      run;
100947    +      quit;
100948    +
100949    + %mend ModifyCorr;
100950    +
100951    + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
100952    +    data &outdata(drop= _NCL_  _TYPE_);
100953    +       set &indata;
100954    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
100955    +       rename _NAME_ = Cluster;
100956    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
100957    +    run;
100958    +    %if &RSquare eq Y %then %do;
100959    +     data corr_tmp;
100960    +        set &outdata;
100961    +     run;
100962    +
100963    +     data &outdata(drop=i);
100964    +          set &outdata;
100965    +          %let dsid = %sysfunc(open(work.corr_tmp));
100966    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
100967    +          %do i = 2 %to &nvar;
100968    +            %let _name = %sysfunc(varname(&dsid, &i));
100969    +            %let _name_md = &_name.**2;
100970    +                &_name = &_name_md;
100971    +          %end;
100972    +      %let dsid= %sysfunc(close(&dsid));
100973    +      run;
100974    +      proc datasets lib = work nolist;
100975    +           delete corr_tmp;
100976    +      run;
100977    +
100978    +    %end;
100979    +     quit;
100980    +%mend MakeClusStructCorrData;
100981    +
100982    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
100983    +    data &outdata(drop= _NCL_  _TYPE_);
100984    +       set &indata;
100985    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
100986    +       rename _NAME_ = Cluster;
100987    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
100988    +    run;
100989    +    data corr_tmp;
100990    +        set &outdata;
100991    +    run;
100992    +
100993    +    %let dsid = %sysfunc(open(work.corr_tmp));
100994    +    %let nclus2= %eval(&ncluster+1);
100995    +    data &outdata;
100996    +         set &outdata;
100997    +          %do i = 2 %to &nclus2;
100998    +          %let i_1 = %eval(&i-1);
100999    +            %let _name = %sysfunc(varname(&dsid, &i));
101000    +            %let _newName = Clus&i_1;
101001    +                rename &_name = &_newName; ;
101002    +                *label &_name ="Cluster &i_1";
101003    +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
101004    +          %end;
101005    +          keep Cluster
101006    +          %do i = 2 %to &nclus2;
101007    +                %let _name = %sysfunc(varname(&dsid, &i));
101008    +                &_name
101009    +          %end;
101010    +          ;
101011    +    %let dsid= %sysfunc(close(&dsid));
101012    +     run;
101013    +     quit;
101014    +
101015    +    %if &RSquare eq Y %then %do;
101016    +
101017    +       data corr_tmp;
101018    +        set &outdata;
101019    +     run;
101020    +
101021    +     data &outdata(drop=i);
101022    +          set &outdata;
101023    +          %let dsid = %sysfunc(open(work.corr_tmp));
101024    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
101025    +          %do i = 2 %to &nvar;
101026    +            %let _name = %sysfunc(varname(&dsid, &i));
101027    +            %let _name_md = &_name.**2;
101028    +                &_name = &_name_md;
101029    +          %end;
101030    +      %let dsid= %sysfunc(close(&dsid));
101031    +      run;
101032    +    %end;
101033    +
101034    +    %if &makeplotds eq Y %then %do;
101035    +     proc transpose data = &outdata
101036    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
101037    +          by cluster;
101038    +     run;
101039    +     data &plotds;
101040    +          set  &plotds;
101041    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
101042    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
101043    +     run;
101044    +     %end;
101045    +     proc datasets lib = work nolist;
101046    +           delete corr_tmp;
101047    +     run;
101048    +     quit;
101049    +%mend MakeInterClusCorrData;
101050    +
101051    +
101052    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
101053    +
101054    +data &outlink(drop = Selected);
101055    +     set &indata;
101056    +     LINKID = _N_;
101057    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
101058    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
101059    +run;
101060    +data &outnode(keep=NODEID TYPE LABEL);
101061    +    set &indata;
101062    +    length TYPE $16;
101063    +    rename Variable = NODEID;
101064    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
101065    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
101066    +    then  TYPE = "CLUSTER";
101067    +    else  TYPE="VARIABLE";
101068    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
101069    +run;
101070    +quit;
101071    +%mend MakeClusConstellData;
101072    +
101073    +
101074    +
101075    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
101076    +
101077    +data &outlink(drop = Selected);
101078    +     set &indata;
101079    +     LINKID = _N_;
101080    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
101081    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
101082    +run;
101083    +data &outnode(keep=NODEID TYPE LABEL);
101084    +    set &indata;
101085    +    length TYPE $16;
101086    +    rename Variable = NODEID;
101087    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
101088    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
101089    +    then  TYPE = "CLUSTER";
101090    +    else  TYPE="VARIABLE";
101091    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
101092    +run;
101093    +quit;
101094    +%mend MakeClusConstellData;
101095    +
101096    +
101097    +/*--- This will work only when inds is not a view data -------
101098    +
101099    +%macro getNVarNObs(inds=, nvar=, nobs=);
101100    +
101101    +    %global &nvar;
101102    +    %global &nobs;
101103    +    data _null_;
101104    +         dsid = open("&inds");
101105    +         nv = attrn(dsid, 'NVAR');
101106    +         no = attrn(dsid, 'NOBS');
101107    +         dsid = close(dsid);
101108    +         call symput("&nvar", nv);
101109    +         call symput("&nobs", no);
101110    +    run;
101111    +    quit;
101112    +%mend  getNVarNObs;
101113    +
101114    ++---------------------------------------------------------------*/
101115    +
101116    +
101117    +%macro getNVar(inds=, nvar=);
101118    +    %global &nvar;
101119    +    data _null_;
101120    +         dsid = open("&inds");
101121    +         nv = attrn(dsid, 'NVAR');
101122    +         dsid = close(dsid);
101123    +         call symput("&nvar", nv);
101124    +    run;
101125    +    quit;
101126    +%mend  getNVar;
101127    +
101128    +
101129    +
101130    +%macro getNObs(inds=, nobs=);
101131    +    %global &nobs;
101132    +    data _null_;
101133    +        set &inds end=eof;
101134    +        if eof then call symput("&nobs", _N_);
101135    +    run;
101136    +    quit;
101137    +%mend  getNObs;
101138    +
101139    +%Macro CreateVarclusMeta(trainnum=);
101140    +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
101141    +    data &EM_USER_VARCLUSMETA;
101142    +         length TrainNum 8.;
101143    +         length NewTrain $8;
101144    +         length NGCluster 8.;
101145    +         length ExportedComp $16;
101146    +         length HideVariable $8;
101147    +         TrainNum = &trainnum;
101148    +         NewTrain = "Y";
101149    +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
101150    +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
101151    +         NGCluster = 0; /* zero means no twostage */
101152    +   run;
101153    +   quit;
101154    +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
101155    +
101156    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
101157    +    data &outdata(drop= _NCL_  _TYPE_);
101158    +       set &indata;
101159    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
101160    +       %if &globalclusid ne %then %do;
101161    +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
101162    +       rename _NAME_ = Cluster;
101163    +       %end;
101164    +       %else %do;
101165    +        _NAME_ = upcase(_NAME_);
101166    +       rename _NAME_ = Cluster;
101167    +       %end;
101168    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
101169    +    run;
101170    +    data corr_tmp;
101171    +        set &outdata;
101172    +    run;
101173    +
101174    +    %let dsid = %sysfunc(open(work.corr_tmp));
101175    +    %let nclus2= %eval(&ncluster+1);
101176    +    data &outdata;
101177    +         set &outdata;
101178    +          %do i = 2 %to &nclus2;
101179    +          %let i_1 = %eval(&i-1);
101180    +            %let _name = %sysfunc(varname(&dsid, &i));
101181    +            %if &globalclusid ne %then
101182    +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
101183    +                     rename &_name = &_newName;
101184    +                     *label &_name ="GC &globalclusid : Cluster &i_1";
101185    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
101186    +                %end;
101187    +            %else
101188    +                %do; %let _newName = CLUS&i_1;
101189    +                     rename &_name = &_newName;
101190    +                     *label &_name ="Cluster &i_1";
101191    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
101192    +                %end;
101193    +          %end;
101194    +          keep Cluster
101195    +          %do i = 2 %to &nclus2;
101196    +                %let _name = %sysfunc(varname(&dsid, &i));
101197    +                &_name
101198    +          %end;
101199    +          ;
101200    +    %let dsid= %sysfunc(close(&dsid));
101201    +     run;
101202    +     quit;
101203    +
101204    +    %if &RSquare eq Y %then %do;
101205    +
101206    +       data corr_tmp;
101207    +        set &outdata;
101208    +     run;
101209    +
101210    +     data &outdata;
101211    +          set &outdata;
101212    +          %let dsid = %sysfunc(open(work.corr_tmp));
101213    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
101214    +          %do i = 2 %to &nvar;
101215    +            %let _name = %sysfunc(varname(&dsid, &i));
101216    +            %let _name_md = &_name.**2;
101217    +                &_name = &_name_md;
101218    +          %end;
101219    +      %let dsid= %sysfunc(close(&dsid));
101220    +      run;
101221    +    %end;
101222    +
101223    +    %if &makeplotds eq Y %then %do;
101224    +     proc transpose data = &outdata
101225    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
101226    +          by cluster;
101227    +     run;
101228    +     data &plotds;
101229    +          set  &plotds;
101230    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
101231    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
101232    +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
101233    +     run;
101234    +     %end;
101235    +     proc datasets lib = work nolist;
101236    +           delete corr_tmp;
101237    +     run;
101238    +     quit;
101239    +%mend MakeInterClusCorrData;
101240    +
101241    +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
101242    +    data _tmpds(drop= _NCL_);
101243    +       set &indata;
101244    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
101245    +       %if &globalclusid ne %then %do;
101246    +           _NAME_ = "GC&globalclusid.";
101247    +       rename _NAME_ = Cluster;
101248    +       %end;
101249    +       %else %do;
101250    +        _NAME_ = "CLUS";
101251    +        rename _NAME_ = Cluster;
101252    +       %end;
101253    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
101254    +    run;
101255    +    proc transpose data =_tmpds out =&outdata;
101256    +    run;
101257    +
101258    +    data &outdata(drop=COL1);
101259    +        %if &globalclusid ne %then %do;
101260    +        length GCluster $16;
101261    +        %end;
101262    +        length Cluster $32;
101263    +        length _NAME_ $32;
101264    +         set &outdata;
101265    +         _NAME_ = upcase(_NAME_);
101266    +         rename _NAME_=Variable;
101267    +         *label _NAME_="Variable";
101268    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
101269    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
101270    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
101271    +
101272    +         %if &globalclusid ne %then %do;
101273    +          GCluster = "GC&globalclusid";
101274    +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
101275    +         %end;
101276    +         %else %do;
101277    +         Cluster = "CLUS"||strip(COL1);
101278    +        %end;
101279    +         rename COL2 = RSqWithOwnClusComp;
101280    +         *label COL2 = "R-Square With Own Cluster Component";
101281    +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
101282    +
101283    +   run;
101284    +   proc sort data =&outdata;
101285    +        by Cluster RSqWithOwnClusComp;
101286    +   run;
101287    +   proc datasets lib = work nolist;
101288    +           delete _tmpds;
101289    +   run;
101290    +   quit;
101291    +%mend MakeOwnRSquare;
101292    +
101293    +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
101294    +    data &outdata(drop= _NCL_  _TYPE_);
101295    +       %if &globalclusid ne %then %do;
101296    +        length GCluster $16;
101297    +        %end;
101298    +       set &indata;
101299    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
101300    +       %if &globalclusid ne %then %do;
101301    +         GCluster = "GC&globalclusid";
101302    +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
101303    +         rename _NAME_ = Cluster;
101304    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
101305    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
101306    +
101307    +       %end;
101308    +       %else %do;
101309    +         _NAME_ = upcase(_NAME_);
101310    +         rename _NAME_ = Cluster;
101311    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
101312    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
101313    +
101314    +       %end;
101315    +     run;
101316    +    %if &RSquare eq Y %then %do;
101317    +     data corr_tmp;
101318    +          set &outdata;
101319    +     run;
101320    +     %let istart = 2;
101321    +     %if &globalclusid ne %then %let istart = 3;
101322    +     data &outdata;
101323    +          set &outdata;
101324    +          %let dsid = %sysfunc(open(work.corr_tmp));
101325    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
101326    +          %do i =&istart %to &nvar;
101327    +            %let _name = %sysfunc(varname(&dsid, &i));
101328    +            %let _name_md = &_name.**2;
101329    +                &_name = &_name_md;
101330    +          %end;
101331    +      %let dsid= %sysfunc(close(&dsid));
101332    +      run;
101333    +      proc datasets lib = work nolist;
101334    +           delete corr_tmp;
101335    +      run;
101336    +    %end;
101337    +     quit;
101338    +%mend MakeClusStructCorrData;
101339    +
101340    +/*
101341    +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
101342    +*/
101343    +
101344    +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
101345    +
101346    +     /* The indata should be the outdata
101347    +        from %MakeClusStructCorrData(indata=, outdata=, ); */
101348    +
101349    +     proc sort data =&indata out=_tmpclusRsq;
101350    +     by cluster;
101351    +     run;
101352    +
101353    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
101354    +      by cluster;
101355    +     run;
101356    +
101357    +     proc sort data=_tmpclusRsq;
101358    +        by _NAME_ COL1;
101359    +     run;
101360    +
101361    +     data _tmpclusRsq;
101362    +         length _NAME_ $32;
101363    +         set _tmpclusRsq; by _NAME_;
101364    +          _NAME_ = upcase(_NAME_);
101365    +          %if &ncluster ne 1 %then %do;
101366    +             if last._NAME_ then delete;
101367    +          %end;
101368    +          %else %do;
101369    +             COL1 = 0;
101370    +          %end;
101371    +     run;
101372    +     /* need to sort again */
101373    +     proc sort data=_tmpclusRsq;
101374    +        by _NAME_ COL1;
101375    +     run;
101376    +
101377    +     data &outdata;
101378    +         set _tmpclusRsq; by _NAME_;
101379    +         Cluster = upcase(Cluster);
101380    +         if last._NAME_ then output;
101381    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
101382    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
101383    +         rename COL1 = RSqWithNextClusComp;
101384    +         Cluster = upcase(Cluster);
101385    +         rename Cluster = ClosestCluster;
101386    +         *label  Cluster = "Next Closest Cluster";
101387    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
101388    +         rename _NAME_ = Variable;
101389    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
101390    +    run;
101391    +
101392    +
101393    +    %if &globalclusid ne %then %do;
101394    +    data &outdata;
101395    +       length GCluster $16;
101396    +       set &outdata;
101397    +       GCluster = "GC&globalclusid";
101398    +       run;
101399    +    %end;
101400    +    proc datasets lib = work nolist;
101401    +           delete _tmpclusRsq;
101402    +    run;
101403    +    quit;
101404    +%mend FindNextClosestClusByVar;
101405    +
101406    +
101407    +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
101408    +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
101409    +     proc sort data =&indata out=_tmpclusRsq;
101410    +     by cluster;
101411    +     run;
101412    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
101413    +     by cluster;
101414    +     run;
101415    +     proc sort data=_tmpclusRsq;
101416    +        by _NAME_ col1;
101417    +     run;
101418    +     data _tmpclusRsq;
101419    +         length _NAME_ $32;
101420    +         set _tmpclusRsq; by _NAME_;
101421    +          _NAME_ = upcase(_NAME_);
101422    +          %if &ncluster ne 1 %then %do;
101423    +             if last._NAME_ then delete;
101424    +          %end;
101425    +          %else %do;
101426    +             COL1 = 0;
101427    +          %end;
101428    +     run;
101429    +     data &outdata;
101430    +         set _tmpclusRsq; by _NAME_;
101431    +         Cluster = upcase(Cluster);
101432    +         if last._NAME_ then output;
101433    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
101434    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
101435    +         rename COL1 = RSqWithNextClusComp;
101436    +         Cluster = upcase(Cluster);
101437    +         rename Cluster = ClosestCluster;
101438    +         *label  Cluster = "Next Closest Cluster";
101439    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
101440    +         rename _NAME_ = Variable;
101441    +         *label  _NAME_ = "Variable";
101442    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
101443    +
101444    +    run;
101445    +    %if &globalclusid ne %then %do;
101446    +    data &outdata;
101447    +       length GCluster $16;
101448    +       set &outdata;
101449    +       GCluster = "GC&globalclusid";
101450    +       run;
101451    +    %end;
101452    +
101453    +    proc datasets lib = work nolist;
101454    +           delete _tmpclusRsq;
101455    +    run;
101456    +
101457    +    quit;
101458    +%mend FindNextClosestClusByCluster;
101459    +
101460    +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
101461    +/*----
101462    +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
101463    +-----------*/
101464    +
101465    +proc sort data =&indata1;
101466    +    by Variable;
101467    +run;
101468    +proc sort data =&indata2;
101469    +    by Variable;
101470    +run;
101471    +data &outdata;
101472    +    merge &indata1 &indata2;
101473    +    by Variable;
101474    +    length Type $16;
101475    +    Type = 'Variable';
101476    +    *label Type ='Type';
101477    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
101478    +run;
101479    +
101480    +
101481    +data &indata3;
101482    +    set  &indata3 ;
101483    +    length RSqWithOwnClusComp 8.;
101484    +    Cluster = Variable;
101485    +    RSqWithOwnClusComp = 1;
101486    +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
101487    +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
101488    +    length Type $16;
101489    +    Type = 'ClusterComp';
101490    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
101491    +
101492    +;
101493    +run;
101494    +
101495    +proc sort data=&outdata;
101496    +    by Cluster;
101497    +run;
101498    +proc sort data =&indata3;
101499    +    by Cluster;
101500    +run;
101501    +
101502    +data &outdata;
101503    +     set &outdata &indata3;
101504    +     by Cluster;
101505    +run;
101506    +
101507    +
101508    +/* Create the Selected variable with all YES */
101509    +
101510    +data &outdata;
101511    +     set &outdata;
101512    +     length RsqRatio 8.;
101513    +     length Selected $8;
101514    +     *label RSqRatio = "1-R**2 Ratio";
101515    +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
101516    +     *label Selected = "Variable Selected";
101517    +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
101518    +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
101519    +     Selected ='YES';
101520    +     rename _LABEL_ = Label;
101521    +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
101522    +run;
101523    +
101524    +
101525    +/*----  Selected = Y/N will be assigened at the %score                   -------+
101526    +        Just create the Selected variable with all YES at the step above
101527    + +------------------------------------------------------------------------------+
101528    +
101529    +proc sort data=&outdata;
101530    +    by Cluster RsqRatio;
101531    +run;
101532    +
101533    +%if &selectedcomp eq CLUSTERCOMP %then %do;
101534    +data &outdata;
101535    +     set &outdata; by Cluster;
101536    +     length Selected $8;
101537    +     label Selected = "Variable Selected";
101538    +     if  first.Cluster then Selected ='Yes';
101539    +     else Selected = 'No';
101540    +    run;
101541    +%end;
101542    +%else %do;
101543    +data &outdata(drop = _var _varchange);
101544    +     set &outdata; retain _var 0; by Cluster;
101545    +     length Selected $8;
101546    +     label Selected = "Variable Selected";
101547    +     if first.Cluster then  _varchange = 0;
101548    +     else _varchange =1;
101549    +     if _var ne _varchange then  Selected  = 'Yes';
101550    +     else Selected = 'No';
101551    +     if last.cluster then  _var = 0;
101552    +     else _var = _varchange;
101553    +run;
101554    +%end;
101555    +
101556    +--------------------------------------------------------------*/
101557    +
101558    +quit;
101559    +%mend MakeVarClusResultTable;
101560    +
101561    +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
101562    +     proc sort data =&indata;
101563    +        by cluster;
101564    +     run;
101565    +     proc transpose data =&indata
101566    +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
101567    +          by cluster;
101568    +     run;
101569    +     data &outdata;
101570    +          set  &outdata;
101571    +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
101572    +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
101573    +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
101574    +     run;
101575    +     %if &globalclusid ne %then %do;
101576    +     data &outdata;
101577    +          Length GCluster $16;
101578    +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
101579    +          set  &outdata;
101580    +          GCluster ="GC&globalclusid.";
101581    +          run;
101582    +     %end;
101583    +
101584    +%Mend MakePlotDataFromCorrTable;
101585    +
101586    +
101587    +%macro MakeCorrelation(indata=,
101588    +                       outstat=_tmpoutstat,
101589    +                       corrmatrix=N,
101590    +                       outcorr=_tmpoutcorr,
101591    +                       includeclassvar=N,
101592    +                       target=,
101593    +                       freq=,
101594    +                       weight=);
101595    +   %if &target eq  %then %do;
101596    +
101597    +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
101598    +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
101599    +       %if &includeclassvar eq Y %then %do;
101600    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
101601    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
101602    +          %do i = 2 %to &nvar;
101603    +          %let varname = %sysfunc(varname(&dsid, &i));
101604    +          &varname
101605    +          %end;
101606    +       %end;
101607    +       ;
101608    +      %if &freq ne  %then %do;
101609    +          freq &freq;
101610    +      %end;
101611    +      %if &weight ne  %then %do;
101612    +          weight &weight;
101613    +      %end;
101614    +
101615    +      run;
101616    +      %if &corrmatrix eq Y %then %do;
101617    +      data  &outcorr (drop = _NCL_ _TYPE_);
101618    +           set  &outstat ;
101619    +           if _TYPE_ ='CORR' then output;
101620    +      run;
101621    +      %end;
101622    +    %end;
101623    +    %else %do;
101624    +       proc corr data=&indata outp=&outstat noprint;
101625    +            var
101626    +       %let dsid = %sysfunc(open(&indata));
101627    +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
101628    +          %do i = 1 %to &nvar;
101629    +              %let _name = %sysfunc(varname(&dsid, &i));
101630    +              %if &_name ne &target %then;
101631    +              &_name
101632    +           %end;
101633    +        %let dsid= %sysfunc(close(&dsid));
101634    +        ;
101635    +        with &target;
101636    +        run;
101637    +    %end;
101638    +    quit;
101639    +%mend MakeCorrelation;
101640    +
101641    +
101642    +%macro MakeCorrelationDistance(indata=,
101643    +                               outdata=,
101644    +                               rsquare = N
101645    +                               );
101646    +    data corr_tmp;
101647    +        set &indata;
101648    +        if _N_ = 1 then do;
101649    +           output;
101650    +           stop;
101651    +         end;
101652    +    run;
101653    +    %if &outdata ne  %then %let  _outdata = &outdata;
101654    +    %else %let _outdata = &indata;
101655    +
101656    +    data &_outdata;
101657    +         set &indata;
101658    +
101659    +         %let dsid = %sysfunc(open(work.corr_tmp));
101660    +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
101661    +          %do i = 2 %to &nvar;
101662    +              %let _name = %sysfunc(varname(&dsid, &i));
101663    +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
101664    +              %else  %let _name_md = &_name;
101665    +              &_name = 1- &_name_md;
101666    +          %end;
101667    +      %let dsid= %sysfunc(close(&dsid));
101668    +      run;
101669    +      proc datasets lib = work nolist;
101670    +           delete corr_tmp;
101671    +      run;
101672    +      quit;
101673    +  %mend MakeCorrelationDistance;
101674    +
101675    +
101676    +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
101677    +                                   rsquare = N
101678    +                                   );
101679    +    data corr_tmp;
101680    +        set &indata;
101681    +    run;
101682    +    proc sql noprint;
101683    +           update &indata
101684    +           set
101685    +     %let dsid = %sysfunc(open(work.corr_tmp));
101686    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
101687    +          %do i = 4 %to &nvar;
101688    +          %let _name = %sysfunc(varname(&dsid, &i));
101689    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
101690    +            %else  %let _name_md = &_name;
101691    +            %if &i < &nvar %then %do;
101692    +               &_name = 1- &_name_md ,
101693    +            %end;
101694    +            %else %do;
101695    +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
101696    +            %end;
101697    +          %end;
101698    +      %let dsid= %sysfunc(close(&dsid));
101699    +
101700    +      select * from &indata;
101701    +      run;
101702    +     data &indata( drop = _NCL_);
101703    +           set &indata;
101704    +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
101705    +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
101706    +     run;
101707    +     data &indata(DROP = _NCL_);
101708    +           set &indata;
101709    +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
101710    +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
101711    +           rename _NAME_ = _VAR_;
101712    +     run;
101713    +     proc datasets lib = work nolist;
101714    +           delete corr_tmp;
101715    +     run;
101716    +     quit;
101717    + %mend UpdateOutStatCorrToDistance;
101718    +
101719    +
101720    +%macro HierClusWithCorr(indata= ,
101721    +                        ncluster=,
101722    +                        method = Ward,
101723    +                        outtree = _outtree,
101724    +                        idvar =_VAR_,
101725    +                        outdata=,
101726    +                        rescore = N,
101727    +                        newncluster=
101728    +                        );
101729    +      %global &newncluster;
101730    +      %if &rescore ne Y %then %do;
101731    +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
101732    +                   method=&method outtree=&outtree noprint;
101733    +           id &idvar;
101734    +      run;
101735    +      %end;
101736    +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
101737    +      run;
101738    +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
101739    +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
101740    +      run;
101741    +      data _outcontent;
101742    +          set _outcontent;
101743    +          if NAME in ('_TYPE_' , '_VAR_') then delete;
101744    +          index = 1;
101745    +          rename NAME = _NAME_;
101746    +      run;
101747    +      proc sort data=_outcontent;
101748    +          by _NAME_;
101749    +      run;
101750    +      proc sort data =&outdata;
101751    +           by _NAME_;
101752    +      run;
101753    +      data &outdata(drop=index);
101754    +          merge &outdata _outcontent;
101755    +          by _NAME_;
101756    +          if index = . then delete;
101757    +      run;
101758    +      /*-----------------------------------------------------------*/
101759    +      data &outdata;
101760    +           length CLUSNAME $16;
101761    +           set &outdata;
101762    +           if CLUSTER > &ncluster then delete;
101763    +           CLUSNAME='GC'||strip(CLUSTER);
101764    +           *label CLUSNAME = "Cluster Name";
101765    +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
101766    +           rename _NAME_ = VARIABLE ;
101767    +           *label _NAME_ = "Variable";
101768    +           *label CLUSTER = "Cluster";
101769    +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
101770    +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
101771    +      run;
101772    +      proc sort data=&outdata out=&outdata;
101773    +           by CLUSTER;
101774    +      run;
101775    +      proc means data =&outdata noprint;
101776    +           output out=_meanout;
101777    +      run;
101778    +      data _null_;
101779    +            set _meanout;
101780    +            if strip(_STAT_) eq 'MAX' then do;
101781    +            call symput("&newncluster", CLUSTER);
101782    +            stop;
101783    +            end;
101784    +      run;
101785    +
101786    +      proc datasets lib = work nolist;
101787    +           delete _outcontent _meanout;
101788    +      run;
101789    +      quit;
101790    +%mend  HierClusWithCorr;
101791    +
101792    +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
101793    +
101794    +     data _tmpindata;
101795    +          set &indata;
101796    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
101797    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
101798    +          if _TYPE_ = 'STD' then _NAME_='STD';
101799    +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
101800    +          DROP _TYPE_ _NCL_;
101801    +     run;
101802    +
101803    +     filename _file_  "&fileRef";
101804    +
101805    +     data _null_;
101806    +        FILE _file_ MOD;
101807    +        put ' ';
101808    +        put "/*-------------------------------------------------*/";
101809    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
101810    +        put "/*-------------------------------------------------*/";
101811    +        put ' ';
101812    +        %let dsid = %sysfunc(open(work._tmpindata));
101813    +
101814    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
101815    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
101816    +        %let k = 1;
101817    +        %do %while(^%sysfunc(fetch(&dsid)));
101818    +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
101819    +               %if &k > 2 %then %do;
101820    +                %let cn = %eval(&k-2);
101821    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
101822    +                %end;
101823    +                %let k = %eval(&k+1);
101824    +
101825    +        %end;
101826    +        %let rc = %sysfunc(rewind(&dsid));
101827    +
101828    +        %do j= 2 %to &nvar;
101829    +            %let _varname = %sysfunc(varname(&dsid, &j));
101830    +            %do %while(^%sysfunc(fetch(&dsid)));
101831    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
101832    +                %if &_name = MEAN %then
101833    +                %let _mean = %sysfunc(getvarn(&dsid, &j));
101834    +                %else %if &_name = STD %then
101835    +                %let _std = %sysfunc(getvarn(&dsid, &j));
101836    +                %else %do;
101837    +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
101838    +                      %let abscoeff = %sysfunc(abs(&coeff));
101839    +                          %if &abscoeff >  0 %then %do;
101840    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
101841    +                           %end;
101842    +                 %end;
101843    +             %end;
101844    +             %let rc = %sysfunc(rewind(&dsid));
101845    +         %end;
101846    +
101847    +        %let dsid= %sysfunc(close(&dsid));
101848    +
101849    +     run;
101850    +
101851    +     filename _file_;
101852    +     proc datasets lib = work nolist;
101853    +           delete _tmpindata;
101854    +     run;
101855    +     quit;
101856    +%mend CreateScoreCode2;
101857    +
101858    +
101859    +%macro MakeDeltaCode2(groupds=,deltacodefile=);
101860    +
101861    +     /*--- Build Code to Modify Metadata ---*/
101862    +     filename X "&deltacodefile";
101863    +     data _null_;
101864    +        FILE X;
101865    +        set &groupds end=eof;
101866    +        if _N_=1 then do;
101867    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
101868    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
101869    +           %end;
101870    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
101871    +           put "if upcase(strip(NAME)) in (";
101872    +        end;
101873    +        if Strip(upcase(Selected)) eq 'YES' then do;
101874    +           string = '"'!!trim(left(VARIABLE))!!'"';
101875    +           put string;
101876    +        end;
101877    +        if eof then do;
101878    +           put ') then ROLE="INPUT";';
101879    +           put 'else ROLE="REJECTED";';
101880    +           put 'end;';
101881    +
101882    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
101883    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
101884    +           %end;
101885    +        end;
101886    +     run;
101887    +     quit;
101888    +
101889    +     filename X;
101890    +     quit;
101891    +%mend MakeDeltaCode2;
101892    +
101893    +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
101894    +  %global &ngc;
101895    +  data _null_;
101896    +  %if &indata ne %then %do;
101897    +      %let dsid = %sysfunc(open(&indata));
101898    +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
101899    +      %let dsid = %sysfunc(close(&dsid));
101900    +  %end;
101901    +  %else %do;
101902    +       %let nvar = %eval(&ninput+&ndummy); ;
101903    +  %end;
101904    +  %let numgc = %eval(&nvar/&div+2);
101905    +  %let &ngc = &numgc;
101906    +   run;
101907    +  quit;
101908    +%mend getInitialGClusterNumber;
101909    +
101910    +
101911    +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
101912    +data &outlink(drop = Selected);
101913    +     set &indata;
101914    +     LINKID = _N_;
101915    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
101916    +run;
101917    +data &outnode(keep=NODEID TYPE LABEL);
101918    +    set &indata;
101919    +    length TYPE $16;
101920    +    rename VARIABLE = NODEID;
101921    +    *label  CLUSNAME="Node ID";
101922    +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
101923    +    TYPE = "VARIABLE";
101924    +    *label TYPE = "Node Type";
101925    +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
101926    +    run;
101927    +data _tmp(keep=NODEID TYPE LABEL);
101928    +    set &indata;
101929    +    length TYPE $16;
101930    +    rename CLUSNAME = NODEID;
101931    +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
101932    +    TYPE = "GCLUSTER";
101933    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
101934    +    run;
101935    +proc sort data=_tmp;
101936    +    by NODEID;
101937    +run;
101938    +data _tmp;
101939    +    set _tmp; by NODEID;
101940    +    if first.NODEID then output;
101941    +run;
101942    +proc sort data=&outnode;
101943    +    by NODEID;
101944    +run;
101945    +data  &outnode;
101946    +    set _tmp &outnode;
101947    +run;
101948    +proc datasets lib = work nolist;
101949    +     delete _tmp;
101950    +run;
101951    +quit;
101952    +%mend MakeGobalConstellData;
101953    +
101954    +/* Make contellation plot data among GCLUSTERS */
101955    +
101956    +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
101957    +
101958    +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
101959    +     set &indata;
101960    +     LINKID = _N_;
101961    +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
101962    +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
101963    +     end;
101964    +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
101965    +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
101966    +     end;
101967    +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
101968    +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
101969    +    end;
101970    +run;
101971    +
101972    +data _tmp_outrsquare;
101973    +        set &inoutrsq;
101974    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
101975    +run;
101976    +
101977    +proc freq data =_tmp_outrsquare noprint;
101978    +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
101979    +run;
101980    +
101981    +data &outnode(keep=_NAME_ TYPE LABEL);
101982    +    set &outlink;
101983    +    length TYPE $16;
101984    +    length LABEL $100;
101985    +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
101986    +
101987    +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
101988    +    TYPE = "GCLUSTER";
101989    +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
101990    +    end;
101991    +    else do;
101992    +    TYPE= "ROOT";
101993    +    LABEL= _NAME_;
101994    +    end;
101995    +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
101996    +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
101997    +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
101998    +    run;
101999    +
102000    +proc sort data=&outnode;
102001    +     by _NAME_;
102002    +proc sort data=_tmp_GCLUSFREQ;
102003    +     by _NAME_;
102004    +run;
102005    +
102006    +data  &outnode;
102007    +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
102008    +     if COUNT=. then COUNT=1;
102009    +run;
102010    +
102011    +proc datasets lib = work nolist;
102012    +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
102013    +run;
102014    +
102015    +quit;
102016    +%Mend MakeGClusterConstData;
102017    +
102018    +
102019    +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
102020    +
102021    +    data _gscoretmpds;
102022    +          set &indata;
102023    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
102024    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
102025    +          if _TYPE_ = 'STD' then _NAME_='STD';
102026    +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
102027    +          DROP _TYPE_ _NCL_;
102028    +     run;
102029    +
102030    +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
102031    +        GCluster Component &globalclusid ------ */
102032    +
102033    +    filename _file_  "&fileref";
102034    +
102035    +    data _null_;
102036    +        %if &globalclusid eq 1 %then %do;
102037    +          FILE _file_;
102038    +        %end;
102039    +        %else %do;
102040    +          FILE _file_ MOD;
102041    +        %end;
102042    +
102043    +        %let dsid = %sysfunc(open(work._gscoretmpds));
102044    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
102045    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
102046    +
102047    +        %let k = 1;
102048    +        %do %while(^%sysfunc(fetch(&dsid)));
102049    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
102050    +                %if &k > 2 %then %do;
102051    +                put "&_name = 0 ; ";
102052    +                %end;
102053    +                %let k = %eval(&k+1);
102054    +        %end;
102055    +
102056    +        %let rc = %sysfunc(rewind(&dsid));
102057    +        %do i= 2 %to &nvar;
102058    +            %let _varname =  %sysfunc(varname(&dsid, &i));
102059    +            %do %while(^%sysfunc(fetch(&dsid)));
102060    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
102061    +                %if &_name = MEAN %then
102062    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
102063    +                %else %if &_name = STD %then
102064    +                %let _std = %sysfunc(getvarn(&dsid, &i));
102065    +                %else %do;
102066    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
102067    +                      %let abscoeff = %sysfunc(abs(&coeff));
102068    +                          %if &abscoeff >  0 %then %do;
102069    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
102070    +                           %end;
102071    +                 %end;
102072    +             %end;
102073    +             %let rc = %sysfunc(rewind(&dsid));
102074    +
102075    +         %end;
102076    +
102077    +        %let dsid= %sysfunc(close(&dsid));
102078    +       run;
102079    +
102080    +
102081    +       proc datasets lib=work nolist;
102082    +            delete _gscoretmpds;
102083    +       run;
102084    +      quit;
102085    +
102086    +%mend CreateGClusterScoreCode;
102087    +
102088    +
102089    +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
102090    +
102091    +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
102092    +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
102093    +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
102094    +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
102095    +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
102096    +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
102097    +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
102098    +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
102099    +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
102100    +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
102101    +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
102102    +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
102103    +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
102104    +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
102105    +
102106    +   filename gsfile "&gscorecode";
102107    +
102108    +   data &EM_USER_GSCORE;
102109    +             set &indata;
102110    +             %include  gsfile;
102111    +        keep
102112    +        %do i=1 %to &ngcluster;
102113    +         %let gcvarname = GC&i;
102114    +         &gcvarname
102115    +        %end;
102116    +     ;
102117    +   run;
102118    +
102119    +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
102120    +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
102121    +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
102122    +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
102123    +    noprint  ;
102124    +     var
102125    +       %do i=1 %to &ngcluster;
102126    +         %let gcvarname = GC&i;
102127    +         &gcvarname
102128    +        %end;
102129    +   ;
102130    +   run;
102131    +
102132    +
102133    +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
102134    +   data &EM_USER_GSCORECORRPLOT ;
102135    +        set &EM_USER_GSCORECORRPLOT;
102136    +        rename _X_ = X;
102137    +        rename _Y_ = Y;
102138    +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
102139    +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
102140    +   run;
102141    +
102142    +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
102143    +
102144    +   data &EM_USER_GSCORETREE;
102145    +        length _NAME_ $32;
102146    +        length _LABEL_ $100;
102147    +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
102148    +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
102149    +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
102150    +        end;else do;
102151    +         _LABEL_ = _NAME_;
102152    +        end;
102153    +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
102154    +
102155    +   run;
102156    +
102157    +   quit;
102158    +
102159    +%mend MakeGClusterCorrelation;
102160    +
102161    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
102162    +%macro score;
102163    +
102164    +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
102165    +%include temp;
102166    +filename temp;
102167    +
102168    +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
102169    +
102170    +data _null_;
102171    +         set &EM_USER_VARCLUSMETA;
102172    +         if _N_=1 then
102173    +         call symput('_trainnum', TrainNum);
102174    +         call symput('_exportedcomp', ExportedComp);
102175    +         call symput('_hidevariable', HideVariable);
102176    +         call symput('_newTrain', NewTrain);
102177    +run;
102178    +
102179    +%if &_newTrain = N %then %do;
102180    +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
102181    +        %else %let _exportedCompChanged = Y;
102182    +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
102183    +        %else  %let _hideVariableChanged = Y;
102184    +%end;
102185    +%else %do;
102186    +        %let _exportedCompChanged = Y;
102187    +        %let _hideVariableChanged = Y;
102188    +%end;
102189    +
102190    +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
102191    +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
102192    +     %include temp;
102193    +     filename temp;
102194    +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
102195    +%end;
102196    +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
102197    +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
102198    +     %include temp;
102199    +     filename temp;
102200    +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
102201    +%end;
102202    +
102203    +  /* store  current property values */
102204    + data &EM_USER_VARCLUSMETA;
102205    +       set &EM_USER_VARCLUSMETA;
102206    +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
102207    +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
102208    + run;
102209    +
102210    +%mend score;
102211    +
102212    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
102213    +
102214    +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
102215    +     proc sort data =&indata;
102216    +              by Cluster RsqRatio Type;
102217    +     run;
102218    +     /*----------------------------------------------------------------------
102219    +      The Type variabe is used becuse the variable need to be selected
102220    +        instead of Cluster component when only one variable is in the cluster
102221    +     +-----------------------------------------------------------------------*/
102222    +
102223    +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
102224    +         data &indata;
102225    +              set &indata; by cluster;
102226    +              if first.Cluster then Selected = 'YES';
102227    +              else Selected = 'NO';
102228    +         run;
102229    +         quit;
102230    +    %end;
102231    +    %else %do;
102232    +         data &indata(drop = _var _varchange);
102233    +              set &indata; retain _var 0; by Cluster;
102234    +             if first.Cluster then  _varchange = 0;
102235    +                 else _varchange =1;
102236    +             if _var ne _varchange then  Selected  = 'YES';
102237    +             else Selected = 'NO';
102238    +             if last.cluster then  _var = 0;
102239    +             else _var = _varchange;
102240    +         run;
102241    +         quit;
102242    +    %end;
102243    +%mend ChangeVariableSelectionFlag;
102244    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS3.VarClus_VARCLUSMETA;
MPRINT(SCORE):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(SCORE):   call symput('_exportedcomp', ExportedComp);
MPRINT(SCORE):   call symput('_hidevariable', HideVariable);
MPRINT(SCORE):   call symput('_newTrain', NewTrain);
MPRINT(SCORE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
102245    +
102246    +%macro score1(ExportedCompChanged=,
102247    +              HideVariableChanged=);
102248    +
102249    +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
102250    +   %if &ExportedCompChanged = Y %then %do;
102251    +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
102252    +   %end;
102253    +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
102254    +
102255    +%mend score1;
102256    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE1):  ;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   proc sort data =EMWS3.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by Cluster RsqRatio Type;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 6 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CHANGEVARIABLESELECTIONFLAG):   data EMWS3.VarClus_OUTRSQUARE(drop = _var _varchange);
MPRINT(CHANGEVARIABLESELECTIONFLAG):   set EMWS3.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   retain _var 0;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by Cluster;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if first.Cluster then _varchange = 0;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else _varchange =1;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if _var ne _varchange then Selected = 'YES';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else Selected = 'NO';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if last.cluster then _var = 0;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else _var = _varchange;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTRSQUARE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CHANGEVARIABLESELECTIONFLAG):   quit;
MPRINT(SCORE1):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   FILE X;
MPRINT(MAKEDELTACODE):   set EMWS3.VarClus_OUTRSQUARE end=eof;
MPRINT(MAKEDELTACODE):   if _N_=1 then do;
MPRINT(MAKEDELTACODE):   put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
MPRINT(MAKEDELTACODE):   put "if upcase(strip(NAME)) in (";
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if Strip(upcase(Selected)) eq 'YES' then do;
MPRINT(MAKEDELTACODE):   string = '"'!!trim(left(VARIABLE))!!'"';
MPRINT(MAKEDELTACODE):   put string;
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if eof then do;
MPRINT(MAKEDELTACODE):   put ') then ROLE="INPUT";';
MPRINT(MAKEDELTACODE):   put 'else ROLE="REJECTED";';
MPRINT(MAKEDELTACODE):   put 'end;';
MPRINT(MAKEDELTACODE):   put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=14 de marzo de 2021 13H51,
      Create Time=13 de marzo de 2021 21H19
 
NOTE: 8 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEDELTACODE):   quit;
MPRINT(MAKEDELTACODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEDELTACODE):   quit;
MPRINT(SCORE1):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS3.VarClus_VARCLUSMETA;
MPRINT(SCORE):   set EMWS3.VarClus_VARCLUSMETA;
MPRINT(SCORE):   ExportedComp = "BESTVARWITHCOMP";
MPRINT(SCORE):   HideVariable = "Y";
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
102257     *------------------------------------------------------------*;
102258     * End SCORE: VarClus;
102259     *------------------------------------------------------------*;
102260
 
102261     filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
102262     *------------------------------------------------------------*;
102263     * VarClus: Scoring DATA data;
102264     *------------------------------------------------------------*;
102265     data EMWS3.VarClus_TRAIN
102266     / view=EMWS3.VarClus_TRAIN
102267     ;
MPRINT(EM_DIAGRAM):   data EMWS3.VarClus_TRAIN / view=EMWS3.VarClus_TRAIN ;
102268     set EMWS3.Varsel_TRAIN
102269     ;
MPRINT(EM_DIAGRAM):   set EMWS3.Varsel_TRAIN ;
102270     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
102271    +
102272    +/*-------------------------------------------------*/
102273    +/* Código de puntuación de Varclus*/
102274    +/*-------------------------------------------------*/
102275    +
102276    +Clus1 = 0 ; /*---Componente clúster 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
102277    +Clus2 = 0 ; /*---Componente clúster 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
102278    +Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;
102279    +Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;
102280    +Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;
102281    +Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
102282     run;
 
NOTE: DATA STEP view saved on file EMWS3.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
102283     quit;
102284     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
102285     filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
102286     *------------------------------------------------------------*;
102287     * VarClus: Scoring VALIDATE data;
102288     *------------------------------------------------------------*;
102289     data EMWS3.VarClus_VALIDATE
102290     / view=EMWS3.VarClus_VALIDATE
102291     ;
MPRINT(EM_DIAGRAM):   data EMWS3.VarClus_VALIDATE / view=EMWS3.VarClus_VALIDATE ;
102292     set EMWS3.Varsel_VALIDATE
102293     ;
MPRINT(EM_DIAGRAM):   set EMWS3.Varsel_VALIDATE ;
102294     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
102295    +
102296    +/*-------------------------------------------------*/
102297    +/* Código de puntuación de Varclus*/
102298    +/*-------------------------------------------------*/
102299    +
102300    +Clus1 = 0 ; /*---Componente clúster 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
102301    +Clus2 = 0 ; /*---Componente clúster 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
102302    +Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;
102303    +Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;
102304    +Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;
102305    +Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
102306     run;
 
NOTE: DATA STEP view saved on file EMWS3.VARCLUS_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
102307     quit;
102308     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
102309     filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
102310     *------------------------------------------------------------*;
102311     * VarClus: Scoring TEST data;
102312     *------------------------------------------------------------*;
102313     data EMWS3.VarClus_TEST
102314     / view=EMWS3.VarClus_TEST
102315     ;
MPRINT(EM_DIAGRAM):   data EMWS3.VarClus_TEST / view=EMWS3.VarClus_TEST ;
102316     set EMWS3.Varsel_TEST
102317     ;
MPRINT(EM_DIAGRAM):   set EMWS3.Varsel_TEST ;
102318     %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMFLOWSCORE.sas.
102319    +
102320    +/*-------------------------------------------------*/
102321    +/* Código de puntuación de Varclus*/
102322    +/*-------------------------------------------------*/
102323    +
102324    +Clus1 = 0 ; /*---Componente clúster 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
102325    +Clus2 = 0 ; /*---Componente clúster 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
102326    +Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.14843081095784 * (CLAGE - 185.203137466648)/84.0599022477296;
102327    +Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+1 * (DEBTINC - 34.3660953561507)/8.76078284183153;
102328    +Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.50256406910821 * (MORTDUE - 75057.8942583732)/43088.6722812176;
102329    +Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.50727788479825 * (VALUE - 107078.16937799)/52493.0066397462;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
102330     run;
 
NOTE: DATA STEP view saved on file EMWS3.VARCLUS_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.VARSEL_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
102331     quit;
102332     filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
102334     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
102335     * VarClus: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * VarClus: Computing metadata for TRAIN data;
102336     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS3.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS3.VarClus_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS3.VarClus_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS3.VarClus_TRAIN out=WORK.M0G6WVVO noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0G6WVVO;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0G6WVVO(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0G6WVVO;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0G6WVVO;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2A0XCX2 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M18VY1EM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   set WORK.M2A0XCX2;
MPRINT(EMADVISECOLUMNS):   label NAME = "Nombre de la variable" TYPE = "Tipo" ROLE = "Rol" LEVEL= "Nivel de medida" ORDER= "Orden" CREATOR= "Creador" FORMATTYPE= "Tipo de formato" FAMILY= "Familia" DISTRIBUTION= "Distribución" PRICE= "Precio" LOWERLIMIT=
"Límite inferior" UPPERLIMIT= "Límite superior" REPORT= "Informe" COMMENT= "Comentario" INDEX= "Índice" INDEXTYPE= "TipoÍndice" LABEL= "Etiqueta" LENGTH= "Longitud";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS3.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS3.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS3.VarClus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "VarClus";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if upcase(strip(NAME)) in ( "VALUE" "DEBTINC" ) then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE)) = "REJECTED" then delete ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS3.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS3.VARCLUS_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS3.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "14 de marzo de 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "13H51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Log del informe";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Log del informe
Fecha:                14 de marzo de 2021
Hora:                13H51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1M451DV "C:\Jose\DM_ang\Workspaces\EMWS3\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1M451DV new;
MPRINT(EM_DIAGRAM):   run;
102705     %let EMEXCEPTIONSTRING=;
102706     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
102707     * REPORT: VarClus;
MPRINT(EM_DIAGRAM):   * REPORT: VarClus;
102708     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
102709     %let EM_ACTION = REPORT;
102710     %let syscc = 0;
102711
102712     %macro main;
102713
102714        filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
102715        %include temp;
102716        filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
102717        %include temp;
102718        filename temp;
102719
102720       %SetProperties;
102721
102722        %if %upcase(&EM_ACTION) = CREATE %then %do;
102723            filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
102724            %include temp;
102725            filename temp;
102726            %create;
102727        %end;
102728        %else
102729        %if %upcase(&EM_ACTION) = TRAIN %then %do;
102730             filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
102731                %include temp;
102732                filename temp;
102733                %train;
102734        %end;
102735        %else
102736        %if %upcase(&EM_ACTION) = SCORE %then %do;
102737                filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
102738                %include temp;
102739                filename temp;
102740                %score;
102741        %end;
102742        %else
102743        %if %upcase(&EM_ACTION) = REPORT %then %do;
102744                filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
102745                %include temp;
102746                filename temp;
102747                %report;
102748        %end;
102749        /*
102750        %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
102751            %put 'OPENING TABLE';
102752        %end;
102753        %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
102754            %put 'CLOSE TABLE';
102755        %end;
102756        */
102757     %mend main;
102758     %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
102759    +
102760    +/* Initialize property macro variables */
102761    +%macro SetProperties;
102762    +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
102763    +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
102764    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
102765    +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
102766    +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
102767    +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
102768    +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
102769    +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
102770    +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
102771    +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
102772    +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
102773    +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
102774    +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
102775    +
102776    +%mend SetProperties;
102777    +
102778    +%Macro MakeDummyVariables(indata=,
102779    +                          outvar=,
102780    +                          outdata=,
102781    +                          fileref=,
102782    +                          recreatecmeta=N, /* optional */
102783    +                          incmeta=,     /* optional */
102784    +                          outcmeta=,    /* optional */
102785    +                          ndummyvars=_ndummyvars
102786    +                          );
102787    +    %global &ndummyvars;
102788    +
102789    +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
102790    +       class
102791    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
102792    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
102793    +    ;
102794    +    run;
102795    +    %let &ndummyvars = 0;
102796    +    data _null_;
102797    +    %let dsid = %sysfunc(open(work._classout));
102798    +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
102799    +    %let dsid = %sysfunc(close(&dsid));
102800    +    run;
102801    +
102802    +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
102803    +       input
102804    +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
102805    +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
102806    +        / level=nominal stdize=no;
102807    +       make outvar = &outvar;
102808    +       score data = &indata out =&outdata;
102809    +       code  file=  "&fileref";
102810    +    run;
102811    +    %if &recreatecmeta eq Y %then %do;
102812    +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
102813    +    data _tmpds;
102814    +        set _tmpds;
102815    +           ROLE = 'INPUT';
102816    +           LEVEL = 'INTERVAL';
102817    +           CREATOR='DMZIP';
102818    +           if NAME = '_TYPE_' then delete;
102819    +    run;
102820    +    data &outcmeta;
102821    +         set &incmeta _tmpds;
102822    +    run;
102823    +    %end;
102824    +    proc datasets lib=work nolist;
102825    +      delete  _dmdbdat _dmdbcat _classout
102826    +    %if &recreatecmeta eq Y %then %do;
102827    +    _tmpds
102828    +    %end;
102829    +    ;
102830    +    quit;
102831    +%Mend MakeDummyVariables;
102832    +
102833    +/*--- Determine Optimal Number of Cluster ----
102834    +%macro FindClusNum(statds=, groupds=, minvariation=);
102835    +   %global optnclus;
102836    +   data varclus_tmp(drop=_NAME_);
102837    +      set &statDs;
102838    +      where _type_ ='PROPOR';
102839    +   run;
102840    +   proc sort data=varclus_tmp;
102841    +      by _NCL_;
102842    +   run;
102843    +   proc transpose data=varclus_tmp out=varclus_tmp;
102844    +      by _NCL_;
102845    +      var %EM_INTERVAL_INPUT
102846    +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
102847    +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
102848    +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
102849    +          %do i = 2 %to &nvar;
102850    +          %let varname = %sysfunc(varname(&dsid, &i));
102851    +          &varname
102852    +          %end;
102853    +      %end;
102854    +   ;
102855    +   run;
102856    +
102857    +   %if &minVariation eq %then %do;
102858    +       %let minVariation = &EM_PROPERTY_MINVARIATION;
102859    +   %end;
102860    +   %if ^(0<&minVariation<100) %then %do;
102861    +       %let minVariation = 90;
102862    +   %end;
102863    +
102864    +   data _null_;
102865    +      set varclus_tmp end=eof;
102866    +      by _NCL_;
102867    +      retain flag 0;
102868    +      if first._ncl_ then flag=0;
102869    +      if .<col1 < &minVariation then flag=1;
102870    +      if last._ncl_ and ^flag then do;
102871    +         call symput('OPTNCL', _ncl_);
102872    +         stop;
102873    +      end;
102874    +     if eof then call symput('OPTNCL', _ncl_);
102875    +   run;
102876    +
102877    +   %let optnclus = &OPTNCL;
102878    +
102879    +   data varclus_tmp(drop=_NCL_ _NAME_);
102880    +      set &statDs;
102881    +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
102882    +   run;
102883    +   proc sort data=varclus_tmp;
102884    +      by _TYPE_;
102885    +   run;
102886    +   proc transpose data=varclus_tmp out=varclus_tmp;
102887    +      by _TYPE_;
102888    +   run;
102889    +   proc sort data=varclus_tmp;
102890    +      by _name_ _type_;
102891    +   run;
102892    +
102893    +  proc transpose data=varclus_tmp out=&groupds;
102894    +      by _NAME_;
102895    +   run;
102896    +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
102897    +      by Cluster descending Rsquare;
102898    +      where Cluster ne 0;
102899    +   run;
102900    +   proc datasets lib=work nolist mt=(DATA VIEW);
102901    +      delete varclus_tmp;
102902    +   run;
102903    +   quit;
102904    +%mend findClusNum;
102905    +*/
102906    +
102907    +%macro getNclusfromTrain(inoutstat=, nc=);
102908    +%global &nc;
102909    +data _null_;
102910    +    set &inoutstat end=eof;
102911    +    if eof then do;
102912    +    call symput("&nc", _ncl_);
102913    +    end;
102914    +run;
102915    +%mend  getNclusfromTrain;
102916    +
102917    +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
102918    +
102919    +     *--- Build Code to Modify Metadata ---*;
102920    +     filename X "&deltacodefile";
102921    +     data _null_;
102922    +        FILE X;
102923    +        set &groupds end=eof;
102924    +        /*by Cluster;*/
102925    +         if _N_=1 then do;
102926    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
102927    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
102928    +           %end;
102929    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
102930    +           put "if upcase(strip(NAME)) in (";
102931    +        end;
102932    +        if Strip(upcase(Selected)) eq 'YES' then do;
102933    +           string = '"'!!trim(left(VARIABLE))!!'"';
102934    +           put string;
102935    +        end;
102936    +        if eof then do;
102937    +           put ') then ROLE="INPUT";';
102938    +           put 'else ROLE="REJECTED";';
102939    +           put 'end;';
102940    +
102941    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
102942    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
102943    +           %end;
102944    +        end;
102945    +     run;
102946    +     quit;
102947    +
102948    +     filename X;
102949    +
102950    +     quit;
102951    +%mend MakeDeltaCode;
102952    +
102953    +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
102954    +    %if ^%sysfunc(exist(&statds)) %then %do;
102955    +         %goto doendc;
102956    +    %end;
102957    +
102958    +    data &corrds(drop=_TYPE_ _NCL_) ;
102959    +       set &statds;
102960    +       where _type_ eq 'CORR' ;
102961    +    run ;
102962    +    proc sort data=&corrds;
102963    +       by _NAME_ ;
102964    +    run ;
102965    +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
102966    +      BY _NAME_ ;
102967    +    run ;
102968    +    data &corrplotds;
102969    +       length _Y_ $100;
102970    +       set &corrplotDs;
102971    +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
102972    +    run ;
102973    +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
102974    +       set &corrplotds;
102975    +       where _LABEL_ ne '' ;
102976    +       keep _TMP_ _LABEL_ ;
102977    +    run ;
102978    +    data _null_;
102979    +       nobs=0;
102980    +       dsid = open('varclus_match');
102981    +       if dsid then do;
102982    +          nobs = attrn(dsid, 'NOBS');
102983    +          dsid = close(dsid);
102984    +       end;
102985    +       call symput ('CORR_NOBS', nobs);
102986    +    run;
102987    +    %if &corr_nobs %then %do;
102988    +        proc sort data=varclus_match;
102989    +           by _name_;
102990    +        run ;
102991    +        proc sort data=&corrplotds;
102992    +           by _name_;
102993    +        run ;
102994    +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
102995    +           merge varclus_match &corrplotds;
102996    +           by _NAME_ ;
102997    +           if _X_ eq '' then _X_=_NAME_ ;
102998    +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
102999    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
103000    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
103001    +
103002    +       run ;
103003    +    %end;
103004    +    %else %do;
103005    +        proc sort data=&corrplotds;
103006    +           by _name_;
103007    +        run ;
103008    +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
103009    +           set &corrplotds;
103010    +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
103011    +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
103012    +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
103013    +
103014    +        run ;
103015    +    %end;
103016    +    proc sort data=&corrplotds;
103017    +       by _X_ _Y_;
103018    +    run ;
103019    +    proc datasets lib=work nolist mt=(DATA VIEW);
103020    +       delete varclus_match;
103021    +    run;
103022    +    quit;
103023    +
103024    +%doendc:
103025    +
103026    +%mend MakeVarClusCorrData;
103027    +
103028    +%macro MakeStatPlotData(statds= , outstatplotds=);
103029    +   %if %sysfunc(exist(&statds)) %then %do;
103030    +
103031    +       data varclus_tmp(drop=_NAME_ _NCL_) ;
103032    +          set &statDs;
103033    +          where _type_ in('MEAN', 'STD', 'N');
103034    +       run ;
103035    +       proc transpose data=varclus_tmp out=&outstatplotds;
103036    +          id _TYPE_ ;
103037    +       run ;
103038    +       data &outstatplotds;
103039    +          set &outstatplotds(obs=1000);
103040    +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
103041    +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
103042    +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
103043    +          else SCALEDSTD= STD ;
103044    +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
103045    +       run ;
103046    +       proc sort data=&outstatplotds;
103047    +          by descending SCALEDSTD ;
103048    +       run ;
103049    +       proc datasets lib=work nolist mt=(DATA VIEW);
103050    +          delete varclus_tmp;
103051    +       run;
103052    +       quit;
103053    +    %end;
103054    +
103055    +%mend MakeStatPlotData;
103056    +
103057    +
103058    +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
103059    +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
103060    +    data &EM_USER_OUTSTATSCORE;
103061    +          set &indata;
103062    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
103063    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
103064    +          if _TYPE_ = 'STD' then _NAME_='STD';
103065    +          DROP _TYPE_ _NCL_;
103066    +     run;
103067    +
103068    +     filename _file_  "&fileRef";
103069    +
103070    +     data _null_;
103071    +        FILE _file_ MOD;
103072    +        put ' ';
103073    +        put '/*-------------------------------------------------*/';
103074    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
103075    +        put '/*-------------------------------------------------*/';
103076    +        put ' ';
103077    +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
103078    +
103079    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
103080    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
103081    +
103082    +        %let k = 1;
103083    +        %do %while(^%sysfunc(fetch(&dsid)));
103084    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
103085    +                %if &k > 2 %then %do;
103086    +                 %let cn = %eval(&k-2);
103087    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
103088    +                %end;
103089    +                %let k = %eval(&k+1);
103090    +        %end;
103091    +
103092    +        %let rc = %sysfunc(rewind(&dsid));
103093    +
103094    +        %do i= 2 %to &nvar;
103095    +            %let _varname =  %sysfunc(varname(&dsid, &i));
103096    +            %do %while(^%sysfunc(fetch(&dsid)));
103097    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
103098    +                %if &_name = MEAN %then
103099    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
103100    +                %else %if &_name = STD %then
103101    +                %let _std = %sysfunc(getvarn(&dsid, &i));
103102    +                %else %do;
103103    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
103104    +                      %let abscoeff = %sysfunc(abs(&coeff));
103105    +                          %if &abscoeff >  0 %then %do;
103106    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
103107    +                           %end;
103108    +                 %end;
103109    +             %end;
103110    +             %let rc = %sysfunc(rewind(&dsid));
103111    +         %end;
103112    +
103113    +        %let dsid= %sysfunc(close(&dsid));
103114    +       run;
103115    +%mend CreateScoreCode;
103116    +
103117    +
103118    +
103119    +/*----------------------------------------------------------
103120    +    Instead of using %MakeRSquareData,
103121    +    %MakeVarClusResultTable at macro2.source is used
103122    + +----------------------------------------------------------*/
103123    +
103124    +
103125    +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
103126    +
103127    +/* modifying  from ods rsquare = data */
103128    +
103129    +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
103130    +    Length Cluster $16;
103131    +    length Variable $32;
103132    +    Length VariableLabel $64;
103133    +    set &indata; retain CurrentCluster;
103134    +    if NumberOfClusters ^= &ncluster then delete;
103135    +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
103136    +    CurrentCluster = Cluster;
103137    +   run;
103138    +proc sort data =&outdata ;
103139    +     by Cluster RsquareRatio;
103140    +run;
103141    +data _tmprsq(drop=index);
103142    +     set &outdata; by Cluster;
103143    +     if first.Cluster then do;
103144    +     index = strip(scan(Cluster,2 ));
103145    +     Variable = "Clus"||index;
103146    +     VariableLabel = "Cluster Component "||index;
103147    +     OwnCluster = 1;
103148    +     NextClosest = .;
103149    +     RsquareRatio = 0;
103150    +     output;
103151    +     end;
103152    +run;
103153    +
103154    +proc sort data = _tmprsq ;
103155    +     by Cluster RsquareRatio;
103156    +run;
103157    +data &outdata;
103158    +     set &outdata _tmprsq;
103159    +by Cluster;
103160    +run;
103161    +
103162    +
103163    +/* Just create the Selected variable with all YES */
103164    +
103165    +data &outdata;
103166    +    set &outdata; by cluster;
103167    +    length Selected $8;
103168    +    Selected = 'YES';
103169    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
103170    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
103171    +    rename OwnCluster = RSqWithClusterComp;
103172    +    rename NextClosest = RSqWithNextClusComp;
103173    +run;
103174    +
103175    +
103176    +/* Selected = Y/N will be done %score section -----
103177    +
103178    +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
103179    +data &outdata;
103180    +    set &outdata; by cluster;
103181    +    length Selected $8;
103182    +    if first.Cluster then Selected = 'YES';
103183    +    else Selected = 'NO';
103184    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
103185    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
103186    +    rename OwnCluster = RSqWithClusterComp;
103187    +    rename NextClosest = RSqWithNextClusComp;
103188    +run;
103189    +%end;
103190    +%else %do;
103191    +data &outdata;
103192    +    set &outdata; by cluster;
103193    +    if last.Cluster then Selected = 'YES';
103194    +    else Selected = 'NO';
103195    +    label  OwnCluster = 'R-Sqaure with Cluster Component';
103196    +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
103197    +    rename OwnCluster = RSqWithClusterComp;
103198    +    rename NextClosest = RSqWithNextClusComp;
103199    +run;
103200    +%end;
103201    +---------------------------------------------------------------*/
103202    +
103203    +%if %sysfunc(exist(&inClusRSquare)) %then %do;
103204    +/* to calculate NextClosestClusRsq */
103205    +proc transpose data = &inClusRSquare  out=_clusRsq;
103206    +      by cluster;
103207    +      run;
103208    +data _clusRsq;
103209    +     set _clusRsq;
103210    +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
103211    +run;
103212    +
103213    +proc sort data=_clusRsq;
103214    +    by cluster col1;
103215    +    run;
103216    +data _clusRsq(drop=_NAME_ _LABEL_);
103217    +     set _clusRsq; by cluster;
103218    +     if last.Cluster then output;
103219    +     label  COL1 = 'R-Sqaure with Next Cluster Component';
103220    +     rename COL1 = RSqWithNextClusComp;
103221    +     rename Cluster = Variable;
103222    +     label  Cluster = "Variable";
103223    +run;
103224    +
103225    +proc sort data =&outdata;
103226    +     by Variable;
103227    +run;
103228    +data &outdata;
103229    +    merge &outdata _clusRsq;
103230    +    by Variable;
103231    +run;
103232    +proc sort data =&outdata;
103233    +by Cluster  RsquareRatio;
103234    +run;
103235    +quit;
103236    +%end;
103237    +
103238    +proc datasets lib = work nolist;
103239    +     delete _tmprsq _clusRsq;
103240    +     run;
103241    +quit;
103242    +
103243    +%mend MakeRSquareData;
103244    +
103245    +
103246    +/*-------------------------------------------------------------------------*/
103247    +
103248    +
103249    +
103250    +%macro ModifyCorr(indata=,
103251    +                  outdata=,
103252    +                  rsquare = Y
103253    +                  );
103254    +    data corr_tmp;
103255    +        set &indata;
103256    +    run;
103257    +     proc sql;
103258    +           update &indata
103259    +           set
103260    +     %let dsid = %sysfunc(open(work.corr_tmp));
103261    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
103262    +          %do i = 4 %to &nvar;
103263    +          %let _name = %sysfunc(varname(&dsid, &i));
103264    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
103265    +            %else  %let _name_md = &_name;
103266    +            %if &i < &nvar %then %do;
103267    +               &_name = 1- &_name_md ,
103268    +            %end;
103269    +            %else %do;
103270    +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
103271    +            %end;
103272    +          %end;
103273    +      %let dsid= %sysfunc(close(&dsid));
103274    +
103275    +      select * from &indata;
103276    +      run;
103277    +      proc datasets lib = work nolist;
103278    +           delete corr_tmp;
103279    +      run;
103280    +      quit;
103281    +
103282    + %mend ModifyCorr;
103283    +
103284    + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
103285    +    data &outdata(drop= _NCL_  _TYPE_);
103286    +       set &indata;
103287    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
103288    +       rename _NAME_ = Cluster;
103289    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
103290    +    run;
103291    +    %if &RSquare eq Y %then %do;
103292    +     data corr_tmp;
103293    +        set &outdata;
103294    +     run;
103295    +
103296    +     data &outdata(drop=i);
103297    +          set &outdata;
103298    +          %let dsid = %sysfunc(open(work.corr_tmp));
103299    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
103300    +          %do i = 2 %to &nvar;
103301    +            %let _name = %sysfunc(varname(&dsid, &i));
103302    +            %let _name_md = &_name.**2;
103303    +                &_name = &_name_md;
103304    +          %end;
103305    +      %let dsid= %sysfunc(close(&dsid));
103306    +      run;
103307    +      proc datasets lib = work nolist;
103308    +           delete corr_tmp;
103309    +      run;
103310    +
103311    +    %end;
103312    +     quit;
103313    +%mend MakeClusStructCorrData;
103314    +
103315    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
103316    +    data &outdata(drop= _NCL_  _TYPE_);
103317    +       set &indata;
103318    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
103319    +       rename _NAME_ = Cluster;
103320    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
103321    +    run;
103322    +    data corr_tmp;
103323    +        set &outdata;
103324    +    run;
103325    +
103326    +    %let dsid = %sysfunc(open(work.corr_tmp));
103327    +    %let nclus2= %eval(&ncluster+1);
103328    +    data &outdata;
103329    +         set &outdata;
103330    +          %do i = 2 %to &nclus2;
103331    +          %let i_1 = %eval(&i-1);
103332    +            %let _name = %sysfunc(varname(&dsid, &i));
103333    +            %let _newName = Clus&i_1;
103334    +                rename &_name = &_newName; ;
103335    +                *label &_name ="Cluster &i_1";
103336    +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
103337    +          %end;
103338    +          keep Cluster
103339    +          %do i = 2 %to &nclus2;
103340    +                %let _name = %sysfunc(varname(&dsid, &i));
103341    +                &_name
103342    +          %end;
103343    +          ;
103344    +    %let dsid= %sysfunc(close(&dsid));
103345    +     run;
103346    +     quit;
103347    +
103348    +    %if &RSquare eq Y %then %do;
103349    +
103350    +       data corr_tmp;
103351    +        set &outdata;
103352    +     run;
103353    +
103354    +     data &outdata(drop=i);
103355    +          set &outdata;
103356    +          %let dsid = %sysfunc(open(work.corr_tmp));
103357    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
103358    +          %do i = 2 %to &nvar;
103359    +            %let _name = %sysfunc(varname(&dsid, &i));
103360    +            %let _name_md = &_name.**2;
103361    +                &_name = &_name_md;
103362    +          %end;
103363    +      %let dsid= %sysfunc(close(&dsid));
103364    +      run;
103365    +    %end;
103366    +
103367    +    %if &makeplotds eq Y %then %do;
103368    +     proc transpose data = &outdata
103369    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
103370    +          by cluster;
103371    +     run;
103372    +     data &plotds;
103373    +          set  &plotds;
103374    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
103375    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
103376    +     run;
103377    +     %end;
103378    +     proc datasets lib = work nolist;
103379    +           delete corr_tmp;
103380    +     run;
103381    +     quit;
103382    +%mend MakeInterClusCorrData;
103383    +
103384    +
103385    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
103386    +
103387    +data &outlink(drop = Selected);
103388    +     set &indata;
103389    +     LINKID = _N_;
103390    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
103391    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
103392    +run;
103393    +data &outnode(keep=NODEID TYPE LABEL);
103394    +    set &indata;
103395    +    length TYPE $16;
103396    +    rename Variable = NODEID;
103397    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
103398    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
103399    +    then  TYPE = "CLUSTER";
103400    +    else  TYPE="VARIABLE";
103401    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
103402    +run;
103403    +quit;
103404    +%mend MakeClusConstellData;
103405    +
103406    +
103407    +
103408    +%macro MakeClusConstellData(indata=, outlink=, outnode=);
103409    +
103410    +data &outlink(drop = Selected);
103411    +     set &indata;
103412    +     LINKID = _N_;
103413    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
103414    +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
103415    +run;
103416    +data &outnode(keep=NODEID TYPE LABEL);
103417    +    set &indata;
103418    +    length TYPE $16;
103419    +    rename Variable = NODEID;
103420    +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
103421    +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
103422    +    then  TYPE = "CLUSTER";
103423    +    else  TYPE="VARIABLE";
103424    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
103425    +run;
103426    +quit;
103427    +%mend MakeClusConstellData;
103428    +
103429    +
103430    +/*--- This will work only when inds is not a view data -------
103431    +
103432    +%macro getNVarNObs(inds=, nvar=, nobs=);
103433    +
103434    +    %global &nvar;
103435    +    %global &nobs;
103436    +    data _null_;
103437    +         dsid = open("&inds");
103438    +         nv = attrn(dsid, 'NVAR');
103439    +         no = attrn(dsid, 'NOBS');
103440    +         dsid = close(dsid);
103441    +         call symput("&nvar", nv);
103442    +         call symput("&nobs", no);
103443    +    run;
103444    +    quit;
103445    +%mend  getNVarNObs;
103446    +
103447    ++---------------------------------------------------------------*/
103448    +
103449    +
103450    +%macro getNVar(inds=, nvar=);
103451    +    %global &nvar;
103452    +    data _null_;
103453    +         dsid = open("&inds");
103454    +         nv = attrn(dsid, 'NVAR');
103455    +         dsid = close(dsid);
103456    +         call symput("&nvar", nv);
103457    +    run;
103458    +    quit;
103459    +%mend  getNVar;
103460    +
103461    +
103462    +
103463    +%macro getNObs(inds=, nobs=);
103464    +    %global &nobs;
103465    +    data _null_;
103466    +        set &inds end=eof;
103467    +        if eof then call symput("&nobs", _N_);
103468    +    run;
103469    +    quit;
103470    +%mend  getNObs;
103471    +
103472    +%Macro CreateVarclusMeta(trainnum=);
103473    +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
103474    +    data &EM_USER_VARCLUSMETA;
103475    +         length TrainNum 8.;
103476    +         length NewTrain $8;
103477    +         length NGCluster 8.;
103478    +         length ExportedComp $16;
103479    +         length HideVariable $8;
103480    +         TrainNum = &trainnum;
103481    +         NewTrain = "Y";
103482    +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
103483    +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
103484    +         NGCluster = 0; /* zero means no twostage */
103485    +   run;
103486    +   quit;
103487    +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
103488    +
103489    +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
103490    +    data &outdata(drop= _NCL_  _TYPE_);
103491    +       set &indata;
103492    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
103493    +       %if &globalclusid ne %then %do;
103494    +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
103495    +       rename _NAME_ = Cluster;
103496    +       %end;
103497    +       %else %do;
103498    +        _NAME_ = upcase(_NAME_);
103499    +       rename _NAME_ = Cluster;
103500    +       %end;
103501    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
103502    +    run;
103503    +    data corr_tmp;
103504    +        set &outdata;
103505    +    run;
103506    +
103507    +    %let dsid = %sysfunc(open(work.corr_tmp));
103508    +    %let nclus2= %eval(&ncluster+1);
103509    +    data &outdata;
103510    +         set &outdata;
103511    +          %do i = 2 %to &nclus2;
103512    +          %let i_1 = %eval(&i-1);
103513    +            %let _name = %sysfunc(varname(&dsid, &i));
103514    +            %if &globalclusid ne %then
103515    +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
103516    +                     rename &_name = &_newName;
103517    +                     *label &_name ="GC &globalclusid : Cluster &i_1";
103518    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
103519    +                %end;
103520    +            %else
103521    +                %do; %let _newName = CLUS&i_1;
103522    +                     rename &_name = &_newName;
103523    +                     *label &_name ="Cluster &i_1";
103524    +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
103525    +                %end;
103526    +          %end;
103527    +          keep Cluster
103528    +          %do i = 2 %to &nclus2;
103529    +                %let _name = %sysfunc(varname(&dsid, &i));
103530    +                &_name
103531    +          %end;
103532    +          ;
103533    +    %let dsid= %sysfunc(close(&dsid));
103534    +     run;
103535    +     quit;
103536    +
103537    +    %if &RSquare eq Y %then %do;
103538    +
103539    +       data corr_tmp;
103540    +        set &outdata;
103541    +     run;
103542    +
103543    +     data &outdata;
103544    +          set &outdata;
103545    +          %let dsid = %sysfunc(open(work.corr_tmp));
103546    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
103547    +          %do i = 2 %to &nvar;
103548    +            %let _name = %sysfunc(varname(&dsid, &i));
103549    +            %let _name_md = &_name.**2;
103550    +                &_name = &_name_md;
103551    +          %end;
103552    +      %let dsid= %sysfunc(close(&dsid));
103553    +      run;
103554    +    %end;
103555    +
103556    +    %if &makeplotds eq Y %then %do;
103557    +     proc transpose data = &outdata
103558    +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
103559    +          by cluster;
103560    +     run;
103561    +     data &plotds;
103562    +          set  &plotds;
103563    +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
103564    +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
103565    +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
103566    +     run;
103567    +     %end;
103568    +     proc datasets lib = work nolist;
103569    +           delete corr_tmp;
103570    +     run;
103571    +     quit;
103572    +%mend MakeInterClusCorrData;
103573    +
103574    +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
103575    +    data _tmpds(drop= _NCL_);
103576    +       set &indata;
103577    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
103578    +       %if &globalclusid ne %then %do;
103579    +           _NAME_ = "GC&globalclusid.";
103580    +       rename _NAME_ = Cluster;
103581    +       %end;
103582    +       %else %do;
103583    +        _NAME_ = "CLUS";
103584    +        rename _NAME_ = Cluster;
103585    +       %end;
103586    +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
103587    +    run;
103588    +    proc transpose data =_tmpds out =&outdata;
103589    +    run;
103590    +
103591    +    data &outdata(drop=COL1);
103592    +        %if &globalclusid ne %then %do;
103593    +        length GCluster $16;
103594    +        %end;
103595    +        length Cluster $32;
103596    +        length _NAME_ $32;
103597    +         set &outdata;
103598    +         _NAME_ = upcase(_NAME_);
103599    +         rename _NAME_=Variable;
103600    +         *label _NAME_="Variable";
103601    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
103602    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
103603    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
103604    +
103605    +         %if &globalclusid ne %then %do;
103606    +          GCluster = "GC&globalclusid";
103607    +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
103608    +         %end;
103609    +         %else %do;
103610    +         Cluster = "CLUS"||strip(COL1);
103611    +        %end;
103612    +         rename COL2 = RSqWithOwnClusComp;
103613    +         *label COL2 = "R-Square With Own Cluster Component";
103614    +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
103615    +
103616    +   run;
103617    +   proc sort data =&outdata;
103618    +        by Cluster RSqWithOwnClusComp;
103619    +   run;
103620    +   proc datasets lib = work nolist;
103621    +           delete _tmpds;
103622    +   run;
103623    +   quit;
103624    +%mend MakeOwnRSquare;
103625    +
103626    +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
103627    +    data &outdata(drop= _NCL_  _TYPE_);
103628    +       %if &globalclusid ne %then %do;
103629    +        length GCluster $16;
103630    +        %end;
103631    +       set &indata;
103632    +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
103633    +       %if &globalclusid ne %then %do;
103634    +         GCluster = "GC&globalclusid";
103635    +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
103636    +         rename _NAME_ = Cluster;
103637    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
103638    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
103639    +
103640    +       %end;
103641    +       %else %do;
103642    +         _NAME_ = upcase(_NAME_);
103643    +         rename _NAME_ = Cluster;
103644    +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
103645    +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
103646    +
103647    +       %end;
103648    +     run;
103649    +    %if &RSquare eq Y %then %do;
103650    +     data corr_tmp;
103651    +          set &outdata;
103652    +     run;
103653    +     %let istart = 2;
103654    +     %if &globalclusid ne %then %let istart = 3;
103655    +     data &outdata;
103656    +          set &outdata;
103657    +          %let dsid = %sysfunc(open(work.corr_tmp));
103658    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
103659    +          %do i =&istart %to &nvar;
103660    +            %let _name = %sysfunc(varname(&dsid, &i));
103661    +            %let _name_md = &_name.**2;
103662    +                &_name = &_name_md;
103663    +          %end;
103664    +      %let dsid= %sysfunc(close(&dsid));
103665    +      run;
103666    +      proc datasets lib = work nolist;
103667    +           delete corr_tmp;
103668    +      run;
103669    +    %end;
103670    +     quit;
103671    +%mend MakeClusStructCorrData;
103672    +
103673    +/*
103674    +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
103675    +*/
103676    +
103677    +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
103678    +
103679    +     /* The indata should be the outdata
103680    +        from %MakeClusStructCorrData(indata=, outdata=, ); */
103681    +
103682    +     proc sort data =&indata out=_tmpclusRsq;
103683    +     by cluster;
103684    +     run;
103685    +
103686    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
103687    +      by cluster;
103688    +     run;
103689    +
103690    +     proc sort data=_tmpclusRsq;
103691    +        by _NAME_ COL1;
103692    +     run;
103693    +
103694    +     data _tmpclusRsq;
103695    +         length _NAME_ $32;
103696    +         set _tmpclusRsq; by _NAME_;
103697    +          _NAME_ = upcase(_NAME_);
103698    +          %if &ncluster ne 1 %then %do;
103699    +             if last._NAME_ then delete;
103700    +          %end;
103701    +          %else %do;
103702    +             COL1 = 0;
103703    +          %end;
103704    +     run;
103705    +     /* need to sort again */
103706    +     proc sort data=_tmpclusRsq;
103707    +        by _NAME_ COL1;
103708    +     run;
103709    +
103710    +     data &outdata;
103711    +         set _tmpclusRsq; by _NAME_;
103712    +         Cluster = upcase(Cluster);
103713    +         if last._NAME_ then output;
103714    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
103715    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
103716    +         rename COL1 = RSqWithNextClusComp;
103717    +         Cluster = upcase(Cluster);
103718    +         rename Cluster = ClosestCluster;
103719    +         *label  Cluster = "Next Closest Cluster";
103720    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
103721    +         rename _NAME_ = Variable;
103722    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
103723    +    run;
103724    +
103725    +
103726    +    %if &globalclusid ne %then %do;
103727    +    data &outdata;
103728    +       length GCluster $16;
103729    +       set &outdata;
103730    +       GCluster = "GC&globalclusid";
103731    +       run;
103732    +    %end;
103733    +    proc datasets lib = work nolist;
103734    +           delete _tmpclusRsq;
103735    +    run;
103736    +    quit;
103737    +%mend FindNextClosestClusByVar;
103738    +
103739    +
103740    +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
103741    +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
103742    +     proc sort data =&indata out=_tmpclusRsq;
103743    +     by cluster;
103744    +     run;
103745    +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
103746    +     by cluster;
103747    +     run;
103748    +     proc sort data=_tmpclusRsq;
103749    +        by _NAME_ col1;
103750    +     run;
103751    +     data _tmpclusRsq;
103752    +         length _NAME_ $32;
103753    +         set _tmpclusRsq; by _NAME_;
103754    +          _NAME_ = upcase(_NAME_);
103755    +          %if &ncluster ne 1 %then %do;
103756    +             if last._NAME_ then delete;
103757    +          %end;
103758    +          %else %do;
103759    +             COL1 = 0;
103760    +          %end;
103761    +     run;
103762    +     data &outdata;
103763    +         set _tmpclusRsq; by _NAME_;
103764    +         Cluster = upcase(Cluster);
103765    +         if last._NAME_ then output;
103766    +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
103767    +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
103768    +         rename COL1 = RSqWithNextClusComp;
103769    +         Cluster = upcase(Cluster);
103770    +         rename Cluster = ClosestCluster;
103771    +         *label  Cluster = "Next Closest Cluster";
103772    +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
103773    +         rename _NAME_ = Variable;
103774    +         *label  _NAME_ = "Variable";
103775    +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
103776    +
103777    +    run;
103778    +    %if &globalclusid ne %then %do;
103779    +    data &outdata;
103780    +       length GCluster $16;
103781    +       set &outdata;
103782    +       GCluster = "GC&globalclusid";
103783    +       run;
103784    +    %end;
103785    +
103786    +    proc datasets lib = work nolist;
103787    +           delete _tmpclusRsq;
103788    +    run;
103789    +
103790    +    quit;
103791    +%mend FindNextClosestClusByCluster;
103792    +
103793    +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
103794    +/*----
103795    +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
103796    +-----------*/
103797    +
103798    +proc sort data =&indata1;
103799    +    by Variable;
103800    +run;
103801    +proc sort data =&indata2;
103802    +    by Variable;
103803    +run;
103804    +data &outdata;
103805    +    merge &indata1 &indata2;
103806    +    by Variable;
103807    +    length Type $16;
103808    +    Type = 'Variable';
103809    +    *label Type ='Type';
103810    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
103811    +run;
103812    +
103813    +
103814    +data &indata3;
103815    +    set  &indata3 ;
103816    +    length RSqWithOwnClusComp 8.;
103817    +    Cluster = Variable;
103818    +    RSqWithOwnClusComp = 1;
103819    +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
103820    +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
103821    +    length Type $16;
103822    +    Type = 'ClusterComp';
103823    +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
103824    +
103825    +;
103826    +run;
103827    +
103828    +proc sort data=&outdata;
103829    +    by Cluster;
103830    +run;
103831    +proc sort data =&indata3;
103832    +    by Cluster;
103833    +run;
103834    +
103835    +data &outdata;
103836    +     set &outdata &indata3;
103837    +     by Cluster;
103838    +run;
103839    +
103840    +
103841    +/* Create the Selected variable with all YES */
103842    +
103843    +data &outdata;
103844    +     set &outdata;
103845    +     length RsqRatio 8.;
103846    +     length Selected $8;
103847    +     *label RSqRatio = "1-R**2 Ratio";
103848    +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
103849    +     *label Selected = "Variable Selected";
103850    +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
103851    +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
103852    +     Selected ='YES';
103853    +     rename _LABEL_ = Label;
103854    +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
103855    +run;
103856    +
103857    +
103858    +/*----  Selected = Y/N will be assigened at the %score                   -------+
103859    +        Just create the Selected variable with all YES at the step above
103860    + +------------------------------------------------------------------------------+
103861    +
103862    +proc sort data=&outdata;
103863    +    by Cluster RsqRatio;
103864    +run;
103865    +
103866    +%if &selectedcomp eq CLUSTERCOMP %then %do;
103867    +data &outdata;
103868    +     set &outdata; by Cluster;
103869    +     length Selected $8;
103870    +     label Selected = "Variable Selected";
103871    +     if  first.Cluster then Selected ='Yes';
103872    +     else Selected = 'No';
103873    +    run;
103874    +%end;
103875    +%else %do;
103876    +data &outdata(drop = _var _varchange);
103877    +     set &outdata; retain _var 0; by Cluster;
103878    +     length Selected $8;
103879    +     label Selected = "Variable Selected";
103880    +     if first.Cluster then  _varchange = 0;
103881    +     else _varchange =1;
103882    +     if _var ne _varchange then  Selected  = 'Yes';
103883    +     else Selected = 'No';
103884    +     if last.cluster then  _var = 0;
103885    +     else _var = _varchange;
103886    +run;
103887    +%end;
103888    +
103889    +--------------------------------------------------------------*/
103890    +
103891    +quit;
103892    +%mend MakeVarClusResultTable;
103893    +
103894    +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
103895    +     proc sort data =&indata;
103896    +        by cluster;
103897    +     run;
103898    +     proc transpose data =&indata
103899    +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
103900    +          by cluster;
103901    +     run;
103902    +     data &outdata;
103903    +          set  &outdata;
103904    +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
103905    +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
103906    +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
103907    +     run;
103908    +     %if &globalclusid ne %then %do;
103909    +     data &outdata;
103910    +          Length GCluster $16;
103911    +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
103912    +          set  &outdata;
103913    +          GCluster ="GC&globalclusid.";
103914    +          run;
103915    +     %end;
103916    +
103917    +%Mend MakePlotDataFromCorrTable;
103918    +
103919    +
103920    +%macro MakeCorrelation(indata=,
103921    +                       outstat=_tmpoutstat,
103922    +                       corrmatrix=N,
103923    +                       outcorr=_tmpoutcorr,
103924    +                       includeclassvar=N,
103925    +                       target=,
103926    +                       freq=,
103927    +                       weight=);
103928    +   %if &target eq  %then %do;
103929    +
103930    +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
103931    +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
103932    +       %if &includeclassvar eq Y %then %do;
103933    +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
103934    +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
103935    +          %do i = 2 %to &nvar;
103936    +          %let varname = %sysfunc(varname(&dsid, &i));
103937    +          &varname
103938    +          %end;
103939    +       %end;
103940    +       ;
103941    +      %if &freq ne  %then %do;
103942    +          freq &freq;
103943    +      %end;
103944    +      %if &weight ne  %then %do;
103945    +          weight &weight;
103946    +      %end;
103947    +
103948    +      run;
103949    +      %if &corrmatrix eq Y %then %do;
103950    +      data  &outcorr (drop = _NCL_ _TYPE_);
103951    +           set  &outstat ;
103952    +           if _TYPE_ ='CORR' then output;
103953    +      run;
103954    +      %end;
103955    +    %end;
103956    +    %else %do;
103957    +       proc corr data=&indata outp=&outstat noprint;
103958    +            var
103959    +       %let dsid = %sysfunc(open(&indata));
103960    +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
103961    +          %do i = 1 %to &nvar;
103962    +              %let _name = %sysfunc(varname(&dsid, &i));
103963    +              %if &_name ne &target %then;
103964    +              &_name
103965    +           %end;
103966    +        %let dsid= %sysfunc(close(&dsid));
103967    +        ;
103968    +        with &target;
103969    +        run;
103970    +    %end;
103971    +    quit;
103972    +%mend MakeCorrelation;
103973    +
103974    +
103975    +%macro MakeCorrelationDistance(indata=,
103976    +                               outdata=,
103977    +                               rsquare = N
103978    +                               );
103979    +    data corr_tmp;
103980    +        set &indata;
103981    +        if _N_ = 1 then do;
103982    +           output;
103983    +           stop;
103984    +         end;
103985    +    run;
103986    +    %if &outdata ne  %then %let  _outdata = &outdata;
103987    +    %else %let _outdata = &indata;
103988    +
103989    +    data &_outdata;
103990    +         set &indata;
103991    +
103992    +         %let dsid = %sysfunc(open(work.corr_tmp));
103993    +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
103994    +          %do i = 2 %to &nvar;
103995    +              %let _name = %sysfunc(varname(&dsid, &i));
103996    +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
103997    +              %else  %let _name_md = &_name;
103998    +              &_name = 1- &_name_md;
103999    +          %end;
104000    +      %let dsid= %sysfunc(close(&dsid));
104001    +      run;
104002    +      proc datasets lib = work nolist;
104003    +           delete corr_tmp;
104004    +      run;
104005    +      quit;
104006    +  %mend MakeCorrelationDistance;
104007    +
104008    +
104009    +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
104010    +                                   rsquare = N
104011    +                                   );
104012    +    data corr_tmp;
104013    +        set &indata;
104014    +    run;
104015    +    proc sql noprint;
104016    +           update &indata
104017    +           set
104018    +     %let dsid = %sysfunc(open(work.corr_tmp));
104019    +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
104020    +          %do i = 4 %to &nvar;
104021    +          %let _name = %sysfunc(varname(&dsid, &i));
104022    +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
104023    +            %else  %let _name_md = &_name;
104024    +            %if &i < &nvar %then %do;
104025    +               &_name = 1- &_name_md ,
104026    +            %end;
104027    +            %else %do;
104028    +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
104029    +            %end;
104030    +          %end;
104031    +      %let dsid= %sysfunc(close(&dsid));
104032    +
104033    +      select * from &indata;
104034    +      run;
104035    +     data &indata( drop = _NCL_);
104036    +           set &indata;
104037    +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
104038    +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
104039    +     run;
104040    +     data &indata(DROP = _NCL_);
104041    +           set &indata;
104042    +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
104043    +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
104044    +           rename _NAME_ = _VAR_;
104045    +     run;
104046    +     proc datasets lib = work nolist;
104047    +           delete corr_tmp;
104048    +     run;
104049    +     quit;
104050    + %mend UpdateOutStatCorrToDistance;
104051    +
104052    +
104053    +%macro HierClusWithCorr(indata= ,
104054    +                        ncluster=,
104055    +                        method = Ward,
104056    +                        outtree = _outtree,
104057    +                        idvar =_VAR_,
104058    +                        outdata=,
104059    +                        rescore = N,
104060    +                        newncluster=
104061    +                        );
104062    +      %global &newncluster;
104063    +      %if &rescore ne Y %then %do;
104064    +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
104065    +                   method=&method outtree=&outtree noprint;
104066    +           id &idvar;
104067    +      run;
104068    +      %end;
104069    +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
104070    +      run;
104071    +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
104072    +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
104073    +      run;
104074    +      data _outcontent;
104075    +          set _outcontent;
104076    +          if NAME in ('_TYPE_' , '_VAR_') then delete;
104077    +          index = 1;
104078    +          rename NAME = _NAME_;
104079    +      run;
104080    +      proc sort data=_outcontent;
104081    +          by _NAME_;
104082    +      run;
104083    +      proc sort data =&outdata;
104084    +           by _NAME_;
104085    +      run;
104086    +      data &outdata(drop=index);
104087    +          merge &outdata _outcontent;
104088    +          by _NAME_;
104089    +          if index = . then delete;
104090    +      run;
104091    +      /*-----------------------------------------------------------*/
104092    +      data &outdata;
104093    +           length CLUSNAME $16;
104094    +           set &outdata;
104095    +           if CLUSTER > &ncluster then delete;
104096    +           CLUSNAME='GC'||strip(CLUSTER);
104097    +           *label CLUSNAME = "Cluster Name";
104098    +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
104099    +           rename _NAME_ = VARIABLE ;
104100    +           *label _NAME_ = "Variable";
104101    +           *label CLUSTER = "Cluster";
104102    +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
104103    +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
104104    +      run;
104105    +      proc sort data=&outdata out=&outdata;
104106    +           by CLUSTER;
104107    +      run;
104108    +      proc means data =&outdata noprint;
104109    +           output out=_meanout;
104110    +      run;
104111    +      data _null_;
104112    +            set _meanout;
104113    +            if strip(_STAT_) eq 'MAX' then do;
104114    +            call symput("&newncluster", CLUSTER);
104115    +            stop;
104116    +            end;
104117    +      run;
104118    +
104119    +      proc datasets lib = work nolist;
104120    +           delete _outcontent _meanout;
104121    +      run;
104122    +      quit;
104123    +%mend  HierClusWithCorr;
104124    +
104125    +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
104126    +
104127    +     data _tmpindata;
104128    +          set &indata;
104129    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
104130    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
104131    +          if _TYPE_ = 'STD' then _NAME_='STD';
104132    +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
104133    +          DROP _TYPE_ _NCL_;
104134    +     run;
104135    +
104136    +     filename _file_  "&fileRef";
104137    +
104138    +     data _null_;
104139    +        FILE _file_ MOD;
104140    +        put ' ';
104141    +        put "/*-------------------------------------------------*/";
104142    +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
104143    +        put "/*-------------------------------------------------*/";
104144    +        put ' ';
104145    +        %let dsid = %sysfunc(open(work._tmpindata));
104146    +
104147    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
104148    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
104149    +        %let k = 1;
104150    +        %do %while(^%sysfunc(fetch(&dsid)));
104151    +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104152    +               %if &k > 2 %then %do;
104153    +                %let cn = %eval(&k-2);
104154    +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
104155    +                %end;
104156    +                %let k = %eval(&k+1);
104157    +
104158    +        %end;
104159    +        %let rc = %sysfunc(rewind(&dsid));
104160    +
104161    +        %do j= 2 %to &nvar;
104162    +            %let _varname = %sysfunc(varname(&dsid, &j));
104163    +            %do %while(^%sysfunc(fetch(&dsid)));
104164    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104165    +                %if &_name = MEAN %then
104166    +                %let _mean = %sysfunc(getvarn(&dsid, &j));
104167    +                %else %if &_name = STD %then
104168    +                %let _std = %sysfunc(getvarn(&dsid, &j));
104169    +                %else %do;
104170    +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
104171    +                      %let abscoeff = %sysfunc(abs(&coeff));
104172    +                          %if &abscoeff >  0 %then %do;
104173    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
104174    +                           %end;
104175    +                 %end;
104176    +             %end;
104177    +             %let rc = %sysfunc(rewind(&dsid));
104178    +         %end;
104179    +
104180    +        %let dsid= %sysfunc(close(&dsid));
104181    +
104182    +     run;
104183    +
104184    +     filename _file_;
104185    +     proc datasets lib = work nolist;
104186    +           delete _tmpindata;
104187    +     run;
104188    +     quit;
104189    +%mend CreateScoreCode2;
104190    +
104191    +
104192    +%macro MakeDeltaCode2(groupds=,deltacodefile=);
104193    +
104194    +     /*--- Build Code to Modify Metadata ---*/
104195    +     filename X "&deltacodefile";
104196    +     data _null_;
104197    +        FILE X;
104198    +        set &groupds end=eof;
104199    +        if _N_=1 then do;
104200    +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
104201    +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
104202    +           %end;
104203    +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
104204    +           put "if upcase(strip(NAME)) in (";
104205    +        end;
104206    +        if Strip(upcase(Selected)) eq 'YES' then do;
104207    +           string = '"'!!trim(left(VARIABLE))!!'"';
104208    +           put string;
104209    +        end;
104210    +        if eof then do;
104211    +           put ') then ROLE="INPUT";';
104212    +           put 'else ROLE="REJECTED";';
104213    +           put 'end;';
104214    +
104215    +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
104216    +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
104217    +           %end;
104218    +        end;
104219    +     run;
104220    +     quit;
104221    +
104222    +     filename X;
104223    +     quit;
104224    +%mend MakeDeltaCode2;
104225    +
104226    +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
104227    +  %global &ngc;
104228    +  data _null_;
104229    +  %if &indata ne %then %do;
104230    +      %let dsid = %sysfunc(open(&indata));
104231    +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
104232    +      %let dsid = %sysfunc(close(&dsid));
104233    +  %end;
104234    +  %else %do;
104235    +       %let nvar = %eval(&ninput+&ndummy); ;
104236    +  %end;
104237    +  %let numgc = %eval(&nvar/&div+2);
104238    +  %let &ngc = &numgc;
104239    +   run;
104240    +  quit;
104241    +%mend getInitialGClusterNumber;
104242    +
104243    +
104244    +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
104245    +data &outlink(drop = Selected);
104246    +     set &indata;
104247    +     LINKID = _N_;
104248    +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
104249    +run;
104250    +data &outnode(keep=NODEID TYPE LABEL);
104251    +    set &indata;
104252    +    length TYPE $16;
104253    +    rename VARIABLE = NODEID;
104254    +    *label  CLUSNAME="Node ID";
104255    +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
104256    +    TYPE = "VARIABLE";
104257    +    *label TYPE = "Node Type";
104258    +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
104259    +    run;
104260    +data _tmp(keep=NODEID TYPE LABEL);
104261    +    set &indata;
104262    +    length TYPE $16;
104263    +    rename CLUSNAME = NODEID;
104264    +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
104265    +    TYPE = "GCLUSTER";
104266    +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
104267    +    run;
104268    +proc sort data=_tmp;
104269    +    by NODEID;
104270    +run;
104271    +data _tmp;
104272    +    set _tmp; by NODEID;
104273    +    if first.NODEID then output;
104274    +run;
104275    +proc sort data=&outnode;
104276    +    by NODEID;
104277    +run;
104278    +data  &outnode;
104279    +    set _tmp &outnode;
104280    +run;
104281    +proc datasets lib = work nolist;
104282    +     delete _tmp;
104283    +run;
104284    +quit;
104285    +%mend MakeGobalConstellData;
104286    +
104287    +/* Make contellation plot data among GCLUSTERS */
104288    +
104289    +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
104290    +
104291    +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
104292    +     set &indata;
104293    +     LINKID = _N_;
104294    +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
104295    +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
104296    +     end;
104297    +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
104298    +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
104299    +     end;
104300    +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
104301    +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
104302    +    end;
104303    +run;
104304    +
104305    +data _tmp_outrsquare;
104306    +        set &inoutrsq;
104307    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
104308    +run;
104309    +
104310    +proc freq data =_tmp_outrsquare noprint;
104311    +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
104312    +run;
104313    +
104314    +data &outnode(keep=_NAME_ TYPE LABEL);
104315    +    set &outlink;
104316    +    length TYPE $16;
104317    +    length LABEL $100;
104318    +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
104319    +
104320    +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
104321    +    TYPE = "GCLUSTER";
104322    +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
104323    +    end;
104324    +    else do;
104325    +    TYPE= "ROOT";
104326    +    LABEL= _NAME_;
104327    +    end;
104328    +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
104329    +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
104330    +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
104331    +    run;
104332    +
104333    +proc sort data=&outnode;
104334    +     by _NAME_;
104335    +proc sort data=_tmp_GCLUSFREQ;
104336    +     by _NAME_;
104337    +run;
104338    +
104339    +data  &outnode;
104340    +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
104341    +     if COUNT=. then COUNT=1;
104342    +run;
104343    +
104344    +proc datasets lib = work nolist;
104345    +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
104346    +run;
104347    +
104348    +quit;
104349    +%Mend MakeGClusterConstData;
104350    +
104351    +
104352    +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
104353    +
104354    +    data _gscoretmpds;
104355    +          set &indata;
104356    +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
104357    +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
104358    +          if _TYPE_ = 'STD' then _NAME_='STD';
104359    +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
104360    +          DROP _TYPE_ _NCL_;
104361    +     run;
104362    +
104363    +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
104364    +        GCluster Component &globalclusid ------ */
104365    +
104366    +    filename _file_  "&fileref";
104367    +
104368    +    data _null_;
104369    +        %if &globalclusid eq 1 %then %do;
104370    +          FILE _file_;
104371    +        %end;
104372    +        %else %do;
104373    +          FILE _file_ MOD;
104374    +        %end;
104375    +
104376    +        %let dsid = %sysfunc(open(work._gscoretmpds));
104377    +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
104378    +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
104379    +
104380    +        %let k = 1;
104381    +        %do %while(^%sysfunc(fetch(&dsid)));
104382    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104383    +                %if &k > 2 %then %do;
104384    +                put "&_name = 0 ; ";
104385    +                %end;
104386    +                %let k = %eval(&k+1);
104387    +        %end;
104388    +
104389    +        %let rc = %sysfunc(rewind(&dsid));
104390    +        %do i= 2 %to &nvar;
104391    +            %let _varname =  %sysfunc(varname(&dsid, &i));
104392    +            %do %while(^%sysfunc(fetch(&dsid)));
104393    +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
104394    +                %if &_name = MEAN %then
104395    +                %let _mean = %sysfunc(getvarn(&dsid, &i));
104396    +                %else %if &_name = STD %then
104397    +                %let _std = %sysfunc(getvarn(&dsid, &i));
104398    +                %else %do;
104399    +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
104400    +                      %let abscoeff = %sysfunc(abs(&coeff));
104401    +                          %if &abscoeff >  0 %then %do;
104402    +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
104403    +                           %end;
104404    +                 %end;
104405    +             %end;
104406    +             %let rc = %sysfunc(rewind(&dsid));
104407    +
104408    +         %end;
104409    +
104410    +        %let dsid= %sysfunc(close(&dsid));
104411    +       run;
104412    +
104413    +
104414    +       proc datasets lib=work nolist;
104415    +            delete _gscoretmpds;
104416    +       run;
104417    +      quit;
104418    +
104419    +%mend CreateGClusterScoreCode;
104420    +
104421    +
104422    +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
104423    +
104424    +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
104425    +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
104426    +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
104427    +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
104428    +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
104429    +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
104430    +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
104431    +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
104432    +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
104433    +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
104434    +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
104435    +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
104436    +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
104437    +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
104438    +
104439    +   filename gsfile "&gscorecode";
104440    +
104441    +   data &EM_USER_GSCORE;
104442    +             set &indata;
104443    +             %include  gsfile;
104444    +        keep
104445    +        %do i=1 %to &ngcluster;
104446    +         %let gcvarname = GC&i;
104447    +         &gcvarname
104448    +        %end;
104449    +     ;
104450    +   run;
104451    +
104452    +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
104453    +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
104454    +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
104455    +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
104456    +    noprint  ;
104457    +     var
104458    +       %do i=1 %to &ngcluster;
104459    +         %let gcvarname = GC&i;
104460    +         &gcvarname
104461    +        %end;
104462    +   ;
104463    +   run;
104464    +
104465    +
104466    +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
104467    +   data &EM_USER_GSCORECORRPLOT ;
104468    +        set &EM_USER_GSCORECORRPLOT;
104469    +        rename _X_ = X;
104470    +        rename _Y_ = Y;
104471    +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
104472    +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
104473    +   run;
104474    +
104475    +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
104476    +
104477    +   data &EM_USER_GSCORETREE;
104478    +        length _NAME_ $32;
104479    +        length _LABEL_ $100;
104480    +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
104481    +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
104482    +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
104483    +        end;else do;
104484    +         _LABEL_ = _NAME_;
104485    +        end;
104486    +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
104487    +
104488    +   run;
104489    +
104490    +   quit;
104491    +
104492    +%mend MakeGClusterCorrelation;
104493    +
104494    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
104495    +%macro report;
104496    +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
104497    +
104498    +    data _null_;
104499    +         set &EM_USER_VARCLUSMETA;
104500    +         if _N_=1 then
104501    +         call symput('_trainnum', TrainNum);
104502    +    run;
104503    +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
104504    +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
104505    +           %include temp;
104506    +           filename temp;
104507    +           %report1;
104508    +       %end;
104509    +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
104510    +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
104511    +           %include temp;
104512    +           filename temp;
104513    +           %report2;
104514    +    %end;
104515    +
104516    +   /* End of all runs, change the flag of newtrain to N */
104517    +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
104518    +    data &EM_USER_VARCLUSMETA;
104519    +         set &EM_USER_VARCLUSMETA;
104520    +         NewTrain = "N";
104521    +    run;
104522    +    quit;
104523    +%mend report;
104524    +
104525    +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):   ;
MPRINT(REPORT):   data _null_;
MPRINT(REPORT):   set EMWS3.VarClus_VARCLUSMETA;
MPRINT(REPORT):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      419234:166
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
104526    +%macro report1;
104528    +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
104529    +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
104530    +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
104532    +   data &EM_USER_OUTVARSEL;
104533    +        set &EM_USER_OUTRSQUARE;
104534    +        if upcase(strip(SELECTED)) = 'YES' then output;
104535    +   run;
104537    +   data _tmp_outrsquare;
104538    +        set &EM_USER_OUTRSQUARE;
104539    +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
104540    +   run;
104542    +   proc freq data =_tmp_outrsquare noprint;
104543    +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
104544    +   run;
104546    +   proc datasets lib = work nolist;
104547    +     delete _tmp_outrsquare;
104548    +   run;
104550    +   data &EM_USER_CLUSFREQ;
104551    +       set &EM_USER_CLUSFREQ;
104552    +       label
104553    +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
104554    +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
104555    +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
104556    +       ;
104557    +   run;
104559    +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
104560    +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
104561    +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
104563    +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
104564    +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
104565    +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
104566    +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
104567    +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
104568    +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
104569    +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
104570    +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
104572    +   /*
104573    +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
104574    +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
104575    +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
104578    +%mend report1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(REPORT):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   data EMWS3.VarClus_OUTVARSEL;
MPRINT(REPORT1):   set EMWS3.VarClus_OUTRSQUARE;
MPRINT(REPORT1):   if upcase(strip(SELECTED)) = 'YES' then output;
MPRINT(REPORT1):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_OUTVARSEL has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   data _tmp_outrsquare;
MPRINT(REPORT1):   set EMWS3.VarClus_OUTRSQUARE;
MPRINT(REPORT1):   if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
MPRINT(REPORT1):   run;
 
NOTE: There were 6 observations read from the data set EMWS3.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):   proc freq data =_tmp_outrsquare noprint;
MPRINT(REPORT1):   tables cluster/out=EMWS3.VarClus_CLUSFREQ sparse;
MPRINT(REPORT1):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   proc datasets lib = work nolist;
MPRINT(REPORT1):   delete _tmp_outrsquare;
MPRINT(REPORT1):   run;
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):   data EMWS3.VarClus_CLUSFREQ;
MPRINT(REPORT1):   set EMWS3.VarClus_CLUSFREQ;
MPRINT(REPORT1):   label cluster = "Clúster" count = "Número de frecuencia" percent = "Porcentaje de frecuencia total" ;
MPRINT(REPORT1):   run;
 
NOTE: There were 2 observations read from the data set EMWS3.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS3.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTVARSEL";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "selectedvariables";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.2534979755308;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "CLUSFREQ";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varfreqbycluster";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70154574127008;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTRSQUARE";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varseltable";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.56074242040549;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "FALSE";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "clusterplot";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "OUTLINK";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "OUTNODE";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "NODEID";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "CIRCLE";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "LINKID";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "Variable";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.06453182411591;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTTREE";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DENDROGRAM";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "dendrogram";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "Variable";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "NAME";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "Proportion";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.73212794527976;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTRSQUARE";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SCATTER";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "rsqplot";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RSqRatio";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "Selected";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RsqWithOwnClusComp";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
The SAS System
 
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RsqWithNextClusComp";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCORRPLOT";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varcorr";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_X_";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_Y_";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "correlation";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.19692949075108;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCLUSCORRPLOT";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "cluscorr";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "X";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "Correlation";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.95566743144563;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCLUSSTRUCT";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "corrstruct";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_anynumeric_";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):   ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   data EMWS3.VarClus_VARCLUSMETA;
MPRINT(REPORT):   set EMWS3.VarClus_VARCLUSMETA;
MPRINT(REPORT):   NewTrain = "N";
MPRINT(REPORT):   run;
 
NOTE: There were 1 observations read from the data set EMWS3.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS3.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   quit;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
104581     *------------------------------------------------------------*;
104582     * End REPORT: VarClus;
104583     *------------------------------------------------------------*;
104584
 
104585     /* Reset EM Options */
104586     options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
104587     options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
104588     goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
104589     proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
104590     by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
104591     run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
