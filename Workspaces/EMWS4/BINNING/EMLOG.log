*------------------------------------------------------------*
User:                Jose Caloca
Date:                16 March 2021
Time:                00:06:07
Site:                70115216
Platform:            X64_10PRO
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:02" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16 March 2021
Time:                00:06:02
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1_QQMGN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1_QQMGN new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:02" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:02" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
25575      proc freq data=EMWS4.BINNING_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS4.BINNING_VariableSet noprint;
25576      table ROLE*LEVEL/out=WORK.BINNINGMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.BINNINGMETA;
25577      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.BINNING_VARIABLESET.
NOTE: The data set WORK.BINNINGMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
25578      proc print data=WORK.BINNINGMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.BINNINGMETA label noobs;
25579      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
25580      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
25581      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
25582      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
25583      run;
 
NOTE: There were 5 observations read from the data set WORK.BINNINGMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
25584      title10;
MPRINT(EM_DIAGRAM):   title10;
25585      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Regression';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25935      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25936      * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
25937      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
25938      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
25939      %let EMEXCEPTIONSTRING=;
25940      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25941      * TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   * TRAIN: BINNING;
25942      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25943      %let EM_ACTION = TRAIN;
25944      %let syscc = 0;
25945      %macro main;
25946
25947        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
25948        %include temp;
25949        filename temp;
25950
25951        %setProperties;
25952
25953        %if %upcase(&EM_ACTION) = CREATE %then %do;
25954          filename temp catalog 'sashelp.emmdfy.binning_create.source';
25955          %include temp;
25956          filename temp;
25957
25958          %create;
25959        %end;
25960
25961         %else
25962         %if %upcase(&EM_ACTION) = TRAIN %then %do;
25963
25964             filename temp catalog 'sashelp.emmdfy.binning_train.source';
25965             %include temp;
25966             filename temp;
25967             %train;
25968         %end;
25969
25970        %else
25971        %if %upcase(&EM_ACTION) = SCORE %then %do;
25972          filename temp catalog 'sashelp.emmdfy.binning_score.source';
25973          %include temp;
25974          filename temp;
25975
25976          %score;
25977
25978        %end;
25979
25980        %else
25981        %if %upcase(&EM_ACTION) = REPORT %then %do;
25982
25983             filename temp catalog 'sashelp.emmdfy.binning_report.source';
25984             %include temp;
25985             filename temp;
25986
25987             %report;
25988         %end;
25989
25990         %doendm:
25991      %mend main;
25992
25993      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
25995     +%macro SetProperties;
25997     +     /* IGN options */
25998     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
25999     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
26000     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
26002     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
26003     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
26004     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
26005     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
26006     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
26007     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
26008     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
26009     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
26010     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
26011     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
26012     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
26013     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
26014     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
26015     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
26017     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
26018     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
26019     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
26022     +%mend SetProperties;
26023     +%macro appendfiles(fileref1, fileref2);
26024     +     data _null_;
26025     +       length c $256;
26026     +       fid1=fopen("&fileref1",'A');
26027     +       fid2=fopen("&fileref2",'I');
26028     +       cval = finfo(fid2,'lrecl');
26029     +       put cval= fid1= fid2=;
26030     +       if (fid2 > 0) then
26031     +         do while(fread(fid2)=0);
26032     +           rc = fget(fid2,c,256);
26033     +           _msg_=sysmsg();
26034     +           /* put rc= c= _msg_=; */
26035     +           rc = fput(fid1,strip(c));
26036     +           rc = fwrite(fid1);
26037     +         end;
26038     +         _msg_=sysmsg();
26039     +         put _msg_=;
26040     +       rc = fclose(fid1);
26041     +       rc = fclose(fid2);
26042     +     run;
26043     +%mend appendfiles;
26045     +%macro buildOptScoreCode;
26047     +    %em_register(key=BINCODE, type=FOLDER);
26049     +    filename x catalog 'sashelp.emutil.em_deldir.source';
26050     +    %inc x;
26051     +    filename x;
26052     +    %delDir(folder=%nrbquote(&em_user_bincode));
26054     +    data _null_; length rc $200;
26055     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
26056     +    run;
26058     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
26060     +    %let dsid = %sysfunc(open(class_nosv));
26061     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
26062     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
26064     +    %let oldname=;
26065     +    %do %while(^%sysfunc(fetch(&dsid)));
26066     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
26067     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
26069     +        %if &name ne &oldname %then %do;
26070     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
26071     +             data _null_;
26072     +                length string $1024 flag endflag 8;
26073     +                retain string flag endflag;
26074     +                set class_nosv end=eof;
26075     +                where DISPLAY_VAR ="&name";
26076     +                by _variable_ _group_;
26077     +                file _F1;
26078     +                index = kindex(_variable_, "BIN_");
26079     +                if index gt 0 then do;
26080     +                   if first._variable_ then do;
26081     +                      put ' ';
26082     +                      put "&EM_CODEBAR;";
26083     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
26084     +                      put string;
26085     +                      put "&EM_CODEBAR;";
26087     +                      if origLabel ne "" then do;
26088     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
26089     +                            put string;
26090     +                            string = tranwrd(origLabel,"'","''");
26091     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
26092     +                            put string;
26093     +                      end;
26094     +                      else do;
26095     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
26096     +                             put string;
26097     +                      end;
26099     +                      put ' ';
26101     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26102     +                      put string;
26103     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26104     +                      put string;
26105     +                      put "end;";
26106     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26107     +                      put string;
26108     +                   end;
26109     +                   if first._group_ then do;
26110     +                      flag = 0;
26111     +                      endflag = 1;
26112     +                      if ^first._variable_ then do;
26113     +                         put "else";
26114     +                      end;
26115     +                      if LB ne . then do;
26116     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
26117     +                      end;
26118     +                      else do;
26119     +                         flag = 1;
26120     +                         string = "if";
26121     +                      end;
26122     +                   end;
26123     +                   if last._Group_ then do;
26124     +                      if UB ne . then do;
26125     +                        if flag ne 1 then do;
26126     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
26127     +                        end;
26128     +                        else do;
26129     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
26130     +                        end;
26131     +                      end;
26132     +                      else do;
26133     +                         if flag=1 then do;
26134     +                            string = strip(DISPLAY_VAR) ;
26135     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
26136     +                            endflag=0;
26137     +                            string="";
26138     +                         end;
26139     +                         else do;
26140     +                            string = strip(string)!!" then do;";
26141     +                         end;
26142     +                      end;
26143     +                      put string;
26144     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
26145     +                      put string;
26146     +                      if endflag eq 1 then do;
26147     +                        put "end;";
26148     +                      end;
26149     +                   end;
26150     +                   if last._variable_ then do;
26151     +                     string = "end;";
26152     +                     put string;
26153     +                   end;
26155     +                end;
26156     +                else do;
26157     +                   _split_value_ = tranwrd(_split_value_,"'","''");
26158     +                   if first._group_ then do;
26159     +                      flag=0;
26160     +                      if ^first._variable_ then
26161     +                         put 'else';
26162     +                      else do;
26163     +                         put ' ';
26164     +                         put "&EM_CODEBAR;";
26165     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
26166     +                         put string;
26167     +                         put "&EM_CODEBAR;";
26169     +                         if origLabel ne "" then do;
26170     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
26171     +                               put string;
26172     +                               string = tranwrd(origLabel,"'","''");
26173     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
26174     +                               put string;
26175     +                         end;
26176     +                         else do;
26177     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
26178     +                               put string;
26179     +                         end;
26181     +                         put ' ';
26183     +                         if format ne '' then do;
26184     +                            if first._variable_ then do;
26185     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
26186     +                               put string;
26187     +                               string = '%dmnormip(_UFormat200);';
26188     +                               put string;
26190     +                               string ="if MISSING(_UFormat200) then do;";
26191     +                               put string;
26192     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26193     +                               put string;
26194     +                               put "end;";
26196     +                               string="else if NOT MISSING(_UFormat200) then do;";
26197     +                               put string;
26199     +                            end;
26200     +                         end;
26201     +                         else do;
26202     +                            if type = 'N' then do;
26203     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26204     +                              put string;
26205     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26206     +                              put string;
26207     +                              put "end;";
26209     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26210     +                              put string;
26211     +                            end;
26212     +                            else if type='C' then do;
26213     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
26214     +                              put string;
26215     +                              string = '%dmnormip(_UFormat200);';
26216     +                              put string;
26218     +                              string ="if MISSING(_UFormat200) then do;";
26219     +                              put string;
26220     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26221     +                              put string;
26222     +                              put "end;";
26224     +                              string="else if NOT MISSING(_UFormat200) then do;";
26225     +                              put string;
26226     +                              string = '%dmnormip(_UFormat200);';
26227     +                              put string;
26228     +                           end;
26229     +                         end;
26230     +                      end;
26231     +                      if format ne '' OR type='C' then do;
26232     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
26233     +                      end;
26234     +                      else do;
26235     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
26236     +                      end;
26237     +                   end;
26238     +                   else do;
26239     +                      if flag ne 1 then do;
26240     +                       if format ne '' OR type='C' then do;
26241     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
26242     +                       end;
26243     +                       else do;
26244     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
26245     +                       end;
26246     +                         length = length(tempstring);
26248     +                         if length < 195 then do;
26249     +                            string = tempstring;
26250     +                         end;
26251     +                         else do;
26253     +                            string = strip(string);
26254     +                            put string;
26255     +                            string = ") then do;";
26256     +                            put string;
26258     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
26259     +                            put string;
26260     +                            put "end;";
26262     +                            put 'else';
26263     +                            if format ne '' OR type='C' then do;
26264     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
26265     +                            end;
26266     +                            else do;
26267     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
26268     +                            end;
26269     +                         end;
26270     +                      end;
26271     +                   end;
26273     +                   if last._group_ then do;
26274     +                      string = strip(string);
26275     +                      put string;
26277     +                      string = ") then do;";
26278     +                      put string;
26280     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
26281     +                      put string;
26282     +                      put "end;";
26283     +                   end;
26285     +                   if last._variable_ then do;
26286     +                     put "else do;";
26288     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26289     +                     put string;
26291     +                     put "end;";
26292     +                     put "end;";
26293     +                   end;
26294     +                end;
26295     +             run;
26297     +             %let oldname = &name;
26298     +        %end;
26299     +    %end;
26300     +    %let dsid = %sysfunc(close(&dsid));
26302     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
26303     +    data _null_;
26304     +       file _F1;
26305     +       put "length _UFormat200 $200;";
26306     +       put "drop _UFormat200;";
26307     +       put "_UFormat200='';";
26308     +    run;
26309     +    filename _F1;
26311     +   %em_register(key=EMSCOREVAR, type=DATA);
26312     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
26313     +   proc datasets lib=&em_lib nolist;
26314     +      delete &scorevarDs;
26315     +   run;
26316     +   quit;
26318     +   %let filrf=mydir;
26319     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
26320     +   %let did=%sysfunc(dopen(&filrf));
26322     +   %if &did %then %do;  %PUT  did= &did;
26323     +       %let memcount=%sysfunc(dnum(&did));
26324     +       %if &memcount > 0 %then %do;
26325     +           data &em_user_emscorevar;
26326     +              length Name $32 formula $70 file $200;
26327     +              keep NAME Formula file;
26328     +              formula  = '';
26329     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
26330     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
26331     +               output;
26332     +           %end;
26333     +           %do i=1 %to &memcount;
26334     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
26335     +               %let newvar = %scan(&name, 1, .);
26336     +               %if "&newvar" ne "_ALL_" %then %do;
26337     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
26338     +                   output;
26339     +               %end;
26340     +           %end;
26342     +           run;
26343     +       %end;
26344     +       %let did = %sysfunc(dclose(&did));
26345     +  %end;
26347     +   %doendu:
26348     +%mend buildOptScoreCode;
26351     +%macro buildScoreCode(flowCode, publishCode);
26354     +  filename x "&flowCode";
26356     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
26357     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
26358     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
26360     +  data temp;
26361     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
26362     +    by display_var _Split_value_;
26363     +     if upcase(_Split_value_) ne 'MISSING';
26364     +   run;
26366     +   data temp_missing;
26367     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
26368     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
26369     +     by display_var _Split_value_;
26370     +     if upcase(_Split_value_) eq 'MISSING';
26371     +     keep _variable_ display_var missgrp;
26372     +   run;
26374     +   proc sort data=temp_missing; by display_var missgrp; run;
26376     +   data temp_missing;
26377     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
26378     +     by display_var missgrp;
26379     +     if ^_a then delete;
26380     +     keep _variable_ display_var missgrp ;
26381     +   run;
26383     +   data temp;
26384     +     merge temp temp_missing;
26385     +     by display_var;
26386     +     if display_Var eq '' then delete;
26387     +    run;
26389     +    /* pull in wtev values */
26390     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
26391     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
26392     +    proc sort data=temp;  by display_var _group_; run;
26394     +   data temp;
26395     +      merge temp tempcoarse(keep=display_var _group_  role) ;
26396     +      by display_var _group_;
26397     +    run;
26399     +    data temp;
26400     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
26401     +      by display_var;
26403     +      if _group_ = . then delete;
26404     +      if _variable_ = '' then delete;
26405     +    run;
26407     +    proc sort data=temp out=class;
26408     +       by _variable_ _group_ LB;
26409     +    run;
26411     +    data _null_;
26412     +      file X;
26414     +      put "length _UFormat200 $200;";
26415     +      put "drop _UFormat200;";
26416     +      put "_UFormat200='';";
26417     +    run;
26419     +    data class_nosv;
26420     +      set class;
26421     +      if upcase(role)="INPUT";
26422     +    run;
26424     +    data _null_;
26425     +       file X MOD;
26426     +       length string $1024 flag endflag 8;
26427     +       retain string flag endflag;
26428     +       set class_nosv end=eof;
26429     +       by _variable_ _group_;
26431     +       index = kindex(_variable_, "BIN_");
26432     +       if index gt 0 then do;
26434     +         if first._variable_ then do;
26435     +            put ' ';
26436     +            put "&EM_CODEBAR;";
26437     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
26438     +            put string;
26439     +            put "&EM_CODEBAR;";
26442     +            if origLabel ne "" then do;
26443     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
26444     +              put string;
26445     +              string = tranwrd(origLabel,"'","''");
26446     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
26447     +              put string;
26448     +            end;
26449     +            else do;
26450     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
26451     +             put string;
26452     +            end;
26454     +            put ' ';
26456     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26457     +            put string;
26458     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26459     +            put string;
26460     +            put "end;";
26461     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26462     +            put string;
26463     +          end;
26464     +           if first._group_ then do;
26465     +              flag = 0;
26466     +              endflag = 1;
26467     +              if ^first._variable_ then do;
26468     +                put "else";
26469     +              end;
26470     +              if LB ne . then do;
26471     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
26472     +              end;
26473     +              else do;
26474     +                 flag = 1;
26475     +                 string = "if";
26476     +              end;
26478     +           end;
26479     +           if last._Group_ then do;
26480     +              if UB ne . then do;
26481     +                if flag ne 1 then do;
26482     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
26483     +                end;
26484     +                else do;
26485     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
26486     +                end;
26487     +              end;
26488     +              else do;
26489     +                 if flag=1 then do;
26490     +                   string = strip(DISPLAY_VAR) ;
26491     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
26492     +                   endflag = 0;
26493     +                   string="";
26494     +                 end;
26495     +                 else do;
26496     +                   string = strip(string)!!" then do;";
26497     +                 end;
26498     +              end;
26499     +              put string;
26501     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
26502     +              put string;
26503     +              if endflag eq 1 then do;
26504     +                put "end;";
26505     +              end;
26506     +           end;
26507     +           if last._variable_ then do;
26508     +             string = "end;";
26509     +             put string;
26510     +           end;
26511     +       end;
26512     +       else do;
26513     +           _split_value_ = tranwrd(_split_value_,"'","''");
26514     +           if first._group_ then do;
26515     +              flag=0;
26516     +              if ^first._variable_ then
26517     +                 put 'else';
26518     +              else do;
26519     +                 put ' ';
26520     +                 put "&EM_CODEBAR;";
26521     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
26522     +                 put string;
26523     +                 put "&EM_CODEBAR;";
26525     +                 if origLabel ne "" then do;
26526     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
26527     +                   put string;
26528     +                   string = tranwrd(origLabel,"'","''");
26529     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
26530     +                   put string;
26531     +                 end;
26532     +                 else do;
26533     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
26534     +                   put string;
26535     +                 end;
26537     +                 put ' ';
26539     +                if format ne '' then do;
26540     +                  if first._variable_ then do;
26541     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
26542     +                    put string;
26543     +                    string = '%dmnormip(_UFormat200);';
26544     +                    put string;
26546     +                     string ="if MISSING(_UFormat200) then do;";
26547     +                     put string;
26548     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26549     +                     put string;
26550     +                     put "end;";
26552     +                     string="else if NOT MISSING(_UFormat200) then do;";
26553     +                     put string;
26555     +                  end;
26556     +                end;
26557     +                else do;
26558     +                     if type = 'N' then do;
26559     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26560     +                       put string;
26561     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26562     +                       put string;
26563     +                       put "end;";
26565     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
26566     +                       put string;
26568     +                     end;
26569     +                     else if type='C' then do;
26570     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
26571     +                        put string;
26572     +                        string = '%dmnormip(_UFormat200);';
26573     +                        put string;
26575     +                        string ="if MISSING(_UFormat200) then do;";
26576     +                        put string;
26577     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26578     +                        put string;
26579     +                        put "end;";
26581     +                        string="else if NOT MISSING(_UFormat200) then do;";
26582     +                        put string;
26583     +                        string = '%dmnormip(_UFormat200);';
26584     +                        put string;
26585     +                    end;
26586     +                end;
26587     +              end;
26588     +              if format ne '' OR type='C' then do;
26589     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
26590     +              end;
26591     +              else do;
26592     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
26593     +              end;
26594     +           end;
26595     +           else do;
26596     +              if flag ne 1 then do;
26597     +                if format ne '' OR type='C' then do;
26598     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
26599     +                end;
26600     +                else do;
26601     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
26602     +                end;
26603     +                length = klength(tempstring);
26605     +                if length < 195 then do;
26606     +                   string = tempstring;
26607     +                end;
26608     +                else do;
26610     +                   string = strip(string);
26611     +                   put string;
26612     +                   string = ") then do;";
26613     +                   put string;
26615     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
26616     +                   put string;
26617     +                   put "end;";
26619     +                 /*  string = strip(string)||",'...';"; */
26621     +                   put 'else';
26622     +                   if format ne '' OR type='C' then do;
26623     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
26624     +                   end;
26625     +                   else do;
26626     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
26627     +                   end;
26630     +                end;
26631     +              end;
26632     +           end;
26634     +           if last._group_ then do;
26635     +              string = strip(string);
26636     +              put string;
26637     +              string = ") then do;";
26638     +              put string;
26640     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
26641     +              put string;
26642     +              put "end;";
26643     +           end;
26645     +           if last._variable_ then do;
26646     +             put "else do;";
26648     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
26649     +             put string;
26651     +             put "end;";
26652     +             put "end;";
26653     +           end;
26654     +         *end;
26655     +       end;
26656     +    run;
26658     +    /* generate PublishCode the same as flowscorecode */
26659     +    filename Y "&publishCode";
26661     +    /* if publishCode already exists, wipe it out first */
26662     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
26663     +      %let rc = %sysfunc(fdelete(Y));
26664     +    %end;
26666     +    %appendfiles(Y, X);
26668     +    %if %EM_BINARY_TARGET= %then %do;
26669     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
26670     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
26671     +      %end;
26672     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
26673     +      %let ibn_inttarget_orig = &ibn_inttarget;
26675     +      %if %symexist(IGNBinTarget)=0 %then %do;
26676     +         %global ignbintarget ignfreqvar;
26677     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
26678     +         %include temp;
26679     +         filename temp;
26680     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
26682     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
26683     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
26684     +         %end;
26685     +      %end;
26686     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
26687     +         proc sql noprint;
26688     +            %if %EM_FREQ ne %then %do;
26689     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
26690     +            %end;
26691     +            %else %do;
26692     +               select mean(&ibn_inttarget)
26693     +            %end;
26694     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
26695     +         quit;
26696     +      %end;
26698     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
26699     +      %if &dsid %then %do;
26700     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
26701     +         %let rc=%sysfunc(close(&dsid));
26702     +      %end;
26703     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
26705     +      data _null_;
26706     +         file x mod;
26707     +         put ' ';
26709     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
26710     +             put "&EM_CODEBAR;";
26711     +             %let note = Mean Cutoff Binary Transformation for Target;
26712     +             put "* &note;";
26713     +             put "&EM_CODEBAR;";
26714     +         %end;
26715     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
26716     +             put "&EM_CODEBAR;";
26717     +             %let note = User-Specified Cutoff Binary Transformation for Target;
26718     +             put "* &note;";
26719     +             put "&EM_CODEBAR;";
26720     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
26721     +         %end;
26722     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
26723     +         put "else do;";
26724     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
26725     +         put "   else &IGNBinTarget=0;";
26726     +         put "end;";
26728     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
26729     +      run;
26731     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
26733     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
26735     +         data _null_;
26736     +            file deltaref;
26737     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
26738     +            put "if name='&IGNBinTarget' then do;";
26739     +            put "   role='TARGET';";
26740     +            put "   level='BINARY';";
26741     +            put "end;";
26742     +         run;
26744     +      %end;
26745     +      %else %do;
26747     +         data _null_;
26748     +            file deltaref;
26749     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
26750     +            put "if name='&IGNBinTarget' then do;";
26751     +            put "   role='REJECTED';";
26752     +            put "   level='BINARY';";
26753     +            put "end;";
26754     +         run;
26755     +      %end;
26757     +      filename deltaref;
26759     +   %end;
26761     +    filename X;
26762     +    filename Y;
26764     +    %buildOptScoreCode;
26766     +    proc datasets library=work nolist;
26767     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
26768     +    run;
26769     +    quit;
26771     +%mend buildScoreCode;
26773     +%macro buildMetaCode(DeltaCodeFile=);
26775     +   /* set variable roles based on New Role column in the Results table */
26776     +   data _null_;
26777     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
26778     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
26779     +      %if &dsid %then %do;
26780     +        %let obs = %sysfunc(fetch(&dsid));
26781     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
26782     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
26783     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
26785     +        %do %while(&obs=0);
26786     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
26787     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
26788     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
26790     +          /* retrieve grp and woe names from varmappings dataset */
26791     +          %let choice = _VARIABLE_ = "&inputname";
26792     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
26793     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
26794     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
26795     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
26796     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
26798     +          put "if name = '&inputname' then role='REJECTED';";
26799     +          %if "&role" ne "DEFAULT" %then %do;
26800     +            put "if name = '&grpname' then role='&role';";
26801     +          %end;
26802     +          %else %do;
26803     +            put "if name = '&grpname' then role='&oldrole';";
26804     +          %end;
26805     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
26807     +          %let obs = %sysfunc(fetch(&dsid));
26808     +        %end;
26809     +      %end;
26810     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26811     +   run;
26813     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
26814     +   data _null_;
26815     +      file &DeltaCodeFile MOD;
26817     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
26818     +      %if &sdsid %then %do;
26819     +        %let sobs = %sysfunc(fetch(&sdsid));
26820     +        %do %while(&sobs=0);
26821     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
26822     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
26823     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
26824     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
26826     +          %let checkgrp = GRP_&checkname;
26827     +          %let lenname = %length(&checkgrp);
26828     +          %if %eval(&lenname-32) > 0 %then %do;
26829     +            %let checkgrp = %substr(&checkgrp, 1, 32);
26830     +          %end;
26832     +          %let choice = _VARIABLE_ ="&checkname";
26833     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
26835     +          /* if var not found in varmappings, delete variables; */
26836     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
26837     +          %if &vdsid eq 0 %then %do;
26838     +            put 'if name="&displayvar" then delete;';
26839     +            %let dispgrp = GRP_&displayvar;
26840     +            put 'if name="&dispgrp" then delete;';
26841     +          %end;
26843     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
26844     +          %let sobs = %sysfunc(fetch(&sdsid));
26845     +        %end;
26846     +      %end;
26847     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
26848     +   run;
26850     +%mend buildMetaCode;
26852     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
26854     +   proc sort data=&coarse out=sortedcoarse nodupkey;
26855     +     by display_var;
26856     +   run;
26857     +   proc sort data=&varmappings nodupkey;
26858     +     by _variable_;
26859     +   run;
26860     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
26861     +     proc sort data=&resultstable; by display_var; run;
26863     +     /* check that _new_role exists - did not exist in earlier releases */
26864     +     %let rds=%sysfunc(open(&resultstable));
26865     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
26866     +     %let rds=%sysfunc(close(&rds));
26867     +   %end;
26869     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
26870     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
26871     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
26872     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
26873     +     %end;
26874     +     ;
26875     +     by display_var;
26876     +     length _role_ _new_role_ $10;
26877     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
26878     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
26879     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
26880     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
26881     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
26882     +           ;
26884     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
26885     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
26886     +                _role_ = "Rejected";
26887     +             else _role_ = "Input";
26888     +           %end;
26889     +           %else %do;
26890     +             _role_ = "Input";
26891     +           %end;
26892     +           if _new_role_ eq "" then _new_role_="Default";
26893     +      if ^_a then do;
26894     +        _gini_ = 0;
26895     +        _role_ = 'Rejected';
26896     +        if _new_role_ eq "" then _new_role_="Default";
26897     +      end;
26898     +   run;
26899     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
26900     +     by NAME;
26901     +   run;
26902     +   data outlabel;
26903     +     set outlabel;
26904     +     if _label_ = '' then _label_ = _variable_;
26905     +   run;
26906     +   data &resultstable;
26907     +     merge &resultstable(in=_a_) outlabel;
26908     +     by display_Var;
26909     +     if _a_ then output;
26910     +   run;
26911     +   proc datasets library=work nolist;
26912     +     delete sortedcoarse outlabel;
26913     +   run;
26914     +   quit;
26915     +   proc sort data=&resultstable nodupkey;
26916     +      by DESCENDING
26917     +        _gini_ display_Var;
26918     +   run;
26919     +   data &resultstable;
26920     +     set &resultstable;
26922     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
26923     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
26924     +     giniOrder = _N_;
26925     +     _gini_ = round(_GINI_, .001);
26926     +     drop _variable_;
26927     +   run;
26929     +   proc print data=&resultstable label;
26930     +   run;
26932     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
26933     +   data &coarse;
26934     +     set &coarse;
26935     +     length role $10;
26936     +     %let dsid = %sysfunc(open(&resultstable));
26937     +     %if &dsid %then %do;
26938     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
26939     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
26940     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
26942     +       %let obs = %sysfunc(fetch(&dsid));
26943     +       %do %while(&obs=0);
26944     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
26945     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
26946     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
26948     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
26949     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
26950     +            giniOrder = &order;
26951     +            role = "&role";
26952     +          end;
26954     +          %let obs = %sysfunc(fetch(&dsid));
26955     +       %end;
26956     +     %end;
26957     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
26958     +   run;
26961     +%mend EM_GENERATE_RESULTSTABLE;
26963     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
26965     +    /* instantiate the zchar macro to be used in adding bin definition */
26966     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
26967     +    %inc _temp;
26968     +    filename _temp;
26970     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
26971     +      by _variable_ binFlag _group_ LB;
26972     +    run;
26974     +    data tempExport;
26975     +      set sortedFine;
26976     +      by _variable_ binFlag _group_;
26977     +      length _split_value_ $200;
26979     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
26980     +      if binFlag = 0 then do;
26981     +        index = kindex(_variable_, "BIN_");
26982     +        if index gt 0 then do;
26983     +          _LEVEL_ = "INTERVAL";
26984     +        end;
26985     +        _Split_value_ = _split_value_;
26986     +        output;
26987     +      end;
26988     +      else do;
26989     +         * if last._group_ then do;
26990     +          index = kindex(_variable_, "BIN_");
26991     +          if index gt 0 then do;
26992     +            _LEVEL_ = "INTERVAL";
26993     +          end;
26994     +          _Split_value_ = %zchar(UB);
26995     +          output;
26996     +         * end;
26997     +      end;
26999     +      rename display_Var = _variable_;
27000     +      keep display_var _level_ _group_ _split_value_ binFlag;
27001     +    run;
27003     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
27004     +       data &EXPORTGROUPING;
27005     +         set tempexport;
27006     +       run;
27007     +    %end;
27008     +    %else %do;
27009     +       /* determine if EXPORTGROUPING already exists */
27010     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
27011     +         data &EXPORTGROUPING;
27012     +            set &EXPORTGROUPING tempexport;
27013     +         run;
27014     +       %end;
27015     +       %else %do;
27016     +         data &EXPORTGROUPING;
27017     +            set tempexport;
27018     +         run;
27019     +       %end;
27020     +    %end;
27022     +    proc datasets lib=work nolist;
27023     +      delete sortedFine tempexport;
27024     +    run;
27025     +    quit;
27027     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_TRAIN.SOURCE.
27033     +%macro train;
27035     +   /* include training macros */
27036     +   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
27037     +   %include trtemp;
27038     +   filename trtemp;
27040     +   /* trick IGN into thinking it is a model node to build decmeta; further down, set %EM_MODEL ASSESS=N
27041     +   %let EM_TOOLTYPE = MODEL; */
27043     +   %if &EM_IMPORT_DATA eq %then %do;
27044     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN, 1;
27045     +       %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note , NOQUOTE));
27046     +       %put &em_codebar;
27047     +       %put &errmsg;
27048     +       %put &em_codebar;
27049     +       %goto doendm;
27050     +   %end;
27052     +   %if  &EM_NUM_TARGET ne 1 %then %do;
27053     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
27054     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINORINTTARGET_ERR  , NOQUOTE));
27055     +        %put &em_codebar;
27056     +        %put &errmsg;
27057     +        %put &em_codebar;
27058     +        %goto doendm;
27059     +   %end;
27061     +  %if  &EM_NUM_BINARY_TARGET ne 1 and &EM_NUM_INTERVAL_TARGET ne 1 %then %do;
27062     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.USE1BINORINTTARGET;
27063     +        %put &em_codebar;
27064     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, METADATA.USE1BINORINTTARGET_ERR, NOQUOTE));
27065     +        %put &errormsg;
27066     +        %put &em_codebar;
27067     +        %goto doendm;
27068     +   %end;
27070     +   /* Initialize property macro variables */
27071     +   %SetProperties;
27072     +   %EM_GETNAME(key=NEWTRAIN, type=DATA);
27074     +   /* check actual num of target levels */
27075     +   %let target_level = %EM_TARGET_LEVEL;
27076     +   %let target_var = %EM_TARGET;
27077     +   %if (&target_Level eq BINARY) %then %do;
27078     +      /* retrieve target information */
27079     +      /* does decmeta exist?  If not, retrieve target information elsewhere */
27080     +      %global target_event;
27081     +      %let target_event=;
27083     +     /* need to check that order is the same in both for cases where they can be out of synch */
27084     +     %if "&EM_DEC_DECMETA" ne "" %then %do;
27085     +         /* retrieve target information */
27086     +         %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
27088     +         %let vn_event =%sysfunc(varnum(&dsid, EVENT));
27089     +         %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
27090     +         %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
27091     +         %let vn_target_order = %sysfunc(varnum(&dsid, ORDER));
27093     +         %do %while(^ %sysfunc(fetch(&dsid)));
27094     +            %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
27095     +            %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
27096     +            %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
27097     +            %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
27098     +            %let Target_Order_DM = %sysfunc(getvarc(&dsid, &vn_target_order));
27099     +         %end;
27100     +         %let dsid = %sysfunc(close(&dsid));
27101     +     %end;
27102     +     %else %let Target_Order_DM=;
27104     +     /* retrieve type and format from variableset */
27105     +     %let eventorder = DESC;
27106     +     data temp;
27107     +       set &EM_DATA_VARIABLESET;
27108     +       where NAME ="%EM_BINARY_TARGET";
27109     +     run;
27111     +     %let dsid = %sysfunc(open(work.temp));
27112     +     %if &dsid %then %do;
27113     +       %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
27114     +       %let formatnum = %sysfunc(VARNUM(&dsid, FORMAT));
27115     +       %let ordernum  = %sysfunc(VARNUM(&dsid, ORDER));
27116     +       %let obs = %sysfunc(fetchobs(&dsid, 1));
27117     +       %let Target_type = %sysfunc(getvarc(&dsid, &typenum));
27118     +       %let Target_Format = %sysfunc(getvarc(&dsid, &formatnum));
27119     +       %let Target_Order  = %sysfunc(getvarc(&dsid, &ordernum));
27120     +     %end;
27121     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27123     +     %if "&EM_DEC_DECMETA" eq "" or ("&Target_Order" ne "&Target_Order_DM") %then %do;
27125     +       %if &TARGET_ORDER  = ASC %then %let eventorder = ASC;
27126     +          %else
27127     +       %if &TARGET_ORDER  = DESC %then %let eventorder = DESC;
27128     +          %else
27129     +       %if &TARGET_ORDER  = FMTASC %then %let eventorder = ASCFMT;
27130     +          %else
27131     +       %if &TARGET_ORDER  = FMTDESC %then %let eventorder = DESFMT;
27133     +        /* retrieve target_event and Target_nonEvent values */
27134     +        proc dmdb data=&EM_IMPORT_DATA(where=(^missing(%EM_BINARY_TARGET))) classout=EVENTOUT;
27135     +          target %EM_BINARY_TARGET;
27136     +          class  %EM_BINARY_TARGET(&eventorder);
27137     +        run;
27139     +        data _null_;
27140     +          dsid = open("EVENTOUT");
27141     +          if dsid>0 then do;
27142     +          levelnum = VARNUM(dsid, "LEVEL");
27143     +          if levelnum then do;
27144     +            if ^fetch(dsid) then
27145     +              call symput('TARGET_EVENT',   strip(getvarc(dsid, levelnum)));
27147     +            if ^fetch(dsid) then
27148     +              call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
27149     +          end;
27150     +          dsid=close(dsid);
27151     +          end;
27152     +        run;
27153     +        proc datasets library=work nolist;
27154     +           delete eventout;
27155     +        run;
27156     +        quit;
27157     +      %end;
27158     +      %else %do;
27159     +          %let dsid=%sysfunc(open(&EM_DEC_DECDATA(where=(%EM_BINARY_TARGET ne "&Target_Event"))));
27160     +          %let obs = %sysfunc(fetchobs(&dsid, 1));
27161     +           %let vn_nonevent = %sysfunc(varnum(&dsid, %EM_BINARY_TARGET));
27162     +           %let Target_NonEvent= %sysfunc(getvarc(&dsid, &vn_nonevent));
27163     +         %let dsid = %sysfunc(close(&dsid));
27164     +      %end;
27166     +      %global ignbintarget;
27167     +      %let ignbintarget = %EM_BINARY_TARGET;
27169     +      data &EM_USER_NEWTRAIN;
27170     +        set &EM_IMPORT_DATA;
27171     +      run;
27172     +   %end;
27173     +   %else %do; /* preprocessing for interval target */
27174     +      %if &EM_PROPERTY_INTTARGETMETHOD=CUTUSER %then %do;
27175     +         proc dmdb data=&EM_IMPORT_DATA varout=minmax;
27176     +            var &target_var;
27177     +         run;
27179     +         data _null_;
27180     +            set minmax;
27181     +            call symput('tarmax',strip(max));
27182     +            call symput('tarmin',strip(min));
27183     +         run;
27185     +         /* cutoff can equal tarmin but not tarmax */
27186     +         %if %sysevalf(&EM_PROPERTY_USERCUTVALUE >= &tarmax) or %sysevalf(&EM_PROPERTY_USERCUTVALUE < &tarmin) %then %do;
27187     +            %let EMEXCEPTIONSTRING = exception.server.IGN.CUTOFFOUTOFRANGE,&tarmin,&tarmax;
27188     +            %put &em_codebar;
27189     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, cutoffoutofrange_error, NOQUOTE, &tarmin, &tarmax));
27190     +            %put &errormsg;
27191     +            %put &em_codebar;
27192     +            %goto doendm;
27193     +         %end;
27194     +      %end;
27196     +      %global ignbintarget;
27197     +      %getVarName(&EM_IMPORT_DATA, BIN_%substr(%EM_INTERVAL_TARGET,1,%sysfunc(min(%length(%EM_INTERVAL_TARGET),28))), IGNBinTarget);
27199     +      %EM_IBN_IntTargetTrans(%EM_INTERVAL_TARGET,&EM_PROPERTY_INTTARGETMETHOD,newLevels=igntbinlevs);
27200     +      %if &igntbinlevs ne 2 %then %do;
27201     +         %let EMEXCEPTIONSTRING = exception.server.IGN.NONBINTARGETTRANS;
27202     +         %put &em_codebar;
27203     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, nonbintargettrans_error, NOQUOTE));
27204     +         %put &errormsg;
27205     +         %put &em_codebar;
27206     +         %goto doendm;
27207     +      %end;
27209     +      %let Target_Event = 1;
27210     +      %let Target_NonEvent = 0;
27211     +      %let Target_Type = BINARY;
27212     +      %let Target_Format = ;
27214     +   %end;
27216     +   /* data sets */
27217     +   %EM_GETNAME(key=BINDATA,        type=DATA);
27218     +   %EM_GETNAME(key=SPLITVALS,      type=DATA);
27219     +   %EM_GETNAME(key=VARMAPPINGS,    type=DATA);
27220     +   %EM_GETNAME(key=BINMAPPINGS,    type=DATA);
27221     +   %EM_GETNAME(key=COARSE,          type=DATA);
27222     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
27223     +   %EM_GETNAME(key=RESULTSTABLE,   type=DATA);
27225     +   /* files */
27226     +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);
27227     +   %EM_GETNAME(key=GROUPMAPPINGSCORECODE, type=FILE, extension=sas);
27229     +   /* if freeze eq Y and no finedetaildata exists, throw an exception */
27230     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
27231     +     %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) ne 1 %then %do;
27232     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOFINEDETAIL;
27233     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, nofinedetail_error , NOQUOTE));
27235     +        %put &em_codebar;
27236     +        %put &errmsg;
27237     +        %put &em_codebar;
27238     +        %goto doendm;
27239     +     %end;
27240     +   %end;
27242     +   %global useImport;
27243     +   %let useImport = 0;
27245     +   %EM_GETNAME(key=IMPORTSUBSET, type=DATA);
27247     +   %if %sysfunc(exist(&EM_USER_IMPORTSUBSET, DATA)) %then %do;
27248     +     proc datasets library=&EM_LIB nolist;
27249     +       delete &EM_NODEID._IMPORTSUBSET;
27250     +     run;
27251     +     quit;
27252     +   %end;
27254     +   /* if importGrouping=Y, verify that data and all vars exist and are of the correct type */
27255     +   %if &EM_PROPERTY_IMPORTGROUPING eq Y %then %do;
27257     +     /* if import eq Y and no importtable exists, throw an exception */
27258     +     %if %sysfunc(exist(&EM_PROPERTY_IMPORTDATA, DATA)) ne 1 %then %do;
27259     +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOIMPORT;
27260     +        %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, noimport_error , NOQUOTE));
27262     +        %put &em_codebar;
27263     +        %put &errmsg;
27264     +        %put &em_codebar;
27265     +        %goto doendm;
27266     +     %end;
27268     +      %let dsid = %sysfunc(open(&EM_PROPERTY_IMPORTDATA));
27269     +      %if &dsid %then %do;
27270     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
27271     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
27272     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
27273     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
27275     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
27276     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
27277     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
27278     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
27279     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
27280     +         %end;
27281     +      %end;
27282     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27284     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
27285     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
27287     +        /* generate subset of data that contains those vars also found in training data and add display_var information */
27288     +        proc sort data=&EM_PROPERTY_IMPORTDATA out=tempimport;
27289     +           by _VARIABLE_ ;
27290     +        run;
27292     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
27293     +          by NAME;
27294     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
27295     +        run;
27297     +        data &EM_USER_IMPORTSUBSET;
27298     +          merge tempimport(in=_a) tempvarset(in=_b);
27299     +          length display_Var $32;
27300     +          by _VARIABLE_;
27301     +          display_var = _Variable_;
27302     +          if _a and _b then output;
27303     +        run;
27305     +        proc datasets library=work nolist;
27306     +          delete tempimport tempvarset;
27307     +        run;
27308     +        quit;
27310     +        %end;
27311     +      %end;
27312     +   %end;
27314     +   /* set useImport flag if there are obs in the importSubset dataset */
27315     +   %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET));
27316     +   %if &dsid %then %do;
27317     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
27318     +     %if &nobs gt 0 %then %let useimport = 1;
27319     +   %end;
27320     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27322     +   %global useFreeze;
27323     +   %let useFreeze = 0;
27325     +   /* if Freeze=Y, verify that data and all vars exist and are of the correct type */
27326     +   %EM_GETNAME(key=FREEZESUBSET, type=DATA);
27328     +   %if %sysfunc(exist(&EM_USER_FREEZESUBSET, DATA)) %then %do;
27329     +     proc datasets library=&EM_LIB nolist;
27330     +       delete &EM_NODEID._FREEZESUBSET;
27331     +     run;
27332     +     quit;
27333     +   %end;
27335     +   %if &EM_PROPERTY_FREEZE eq Y %then %do;
27337     +      /* create freezesubset data to contain information on pre-binned data and raw values */
27338     +      %EM_GENERATE_EXPORTGROUP(&EM_USER_FREEZESUBSET, OVERWRITE);
27340     +      %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
27341     +      %if &dsid %then %do;
27342     +         %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
27343     +         %let splitnum = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
27344     +         %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
27345     +         %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
27347     +         %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
27348     +           %let vtype = %sysfunc(VARTYPE(&dsid, &varnuM));
27349     +           %let stype = %sysfunc(VARTYPE(&dsid, &splitnum));
27350     +           %let gtype = %sysfunc(VARTYPE(&dsid, &grpnum));
27351     +           %let ltype = %sysfunc(VARTYPE(&dsid, &lvlnum));
27352     +         %end;
27353     +      %end;
27354     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27356     +      %if (&varnum AND &splitnum AND &grpnum AND &lvlnum) %then %do;
27357     +        %if ((&vtype eq C) AND (&stype eq C) AND (&gtype eq N) AND (&ltype eq C)) %then %do;
27359     +        /* generate subset of data that contains those vars also found in training data */
27360     +        proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze;
27361     +           by _VARIABLE_ ;
27362     +        run;
27364     +        proc sort data=&EM_DATA_VARIABLESET out=tempvarset(keep=NAME rename=(NAME=_VARIABLE_));
27365     +          by NAME;
27366     +          where ((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y');
27367     +        run;
27369     +        data &EM_USER_FREEZESUBSET;
27370     +          merge tempfreeze(in=_a) tempvarset(in=_b);
27371     +          length display_Var $32;
27372     +          by _VARIABLE_;
27373     +          display_var = _Variable_;
27374     +          if _a and _b then output;
27375     +        run;
27377     +        proc datasets library=work nolist;
27378     +          delete tempfreeze tempvarset;
27379     +        run;
27380     +        quit;
27381     +        %end;
27382     +      %end;
27383     +   %end;
27385     +   /* set useFreeze flag if there are obs in the freezeSubset dataset */
27386     +   %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET));
27387     +   %if &dsid %then %do;
27388     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
27389     +     %if &nobs gt 0 %then %let useFreeze = 1;
27390     +   %end;
27391     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27393     +   /* if finedetail already exists, delete prior to re-run */
27394     +   %if %sysfunc(exist(&EM_USER_FINEDETAILDATA, DATA)) %then %do;
27395     +     proc datasets library=&EM_LIB nolist;
27396     +       delete &EM_NODEID._FINEDETAILDATA;
27397     +     run;
27398     +     quit;
27399     +   %end;
27401     +   data tempvarnames;
27402     +     set &EM_DATA_VARIABLESET;
27403     +     where ((ROLE='INPUT' and USE in('Y', 'D')) or (ROLE='REJECTED' and USE='Y')) and level ne 'UNARY';
27404     +     keep NAME LEVEL LABEL;
27405     +   run;
27407     +   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
27408     +     names NAME;
27409     +     prefix WOE_ GRP_ ;
27410     +   run;
27412     +   proc sort data=tempmapping; by name; run;
27413     +   proc sort data=tempvarnames; by name; run;
27414     +   data tempmapping;
27415     +     merge tempmapping tempvarnames;
27416     +     by NAME;
27417     +     rename LEVEL=procLevel;
27418     +   run;
27420     +   /* generate initial columns of mapping table by setting grpflag=0 */
27421     +   %EM_GENERATE_MAPPING_TABLE;
27423     +   proc datasets library=work nolist;
27424     +     delete tempImport tempScore;
27425     +   run;
27426     +   quit;
27428     +   /* delete splitvals dataset if this existed prior to run */
27429     +   %let nvars=0;
27430     +   %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
27431     +   %if &sdsid > 0 %then %do;
27432     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
27433     +   %end;
27434     +   %if &sdsid > 0 %then  %let sdsid=%sysfunc(close(&sdsid));
27436     +   %if &nvars > 0 %then %do;
27437     +      proc datasets library=&EM_LIB nolist;
27438     +        delete &EM_NODEID._SPLITVALS;
27439     +      run;
27440     +      quit;
27441     +   %end;
27443     +   %global classvars qclassvars;
27444     +   %let classvars=;
27445     +   %let qclassvars=;
27447     +   /* generate the intervalvars and classvars macros */
27448     +   %EM_PRE_BINNING(&EM_USER_NEWTRAIN);
27450     +   /* update varmappings with any changes to procLevel based on discretemid */
27451     +   data &EM_USER_VARMAPPINGS;
27452     +     set &EM_USER_VARMAPPINGS;
27453     +     /* procLevel column to indicate the level used by proc; this handles*/
27454     +     /* cases in which var is marked INTERVAL in metadat but treated as  */
27455     +     /* ordinal in prebinning because of # unique levels                 */
27456     +     %let dsid = %sysfunc(open(work._discretemid));
27457     +     %if &dsid %then %do;
27458     +       %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
27459     +       %let obs = %sysfunc(fetch(&dsid));
27460     +       %do %while(&obs=0);
27461     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
27462     +          if _variable_ = "&varname" then procLevel = "ORDINAL";
27463     +          %let obs = %sysfunc(fetch(&dsid));
27464     +       %end;
27465     +     %end;
27466     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27467     +     label procLevel =  "%sysfunc(sasmsg(sashelp.dmine, rpt_proclevel_vlabel , NOQUOTE))";
27468     +   run;
27470     +   /* generate Grp_xxx variables for interval inputs */
27471     +   %if &EM_PROPERTY_BINMETHOD eq QUANTILE %then %do;
27472     +     %EM_QUANTILE_BINNING(&EM_USER_NEWTRAIN, WORK.PCTILE, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
27474     +   %end;
27475     +   %else %do;
27476     +     %EM_EQUAL_SPACED_BINNING(&EM_USER_NEWTRAIN, &EM_USER_BINDATA, &EM_USER_BINNINGCODE);
27477     +   %end;
27479     +   /* generate GRP_XXX variables for nominal inputs */
27480     +   %EM_CLASSVARS_GROUP(&EM_PROPERTY_CLASSGROUPRARE);
27482     +   /* generate GRP_XXX variables for ordinal inputs */
27483     +   %EM_ORDVARS_GROUP;
27485     +   proc print data=&EM_USER_VARMAPPINGS label;
27486     +     var _VARIABLE_ _GRP_VARIABLE_ ;
27487     +   run;
27489     +   /* add _proc_var_ to varmappings data to know names of processed variables; could be original input, could be bin_xxx */
27490     +   proc sort data=&EM_USER_SPLITVALS out=tempsplitvals nodupkey;
27491     +     by _VARIABLE_;
27492     +   run;
27494     +   data &EM_USER_VARMAPPINGS;
27495     +     set &EM_USER_VARMAPPINGS;
27496     +     length _proc_var_ $32;
27497     +     %let dsid = %sysfunc(open(work.tempsplitvals));
27498     +     %if &dsid %then %do;
27499     +        %let obs = %sysfunc(fetch(&dsid));
27500     +        %do %while(&obs=0);
27501     +          %let dispnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
27502     +          %let dispvar = %sysfunc(getvarc(&dsid, &dispnum));
27503     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
27504     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
27506     +          if upcase(_VARIABLE_) = %upcase("&dispvar") then _proc_var_ = "&var";
27507     +          %let obs = %sysfunc(fetch(&dsid));
27508     +        %end;
27509     +     %end;
27510     +     if missing(_proc_var_) then _proc_var_=_variable_;
27511     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27512     +   run;
27514     +   proc datasets library=work nolist;
27515     +     delete sortedbin tempsplitvals;
27516     +   run;
27517     +   quit;
27519     +   /* calculate Fine Detail statistics for each input */
27520     +   %EM_FINE_DETAIL(&EM_USER_BINDATA, &EM_USER_VARMAPPINGS, &EM_USER_FINEDETAILDATA, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS);
27522     +   /* apply grouping and create grouped dataset */
27523     +   %EM_CREATE_GROUPING(&EM_USER_BINDATA, &EM_USER_FINEDETAILDATA, &EM_USER_COARSE);
27525     +   /* generate _label_ values in the COARSE dataset from the Scored data */
27526     +   filename Y "&EM_USER_GROUPMAPPINGSCORECODE";
27527     +   %EM_GENERATE_LABELVALUES(Y, &EM_USER_SPLITVALS, &EM_USER_BINMAPPINGS, &EM_USER_COARSE);
27528     +   filename Y;
27530     +   /* set EM_MODEL ASSESS=N to prevent assessment reports from being generated */
27531     +   %EM_MODEL(Target= &ignbintarget, ASSESS=N);
27533     +   /* generate reports */
27534     +   %EM_REPORT(key=COARSE, viewtype=DATA, block=MODEL, description=EVENTRATESTAT, autodisplay=N, spk=N);
27537     +   %doendm:
27538     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename trtemp catalog 'sashelp.emmdfy.binning_trainmacros.source';
NOTE: %INCLUDE (level 1) file TRTEMP is file SASHELP.EMMDFY.BINNING_TRAINMACROS.SOURCE.
27540     +%macro EM_GENERATE_MAPPING_TABLE;
27542     +  %EM_GETNAME(key=VARMAPPINGS, type=DATA);
27543     +  data &EM_USER_VARMAPPINGS(keep=_variable_  _grp_variable_ procLevel label);
27544     +   length _variable_  _grp_variable_  $32 procLevel $8;
27545     +   set tempmapping;
27546     +   label _variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_inputvar_vlabel , NOQUOTE))"
27547     +         _grp_variable_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_grpvar_vlabel , NOQUOTE))";
27549     +         _variable_ = NAME;
27550     +         _grp_variable_ = GRP;
27551     + run;
27553     +%mend EM_GENERATE_MAPPING_TABLE;
27555     +%macro EM_PRE_BINNING(input);
27556     +    /* Determine which of our variables are interval  */
27558     +    data tempvariableset;
27559     +      set &EM_DATA_VARIABLESET;
27560     +      where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
27561     +    run;
27563     +    /* add all interval vars to the intervalvar macro
27564     +    %let dsid = %sysfunc(open(work.tempvariableset));
27565     +    %if &dsid %then %do;
27566     +       %let varnum = %sysfunc(VARNUM(&dsid, NAME));
27567     +       %let obs = %sysfunc(fetch(&dsid));
27568     +       %do %while(&obs=0);
27569     +          %let varname = %sysfunc(getvarc(&dsid, &varnum));
27570     +          %let intervalvars = &intervalvars &varname;
27571     +          %let obs = %sysfunc(fetch(&dsid));
27572     +       %end;
27573     +    %end;
27574     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27575     + */
27577     +   %em_varmacro(name=intervalvars, metadata=tempvariableset, key=NAME, nummacro=num_intvars);
27579     +    /* Determine which variables marked as interval are true interval distributions; */
27580     +    /* intmid contains variables that are actually interval and should be binned; */
27581     +    /* discretemid contains variables that are actually discrete and should NOT be binned */
27582     +    %if %intervalvars ne %then %do;
27583     +      %let _maxlevel = %eval(&EM_PROPERTY_NUMBINS + 1);
27584     +      proc dmdb data=&input classout=_CLASSOUT maxlevel=&_maxlevel;
27585     +        class %intervalvars;
27586     +      run;
27587     +      proc freq data=_CLASSOUT order=DATA noprint;
27588     +         table NAME / OUT= _COUNT(where=(COUNT<&_maxlevel));
27589     +      run;
27591     +      %let _INTBINS=;
27592     +      data _null_;
27593     +        set _COUNT;
27594     +        call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
27595     +      run;
27597     +      proc sort data=_CLASSOUT;
27598     +        by NAME;
27599     +      run;
27600     +      proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
27601     +        var NRAW;
27602     +        by NAME;
27603     +      run;
27605     +      data _null_;
27606     +        dsid = open('_OUT');
27607     +        if dsid then do;
27608     +           call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
27609     +           csid = close(dsid);
27610     +        end;
27611     +      run;
27612     +      data _INTMID;
27613     +        set _OUT;
27614     +        keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
27615     +        %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
27616     +          if ^indexw("&_INTBINS", VARIABLE) then output;
27617     +        %end;
27618     +      run;
27620     +      %if "&EM_PROPERTY_APPLYLEVELRULE" ne "N" %then %do;
27621     +        data _DISCRETEMID;
27622     +          set _OUT;
27623     +          keep VARIABLE _MIDPOINT1--_MIDPOINT&numclassbars;
27624     +          if indexw("&_INTBINS", VARIABLE) then output;
27625     +        run;
27626     +      %end;
27627     +      %else %do;
27628     +         %if %sysfunc(exist(_discretemid)) %then %do;
27629     +            proc delete data=_discretemid;
27630     +            run;
27631     +         %end;
27632     +      %end;
27634     +      /* add vars from the _DISCRETEMID dataset to the classvars macro
27635     +      %let dsid = %sysfunc(open(WORK._DISCRETEMID));
27636     +      %if &dsid %then %do;
27637     +        %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
27638     +        %let obs = %sysfunc(fetch(&dsid));
27640     +        %do %while(&obs=0);
27641     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
27642     +          %let classvars = &classvars &var;
27643     +          %let qclassvars = &qclassvars "&var";
27644     +          %let obs = %sysfunc(fetch(&dsid));
27645     +        %end;
27646     +      %end;
27647     +      %if &dsid  %then %let dsid = %sysfunc(close(&dsid));
27648     +*/
27649     +    %end;
27650     +    %else %do;
27651     +      %if %sysfunc(exist(_intmid)) %then %do;
27652     +         proc delete data=_intmid;
27653     +         run;
27654     +      %end;
27656     +      %if %sysfunc(exist(_discretemid)) %then %do;
27657     +         proc delete data=_discretemid;
27658     +         run;
27659     +      %end;
27660     +    %end;
27662     +    /* if import grouping then remove interval vars in import data from _INTMID */
27663     +    %if &useImport eq 1 %then %do;
27665     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
27666     +        by _VARIABLE_;
27667     +      run;
27669     +      data &EM_USER_IMPORTSUBSET;
27670     +        length CODEVAR $32;
27671     +        set &EM_USER_IMPORTSUBSET;
27672     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
27673     +      run;
27675     +      proc sort data=&EM_USER_IMPORTSUBSET out=tempsubset nodupkey;
27676     +        by _VARIABLE_;
27677     +      run;
27679     +      %let dsid = %sysfunc(open(work.tempsubset));
27680     +      %let nobs = 0;
27681     +      %if &dsid %then %do;
27682     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
27683     +      %end;
27684     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
27686     +      data tempsubset;
27687     +        set tempsubset;
27688     +        length  binVar suffix $32;
27689     +        array binnames{&nobs} $32 _temporary_;
27690     +        retain binVar binnames;
27691     +        by _VARIABLE_;
27693     +        binVar = 'BIN_'!!strip(CODEVAR);
27694     +        binVar = ksubstr(binVar, 1, 32);
27695     +        count = 1;
27697     +        do i=1 to _N_;
27698     +           do while(binvar eq binnames(i));
27699     +              suffix = strip(put(count,best.));
27700     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
27701     +              count + 1;
27702     +           end;
27703     +        end;
27704     +        binnames(_N_)= binvar;
27705     +        output;
27706     +        drop suffix count i;
27707     +     run;
27709     +     data &EM_USER_IMPORTSUBSET;
27710     +       set &EM_USER_IMPORTSUBSET;
27711     +       length binVar $32;
27713     +        %let dsid = %sysfunc(open(work.tempsubset));
27714     +        %if &dsid %then %do;
27715     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
27716     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
27717     +          %let obs = %sysfunc(fetch(&dsid));
27719     +          %do %while(&obs=0);
27720     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
27721     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
27723     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
27724     +            %let obs = %sysfunc(fetch(&dsid));
27725     +          %end;
27726     +        %end;
27727     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27728     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
27729     +        if binVar ne "" then do;
27730     +          _LEVEL_ = "ORDINAL";
27731     +        end;
27733     +      run;
27735     +      %let idsidexists=0;
27736     +      %let idsid = %sysfunc(open(work._intmid));
27737     +      %if &idsid %then %do;
27738     +        %let idsidexists=1;
27739     +        %let idsid = %sysfunc(close(&idsid));
27740     +      %end;
27742     +      %if &idsidexists = 1 %then %do;
27743     +      data _INTMID;
27744     +        set _INTMID;
27746     +        %let dsid = %sysfunc(open(work.tempsubset));
27747     +        %if &dsid %then %do;
27748     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
27749     +          %let obs = %sysfunc(fetch(&dsid));
27751     +          %do %while(&obs=0);
27752     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
27753     +            if variable = "&codevar" then delete;
27754     +            %let obs = %sysfunc(fetch(&dsid));
27755     +          %end;
27756     +        %end;
27757     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27758     +      run;
27759     +      %end;
27761     +      proc datasets library=work nolist;
27762     +        delete tempsubset;
27763     +      run;
27764     +      quit;
27765     +    %end;
27767     +    /* if freeze then remove interval vars in import data from _INTMID */
27768     +    %if &useFreeze eq 1 %then %do;
27770     +      data &EM_USER_FREEZESUBSET;
27771     +        length CODEVAR $32;
27772     +        set &EM_USER_FREEZESUBSET;
27773     +        if CODEVAR eq '' then CODEVAR=_VARIABLE_;
27774     +      run;
27776     +      proc sort data=&EM_USER_FREEZESUBSET out=tempsubset nodupkey;
27777     +        by _VARIABLE_;
27778     +      run;
27780     +      %let dsid = %sysfunc(open(work.tempsubset));
27781     +      %let nobs = 0;
27782     +      %if &dsid %then %do;
27783     +        %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
27784     +      %end;
27785     +      %if &dsid %then %let dsid=%sysfunc(close(&dsid));
27787     +      data tempsubset;
27788     +        set tempsubset;
27789     +        length  binVar suffix $32;
27790     +        array binnames{&nobs} $32 _temporary_;
27791     +        retain binVar binnames;
27792     +        by _VARIABLE_;
27794     +        binVar = 'BIN_'!!strip(CODEVAR);
27795     +        binVar = ksubstr(binVar, 1, 32);
27796     +        count = 1;
27798     +        do i=1 to _N_;
27799     +           do while(binvar eq binnames(i));
27800     +              suffix = strip(put(count,best.));
27801     +              binvar = ksubstr(binvar, 1, 32-klength(suffix))!!suffix;
27802     +              count + 1;
27803     +           end;
27804     +        end;
27805     +        binnames(_N_)= binvar;
27806     +        output;
27807     +        drop suffix count i;
27808     +     run;
27810     +     data &EM_USER_FREEZESUBSET;
27811     +       set &EM_USER_FREEZESUBSET;
27812     +       length binVar $32;
27814     +        %let dsid = %sysfunc(open(work.tempsubset));
27815     +        %if &dsid %then %do;
27816     +          %let varnum = %sysfunc(VARNUM(&dsid, _VARIABLE_));
27817     +          %let binnum = %sysfunc(VARNUM(&dsid, binVar));
27818     +          %let obs = %sysfunc(fetch(&dsid));
27820     +          %do %while(&obs=0);
27821     +            %let var = %sysfunc(getvarc(&dsid, &varnuM));
27822     +            %let binvar = %sysfunc(getvarc(&dsid, &binnum));
27824     +            if _variable_ = "&var" and _level_="INTERVAL" then binVar="&binvar";
27825     +            %let obs = %sysfunc(fetch(&dsid));
27826     +          %end;
27827     +        %end;
27828     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27830     +        /* replace _LEVEL_ to ORDINAL for all binned interval vars; */
27831     +        if binVar ne "" then do;
27832     +          _LEVEL_ = "ORDINAL";
27833     +        end;
27835     +      run;
27837     +      %let idsidexists= 0;
27838     +      %let idsid = %sysfunc(open(work._intmid));
27839     +      %if &idsid %then %do;
27840     +        %let idsidexists=1;
27841     +        %let idsid = %sysfunc(close(&idsid));
27842     +      %end;
27843     +      %if &idsidexists eq 1 %then %do;
27844     +      data _INTMID;
27845     +        set _INTMID;
27847     +        %let dsid = %sysfunc(open(work.tempsubset));
27848     +        %if &dsid %then %do;
27849     +          %let varnum = %sysfunc(VARNUM(&dsid, CODEVAR));
27850     +          %let obs = %sysfunc(fetch(&dsid));
27852     +          %do %while(&obs=0);
27853     +            %let codevar = %sysfunc(getvarc(&dsid, &varnuM));
27854     +            if variable = "&codevar" then delete;
27855     +            %let obs = %sysfunc(fetch(&dsid));
27856     +          %end;
27857     +        %end;
27858     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
27859     +      run;
27860     +      %end;
27862     +      proc datasets library=work nolist;
27863     +        delete tempsubset;
27864     +      run;
27865     +      quit;
27867     +    %end;
27869     +%mend EM_PRE_BINNING;
27871     +%macro EM_IMPORT_BINNING(binningCode);
27874     +   data tempintimport;
27875     +     set &EM_USER_IMPORTSUBSET;
27876     +     if binflag = 1;
27877     +   run;
27879     +   %let idsid = %sysfunc(open(work.tempintimport));
27880     +   %if &idsid %then %do;
27881     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
27882     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
27883     +   %end;
27884     +   %else %do;
27885     +     %let nvars = 0;
27886     +     %let nobs = 0;
27887     +   %end;
27888     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
27890     +   proc datasets library=work nolist;
27891     +     delete tempintimport;
27892     +   run;
27893     +   quit;
27895     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
27897     +      filename X "&binningCode";
27898     +      data _null_;
27899     +        FILE X MOD;
27900     +        %let bin_variables=;
27901     +        %let quote_bin_variables = ;
27902     +        %let choice = binflag = 1;
27903     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
27904     +        %if &dsid %then %do;
27905     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
27906     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
27907     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
27908     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingbins_note , NOQUOTE));
27910     +           put "&EM_CODEBAR;";
27911     +           put " &note; ";
27912     +           put "&EM_CODEBAR;";
27914     +           /* retrieve value for first obs */
27915     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
27916     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
27917     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
27919     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
27920     +           %let i = 1;
27921     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
27922     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
27923     +           %end;
27924     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
27925     +           put " ";
27926     +           put "if &oldname eq . then &binvalue = .;";
27928     +           /* cycle through special codes if they exist */
27929     +           %let index2 = %index(&oldname, SV_);
27930     +           %if &index2 gt 0 %then %do;
27931     +             %let choice = CODEVAR ="&oldname";
27932     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
27933     +             %if &cdsid %then %do;
27934     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
27935     +                %let cobs = %sysfunc(fetch(&cdsid));
27936     +                %do %while(&cobs=0);
27937     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
27938     +                    put "else if &oldname eq &code then &binvalue = &code;";
27939     +                   %let cobs = %sysfunc(fetch(&cdsid));
27940     +                %end;
27941     +             %end;
27942     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
27943     +           %end;
27944     +           put "else ";
27945     +           %if "&value" eq "." %then %do;
27946     +             put " &binvalue=&i;";
27947     +           %end;
27948     +           %else %do;
27949     +             put "  if &oldname < &value then &binvalue=&i;";
27950     +           %end;
27952     +           %let i= %eval(&i+1);
27954     +           %let obs = %sysfunc(fetch(&dsid));
27955     +           %do %while(&obs=0);
27956     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
27957     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
27958     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
27960     +              %if "&oldname" ne "&namevalue" %then %do;
27962     +                /* if variable has been re-coded for special codes, must include these values as well */
27963     +                put;
27964     +                put "if &namevalue eq . then &binvalue = .;";
27966     +                %let i=1;
27967     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
27968     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
27969     +                %end;
27970     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
27972     +                /* cycle through special codes if they exist */
27973     +                %let index2 = %index(&namevalue, SV_);
27974     +                %if &index2 gt 0 %then %do;
27975     +                  %let choice = CODEVAR ="&namevalue";
27976     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
27977     +                  %if &cdsid %then %do;
27978     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
27979     +                     %let cobs = %sysfunc(fetch(&cdsid));
27980     +                     %do %while(&cobs=0);
27981     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
27982     +                       put "else if &namevalue eq &code then &binvalue = &code;";
27983     +                       %let cobs = %sysfunc(fetch(&cdsid));
27984     +                     %end;
27985     +                  %end;
27986     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
27987     +                %end;
27988     +                put "else ";
27989     +                %if "&value" ne "." %then %do;
27990     +                  put "  if &namevalue < &value then &binvalue=&i;";
27991     +                %end;
27992     +                %else %do;
27993     +                  put " &binvalue=&i;";
27994     +                %end;
27996     +              %end;
27997     +              %else %do;
27998     +                put "else ";
27999     +                %if "&value" ne "." %then %do;
28000     +                  put "  if &namevalue < &value then &binvalue=&i;";
28001     +                %end;
28002     +                %else %do;
28003     +                  put "  &binvalue=&i;";
28004     +                %end;
28005     +              %end;
28006     +              %let i = %eval(&i + 1);
28007     +              %let obs = %sysfunc(fetch(&dsid));
28008     +              %let oldname = &namevalue;
28009     +              %let oldbinvalue = &binvalue;
28010     +           %end;
28011     +        %end;
28012     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
28014     +      run;
28015     +      filename X;
28016     +      /* generate BINMAPPINGS dataset */
28017     +      data TEMPBINMAPPINGS;
28018     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
28020     +        %let choice = binflag = 1;
28021     +        %let dsid = %sysfunc(open(&EM_USER_IMPORTSUBSET(where=(&choice))));
28022     +        %if &dsid %then %do;
28023     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
28024     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
28025     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
28026     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
28027     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
28029     +           /* retrieve information from first obs */
28030     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
28031     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
28032     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
28033     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
28034     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar,5));
28035     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
28036     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
28037     +           %let i = 1;
28039     +           NAME = "&OLDCODEVAR";
28040     +           BIN_NAME = "&OLDBINVAR";
28041     +           GRP_NAME = "&OLDGRPVAR";
28042     +           BIN = "&i";
28043     +           GRP = "&oldgrpvalue";
28044     +           LB = . ;
28045     +           UB = &oldvalue;
28046     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
28047     +           DISPLAY_VAR = "&oldvar";
28048     +           output;
28050     +           %let i = 2;
28051     +           %let obs = %sysfunc(fetch(&dsid));
28052     +           %do %while(&obs=0);
28053     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
28054     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
28055     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
28056     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar,5));
28057     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
28058     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
28060     +             %if "&oldvar" ne "&var" %then %do;
28061     +              %let i = 1;
28062     +               %let oldvalue = .;
28063     +             %end;
28065     +             NAME = "&CODEVAR";
28066     +             BIN_NAME = "&BINVAR";
28067     +             GRP_NAME = "&GRPVAR";
28068     +             BIN = "&i";
28069     +             GRP = "&group";
28070     +             LB = &oldvalue ;
28071     +             UB = &value;
28072     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
28073     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
28074     +             %end;
28075     +             %else %do;
28076     +               %if "&oldvalue" eq "." %then %do;
28077     +                 EM_BIN_LABEL = "&var < &value" ;
28078     +               %end;
28079     +               %if "&value" eq "." %then %do;
28080     +                 EM_BIN_LABEL = "&oldvalue <= &var";
28081     +               %end;
28082     +             %end;
28083     +             DISPLAY_VAR = "&var";
28084     +             output;
28086     +             %let oldvar = &var;
28087     +             %let oldcodevar = &codevar;
28088     +             %let oldbinvar = &binvar;
28089     +             %let oldgrpvar = &grpvar;
28090     +             %let oldvalue   = &value;
28091     +             %let oldgrpvalue   = &group;
28092     +             %let i = %eval(&i + 1);
28093     +             %let obs = %sysfunc(fetch(&dsid));
28094     +           %end;
28095     +        %end;
28096     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
28097     +      run;
28099     +      data &EM_USER_BINMAPPINGS;
28100     +        set &EM_USER_BINMAPPINGS tempBinMappings;
28101     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
28102     +      run;
28104     +      /* update importsubset with bin values instead of raw values */
28105     +      data &EM_USER_IMPORTSUBSET;
28106     +        set &EM_USER_IMPORTSUBSET;
28108     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
28109     +        %if &dsid %then %do;
28110     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
28111     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
28112     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
28113     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
28114     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
28115     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
28117     +          %let oldvar = ;
28118     +          %let obs = %sysfunc(fetch(&dsid));
28119     +          %do %while(&obs=0);
28120     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
28121     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
28122     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
28123     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
28124     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
28125     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
28127     +            %if "&oldvar" eq "&displayvar" %then %do;
28128     +              else
28129     +            %end;
28130     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
28131     +               _SPLIT_VALUE_ = "&bin";
28132     +            end;
28133     +            %let oldvar = &displayvar;
28134     +            %let obs = %sysfunc(fetch(&dsid));
28135     +          %end;
28136     +        %end;
28137     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
28138     +      run;
28140     +      proc sort data=&EM_USER_IMPORTSUBSET;
28141     +        by _VARIABLE_ _SPLIT_VALUE_;
28142     +      run;
28144     +      proc datasets library=work nolist;
28145     +        delete tempBinMappings;
28146     +      run;
28147     +      quit;
28148     +  %end;
28149     +%mend EM_IMPORT_BINNING;
28151     +%macro EM_FREEZE_BINNING(binningCode);
28153     +   data tempintfreeze;
28154     +     set &EM_USER_FREEZESUBSET;
28155     +     if binflag = 1;
28156     +   run;
28158     +   %let idsid = %sysfunc(open(work.tempintfreeze));
28159     +   %if &idsid %then %do;
28160     +     %let nvars = %sysfunc(ATTRN(&idsid, NVARS));
28161     +     %let nobs = %sysfunc(ATTRN(&idsid, NOBS));
28162     +   %end;
28163     +   %else %do;
28164     +     %let nvars = 0;
28165     +     %let nobs = 0;
28166     +   %end;
28167     +   %if &idsid %then %let idsid=%sysfunc(close(&idsid));
28169     +   proc datasets library=work nolist;
28170     +     delete tempintimport;
28171     +   run;
28172     +   quit;
28174     +   %if ((&nobs gt 0) and (&nvars gt 0))%then %do;
28176     +      filename X "&binningCode";
28177     +      data _null_;
28178     +        FILE X MOD;
28180     +        %let bin_variables=.;
28181     +        %let quote_bin_variables=.;
28182     +        %let freeze_variables=;
28183     +        %let choice = binflag = 1;
28184     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
28185     +        %if &dsid %then %do;
28186     +           %let namenum = %sysfunc(VARNUM(&dsid, CODEVAR));
28187     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
28188     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
28189     +           %let vnum    = %sysfunc(VARNUM(&dsid, _variable_));
28191     +           %let note = %sysfunc(sasmsg(sashelp.dmine, generatingfrozenbins_note , NOQUOTE));
28192     +           put "&EM_CODEBAR;";
28193     +           put "&note;";
28194     +           put "&EM_CODEBAR;";
28196     +           /* retrieve value for first obs */
28197     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
28198     +           %let oldname = %sysfunc(getvarc(&dsid, &namenum));
28199     +           %let value   = %sysfunc(getvarc(&dsid,  &valnum));
28200     +           %let variable = %sysfunc(getvarc(&dsid, &vnum));
28202     +           %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
28203     +           %let i = 1;
28204     +           %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
28205     +             %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
28206     +           %end;
28207     +           %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
28208     +           %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
28210     +           put " ";
28211     +           put "if &oldname eq . then &binvalue = .;";
28213     +           /* cycle through special codes if they exist */
28214     +           %let index2 = %index(&oldname, SV_);
28215     +           %if &index2 gt 0 %then %do;
28216     +             %let choice = CODEVAR ="&oldname";
28217     +             %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
28218     +             %if &cdsid %then %do;
28219     +                %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
28220     +                %let cobs = %sysfunc(fetch(&cdsid));
28221     +                %do %while(&cobs=0);
28222     +                   %let code = %sysfunc(getvarc(&cdsid, &codenum));
28223     +                    put "else if &oldname eq &code then &binvalue = &code;";
28224     +                   %let cobs = %sysfunc(fetch(&cdsid));
28225     +                %end;
28226     +             %end;
28227     +             %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
28228     +           %end;
28229     +           put "else ";
28230     +           %if "&value" eq "." %then %do;
28231     +             put " &binvalue=&i;";
28232     +           %end;
28233     +           %else %do;
28234     +             put "  if &oldname < &value then &binvalue=&i;";
28235     +           %end;
28237     +           %let i= %eval(&i+1);
28239     +           %let obs = %sysfunc(fetch(&dsid));
28240     +           %do %while(&obs=0);
28241     +              %let namevalue = %sysfunc(getvarc(&dsid, &namenum));
28242     +              %let binvalue = %sysfunc(getvarc(&dsid, &binnum));
28243     +              %let value    = %sysfunc(getvarc(&dsid,  &valnum));
28244     +              %let variable = %sysfunc(getvarc(&dsid, &vnum));
28246     +              %if "&oldname" ne "&namevalue" %then %do;
28248     +                /* if variable has been re-coded for special codes, must include these values as well */
28249     +                put;
28250     +                put "if &namevalue eq . then &binvalue = .;";
28252     +                %let i=1;
28253     +                %if %sysfunc(index(%upcase(&BIN_VARIABLES) , %upcase(&binvalue))) eq 0 %then %do;
28254     +                  %let BIN_VARIABLES=&BIN_VARIABLES &binvalue;
28255     +                %end;
28256     +                %let QUOTE_BIN_VARIABLES=&QUOTE_BIN_VARIABLES "&namevalue";
28257     +                %let FREEZE_VARIABLES = &FREEZE_VARIABLES "&variable";
28259     +                /* cycle through special codes if they exist */
28260     +                %let index2 = %index(&namevalue, SV_);
28261     +                %if &index2 gt 0 %then %do;
28262     +                  %let choice = CODEVAR ="&namevalue";
28263     +                  %let cdsid = %sysfunc(open(&EM_USER_CODEMAPPINGS(where=(&choice))));
28264     +                  %if &cdsid %then %do;
28265     +                     %let codenum = %sysfunc(VARNUM(&cdsid, CODE));
28266     +                     %let cobs = %sysfunc(fetch(&cdsid));
28267     +                     %do %while(&cobs=0);
28268     +                       %let code = %sysfunc(getvarc(&cdsid, &codenum));
28269     +                       put "else if &namevalue eq &code then &binvalue = &code;";
28270     +                       %let cobs = %sysfunc(fetch(&cdsid));
28271     +                     %end;
28272     +                  %end;
28273     +                %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
28274     +                %end;
28275     +                put "else ";
28276     +                %if "&value" ne "." %then %do;
28277     +                  put "  if &namevalue < &value then &binvalue=&i;";
28278     +                %end;
28279     +                %else %do;
28280     +                  put " &binvalue=&i;";
28281     +                %end;
28283     +              %end;
28284     +              %else %do;
28285     +                put "else ";
28286     +                %if "&value" ne "." %then %do;
28287     +                  put "  if &namevalue < &value then &binvalue=&i;";
28288     +                %end;
28289     +                %else %do;
28290     +                  put " &binvalue=&i;";
28291     +                %end;
28292     +              %end;
28293     +              %let i = %eval(&i + 1);
28294     +              %let obs = %sysfunc(fetch(&dsid));
28295     +              %let oldname = &namevalue;
28296     +              %let oldbinvalue = &binvalue;
28297     +           %end;
28298     +        %end;
28299     +        %if &dsid >0 %then %let dsid = %sysfunc(close(&dsid));
28301     +      run;
28302     +      filename X;
28303     +      /* generate BINMAPPINGS dataset */
28304     +      data TEMPBINMAPPINGS;
28305     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
28307     +        %let choice = binflag = 1;
28308     +        %let dsid = %sysfunc(open(&EM_USER_FREEZESUBSET(where=(&choice))));
28309     +        %if &dsid %then %do;
28310     +           %let varnum  = %sysfunc(VARNUM(&dsid, _VARIABLE_));
28311     +           %let codenum = %sysfunc(VARNUM(&dsid, CODEVAR));
28312     +           %let binnum  = %sysfunc(VARNUM(&dsid, binVar));
28313     +           %let valnum  = %sysfunc(VARNUM(&dsid, _SPLIT_VALUE_));
28314     +           %let grpnum  = %sysfunc(VARNUM(&dsid, _group_));
28316     +           /* retrieve information from first obs */
28317     +           %let obs = %sysfunc(fetchobs(&dsid, 1));
28318     +           %let oldvar = %sysfunc(getvarc(&dsid, &varnum));
28319     +           %let oldcodevar = %sysfunc(getvarc(&dsid, &codenum));
28320     +           %let oldbinvar  = %sysfunc(getvarc(&dsid, &binnum));
28321     +           %let oldgrpvar = GRP_%sysfunc(ksubstr(&oldbinvar, 5));
28322     +           %let oldvalue   = %sysfunc(getvarc(&dsid, &valnum));
28323     +           %let oldgrpvalue = %sysfunc(getvarn(&dsid, &grpnum));
28324     +           %let i = 1;
28326     +           NAME = "&OLDCODEVAR";
28327     +           BIN_NAME = "&OLDBINVAR";
28328     +           GRP_NAME = "&OLDGRPVAR";
28329     +           BIN = "&i";
28330     +           GRP = "&oldgrpvalue";
28331     +           LB = . ;
28332     +           UB = &oldvalue;
28333     +           EM_BIN_LABEL = "&oldvar < &oldvalue" ;
28334     +           DISPLAY_VAR = "&oldvar";
28335     +           output;
28337     +           %let i = 2;
28338     +           %let obs = %sysfunc(fetch(&dsid));
28339     +           %do %while(&obs=0);
28340     +             %let var = %sysfunc(getvarc(&dsid, &varnum));
28341     +             %let codevar = %sysfunc(getvarc(&dsid, &codenum));
28342     +             %let binvar  = %sysfunc(getvarc(&dsid, &binnum));
28343     +             %let grpvar = GRP_%sysfunc(ksubstr(&binvar, 5));
28344     +             %let value   = %sysfunc(getvarc(&dsid, &valnum));
28345     +             %let group   = %sysfunc(getvarn(&dsid, &grpnum));
28347     +             %if "&oldvar" ne "&var" %then %do;
28349     +               %let i = 1;
28350     +               %let oldvalue = .;
28351     +             %end;
28353     +             NAME = "&CODEVAR";
28354     +             BIN_NAME = "&BINVAR";
28355     +             GRP_NAME = "&GRPVAR";
28356     +             BIN = "&i";
28357     +             GRP = "&group";
28358     +             LB = &oldvalue ;
28359     +             UB = &value;
28360     +             %if "&oldvalue" ne "." AND "&value" ne "." %then %do;
28361     +               EM_BIN_LABEL = "&oldvalue <= &var < &value" ;
28362     +             %end;
28363     +             %else %do;
28364     +               %if "&oldvalue" eq "." %then %do;
28365     +                 EM_BIN_LABEL = "&var < &value" ;
28366     +               %end;
28367     +               %if "&value" eq "." %then %do;
28368     +                 EM_BIN_LABEL = "&oldvalue <= &var";
28369     +               %end;
28370     +             %end;
28371     +             DISPLAY_VAR = "&var";
28372     +             output;
28374     +             %let oldvar = &var;
28375     +             %let oldcodevar = &codevar;
28376     +             %let oldbinvar = &binvar;
28377     +             %let oldgrpvar = &grpvar;
28378     +             %let oldvalue   = &value;
28379     +             %let oldgrpvalue = &group;
28380     +             %let i = %eval(&i + 1);
28381     +             %let obs = %sysfunc(fetch(&dsid));
28382     +           %end;
28383     +        %end;
28385     +        %if &dsid %then %let dsid=%sysfunc(close(&dsid));
28386     +      run;
28388     +      /* remove obs from EM_USER_BINMAPPINGS that have vars also in tempBinMappings -- prevents duplicate entries */
28389     +      data &EM_USER_BINMAPPINGS;
28390     +        set &EM_USER_BINMAPPINGS;
28391     +        if NAME in (&FREEZE_VARIABLES) then delete;
28392     +      run;
28394     +      data &EM_USER_BINMAPPINGS;
28395     +        length NAME BIN_NAME $32 BIN GRP $8 LB UB 8 EM_BIN_LABEL $200 display_Var grp_name $32;
28397     +        set &EM_USER_BINMAPPINGS tempBinMappings;
28398     +        if NAME = "" and BIN_NAME = "" and BIN= "" then delete;
28399     +      run;
28401     +      /* update freezesubset with bin values instead of raw values */
28402     +      data &EM_USER_FREEZESUBSET;
28403     +        set &EM_USER_FREEZESUBSET;
28405     +        %let dsid = %sysfunc(open(&EM_USER_BINMAPPINGS));
28406     +        %if &dsid %then %do;
28407     +          %let binvarnum = %sysfunc(VARNUM(&dsid, BIN_NAME));
28408     +         %let displaynum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
28409     +          %let binnum    = %sysfunc(VARNUM(&dsid, BIN));
28410     +          %let codenum   = %sysfunc(VARNUM(&dsid, NAME));
28411     +          %let ubnum     = %sysfunc(VARNUM(&dsid, UB));
28412     +          %let lbnum     = %sysfunc(VARNUM(&dsid, LB));
28414     +          %let oldvar = ;
28415     +          %let obs = %sysfunc(fetch(&dsid));
28416     +          %do %while(&obs=0);
28417     +            %let binvar = %sysfunc(getvarc(&dsid, &binvarnum));
28418     +            %let codevar = %sysfunc(getvarc(&dsid, &codenum));
28419     +            %let displayvar = %sysfunc(getvarc(&dsid, &displaynum));
28420     +            %let bin    = %sysfunc(getvarc(&dsid, &binnum));
28421     +            %let ub     = %sysfunc(getvarn(&dsid, &ubnum));
28422     +            %let lb     = %sysfunc(getvarn(&dsid, &lbnum));
28424     +            %if "&oldvar" eq "&displayvar" %then %do;
28425     +              else
28426     +            %end;
28427     +            if BinVar = "&binvar" and _SPLIT_VALUE_ = "&UB" then do;
28428     +               _SPLIT_VALUE_ = "&bin";
28429     +            end;
28430     +            %let oldvar =&displayvar;
28431     +            %let obs = %sysfunc(fetch(&dsid));
28432     +          %end;
28433     +        %end;
28434     +        %if &dsid %then %let dsid = %sysfunc(close(&dsid));
28435     +      run;
28437     +      proc sort data=&EM_USER_FREEZESUBSET;
28438     +        by _VARIABLE_ _SPLIT_VALUE_;
28439     +      run;
28441     +      proc datasets library=work nolist;
28442     +        delete tempBinMappings;
28443     +      run;
28444     +      quit;
28445     +   %end;
28446     +%mend EM_FREEZE_BINNING;
28448     +%macro EM_EQUAL_SPACED_BINNING(input, bindata, binningCode);
28451     +/* initialize new bucket_binning macro */
28452     +filename temp catalog 'sashelp.emapps.bucket_binning.source';
28453     +%include temp;
28454     +filename temp;
28456     +/* create fileref for generation of binningCode */
28457     +filename X "&binningCode";
28459     +/* determine if there are inputs to be binned */
28460     +%let numbinvars = 0;
28461     +%let intdsid = %sysfunc(open(work._intmid));
28462     +%if &intdsid %then %do;
28463     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
28464     +%end;
28465     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
28466     +%if &numbinvars > 0 %then %do;
28469     +/* get data in format needed for quantile_binning macro */
28470     +data work.vartable;
28471     +  set work._intmid;
28472     +  level = "INTERVAL";
28473     +  role  = "INPUT";
28474     +  rename variable=name;
28475     +run;
28477     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
28478     +%if %EM_FREQ ne %then %do;
28479     +   data work.freq;
28480     +     name="%EM_FREQ";
28481     +     role="FREQ";
28482     +   run;
28484     +   data work.vartable;
28485     +     set work.vartable work.freq;
28486     +   run;
28487     +%end;
28489     +/* perform bucket binning of data */
28490     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
28491     +%em_apps_bucket_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
28493     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
28494     +%end;
28495     +%else %do;
28496     +  /* initialize binmappings table */
28497     +  data &EM_USER_BINMAPPINGS;
28498     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
28499     +  run;
28501     +  data _null_;
28502     +    FILE X;
28504     +    put "&EM_CODEBAR;";
28505     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
28506     +    put "* &note;";
28507     +    put "&EM_CODEBAR;";
28508     +  run;
28510     +%end;
28512     +/* assign display_var values to binmappings table as well as initial group values */
28513     +data &EM_USER_BINMAPPINGS;
28514     +  set &EM_USER_BINMAPPINGS;
28515     +  length display_var $32 grp $8;
28516     +  display_var = name;
28518     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
28519     +    GRP = BIN + 1;
28520     +  %end;
28521     +  %else %do;
28522     +    GRP = BIN;
28523     +  %end;
28524     +run;
28526     +/* de-assign fileref */
28527     +filename X;
28529     +    /* append to binning code those values that were included in the importSubset data */
28530     +    %if &useImport eq 1 %then %do;
28531     +      %EM_IMPORT_BINNING(&binningcode);
28532     +    %end;
28534     +    /* append to binning code those values that were included in the freezeSubset data */
28535     +    %if &useFreeze eq 1 %then %do;
28536     +      %EM_FREEZE_BINNING(&binningcode);
28537     +    %end;
28539     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
28540     +     by NAME;
28541     +     run;
28543     +     /* create grouping for missing level */
28544     +    data tempmissvalues;
28545     +    run;
28547     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
28549     +       %if ((&useImport eq 0) OR (&useFreeze eq 0)) %then %do;
28550     +          data tempmissvalues;
28551     +            %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
28552     +               merge sortedmapping
28553     +              %if &useImport eq 1 %then %do;
28554     +                 &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
28555     +              %end;
28556     +              %if &useFreeze eq 1 %then %do;
28557     +                &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
28558     +              %end;
28559     +              ;
28560     +              by NAME;
28561     +            %end;
28562     +            %else %do;
28563     +              set sortedmapping;
28564     +            %end;
28565     +            GRP="1";
28566     +            bin="Missing";
28567     +            _split_value_ = "Missing";
28568     +            %if &useImport eq 1 %then %do;
28569     +               if _a then delete;
28570     +            %end;
28571     +            %if &useFreeze eq 1 %then %do;
28572     +               if _b then delete;
28573     +            %end;
28575     +          run;
28576     +      %end;
28577     +      %else %do; /* both 1 */
28578     +         data tempmissvalues1;
28579     +            merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
28580     +            by NAME;
28581     +            if _a then delete;
28582     +         run;
28584     +         data tempmissvalues;
28585     +            merge tempmissvalues1 &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
28586     +            by NAME;
28587     +            GRP="1";
28588     +            bin="Missing";
28589     +            _split_value_ = "Missing";
28590     +            if _b then delete;
28591     +          run;
28593     +          proc delete data=tempmissvalues1;
28594     +          run;
28595     +      %end;
28596     +    %end;
28598     +    /* create binData from binningCode */
28599     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
28600     +      by NAME;
28601     +    run;
28603     +    filename X "&binningCode";
28604     +    data &bindata;
28605     +      set &input;
28606     +      %inc X;
28607     +    run;
28609     +    filename X;
28611     +    /* create splitvals dataset */
28612     +    data tempsplitvals;
28613     +      set &EM_USER_BINMAPPINGS
28614     +        %let tdsid = %sysfunc(open(work.tempmissvalues));
28615     +        %if &tdsid %then %do;
28616     +          tempmissvalues
28617     +        %end;
28618     +        %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
28619     +      ;
28620     +      length newgroup _group_ 8 _level_ $8;
28621     +      newgroup =.;
28622     +      _LEVEL_ = 'ORDINAL';
28623     +      _Group_ = grp;
28624     +      rename NAME=DISPLAY_VAR BIN=_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
28625     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_;
28626     +    run;
28628     +    data tempsplitvals;
28629     +      set tempsplitvals;
28630     +      _order_ = _N_;
28631     +    run;
28633     +    /* determine if EM_USER_SPLITVALS already exists */
28634     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
28635     +    %if &sdsid > 0 %then %do;
28636     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
28637     +      %if &nvars > 0 %then %do;
28638     +        proc sql;
28639     +          reset noprint;
28640     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
28641     +        quit;
28642     +      %end;
28643     +      %else %let nobs=0;
28644     +    %end;
28645     +    %else %do;
28646     +       %let nobs=0;
28647     +       %let nvars=0;
28648     +    %end;
28649     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
28651     +    /* if useIMport=1 also include import definitions here as well */
28652     +    %if &useImport eq 1 %then %do;
28653     +      data tempImport;
28654     +        set &EM_USER_IMPORTSUBSET;
28655     +        _variable_ = binVar;
28656     +      run;
28657     +    %end;
28659     +    /* if useFreeze=1 also include import definitions here as well */
28660     +    %if &useFreeze eq 1 %then %do;
28661     +      data tempFreeze;
28662     +        length display_var $32;
28663     +        set &EM_USER_FREEZESUBSET;
28664     +        display_var = _variable_;
28665     +        _variable_ = binVar;
28666     +      run;
28667     +    %end;
28670     +    data &EM_USER_SPLITVALS;
28671     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
28672     +        set &EM_USER_SPLITVALS tempsplitvals
28673     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
28674     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
28675     +        %end;
28676     +        %if &useFreeze eq 1 %then %do;
28677     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
28678     +        %end;
28679     +        ;
28680     +      %end;
28681     +      %else %do;
28682     +        set tempsplitvals
28683     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
28684     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
28685     +        %end;
28686     +        %if &useFreeze eq 1 %then %do;
28687     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
28688     +        %end;
28689     +        ;
28690     +      %end;
28691     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _ORDER_;
28692     +    run;
28694     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
28695     +    data tempvariableset;
28696     +      set &EM_DATA_VARIABLESET;
28697     +      where TYPE = 'C';
28698     +    run;
28700     +    /* add all interval vars that aren't special codes to the intervalvar macro
28701     +    %let dsid = %sysfunc(open(work.tempvariableset));
28702     +    %if &dsid %then %do;
28703     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
28704     +      %let obs = %sysfunc(fetch(&dsid));
28705     +      %do %while(&obs=0);
28706     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
28707     +        %let classvars = &classvars &varname;
28708     +        %let qclassvars = &qclassvars "&varname";
28709     +        %let obs = %sysfunc(fetch(&dsid));
28710     +      %end;
28711     +    %end;
28712     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
28713     +    */
28714     +   %em_varmacro(name=classvars, metadata=tempvariableset, key=NAME, nummacro=num_classvars);
28716     +    %if %classvars ne %then %do;
28717     +      proc dmdb data =&bindata classout=_classout nonorm;
28718     +        class %classvars;
28719     +      run;
28721     +      proc dmdb data=&bindata classout=_classout2;
28722     +       class %classvars;
28723     +      run;
28725     +      proc sort data=_classout; by NAME CRAW; run;
28726     +      proc sort data=_classout2; by NAME CRAW; run;
28728     +      data _classout;
28729     +        length _variable_ $32;
28730     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
28731     +        _split_value_ = trim(left(_split_value_));
28732     +        LEVEL = trim(left(LEVEL));
28733     +        by NAME CRAW;
28734     +       _variable_ = NAME;
28735     +      run;
28737     +      proc sort data=_classout; by _variable_ _split_value_; run;
28738     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
28740     +      data &EM_USER_SPLITVALS;
28741     +        length _norm_level_ $200 _split_value_ $200;
28742     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
28743     +        by _variable_ _split_value_;
28744     +        LEVEL = trim(left(LEVEL));
28745     +        _norm_level_ = trim(left(_norm_level_));
28746     +        _split_value_ = trim(left(_split_value_));
28747     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
28748     +        drop NAME FREQUENCY TYPE CRAW NRAW;
28749     +      run;
28751     +      proc datasets library=work nolist;
28752     +        delete _classout _classout2;
28753     +      run;
28754     +      quit;
28755     +    %end;
28756     +    data &EM_USER_SPLITVALS;
28757     +      set &EM_USER_SPLITVALS;
28758     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
28759     +    run;
28761     +    proc sort data=&EM_USER_SPLITVALS;
28762     +      by DISPLAY_VAR _Group_;
28763     +    run;
28765     +   proc datasets library=work nolist;
28766     +     delete tempBinMappings temp_binmappings tempBinNames tempsplitvals sortedmapping tempmissvalues
28767     +      %if &useImport eq 1 %then %do;
28768     +        tempImport
28769     +      %end;
28770     +      %if &useFreeze eq 1 %then %do;
28771     +        tempFreeze
28772     +      %end;
28773     +     ;
28774     +   run;
28775     +   quit;
28777     +%mend;
28779     +%macro EM_QUANTILE_BINNING(input, pctdata, bindata, binningCode);
28781     +/* initialize new quantile_binning macro */
28782     +filename temp catalog 'sashelp.emapps.quantile_binning.source';
28783     +%include temp;
28784     +filename temp;
28786     +/* generate fileref for quantile_binning macro */
28787     +filename X "&binningCode";
28789     +/* determine if there are inputs to be binned */
28790     +%let numbinvars = 0;
28791     +%let intdsid = %sysfunc(open(work._intmid));
28792     +%if &intdsid %then %do;
28793     +  %let numbinvars = %sysfunc(ATTRN(&intdsid, NOBS));
28794     +%end;
28795     +%if &intdsid ne %then %let intdsid = %sysfunc(close(&intdsid));
28796     +%if &numbinvars > 0 %then %do;
28798     +/* get data in format needed for quantile_binning macro */
28799     +data work.vartable;
28800     +  set work._intmid;
28801     +  level = "INTERVAL";
28802     +  role  = "INPUT";
28803     +  rename variable=name;
28804     +run;
28806     +/* if freq var exists, add this to vartable so it will be processed by quantile_binning */
28807     +%if %EM_FREQ ne %then %do;
28808     +   data work.freq;
28809     +     name="%EM_FREQ";
28810     +     role="FREQ";
28811     +   run;
28813     +   data work.vartable;
28814     +     set work.vartable work.freq;
28815     +   run;
28816     +%end;
28819     +/* perform quantile binning of data */
28820     +%let precision =  1 / %sysevalf(10**&EM_PROPERTY_PRECISION);
28821     +%em_apps_quantile_binning( &input, work.vartable, &EM_PROPERTY_NUMBINS, &EM_USER_BINMAPPINGS, X, precision=&precision, dropOriginal=Y);
28823     +proc sort data=&EM_USER_BINMAPPINGS; by name lb; run;
28824     +%end;
28825     +%else %do;
28826     +  /* initialize binmappings table */
28827     +  data &EM_USER_BINMAPPINGS;
28828     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
28829     +  run;
28831     +  data _null_;
28832     +    FILE X;
28834     +    put "&EM_CODEBAR;";
28835     +    %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
28836     +    put "* &note;";
28837     +    put "&EM_CODEBAR;";
28838     +  run;
28840     +%end;
28842     +/* assign display_var values to binmappings table as well as initial group values */
28843     +data &EM_USER_BINMAPPINGS;
28844     +  set &EM_USER_BINMAPPINGS;
28845     +  length display_var $32 grp $8;
28846     +  display_var = name;
28848     +  %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
28849     +    GRP = BIN + 1;
28850     +  %end;
28851     +  %else %do;
28852     +    GRP = BIN;
28853     +  %end;
28854     +run;
28856     +/* de-assign fileref */
28857     +filename X;
28859     +    /* append to binning code those values that were included in the importSubset data */
28860     +    %if &useImport eq 1 %then %do;
28861     +      %EM_IMPORT_BINNING(&binningcode);
28862     +    %end;
28864     +    /* append to binning code those values that were included in the freezeSubset data */
28865     +    %if &useFreeze eq 1 %then %do;
28866     +      %EM_FREEZE_BINNING(&binningcode);
28867     +    %end;
28869     +    proc sort data=&EM_USER_BINMAPPINGS out=sortedmapping nodupkey;
28870     +      by NAME;
28871     +    run;
28873     +    /* create grouping for missing level */
28874     +    data tempmissvalues;
28875     +    run;
28877     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
28879     +       %if ((&useImport eq 0) OR (&useFreeze eq 0)) %then %do;
28880     +             data tempmissvalues;
28881     +               %if ((&useImport eq 1) OR (&useFreeze eq 1)) %then %do;
28882     +                  merge sortedmapping
28883     +                 %if &useImport eq 1 %then %do;
28884     +                    &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME))
28885     +                 %end;
28886     +                 %if &useFreeze eq 1 %then %do;
28887     +                   &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME))
28888     +                 %end;
28889     +                 ;
28890     +                 by NAME;
28891     +               %end;
28892     +               %else %do;
28893     +                 set sortedmapping;
28894     +               %end;
28895     +               GRP="1";
28896     +               bin="Missing";
28897     +               _split_value_ = "Missing";
28898     +               %if &useImport eq 1 %then %do;
28899     +                  if _a then delete;
28900     +               %end;
28901     +               %if &useFreeze eq 1 %then %do;
28902     +                  if _b then delete;
28903     +               %end;
28905     +             run;
28906     +         %end;
28907     +         %else %do; /* both 1 */
28908     +            data tempmissvalues1;
28909     +               merge sortedmapping &EM_USER_IMPORtSUBSET(in=_a rename=(_variable_=NAME));
28910     +               by NAME;
28911     +               if _a then delete;
28912     +            run;
28914     +            data tempmissvalues;
28915     +               merge tempmissvalues1 &EM_USER_FreezeSUBSET(in=_b rename=(_variable_=NAME));
28916     +               by NAME;
28917     +               GRP="1";
28918     +               bin="Missing";
28919     +               _split_value_ = "Missing";
28920     +               if _b then delete;
28921     +             run;
28923     +             proc delete data=tempmissvalues1;
28924     +             run;
28925     +         %end;
28926     +     %end;
28928     +    /* create binData from binningCode */
28929     +    filename X "&binningCode";
28931     +    data &bindata;
28932     +      set &input;
28933     +      %inc X;
28934     +    run;
28936     +    filename X;
28938     +    /* create splitvals dataset */
28939     +    data tempsplitvals;
28940     +      set &EM_USER_BINMAPPINGS tempmissvalues;
28941     +      length newgroup _group_ _order_ 8 _level_ $8;
28942     +      newgroup =.;
28943     +      _LEVEL_ = 'ORDINAL';
28944     +      _Group_ = grp;
28945     +      rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
28946     +      keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
28947     +    run;
28949     +    data tempsplitvals;
28950     +      set tempsplitvals;
28951     +      _order_ = _N_;
28952     +    run;
28954     +    /* determine if EM_USER_SPLITVALS already exists */
28955     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
28956     +    %if &sdsid > 0 %then %do;
28957     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
28958     +      %if &nvars > 0 %then %do;
28959     +        proc sql;
28960     +          reset noprint;
28961     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
28962     +        quit;
28963     +      %end;
28964     +      %else %let nobs=0;
28965     +    %end;
28966     +    %else %do;
28967     +       %let nobs=0;
28968     +       %let nvars=0;
28969     +    %end;
28970     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
28972     +    /* if useIMport=1 also include import definitions here as well */
28973     +    %if &useImport eq 1 %then %do;
28974     +      data tempImport;
28975     +        set &EM_USER_IMPORTSUBSET;
28976     +        _variable_ = binVar;
28977     +      run;
28978     +    %end;
28980     +    /* if useFreeze=1 also include frozen definitions here as well */
28981     +    %if &useFreeze eq 1 %then %do;
28982     +      data tempFreeze;
28983     +        length display_var $32;
28984     +        set &EM_USER_FreezeSUBSET;
28985     +        display_var = _variable_;
28986     +        _variable_ = binVar;
28987     +      run;
28988     +    %end;
28990     +    data &EM_USER_SPLITVALS;
28991     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
28992     +        set &EM_USER_SPLITVALS tempsplitvals
28993     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
28994     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
28995     +        %end;
28996     +        %if &useFreeze eq 1 %then %do;
28997     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
28998     +        %end;
28999     +        ;
29000     +      %end;
29001     +      %else %do;
29002     +        set tempsplitvals
29003     +        %if ((&useImport eq 1) AND (&useFreeze eq 0)) %then %do;
29004     +           tempImport( where=(binVar ne "" and _split_value_ eq "MISSING"))
29005     +        %end;
29006     +        %if &useFreeze eq 1 %then %do;
29007     +           tempFreeze( where=(binVar ne "" and _split_value_ eq "MISSING"))
29008     +        %end;
29009     +        ;
29010     +      %end;
29011     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
29012     +    run;
29014     +    /* create temporary mapping dataset of normalized and non-normalized values for char variables*/
29015     +    data tempvariableset;
29016     +      set &EM_DATA_VARIABLESET;
29017     +      where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
29018     +    run;
29020     +   %em_varmacro(name=classvars, metadata=tempvariableset, key=NAME, nummacro=num_classvars);
29022     +    /* add all interval vars that aren't special codes to the intervalvar macro
29023     +    %let dsid = %sysfunc(open(work.tempvariableset));
29024     +    %if &dsid %then %do;
29025     +      %let varnum = %sysfunc(VARNUM(&dsid, NAME));
29026     +      %let obs = %sysfunc(fetch(&dsid));
29027     +      %do %while(&obs=0);
29028     +        %let varname = %sysfunc(getvarc(&dsid, &varnum));
29029     +        %let classvars = &classvars &varname;
29030     +        %let qclassvars = &qclassvars "&varname";
29031     +        %let obs = %sysfunc(fetch(&dsid));
29032     +      %end;
29033     +    %end;
29034     +    %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29035     +*/
29036     +    %if %classvars ne %then %do;
29037     +      proc dmdb data =&bindata classout=_classout nonorm;
29038     +        class %classvars;
29039     +      run;
29041     +      proc dmdb data=&bindata classout=_classout2;
29042     +       class %classvars;
29043     +      run;
29045     +      proc sort data=_classout; by NAME CRAW; run;
29046     +      proc sort data=_classout2; by NAME CRAW; run;
29048     +      data _classout;
29049     +        length _variable_ $32;
29050     +        merge _classout _classout2 (rename=(LEVEL=_split_value_));
29051     +        by NAME CRAW;
29052     +       _variable_ = NAME;
29053     +      run;
29055     +      proc sort data=_classout; by _variable_ _split_value_; run;
29056     +      proc sort data=&EM_USER_SPLITVALS; by _variable_ _split_value_; run;
29058     +      data &EM_USER_SPLITVALS;
29059     +        length _norm_level_ $200 _split_value_ $200;
29060     +        merge &EM_USER_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
29061     +        by _variable_ _split_value_;
29062     +        LEVEL = trim(left(LEVEL));
29063     +        _split_value_ = trim(left(_split_value_));
29064     +        _norm_level_ = trim(left(_norm_level_));
29065     +        if _norm_level_ eq '' then _norm_level_= _split_value_;
29066     +        drop NAME FREQUENCY TYPE CRAW NRAW;
29067     +      run;
29069     +      proc datasets library=work nolist;
29070     +        delete _classout _classout2;
29071     +      run;
29072     +      quit;
29073     +    %end;
29075     +    data &EM_USER_SPLITVALS;
29076     +      set &EM_USER_SPLITVALS;
29077     +      if _norm_level_ eq '' then _norm_level_= _split_value_;
29078     +    run;
29081     +    proc sort data=&EM_USER_SPLITVALS;
29082     +      by DISPLAY_VAR _Group_;
29083     +    run;
29085     +    proc datasets library=work nolist;
29086     +      delete sortedmapping tempsplitvals tempmissvalues
29087     +      %if &useImport eq 1 %then %do;
29088     +        tempImport
29089     +      %end;
29090     +      %if &useFreeze eq 1 %then %do;
29091     +        tempFreeze
29092     +      %end;
29093     +      ;
29094     +    run;
29095     +    quit;
29096     +/*
29097     +%end;
29098     +%else %do;
29099     +    data &bindata;
29100     +      set &input;
29101     +    run;
29102     +%end;
29103     +*/
29104     +%mend EM_QUANTILE_BINNING;
29106     +%macro EM_ORDVARS_GROUP;
29108     +   /* retrieve all ordinal variables from the incoming dataset */
29109     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
29110     +     by NAME;
29111     +     where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
29112     +   run;
29114     +   /* add all vars marked as interval that are actually class vars to this data */
29115     +   %let nobs = 0;
29116     +   %let dsid = %sysfunc(open(WORK._DISCRETEMID));
29117     +   %if &dsid %then %do;
29118     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
29119     +     %if &nobs gt 0 %then %do;
29121     +     data tempvars;
29122     +       set &EM_DATA_VARIABLESET;
29123     +       if NAME in (
29124     +         %let obs = %sysfunc(fetch(&dsid));
29125     +         %do %while(&obs=0);
29126     +           %let varnum = %sysfunc(VARNUM(&dsid, VARIABLE));
29127     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
29128     +           "&varname"
29129     +           %let obs = %sysfunc(fetch(&dsid));
29130     +         %end;
29131     +        );
29132     +     run;
29133     +     data tempvariableset;
29134     +       set tempvariableset tempvars;
29135     +     run;
29136     +     %end;
29137     +   %end;
29138     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29140     +   %if &useImport eq 1 %then %do;
29141     +     /* remove all variables from tempvariableset that are included in the importsubset */
29142     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
29143     +       by _VARIABLE_ ;
29144     +     run;
29145     +     proc sort data=tempvariableset; by NAME; run;
29147     +     data tempvariableset;
29148     +       merge tempimport(in=_a) tempvariableset(in=_b);
29149     +       by NAME;
29150     +       if ^_a then output;
29151     +     run;
29152     +   %end;
29154     +   %if &useFreeze eq 1 %then %do;
29155     +     /* remove all variables from tempvariableset that are included in the freezesubset */
29156     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
29157     +       by _VARIABLE_ ;
29158     +     run;
29159     +     proc sort data=tempvariableset; by NAME; run;
29161     +     data tempvariableset;
29162     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
29163     +       by NAME;
29164     +       if ^_a then output;
29165     +     run;
29166     +   %end;
29168     +   /* get dataset of distinct values for the ordinal variable */
29169     +   %let nobs = 0;
29170     +   %let dsid = %sysfunc(open(WORK.tempvariableset));
29171     +   %if &dsid %then %do;
29172     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
29173     +     %if &nobs gt 0 %then %do;
29174     +         %let obs = %sysfunc(fetch(&dsid));
29175     +         %do %while(&obs=0);
29176     +           %let varnum = %sysfunc(VARNUM(&dsid, NAME));
29177     +           %let varname = %sysfunc(GETVARC(&dsid, &varnum));
29178     +           %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
29179     +           %let input_type = %sysfunc(getvarc(&dsid, &typenum));
29180     +           %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
29181     +           %let input_fmt = %sysfunc(getvarc(&dsid, &fmtnum));
29182     +           %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
29183     +           %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
29184     +           %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
29186     +           data temp;
29187     +             set &EM_USER_BINDATA(keep=&varname);
29188     +             %if &input_fmt ne %then %do;
29189     +               %dmnormcp(put(&varname, &input_fmt), _norm);
29190     +             %end;
29191     +             %else %do;
29192     +               %dmnormcp(&varname, _norm);
29193     +             %end;
29194     +             keep &varname _norm;
29195     +           run;
29197     +          proc dmdb data=temp classout=_classout2;
29198     +           class _norm;
29199     +         run;
29200     +         proc sort data=_classout2; by LEVEL; run;
29202     +         /* re-order numeric inputs based on non-normalized values */
29203     +         %if &input_type eq N %then %do;
29204     +           proc sort data=temp nodupkey; by _norm; run;
29205     +           data varvals;
29206     +             merge temp _classout2(rename=(LEVEL=_norm));
29207     +             by _norm;
29208     +             if craw='' and _norm ne '.' then delete;
29209     +             keep &varname _norm nraw craw;
29210     +           run;
29212     +           proc sort data=varvals; by &varname; run;
29213     +         %end;
29214     +         %else %do;
29215     +           data varvals;
29216     +              set _classout2(rename=(LEVEL=_norm));
29217     +              if _norm='' then delete;
29218     +              if _norm='.' then delete;
29219     +              keep _norm;
29220     +           run;
29221     +         %end;
29222     +         data varvals;
29223     +           set varvals;
29224     +           if &varname="." then delete;
29225     +           if upcase(&varname) = "MISSING" then delete;
29226     +         run;
29228     +          /* generate Splitvals Data */
29229     +          data tempsplitvals;
29230     +            length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ _order_ 8 _level_ $8 _norm_level_ $200 ;
29232     +            %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
29233     +              DISPLAY_VAR="&varname";
29234     +              _VARIABLE_ ="&varname";
29235     +              newgroup   =.;
29236     +              _group_    =1;
29237     +              _Split_Value_="Missing";
29238     +              _level_    ="ORDINAL";
29239     +              output;
29240     +              %let group=2;
29241     +            %end;
29242     +            %else %let group=1;
29244     +            %let vdsid = %sysfunc(open(WORK.VARVALS));
29245     +            %if &vdsid %then %do;
29246     +            %let namenum = %sysfunc(VARNUM(&vdsid, _norm));
29247     +            /*%let group = 2;*/
29248     +            %let vobs = %sysfunc(fetch(&vdsid));
29249     +            %do %while(&vobs=0);
29250     +                %let nameval = %bquote(%upcase(%sysfunc(getvarc(&vdsid, &namenum))));
29252     +                DISPLAY_VAR   = "&varname";
29253     +                _variable_    = "&varname";
29254     +                newgroup      = .;
29255     +                _group_       = &group;
29256     +                _split_value_ = "&nameval";
29257     +                _level_       = 'ORDINAL';
29258     +                output;
29260     +              %let group = %eval(&group + 1);
29261     +              %let vobs = %sysfunc(fetch(&vdsid));
29262     +            %end;
29263     +            %if &vdsid %then %let vdsid = %sysfunc(close(&vdsid));
29264     +          run;
29266     +          /* determine if EM_USER_SPLITVALS already exists */
29267     +          %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
29268     +          %if &sdsid > 0 %then %do;
29269     +            %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
29270     +            %if &nvars > 0 %then %do;
29271     +               proc sql;
29272     +                reset noprint;
29273     +                select count(*) into :nobs from &EM_USER_SPLITVALS;
29274     +               quit;
29275     +            %end;
29276     +            %else %let nobs=0;
29277     +            %end;
29278     +            %else %do;
29279     +              %let nobs=0;
29280     +              %let nvars=0;
29281     +            %end;
29282     +          %end;
29283     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
29285     +          /* if tempsplitvals doesn't exist; create empty data set */
29286     +          %let sdsid = %sysfunc(open(work.tempsplitvals));
29287     +          %if &sdsid <= 0 %then %do;
29288     +            data tempsplitvals;
29289     +              length DISPLAY_VAR _VARIABLE_ $32 _Split_value_ $200 newgroup _group_ 8 _level_ $8 ;
29290     +            run;
29291     +          %end;
29292     +          %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
29294     +          data tempsplitvals;
29295     +            set tempsplitvals;
29296     +            _order_ = _N_;
29297     +          run;
29299     +          %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
29300     +             proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
29301     +             proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
29302     +          %end;
29304     +          data &EM_USER_SPLITVALS;
29305     +           %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
29306     +             merge &EM_USER_SPLITVALS tempsplitvals;
29307     +             by _variable_ _split_value_;
29308     +           %end;
29309     +           %else %do;
29310     +             set tempsplitvals;
29311     +           %end;
29312     +           if display_var eq "" then delete;
29313     +           if _norm_level_ eq "" then _norm_level_ = _split_value_;
29314     +           keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_ _order_;
29315     +         run;
29317     +           %let obs = %sysfunc(fetch(&dsid));
29318     +         %end;
29319     +     %end;
29320     +   %end;
29321     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29323     +   proc sort data=&EM_USER_SPLITVALS;
29324     +      by DISPLAY_VAR _Group_;
29325     +   run;
29327     +   /* delete temporary datasets */
29328     +   proc datasets library= work nolist;
29329     +     delete tempsplitvals varvals tempvariableset tempvars
29330     +     ;
29331     +   run;
29332     +   quit;
29333     +%mend EM_ORDVARS_GROUP;
29336     +%macro EM_CLASSVARS_GROUP(groupRare);
29338     +   /* retrieve all class variables from the incoming dataset */
29339     +   proc sort data=&EM_DATA_VARIABLESET out=tempvariableset;
29340     +     by NAME;
29341     +     where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
29342     +   run;
29344     +   %if &useImport eq 1 %then %do;
29345     +     /* remove all variables from tempvariableset that are included in the importsubset */
29346     +     proc sort data=&EM_USER_IMPORTSUBSET out=tempimport(rename=(_VARIABLE_ = NAME));
29347     +       by _VARIABLE_ ;
29348     +     run;
29349     +     proc sort data=tempvariableset; by NAME; run;
29351     +     data tempvariableset;
29352     +       merge tempimport(in=_a) tempvariableset(in=_b);
29353     +       by NAME;
29354     +       if ^_a then output;
29355     +     run;
29356     +   %end;
29358     +   %if &useFreeze eq 1 %then %do;
29359     +     /* remove all variables from tempvariableset that are included in the freezesubset */
29360     +     proc sort data=&EM_USER_FREEZESUBSET out=tempfreeze(rename=(_VARIABLE_ = NAME));
29361     +       by _VARIABLE_ ;
29362     +     run;
29363     +     proc sort data=tempvariableset; by NAME; run;
29365     +     data tempvariableset;
29366     +       merge tempfreeze(in=_a) tempvariableset(in=_b);
29367     +       by NAME;
29368     +       if ^_a then output;
29369     +     run;
29370     +   %end;
29372     +   /* run dmdb to retrieve list of all class levels and counts */
29373     +   %let dsid = %sysfunc(open(work.tempvariableset));
29374     +   %let nobs = 0;
29375     +   %if &dsid %then %do;
29376     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
29378     +   %end;
29380     +   %if &nobs gt 0 %then %do;
29381     +     proc dmdb data=&EM_IMPORT_DATA classout=tempclassout;
29382     +       class
29384     +        %let namenum = %sysfunc(VARNUM(&dsid, NAME));
29385     +        %let obs = %sysfunc(fetch(&dsid));
29386     +        %do %while(&obs=0);
29387     +           %let name = %sysfunc(getvarc(&dsid, &namenum));
29388     +           &name
29389     +           %let obs = %sysfunc(fetch(&dsid));
29390     +        %end;
29391     +     ;
29393     +     %if %EM_FREQ ne %then %do;
29394     +        freq %EM_FREQ;
29395     +     %end;
29396     +    run;
29397     +   %end;
29398     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29400     +   %let dsid = %sysfunc(open(work.tempclassout));
29401     +   %let nobs = 0;
29402     +   %if &dsid %then %do;
29403     +     %let nobs = %sysfunc(ATTRN(&dsid, NOBS));
29404     +     %let dsid = %sysfunc(close(&dsid));
29405     +   %end;
29407     +   %if &nobs gt 0 %then %do;
29408     +    data tempclassout;
29409     +       set tempclassout;
29410     +       if LEVEL='MISSING' then level='Missing';
29411     +    run;
29413     +    proc sort data=tempclassout nodupkey;
29414     +      by NAME descending FREQUENCY LEVEL;
29415     +    run;
29417     +    data tempds(keep=NAME NOBS);
29418     +      retain NOBS;
29419     +      set tempclassout;
29420     +      by NAME;
29421     +      if first.NAME then
29422     +        NOBS = frequency;
29423     +      else
29424     +        NOBS=NOBS+frequency;
29425     +      if last.name then do;
29426     +        output;
29427     +      end;
29428     +    run;
29430     +    data tempds;
29431     +      merge tempclassout
29432     +      tempds;
29433     +      by NAME;
29434     +      if ((LEVEL ne '') AND (LEVEL ne "."));
29435     +      %if &groupRare eq Y %then %do;
29436     +        PCT = 100 * (FREQUENCY/NOBS);
29437     +        if PCT < &EM_PROPERTY_GROUPCUTOFF then flag=1;
29438     +        else flag=0;
29439     +      %end;
29440     +      %else %do;
29441     +        flag = 0;
29442     +      %end;
29443     +    run;
29445     +    %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
29446     +      data tempmissvalues;
29447     +        length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
29449     +      %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
29450     +      %if &dsid %then %do;
29451     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
29452     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
29453     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
29454     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
29455     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
29456     +        %let obs = %sysfunc(fetch(&dsid));
29458     +        %do %while(&obs=0);
29459     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
29460     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
29461     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
29462     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
29464     +          NAME="&var";
29465     +          LEVEL="Missing";
29466     +          _LEVEL_="&varlvl";
29467     +          _group_ = 1;
29468     +          output;
29470     +          %let obs = %sysfunc(fetch(&dsid));
29471     +        %end;
29472     +      %end;
29473     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29474     +      run;
29475     +    %end;
29477     +    /* generate Splitvals Data */
29478     +    data tempsplitvals;
29479     +      length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
29481     +      set tempclassout
29482     +      %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
29483     +         tempmissvalues
29484     +      %end;
29485     +      ;
29486     +      if ((level ne '') AND (level ne '.'));
29488     +     %let dsid = %sysfunc(open(WORK.TEMPVARIABLESET));
29489     +     %if &dsid %then %do;
29490     +        %let varnum = %sysfunc(VARNUM(&dsid, NAME));
29491     +        %let fmtnum = %sysfunc(VARNUM(&dsid, FORMAT));
29492     +        %let typenum = %sysfunc(VARNUM(&dsid, TYPE));
29493     +        %let lblnum  = %sysfunc(VARNUM(&dsid, LABEL));
29494     +        %let varlvlnum = %sysfunc(VARNUM(&dsid, LEVEL));
29495     +        %let obs = %sysfunc(fetch(&dsid));
29497     +        %do %while(&obs=0);
29498     +          %let var = %sysfunc(getvarc(&dsid, &varnum));
29499     +          %let format = %sysfunc(getvarc(&dsid, &fmtnum));
29500     +          %let type = %sysfunc(getvarc(&dsid, &typenum));
29501     +          %let varlvl = %sysfunc(getvarc(&dsid, &varlvlnum));
29503     +          if NAME = "&var" then do;
29504     +            _LEVEL_ = "&varlvl";
29506     +          /* cycle through levels, assigning group values;              */
29507     +          /* flag=1 indicates to put value in "_OTHER_" group;          */
29508     +          /* flag=0 indicates that value shoudld be in group of its own */
29509     +          %let choice = ((NAME="&Var") and (FLAG=0));
29510     +          %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
29511     +            %let group=2;
29512     +          %end;
29513     +          %else %do;
29514     +            %let group = 1;
29515     +          %end;
29516     +          %let fdsid = %sysfunc(open(work.tempds(where=(&choice))));
29517     +          %if &fdsid %then %do;
29519     +            %let lvlnum = %sysfunc(VARNUM(&fdsid, LEVEL));
29520     +            %let fobs = %sysfunc(fetch(&Fdsid));
29521     +            %let fflag = 0;
29522     +            %do %while(&fobs=0);
29523     +              %let fflag = 1;
29524     +              %let temp = %nrbquote(%sysfunc(getvarc(&fdsid, &lvlnum)));
29525     +              %let level = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
29526     +              %let level = %nrbquote(%sysfunc(strip(&level)));
29527     +              %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
29528     +                %if &group eq 2 %then %do;
29529     +                   if LEVEL = "&level" then _GROUP_ = &group;
29530     +                %end;
29531     +                %else %do;
29532     +                   else if LEVEL = "&level" then _GROUP_ = &group;
29533     +                %end;
29534     +              %end;
29535     +              %else %do;
29536     +                %if &group eq 1 %then %do;
29537     +                   if LEVEL = "&level" then _GROUP_ = &group;
29538     +                %end;
29539     +                %else %do;
29540     +                   else if LEVEL = "&level" then _GROUP_ = &group;
29541     +                %end;
29542     +              %end;
29544     +              %let group = %eval(&group + 1);
29545     +              %let fobs = %sysfunc(fetch(&fdsid));
29546     +            %end;
29548     +          %end;
29549     +          %if &fflag eq 1 %then %do;
29550     +            else if LEVEL ^='Missing' then _GROUP_ = &group;
29551     +          %end;
29552     +          end;
29554     +          %if &fdsid %then %let fdsid = %sysfunc(close(&fdsid));
29555     +          %let obs = %sysfunc(fetch(&dsid));
29556     +        %end;
29557     +     %end;
29558     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29559     +     _VARIABLE_ = NAME;
29560     +     newgroup = .;
29561     +     rename NAME = DISPLAY_VAR
29562     +            LEVEL = _SPLIT_VALUE_;
29563     +     keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
29564     +    run;
29565     +  %end;
29566     +   %if &dsid %then %let dsid = %sysfunc(close(&dsid));
29568     +    /* determine if EM_USER_SPLITVALS already exists */
29569     +    %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
29570     +    %if &sdsid > 0 %then %do;
29571     +      %let nvars = %sysfunc(ATTRN(&sdsid, NVARS));
29572     +      %if &nvars > 0 %then %do;
29573     +        proc sql;
29574     +          reset noprint;
29575     +          select count(*) into :nobs from &EM_USER_SPLITVALS;
29576     +        quit;
29577     +      %end;
29578     +      %else %let nobs=0;
29579     +    %end;
29580     +    %else %do;
29581     +       %let nobs=0;
29582     +       %let nvars=0;
29583     +    %end;
29584     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
29586     +   /* if tempsplitvals doesn't exist; create empty data set */
29587     +    %let sdsid = %sysfunc(open(work.tempsplitvals));
29588     +    %if &sdsid <= 0 %then %do;
29589     +      data tempsplitvals;
29590     +        length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
29591     +      run;
29592     +    %end;
29593     +    %if &sdsid > 0 %then %let sdsid = %sysfunc(close(&sdsid));
29595     +    %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
29596     +      proc sort data = &EM_USER_SPLITVALS; by _variable_ _split_value_; run;
29597     +      proc sort data = tempsplitvals nodupkey; by _variable_ _split_Value_ _group_; run;
29598     +    %end;
29600     +    /* if useIMport=1 also include import definitions here as well */
29601     +    %if &useImport eq 1 %then %do;
29602     +      proc sort data=&EM_USER_IMPORTSUBSET; by _variable_ _split_value_; run;
29603     +    %end;
29604     +    %if &useFreeze eq 1 %then %do;
29605     +      proc sort data=&EM_USER_FREEZESUBSET; by _variable_ _split_value_; run;
29606     +    %end;
29607     +    data &EM_USER_SPLITVALS;
29608     +      %if ((&nobs > 0) AND (&nvars > 0)) %then %do;
29609     +        merge &EM_USER_SPLITVALS tempsplitvals
29610     +        %if &useImport eq 1 %then %do;
29611     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
29612     +        %end;
29613     +        %if &useFreeze eq 1 %then %do;
29614     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
29615     +        %end;
29617     +        ;
29618     +        by _variable_ _split_value_
29619     +        ;
29620     +      %end;
29621     +      %else %do;
29622     +        set tempsplitvals
29623     +        %if &useImport eq 1 %then %do;
29624     +           &EM_USER_IMPORTSUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
29625     +        %end;
29626     +        %if &useFreeze eq 1 %then %do;
29627     +           &EM_USER_FREEZESUBSET(where=(binVar eq "" and _level_ ne "INTERVAL"))
29628     +        %end;
29629     +        ;
29630     +      %end;
29631     +      if display_var eq "" then delete;
29632     +      if _norm_level_ eq "" then _norm_level_ = _split_value_;
29633     +      keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
29634     +    run;
29636     +    proc sort data=&EM_USER_SPLITVALS;
29637     +      by DISPLAY_VAR _Group_;
29638     +    run;
29640     +   /* delete temporary datasets */
29641     +   proc datasets library= work nolist;
29642     +     delete tempsplitvals tempds tempclassout tempvariableset tempvars
29643     +     %if &EM_PROPERTY_MISSINGASLEVEL eq Y %then %do;
29644     +       tempmissvalues
29645     +     %end;
29646     +     ;
29647     +   run;
29648     +   quit;
29649     +%mend EM_CLASSVARS_GROUP;
29652     +%macro EM_SUMMARIZE_TABLE(data, inputData, outData, varname=);
29654     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
29656     +  data temptrain ;
29657     +    set &data;
29658     +  run;
29660     +  /* normalize all values prior to calculating counts */
29661     +  filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
29662     +  %include _temp;
29663     +  filename _temp;
29664     +  filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
29665     +  %include _temp;
29666     +  filename _temp;
29668     +  proc sort data=&EM_USER_VARMAPPINGS
29669     +  %if &varname ne %then %do;
29670     +    (where=(_variable_="&varname"))
29671     +  %end;
29672     +  out=tempmap; by _variable_; run;
29674     +  data _cmeta;
29675     +    merge tempvarset tempmap(in=_a rename=(_variable_=name ));
29676     +    by name;
29677     +    if ((_a) or (role="TARGET"));
29678     +    if role="INPUT" or (role="REJECTED" and Use="Y") then name=_proc_var_;
29679     +    %if %length(%EM_BINARY_TARGET) %then %do;
29680     +      if role="TARGET" then role="INPUT";
29681     +    %end;
29682     +    level = procLevel;
29683     +    index = kindex(name, "BIN_");
29684     +    if index gt 0 then do;
29685     +     level="ORDINAL";
29686     +     format = "";
29687     +    end;
29688     +    drop index;
29689     +  run;
29691     +  %em_PreNormalizeClassVars(incmeta=_cmeta, outcmeta=_cmetatmp);
29692     +  %em_NormalizeClassVars(indata=work.temptrain, cmeta=_cmetatmp, encodedTarget=N, outdata=_tmp_train);
29694     +  proc sort data=&inputData out=sortedmap; by _proc_var_; run;
29696     +  data _null_;
29697     +    set sortedmap end=eof;
29698     +    by _proc_var_;
29699     +    if _n_=1 then do;
29700     +      call execute("ods output CrossTabFreqs=crosstabfreq ;");
29701     +      call execute("ods listing close;");
29702     +      call execute("proc freq data=_tmp_train order=formatted addnames;");
29703     +      call execute("tables ("||_proc_var_);
29704     +    end;
29705     +    else do;
29706     +      call execute(_proc_var_);
29707     +    end;
29708     +    if eof then do;
29709     +      call execute(") * &ignbintarget/ missing;");
29710     +      %if %EM_FREQ ne %then %do;
29711     +        call execute("weight %EM_FREQ;");
29712     +      %end;
29713     +      call execute("run;");
29714     +      call execute("ods output close;");
29715     +      call execute("ods listing;");
29716     +    end;
29717     +  run;
29719     +  data _null_;
29720     +    set sortedmap end=eof;
29721     +    by _proc_var_;
29722     +    if _n_=1 then do;
29723     +      call execute("data crosstabs;");
29724     +      call execute("  length _variable_ _split_value_  $200 ;");
29725     +      call execute("  set crosstabfreq(where=(_type_='11'));");
29726     +      call execute("  _variable_= RowVariable;");
29727     +    end;
29729     +    call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
29730     +    call execute("  _split_value_="||_proc_var_||";");
29731     +    call execute("end;");
29733     +    if eof then do;
29734     +      call execute("keep _variable_ _split_value_ &ignbintarget Frequency Percent display_var;");
29735     +      call execute("run;");
29736     +    end;
29737     +  run;
29739     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
29741     +  data crosstabs;
29742     +    length display_var $32;
29743     +    merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
29744     +    by _variable_;
29745     +  run;
29747     +  proc sort data=crosstabs; by display_var _split_value_; run;
29748     +  proc sort data=&EM_DATA_VARIABLESET out=tempvarset; by name; run;
29750     +  data crosstabs;
29751     +    merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
29752     +    by display_var;
29753     +    index = kindex(_variable_, "BIN_");
29754     +    if index gt 0 then do;
29755     +     level="ORDINAL";
29756     +     format = "";
29757     +    end;
29758     +    _temp = &ignbintarget;
29759     +    /*
29760     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
29761     +      %if &target_format ne %then %do;
29762     +        %if &target_type eq C %then %do;
29763     +           %dmnormcp(put(&ignbintarget, &target_format), _temp);
29764     +        %end;
29765     +        %else %do;
29766     +           %dmnormcp(put(&ignbintarget, &target_format), _temp);
29767     +        %end;
29768     +      %end;
29769     +      %else %do;
29770     +        %dmnormcp(&ignbintarget, _temp);
29771     +      %end;
29772     +    %end;
29773     +    %else %do;
29774     +      _temp = &ignbintarget;
29775     +    %end;
29776     +*/
29778     +    drop index;
29779     +  run;
29781     +  proc sort data=crosstabs; by _variable_ _split_value_; run;
29783     +  data &outdata;
29784     +    length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate  8 type $1 valfmt $20 ;
29786     +    retain eventCount noneventCount ;
29787     +    set crosstabs;
29788     +    by  _variable_ _split_value_;
29790     +    if first._split_value_ then do;
29791     +     total=0;
29792     +     eventcount=0;
29793     +     noneventcount=0;
29794     +    end;
29796     +    %if ((&target_type eq C) OR (&target_format ne ))  %then %do;
29797     +      %if &target_format ne %then %do;
29798     +        if upcase(strip(_temp))="&target_event" then
29799     +          eventCount=Frequency;
29800     +      %end;
29801     +      %else %do;
29802     +         if upcase(strip(_temp)) ="&target_event" then
29803     +          eventCount=Frequency;
29804     +      %end;
29805     +    %end;
29806     +    %else %do;
29807     +      if _temp=&target_event then
29808     +        eventCount=Frequency;
29809     +    %end;
29810     +    else
29811     +      noneventCount=Frequency;
29813     +    if last._split_value_ then do;
29814     +      total = eventCount + noneventCount;
29816     +      if total ne 0 then do;
29817     +        eventRate = eventCount / total;
29818     +        nonEventRate = nonEventCount / total;
29819     +      end;
29820     +      else do;
29821     +        eventRate = 0;
29822     +        nonEventRate = 0;
29823     +      end;
29824     +     output;
29825     +    end;
29826     +    valfmt = format;
29828     +    drop _temp Frequency percent;
29829     +   run;
29831     +%mend EM_SUMMARIZE_TABLE;
29834     +%macro EM_FINE_DETAIL(bindata, varmappings, fineDetailData, splitVals, binMappings, interactiveFlag=0);
29836     +   proc freq data=&bindata noprint;
29837     +     table &ignbintarget / missing out=temptargetB;
29838     +     %if %EM_FREQ ne %then %do;
29839     +       weight %EM_FREQ;
29840     +     %end;
29841     +   run;
29843     +   %let tdsid = %sysfunc(open(work.temptargetB));
29844     +   %if &tdsid %then %do;
29845     +      %let tarnum = %sysfunc(VARNUM(&tdsid, &ignbintarget));
29846     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
29848     +      %let temp = %nrbquote(%sysfunc(strip(&target_event)));
29849     +      %let target_event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
29850     +      %let temp = %nrbquote(%sysfunc(strip(&target_nonevent)));
29851     +      %let target_nonevent = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
29854     +      %let obs = %sysfunc(fetch(&tdsid));
29855     +      %do %while(&obs = 0);
29856     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
29857     +           %if &target_type eq C %then %do;
29858     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
29859     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
29860     +           %end;
29861     +           %else
29862     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
29864     +           %if &target_format ne %then %do;
29865     +              %if &target_type eq C %then %do;
29866     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
29867     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
29868     +              %end;
29869     +              %else
29870     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
29871     +           %end;
29872     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
29873     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
29875     +           %if "&tarvalue" eq "&target_event" %then %do;
29876     +             %let totalevent = &count;
29877     +           %end;
29878     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
29879     +              %let totalnonevent= &count;
29880     +           %end;
29881     +         %end;
29882     +         %else %do;
29883     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
29884     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
29886     +           %if &tarvalue eq &target_event %then %do;
29887     +             %let totalevent = &count;
29888     +           %end;
29889     +           %else %if &tarvalue eq &target_nonevent %then %do;
29890     +              %let totalnonevent= &count;
29891     +           %end;
29892     +         %end;
29893     +         %let obs = %sysfunc(fetch(&tdsid));
29894     +      %end;
29895     +   %end;
29896     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
29898     +   proc datasets lib=work nolist;
29899     +      delete temptargetB;
29900     +   run;
29901     +   quit;
29903     +   %if &interactiveFlag eq 0 %then %do;
29904     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData);
29905     +   %end;
29906     +   %else %do;
29907     +     %EM_SUMMARIZE_TABLE(&bindata, &varmappings, &fineDetailData, varname=&wherevar);
29908     +   %end;
29911     +   data &fineDetailData;
29912     +     length display_var $32 newgroup numsplitval 8;
29913     +     set &fineDetailData;
29915     +     display_var = _variable_;
29917     +     index = kindex(display_var, "BIN_");
29918     +     if index gt 0 then do;
29919     +       display_var = ksubstr(display_var, 5);
29920     +     end;
29922     +     index2 = kindex(display_var, "SV_");
29923     +     if index2 gt 0 then do;
29924     +       display_var = ksubstr(display_var, 4);
29925     +     end;
29927     +     /* re-code missing values to "Missing" */
29928     +     if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
29929     +     _index_ = _N_;
29930     +     newgroup = .;
29931     +     drop index index2 ;
29932     +   run;
29934     +   /* add group information to fineDetailData; */
29935     +   /* add label information for binned variables to fineDetailData*/
29937     +   proc sort data=&fineDetailData; by _variable_ _split_value_; run;
29939     +   data tmpsplitvals;
29940     +     set &splitvals;
29941     +     _norm_level_ = upcase(_norm_level_);
29942     +     if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
29943     +    * drop _split_value_;
29944     +   run;
29946     +   proc sort data=tmpsplitvals out=sortedsplit; by _variable_ _split_value_; run;
29947     +   proc datasets library=work nolist;
29948     +     delete tmpsplitvals;
29949     +   run;
29950     +   quit;
29952     +   proc sort data=&BINMAPPINGS out=sortedbin; by BIN_NAME BIN; run;
29954     +   data &fineDetailData;
29955     +      merge &fineDetailData(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
29956     +      by _variable_ _split_value_;
29957     +      if _a then do;
29958     +        binFlag = 1;
29959     +        VALUE=EM_BIN_LABEL;
29960     +      end;
29961     +      else do;
29962     +        binFlag = 0;
29963     +        *VALUE=strip(display_var)!!"="!!strip(_split_value_);
29964     +        VALUE=strip(_split_value_);
29966     +      end;
29968     +      if ((eventCount=.) or (nonEventCount=.)) then do;
29969     +        eventCount=0;
29970     +        nonEventCount=0;
29971     +        total = 0;
29972     +        eventRate= 0;
29973     +        nonEventRate = 0;
29974     +      end;
29976     +      eventCount = round(eventCount, .001);
29977     +      nonEventCount = round(nonEventCount, .001);
29978     +      total= round(total, .001);
29979     +      eventRate = round(eventRate, .001);
29980     +      nonEventRate = round(nonEventRate, .001);
29982     +     if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then
29983     +         numsplitval = _split_value_;
29984     +     else if ((type='N') AND (valfmt ne "")) then
29985     +        numsplitval = _order_;
29986     +     else numsplitval=.;
29988     +      if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
29989     +      if _a and ^_b then delete;
29990     +      if _c and ^_b then delete;
29991     +      drop NAME EM_BIN_LABEL valfmt;
29992     +   run;
29994     +   /* for class variables that have values falling into the "other" category, set _LEVEL_ and _GROUP_ based on Missing level */
29995     +   data &fineDetailData;
29996     +     set &fineDetailData;
29998     +     %let choice = _LEVEL_ ne "INTERVAL" and _SPLIT_VALUE_ eq "Missing";
29999     +     %let dsid = %sysfunc(open(&splitvals(where=(&choice))));
30000     +     %if &dsid %then %do;
30001     +       %let dnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
30002     +       %let lvlnum = %sysfunc(VARNUM(&dsid, _LEVEL_));
30003     +       %let grpnum = %sysfunc(VARNUM(&dsid, _GROUP_));
30005     +       %let obs = %sysfunc(fetch(&dsid));
30006     +       %do %while(&obs=0);
30007     +         %let dispvar = %sysfunc(getvarc(&dsid, &dnum));
30008     +         %let lvl     = %sysfunc(getvarc(&dsid, &lvlnum));
30009     +         %let group   = %sysfunc(getvarn(&dsid, &grpnum));
30011     +         if DISPLAY_VAR = "&dispvar" then do;
30012     +           if _LEVEL_ = "" then _LEVEL_ ="&lvl";
30013     +           if _GROUP_ = . then _GROUP_ = &group;
30014     +         end;
30016     +         %let obs = %sysfunc(fetch(&dsid));
30017     +       %end;
30018     +     %end;
30019     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30020     +     if _GROUP_ = . then delete;
30021     +    * if binFlag=1 and UB=LB then delete;
30022     +    * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
30023     +   run;
30025     +   proc sort data=&fineDetailData;
30026     +     by DISPLAY_VAR _index_;
30027     +   run;
30029     +   proc datasets lib=work nolist;
30030     +     delete sortedsplit sortedbin
30031     +     ;
30032     +   run;
30033     +   quit;
30034     +%mend EM_FINE_DETAIL;
30036     +%macro EM_CREATE_GROUPING(bindata, fineDetailData, coarse);
30038     +   proc freq data=&bindata noprint;
30039     +     table &ignbintarget / missing out=temptargetC;
30040     +     %if %EM_FREQ ne %then %do;weight %EM_FREQ;
30041     +     %end;
30042     +   run;
30044     +   %let tdsid = %sysfunc(open(work.temptargetC));
30045     +   %if &tdsid %then %do;
30046     +      %let tarnum = %sysfunc(VARNUM(&tdsid, &ignbintarget));
30047     +      %let tnum  = %sysfunc(VARNUM(&tdsid, COUNT));
30049     +      %let obs = %sysfunc(fetch(&tdsid));
30050     +      %do %while(&obs = 0);
30051     +        /* %if &target_type eq C or &target_format ne %then %do; */
30052     +         %if ((&target_type eq C) or (&target_format ne )) %then %do;
30053     +           %if &target_type eq C %then %do;
30054     +             %let temp = %nrbquote(%sysfunc(getvarc(&tdsid, &tarnum)));
30055     +             %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
30056     +           %end;
30057     +           %else
30058     +             %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
30060     +           %if &target_format ne %then %do;
30061     +              %if &target_type eq C %then %do;
30062     +                %let temp = %nrbquote(%sysfunc(putc(%nrbquote(&tarvalue), &target_format)));
30063     +                %let tarvalue = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
30064     +              %end;
30065     +              %else
30066     +                %let tarvalue = %sysfunc(putn(&tarvalue, &target_format));
30067     +           %end;
30068     +           %let tarvalue =%nrbquote(%upcase(&tarvalue));
30069     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
30071     +           %let tarvalue = %nrbquote(%upcase(%sysfunc(strip(&tarvalue))));
30072     +           %let target_event = %nrbquote(%sysfunc(strip(&target_event)));
30073     +           %let target_nonevent = %nrbquote(%sysfunc(strip(&target_nonevent)));
30075     +           %if "&tarvalue" eq "&target_event" %then %do;
30076     +             %let totalevent = &count;
30077     +           %end;
30078     +           %else %if "&tarvalue" eq "&target_nonevent" %then %do;
30079     +              %let totalnonevent= &count;
30080     +           %end;
30081     +         %end;
30082     +         %else %do;
30083     +           %let tarvalue = %sysfunc(getvarn(&tdsid, &tarnum));
30084     +           %let count = %sysfunc(getvarn(&tdsid, &tnum));
30086     +           %if &tarvalue eq &target_event %then %do;
30087     +             %let totalevent = &count;
30088     +           %end;
30089     +           %else %if &tarvalue eq &target_nonevent %then %do;
30090     +              %let totalnonevent= &count;
30091     +           %end;
30092     +         %end;
30093     +         %let obs = %sysfunc(fetch(&tdsid));
30094     +      %end;
30095     +   %end;
30096     +   %if &tdsid %then %let tdsid = %sysfunc(close(&tdsid));
30098     +   proc datasets lib=work nolist;
30099     +      delete temptargetC;
30100     +   run;
30101     +   quit;
30103     +   proc means data=&FINEDETAILDATA noprint;
30104     +      var eventCount nonEventCount;
30105     +      class _variable_  _group_;
30106     +      output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
30107     +   run;
30109     +   proc sort data=summ(drop=_type_ _freq_);
30110     +     by _variable_ _group_;
30111     +   run;
30113     +   data gini(keep=_variable_ eventCount nonEventCount groupresprate)
30114     +        tempcoarse(keep=_variable_  _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
30115     +        set summ;
30116     +        *format groupresprate 6.2;
30117     +        *format groupnonresprate 6.2;
30118     +        by _variable_ ;
30119     +        if _group_=. then do;
30120     +        end;
30121     +        else do;
30122     +           respper = eventCount / &totalEvent;
30123     +           nrespper = nonEventCount / &totalNonEvent;
30125     +           if ((nonEventCount = 0) AND (eventCount = 0)) then do;
30126     +                groupresprate=0;
30127     +                groupNonresprate = 0;
30128     +                eventRate = 0;
30129     +                nonEventRate = 0;
30130     +           end;
30131     +           else do;
30132     +               groupresprate = eventCount / (eventCount + nonEventCount) ;
30133     +               groupNonRespRate = 1 - groupRespRate;
30134     +               eventRate = eventCount / &totalEvent ;
30135     +               nonEventRate = nonEventCount / &totalNonEvent ;
30136     +            end;
30138     +           output gini tempcoarse;
30140     +        end;
30141     +   run;
30142     +   proc sort data=gini;
30143     +      by _variable_ descending groupresprate;
30144     +   run;
30146     +   data gini(keep= _variable_ _gini_);
30147     +     retain between within cumresp cumnresp;
30148     +     set gini(keep=_variable_  eventCount nonEventCount);
30149     +     by _variable_;
30150     +     if first._variable_ then do;
30151     +       between  = 0;
30152     +       within   = 0;
30153     +       cumresp  = 0;
30154     +       cumnresp = 0;
30155     +     end;
30156     +     between + 2 * cumnresp * eventCount;
30157     +     within + nonEventCount * eventCount;
30158     +     cumresp + eventCount;
30159     +     cumnresp + nonEventCount;
30160     +     if last._variable_ then do;
30161     +       if ^(cumnresp=0 or cumresp=0) then do;
30162     +         _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
30163     +         output;
30164     +       end;
30165     +     end;
30166     +   run;
30168     +   data tempdisplayvar;
30169     +      set &EM_USER_VARMAPPINGS;
30170     +      rename _variable_ = display_var
30171     +      _proc_var_ = _variable_;
30172     +   keep _variable_ _proc_var_ label;
30173     +   run;
30174     +   proc sort data=tempdisplayvar; by _variable_; run;
30176     +   data  &COARSE;
30177     +     length display_Var $32 label _label_ $200 role $10 _group_ 8;
30178     +     merge tempdisplayvar tempcoarse gini ;
30179     +     by _variable_;
30180     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
30181     +           eventRate   = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventrate_vlabel , NOQUOTE))"
30182     +           nonEventRate = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventrate_vlabel , NOQUOTE))"
30183     +           _group_    = "%sysfunc(sasmsg(sashelp.dmine, rpt_group_vlabel , NOQUOTE))"
30184     +           role       = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel , NOQUOTE))"
30185     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_gini_vlabel  , NOQUOTE))"
30186     +           eventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_eventcount_vlabel  , NOQUOTE))"
30187     +           noneventcount = "%sysfunc(sasmsg(sashelp.dmine, rpt_noneventcount_vlabel  , NOQUOTE))"
30188     +           groupresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupresprate_vlabel  , NOQUOTE))"
30189     +           groupnonresprate = "%sysfunc(sasmsg(sashelp.dmine, rpt_groupnonresprate_vlabel  , NOQUOTE))"
30190     +           ;
30192     +    eventCount = round(eventCount, .001);
30193     +    nonEventCount = round(nonEventCount, .001);
30194     +    groupRespRate = round(groupRespRate, .001);
30196     +     drop _variable_ index index2 respper nrespper;
30197     +   run;
30199     +   proc datasets library=work nolist;
30200     +     delete  tempcoarse gini             ;
30202     +   run;
30203     +   quit;
30205     +%mend EM_CREATE_GROUPING;
30209     +%macro EM_GENERATE_LABELVALUES(filename, splitvals, binmappings, coarse);
30211     +         data _null_;
30212     +            FILE &filename;
30213     +            put " length _LABEL_ $200;";
30214     +            put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
30215     +         run;
30217     +         proc sort data=&SPLITVALS out=work.sortedsplitval; by display_var _split_Value_; run;
30218     +         proc sort data=&BINMAPPINGS; by display_var bin; run;
30220     +         data temp;
30221     +           merge work.sortedsplitval(in=_a) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
30222     +           by Display_Var _Split_value_;
30223     +           if upcase(_Split_value_) ne 'MISSING';
30224     +           if _a then output;
30225     +           if display_var eq '' then delete;
30226     +         run;
30228     +         data temp_missing;
30229     +           merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) &BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
30230     +           by Display_Var _Split_value_;
30231     +           if upcase(_Split_value_) eq 'MISSING';
30232     +           if _a then output;
30233     +           keep _variable_ display_var missgrp;
30234     +         run;
30236     +         proc sort data=temp out=class;
30237     +            by _variable_ _group_ LB;
30238     +         run;
30240     +         data _null_;
30242     +            file &filename MOD;
30243     +            length string $200 flag 8;
30244     +            retain string flag;
30245     +            set class end=eof;
30246     +            by _variable_  _group_;
30248     +            index = kindex(_variable_, "BIN_");
30249     +            if index gt 0 then do;
30250     +              if first._group_ then do;
30251     +                flag = 0;
30252     +                if ^first._variable_ then
30253     +                    put 'else';
30254     +                 else
30255     +                    put ' ';
30257     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
30258     +                          !!strip(put(_GROUP_,best12.))!!' then do;';
30259     +                 put string;
30261     +                 if LB ne . then do;
30262     +                   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
30263     +                    string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
30264     +                 end;
30265     +                 else do;
30266     +                    flag = 1;
30267     +                    *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
30268     +                    string = " _LABEL_='"!!strip(DISPLAY_VAR);
30269     +                 end;
30271     +              end;
30272     +              if last._Group_ then do;
30273     +                 if UB ne . then do;
30274     +                    string = strip(string)!!'< '!!strip(UB)!!"';";
30275     +                 end;
30276     +                 else do;
30277     +                    if flag=1 then do;
30278     +                      string = strip(string)!!"';";
30279     +                     /* string = strip(string)!!'='!!strip(_split_Value_)!!"';";*/
30280     +                    end;
30281     +                    else do;
30282     +                      string = strip(string)!!"';";
30283     +                    end;
30284     +                 end;
30285     +                 put string;
30287     +                 string= " UB="!!strip(UB)!!";";
30288     +                 put string;
30289     +                 put "end;";
30292     +              end;
30293     +            end;
30294     +            else do;
30295     +              _split_value_ = tranwrd(_split_value_,"'","''");
30296     +              if first._group_ then do;
30297     +                 flag = 0;
30298     +                 if ^first._variable_ then
30299     +                    put 'else';
30300     +                 else
30301     +                    put ' ';
30302     +                 string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = "
30303     +                          !!strip(put(_GROUP_,best12.))!!' then';
30304     +                 put string;
30305     +                 string = "_LABEL_='"!!strip(_split_value_);
30306     +              end;
30307     +              else do;
30308     +                 if flag ne 1 then do;
30309     +                   tempstring = strip(string)!!', '!!strip(_split_value_);
30310     +                   length = length(tempstring);
30312     +                   if length < 195 then do;
30313     +                      string = tempstring;
30314     +                   end;
30315     +                   else do;
30316     +                      string = strip(string)||",...";
30317     +                      flag=1;
30318     +                   end;
30319     +                 end;
30320     +              end;
30322     +              if last._group_ then do;
30323     +                 string = strip(string)!!"';";
30324     +                 put string;
30325     +              end;
30326     +            end;
30327     +         run;
30329     +         data &COARSE;
30330     +           set &COARSE;
30331     +          /* %inc Y; */
30332     +           %inc &filename;
30333     +         run;
30334     +         *filename Y;
30336     +         /* add missing to appropriate label - based on temp_missing data */
30337     +         data &COARSE;
30338     +           set &COARSE;
30340     +           %let dsid = %sysfunc(open(work.temp_missing));
30341     +           %if &dsid %then %do;
30342     +              %let varnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
30343     +              %let grpnum = %sysfunc(VARNUM(&dsid, MISSGRP));
30345     +              %let obs = %sysfunc(fetch(&dsid));
30346     +              %do %while(&obs=0);
30347     +                 %let var = %sysfunc(getvarc(&dsid, &varnum));
30348     +                 %let grp = %sysfunc(getvarn(&dsid, &grpnum));
30350     +                 if DISPLAY_VAR = "&var" and _GROUP_ = &grp then do;
30351     +                   if _LABEL_ eq '' then do;
30352     +                     _LABEL_ = "Missing";
30353     +                   end;
30354     +                   else do;
30355     +                     _LABEL_ = strip(_LABEL_)!!", Missing";
30356     +                   end;
30357     +                 end;
30358     +                 %let obs = %sysfunc(fetch(&dsid));
30359     +              %end;
30360     +           %end;
30361     +           %if &dsid %then %let dsid = %sysfunc(close(&dsid));
30362     +           drop ub;
30363     +         run;
30365     +         proc datasets library=work nolist;
30366     +           delete class temp temp_missing;
30367     +         run;
30368     +         quit;
30370     +%mend EM_GENERATE_LABELVALUES;
30372     +%macro calcValidationCoarse(input, output, varmappings, resultsTable);
30375     +%mend calcValidationCoarse;
30378     +%macro EM_IBN_IntTargetTrans(inttgtvar,method,newlevels=binlevs);
30379     +/* macro for transforming interval target to binary */
30381     +   %if &method = CUTMEAN %then %do;
30382     +      proc sql noprint;
30383     +         %if %EM_FREQ ne %then %do;
30384     +            select sum(&inttgtvar * %EM_FREQ) / sum(%EM_FREQ)
30385     +         %end;
30386     +         %else %do;
30387     +            select mean(&inttgtvar)
30388     +         %end;
30389     +         into :ignbincut from &em_import_data;
30390     +      quit;
30391     +   %end;
30393     +   /* create binary target */
30394     +   data &EM_USER_NEWTRAIN;
30395     +      set &EM_IMPORT_DATA;
30396     +      %if &method = CUTUSER %then %do;
30397     +           %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
30398     +      %end;
30399     +      if &inttgtvar = . then &IGNBinTarget = .;
30400     +      else do;
30401     +         if &inttgtvar > &ignbincut then &IGNBinTarget=1;
30402     +         else &IGNBinTarget=0;
30403     +      end;
30404     +   run;
30406     +   /* Check that new target is actually binary */
30407     +   proc sql noprint;
30408     +      select distinct &IGNBINTarget into :bintv1 - from &EM_USER_NEWTRAIN where &IGNBinTarget ne .;
30409     +   quit;
30410     +   %global &newlevels;
30411     +   %let &newlevels=&sqlobs;
30413     +%mend EM_IBN_IntTargetTrans;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename trtemp;
NOTE: Fileref TRTEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data temp;
MPRINT(TRAIN):   set EMWS4.BINNING_VariableSet;
MPRINT(TRAIN):   where NAME =
MPRINT(TRAIN):  "BAD";
MPRINT(TRAIN):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.BINNING_VARIABLESET.
      WHERE NAME='BAD';
NOTE: The data set WORK.TEMP has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc dmdb data=EMWS4.Impt_TRAIN(where=(^missing(
MPRINT(EM_BINARY_TARGET):  BAD
MPRINT(TRAIN):  ))) classout=EVENTOUT;
MPRINT(TRAIN):   target
MPRINT(EM_BINARY_TARGET):   BAD
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   class
MPRINT(EM_BINARY_TARGET):   BAD
MPRINT(TRAIN):  (DESC);
MPRINT(TRAIN):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
      WHERE not MISSING(BAD);
NOTE: The data set WORK.EVENTOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   dsid = open("EVENTOUT");
MPRINT(TRAIN):   if dsid>0 then do;
MPRINT(TRAIN):   levelnum = VARNUM(dsid, "LEVEL");
MPRINT(TRAIN):   if levelnum then do;
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_EVENT', strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   if ^fetch(dsid) then call symput('TARGET_NONEVENT',strip(getvarc(dsid, levelnum)));
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   dsid=close(dsid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete eventout;
MPRINT(TRAIN):   run;
 
NOTE: Deleting WORK.EVENTOUT (memtype=DATA).
MPRINT(TRAIN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   data EMWS4.BINNING_NEWTRAIN;
MPRINT(TRAIN):   set EMWS4.Impt_TRAIN;
MPRINT(TRAIN):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: The data set EMWS4.BINNING_NEWTRAIN has 2979 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data tempvarnames;
MPRINT(TRAIN):   set EMWS4.BINNING_VariableSet;
MPRINT(TRAIN):   where ((ROLE='INPUT' and USE in('Y', 'D')) or (ROLE='REJECTED' and USE='Y')) and level ne 'UNARY';
MPRINT(TRAIN):   keep NAME LEVEL LABEL;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARIABLESET.
      WHERE (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'))) and (level not = 'UNARY');
NOTE: The data set WORK.TEMPVARNAMES has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc dmdb data=tempvarnames outtable=tempmapping nameserver;
MPRINT(TRAIN):   names NAME;
MPRINT(TRAIN):   prefix WOE_ GRP_ ;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 8 observations and 3 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   proc sort data=tempmapping;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=tempvarnames;
MPRINT(TRAIN):   by name;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPVARNAMES has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data tempmapping;
MPRINT(TRAIN):   merge tempmapping tempvarnames;
MPRINT(TRAIN):   by NAME;
MPRINT(TRAIN):   rename LEVEL=procLevel;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPMAPPING.
NOTE: There were 8 observations read from the data set WORK.TEMPVARNAMES.
NOTE: The data set WORK.TEMPMAPPING has 8 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GENERATE_MAPPING_TABLE):  ;
MPRINT(EM_GENERATE_MAPPING_TABLE):   data EMWS4.BINNING_VARMAPPINGS(keep=_variable_ _grp_variable_ procLevel label);
MPRINT(EM_GENERATE_MAPPING_TABLE):   length _variable_ _grp_variable_ $32 procLevel $8;
MPRINT(EM_GENERATE_MAPPING_TABLE):   set tempmapping;
MPRINT(EM_GENERATE_MAPPING_TABLE):   label _variable_ = "Input Variable" _grp_variable_ = "Group Variable";
MPRINT(EM_GENERATE_MAPPING_TABLE):   _variable_ = NAME;
MPRINT(EM_GENERATE_MAPPING_TABLE):   _grp_variable_ = GRP;
MPRINT(EM_GENERATE_MAPPING_TABLE):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set EMWS4.BINNING_VARMAPPINGS has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete tempImport tempScore;
MPRINT(TRAIN):   run;
 
NOTE: The file WORK.TEMPIMPORT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSCORE (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(TRAIN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   data tempvariableset;
MPRINT(EM_PRE_BINNING):   set EMWS4.BINNING_VariableSet;
MPRINT(EM_PRE_BINNING):   where LEVEL = 'INTERVAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set EMWS4.BINNING_VARIABLESET.
      WHERE (LEVEL='INTERVAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 3 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempvariableset end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intervalvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' "'!!trim(NAME)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intervalvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = '"'!!TRIM(NAME)!!'"n';
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intervalvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Tuesday, 16 March 2021 00:06:03,
      Last Modified=Tuesday, 16 March 2021 00:06:03,
      Filename=C:\Users\JOSECA~1\AppData\Local\Temp\SAS Temporary Files\_TD1116_DESKTOP-97HB97B_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M6,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-97HB97B\Jose Caloca,
      File Size=             5KB,
      File Size (bytes)=5120
 
NOTE: 5 records were written to the file MACFILE.
      The minimum record length was 19.
      The maximum record length was 40.
NOTE: There were 3 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
30418     +%macro intervalvars;
30419     +"IMP_DEBTINC"n "IMP_MORTDUE"n "IMP_YOJ"n
30420     +%mend intervalvars;
30421     +%global num_intvars;
30422     +%let num_intvars = 3 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_PRE_BINNING):  ;
MPRINT(EM_PRE_BINNING):   proc dmdb data=EMWS4.BINNING_NEWTRAIN classout=_CLASSOUT maxlevel=5;
MPRINT(EM_PRE_BINNING):   class
MPRINT(INTERVALVARS):   "IMP_DEBTINC"n "IMP_MORTDUE"n
MPRINT(EM_PRE_BINNING):   "IMP_YOJ"n;
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_NEWTRAIN.
NOTE: The data set WORK._CLASSOUT has 15 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   proc freq data=_CLASSOUT order=DATA noprint;
MPRINT(EM_PRE_BINNING):   table NAME / OUT= _COUNT(where=(COUNT<5));
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: There were 15 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._COUNT has 0 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   set _COUNT;
MPRINT(EM_PRE_BINNING):   call symput('_INTBINS',symget('_INTBINS') !! ' ' !! ktrim(kleft(NAME)));
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: There were 0 observations read from the data set WORK._COUNT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   proc sort data=_CLASSOUT;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: There were 15 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 15 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   proc transpose data=_CLASSOUT out=_OUT(DROP=_NAME_ RENAME=(NAME=VARIABLE)) prefix=_MIDPOINT;
MPRINT(EM_PRE_BINNING):   var NRAW;
MPRINT(EM_PRE_BINNING):   by NAME;
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: There were 15 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._OUT has 3 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   data _null_;
MPRINT(EM_PRE_BINNING):   dsid = open('_OUT');
MPRINT(EM_PRE_BINNING):   if dsid then do;
MPRINT(EM_PRE_BINNING):   call symput('NUMCLASSBARS', kleft(ktrim(put(attrn(dsid, 'NVARS')-1, best12.))));
MPRINT(EM_PRE_BINNING):   csid = close(dsid);
MPRINT(EM_PRE_BINNING):   end;
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRE_BINNING):   data _INTMID;
MPRINT(EM_PRE_BINNING):   set _OUT;
MPRINT(EM_PRE_BINNING):   keep VARIABLE _MIDPOINT1--_MIDPOINT5 ;
MPRINT(EM_PRE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK._OUT.
NOTE: The data set WORK._INTMID has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   data EMWS4.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS4.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   label procLevel = "Level for Interactive";
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set EMWS4.BINNING_VARMAPPINGS has 8 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   filename temp catalog 'sashelp.emapps.quantile_binning.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMAPPS.QUANTILE_BINNING.SOURCE.
30424     +%macro em_apps_quantile_binning(input, vartable, numbins, binmappings, binningCode, codeMappings=, precision=0.01, dropOriginal=N, IncludeTarget=N);
30426     +  /* initialize binmappings table */
30427     +  data &BINMAPPINGS;
30428     +    length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
30429     +  run;
30433     +  %if &IncludeTarget=N %then %do;
30434     +   /* process only INTERVAL INPUTS */
30435     +  data tempvars;
30436     +    set &vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
30437     +  run;
30438     +  %end;
30440     +  %if &IncludeTarget=Y %then %do;
30441     +   /* process both INTERVAL INPUTS and INTERVAL TARGETS*/
30442     +  data tempvars;
30443     +    set &vartable(where=((ROLE="INPUT" AND LEVEL="INTERVAL") or (ROLE="TARGET" AND LEVEL="INTERVAL")));
30444     +  run;
30445     +  %end;
30447     +  /* retrieve the name of interval inputs to bin */
30448     +  filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
30449     +  %include tempopen;
30450     +  filename tempopen;
30452     +  %let intvars = ;
30453     +  %global num_intvars;
30454     +  %let num_intvars = 0;
30455     +  %em_varmacro(name=intvars, metadata=tempvars, key=NAME, nummacro=num_intvars);
30457     +  /* retrieve the name of frequency variable if it exists */
30458     +  %let em_bin_freq = ;
30459     +  %let choice = ROLE="FREQ";
30460     +  %let fdsid = %sysfunc(open(&vartable(where=(&choice))));
30461     +  %if &fdsid %then %do;
30462     +    %let fvarnum = %sysfunc(VARNUM(&fdsid, NAME));
30463     +    %let fobs = %sysfunc(fetch(&fdsid));
30464     +    %do %while(&fobs=0);
30465     +       %let em_bin_freq = %sysfunc(getvarc(&fdsid, &fvarnum));
30466     +       %let fobs = %sysfunc(fetch(&fdsid));
30467     +    %end;
30468     +  %end;
30469     +  %if &fdsid >0 %then %let fdsid = %sysfunc(close(&fdsid));
30471     +  /* process all inputs */
30472     +  %if &num_intvars > 0 %then %do;
30474     +    /* Computing quantile binning of interval inputs */
30475     +    %let numbin = %eval(&NUMBINS - 1);
30476     +    %let optstr=;
30477     +    %do i=1 %to &numbin;
30478     +       %let optstr = &optstr %sysevalf(&i*100/&&NUMBINS);
30479     +    %end;
30481     +    data tempInt / view = tempInt;
30482     +      set &input(keep= %intvars
30483     +      %if &em_bin_freq ne %then %do;
30484     +        &em_bin_freq
30485     +      %end;
30486     +      );
30487     +    run;
30489     +    proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=&optstr;
30490     +       var %intvars;
30491     +       %if &em_bin_freq ne %then %do;
30492     +          freq &em_bin_freq / notrunc;
30493     +       %end;
30494     +    run;
30496     +    proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
30497     +    run;
30499     +    /* generate unique BIN_xxx names for all inputs processed */
30500     +    proc dmdb data=tempvars outtable=tempmapping nameserver;
30501     +     names NAME;
30502     +     prefix BIN_ ;
30503     +    run;
30505     +    proc sort data=tempmapping(keep=NAME bin); by NAME; run;
30506     +    proc sort data=work.pctdata; by _NAME_; run;
30507     +    %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
30508     +      proc sort data=&codemappings nodupkey out=tempcodemappings(keep= codeVar variable) ; by codeVar; run;
30509     +    %end;
30511     +    data tempbins;
30512     +      length display_var $32;
30513     +      merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar))
30514     +      %if ((&codemappings ne ) and (%sysfunc(exist(&codemappings, data)))) %then %do;
30515     +         tempcodemappings(rename=(codeVar=_name_ variable=display_var))
30516     +      %end;
30517     +      ;
30518     +      by _NAME_;
30519     +      if _a;
30520     +      if missing(display_var) then display_var = _NAME_;
30521     +    run;
30523     +    /* generate BINMAPPINGS dataset and binningCode file*/
30524     +    data _null_;
30525     +      FILE &binningCode;
30526     +      set tempbins end=eof;
30527     +      length string $200;
30528     +      by _NAME_;
30530     +      if _n_=1 then do;
30531     +        put "&EM_CODEBAR;";
30532     +        %let note = %sysfunc(sasmsg(sashelp.dmine, generatebins_note, NOQUOTE));
30533     +        put "* &note;";
30534     +        put "&EM_CODEBAR;";
30536     +        call execute(" data &BINMAPPINGS; ");
30537     +        call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
30538     +      end;
30540     +      %do i=1 %to %eval(&numbins-1);
30541     +       %if &i eq 1 %then %do;
30542     +         %let colname = COL&i;
30543     +         %let binvalnum = 1;
30544     +         LB = .;
30545     +         UB = round(&colname, &precision);
30546     +         bin=&binvalnum;
30548     +         call execute("name='"||strip(_NAME_)||"'; ");
30549     +         call execute("bin_name='"||strip(binVar)||"'; ");
30550     +         call execute("bin='"||strip(bin)||"';");
30551     +         call execute("LB=.;");
30552     +         call execute("UB="||UB||";");
30553     +         call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
30554     +         call execute("output;");
30556     +         string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
30558     +         put string;
30559     +         string = "else do;";
30560     +         put string;
30562     +         string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
30563     +         put string;
30566     +       %end;
30567     +       %else %do;
30568     +         %let colname = COL&i;
30569     +         %let lbnum = %sysevalf(&i-1);
30570     +         %let lbcol = COL&lbnum;
30571     +         UB = round(&colname, &precision);
30572     +         LB = round(&lbcol, &precision);
30573     +         if UB ne LB then do;
30574     +           bin=bin+1;
30576     +           call execute("name='"||strip(_NAME_)||"'; ");
30577     +           call execute("bin_name='"||strip(binVar)||"'; ");
30578     +           call execute("bin='"||strip(bin)||"';");
30579     +           call execute("LB="||LB||";");
30580     +           call execute("UB="||UB||";");
30581     +           call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
30582     +           call execute("output;");
30584     +           string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
30585     +           put string;
30587     +         end;
30588     +       %end;
30589     +      %end;
30590     +      %let binvalnum = %sysevalf(&binvalnum + 1);
30591     +      bin=bin+1;
30592     +      LB = round(&colname, &precision);
30593     +      UB = .;
30595     +      call execute("name='"||strip(_NAME_)||"'; ");
30596     +      call execute("bin_name = '"||strip(binVar)||"'; ");
30597     +      call execute("bin='"||strip(bin)||"';");
30598     +      call execute("UB=.;");
30599     +      call execute("LB="||LB||";");
30600     +      call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
30601     +      call execute("output;");
30603     +      string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
30604     +      put string;
30605     +      string="end;";
30606     +      put string;
30608     +      if eof then do;
30609     +        call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
30610     +        call execute("  if LB=UB then delete;");
30611     +        call execute("run;");
30612     +      end;
30614     +    run;
30616     +    /* drop original inputs */
30617     +    %if &dropOriginal=Y %then %do;
30618     +      data _null_;
30619     +        set work.tempvars end=eof;
30620     +        FILE &binningCode MOD;
30621     +        length string $200;
30623     +        if _n_=1 then do;
30624     +          put "drop";
30625     +        end;
30626     +        string = " "||strip(name);
30627     +        put string;
30629     +        if eof then do;
30630     +          put ";";
30631     +        end;
30632     +      run;
30633     +    %end;
30635     +    proc datasets library=work nolist;
30636     +      delete pctdata tempmapping tempbins tempInt;
30637     +    run;
30638     +    quit;
30639     +  %end;
30641     +  proc datasets library=work nolist;
30642     +    delete tempvars;
30643     +  run;
30644     +  quit;
30646     +%mend em_apps_quantile_binning;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   filename X "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data work.vartable;
MPRINT(EM_QUANTILE_BINNING):   set work._intmid;
MPRINT(EM_QUANTILE_BINNING):   level = "INTERVAL";
MPRINT(EM_QUANTILE_BINNING):   role = "INPUT";
MPRINT(EM_QUANTILE_BINNING):   rename variable=name;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK._INTMID.
NOTE: The data set WORK.VARTABLE has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS4.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length NAME BIN_NAME $32 LB UB 8 BIN EM_BIN_LABEL $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: Variable NAME is uninitialized.
NOTE: Variable BIN_NAME is uninitialized.
NOTE: Variable LB is uninitialized.
NOTE: Variable UB is uninitialized.
NOTE: Variable BIN is uninitialized.
NOTE: Variable EM_BIN_LABEL is uninitialized.
NOTE: The data set EMWS4.BINNING_BINMAPPINGS has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.vartable(where=(ROLE="INPUT" AND LEVEL="INTERVAL"));
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK.VARTABLE.
      WHERE (ROLE='INPUT') and (LEVEL='INTERVAL');
NOTE: The data set WORK.TEMPVARS has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file TEMPOPEN is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
30651     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
30653     +   filename macFile catalog 'work.emutil.macro.source';
30654     +   %let _METAOBS = 0;
30655     +   %let _maxvar = &maxvar;
30656     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
30658     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
30659     +                   or (&metadata eq ) %then %do;
30660     +       %put * No metadata data set defined;
30661     +       %goto doend;
30662     +   %end;
30664     +   data _null_;
30665     +      length _STRING_ $80;
30666     +      retain _STRING_ '' maxvar 0;
30667     +      set &metadata end=eof;
30668     +      file macFile;
30669     +      %if %nrbquote(&where) ne %then %do;
30670     +          %let whereClause = where (%nrbquote(&where));
30671     +          %unquote(&whereClause);
30672     +      %end;
30673     +      if _N_=1 then do;
30674     +         string = "%"!!"macro &name;";
30675     +         put string;
30676     +      end;
30677     +      maxvar +1;
30678     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
30679     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
30680     +         if eof
30681     +            %if  %sysevalf(&_maxvar > 0) %then %do;
30682     +                or maxvar >= &maxvar
30683     +            %end;
30684     +            then do;
30685     +            put _STRING_;
30686     +            string = "%"!!"mend &name;";
30687     +            put string;
30688     +            string = strip(put(_N_, best.));
30689     +            call symput('_METAOBS', string);
30690     +            %if (&nummacro ne ) %then %do;
30691     +                put "%" "global &nummacro;";
30692     +                put "%" "let &nummacro = " string ";";
30693     +            %end;
30694     +            stop;
30695     +         end;
30696     +      end;
30697     +      else do;
30698     +         put _STRING_;
30699     +         _string_ = TRIM(&key);
30700     +         if eof
30701     +            %if  %sysevalf(&_maxvar > 0) %then %do;
30702     +              or maxvar >= &maxvar
30703     +           %end;
30704     +            then do;
30705     +            put _STRING_;
30706     +            string = "%"!!"mend &name;";
30707     +            put string;
30708     +        end;
30709     +      end;
30710     +      if eof
30711     +         %if  %sysevalf(&_maxvar > 0) %then %do;
30712     +             or maxvar >= &maxvar
30713     +         %end;
30714     +         then do;
30715     +         string = strip(put(_N_, best.));
30716     +         call symput('_METAOBS', string);
30717     +         %if (&nummacro ne ) %then %do;
30718     +             put "%" "global &nummacro;";
30719     +             put "%" "let &nummacro = " string ";";
30720     +         %end;
30721     +         stop;
30722     +      end;
30723     +   run;
30725     +   %doend:
30726     +   %if ^&_METAOBS %then %do;
30727     +       data _null_;
30728     +          file macFile;
30729     +          put "%" "macro &name;";
30730     +          put "%" "mend &name;";
30731     +          %if (&nummacro ne ) %then %do;
30732     +              put "%" "global &nummacro;";
30733     +              put "%" "let &nummacro = 0;";
30734     +          %end;
30735     +      run;
30736     +   %end;
30737     +   %inc macFile;
30738     +   filename macFile;
30739     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_APPS_QUANTILE_BINNING):   filename tempopen;
NOTE: Fileref TEMPOPEN has been deassigned.
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempvars end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend intvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_intvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_intvars = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Tuesday, 16 March 2021 00:06:03,
      Last Modified=Tuesday, 16 March 2021 00:06:03,
      Filename=C:\Users\JOSECA~1\AppData\Local\Temp\SAS Temporary Files\_TD1116_DESKTOP-97HB97B_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M6,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-97HB97B\Jose Caloca,
      File Size=            17KB,
      File Size (bytes)=17408
 
NOTE: 5 records were written to the file MACFILE.
      The minimum record length was 14.
      The maximum record length was 31.
NOTE: There were 3 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
30740     +%macro intvars;
30741     +IMP_DEBTINC IMP_MORTDUE IMP_YOJ
30742     +%mend intvars;
30743     +%global num_intvars;
30744     +%let num_intvars = 3 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempInt / view = tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   set EMWS4.BINNING_NEWTRAIN(keep
MPRINT(EM_APPS_QUANTILE_BINNING):  = IMP_DEBTINC IMP_MORTDUE IMP_YOJ );
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: DATA STEP view saved on file WORK.TEMPINT.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc stdize data=work.tempInt outstat=work.pctdata out=_null_ pctlpts=25 50 75;
MPRINT(EM_APPS_QUANTILE_BINNING):   var
MPRINT(INTVARS):   IMP_DEBTINC IMP_MORTDUE IMP_YOJ
MPRINT(EM_APPS_QUANTILE_BINNING):  ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: View WORK.TEMPINT.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_NEWTRAIN.
NOTE: There were 2979 observations read from the data set WORK.TEMPINT.
NOTE: The data set WORK.PCTDATA has 11 observations and 4 variables.
NOTE: PROCEDURE STDIZE used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc transpose data=work.pctdata(where=(_type_=:'P')) out=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK.PCTDATA.
      WHERE _type_=:'P';
NOTE: The data set WORK.PCTDATA has 3 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc dmdb data=tempvars outtable=tempmapping nameserver;
MPRINT(EM_APPS_QUANTILE_BINNING):   names NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   prefix BIN_ ;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK.TEMPVARS.
NOTE: The data set WORK.TEMPMAPPING has 3 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=tempmapping(keep=NAME bin);
MPRINT(EM_APPS_QUANTILE_BINNING):   by NAME;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPMAPPING has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc sort data=work.pctdata;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK.PCTDATA.
NOTE: The data set WORK.PCTDATA has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   data tempbins;
MPRINT(EM_APPS_QUANTILE_BINNING):   length display_var $32;
MPRINT(EM_APPS_QUANTILE_BINNING):   merge work.pctdata(in=_a) tempmapping(rename=(name=_name_ bin=binVar)) ;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _a;
MPRINT(EM_APPS_QUANTILE_BINNING):   if missing(display_var) then display_var = _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: There were 3 observations read from the data set WORK.PCTDATA.
NOTE: There were 3 observations read from the data set WORK.TEMPMAPPING.
NOTE: The data set WORK.TEMPBINS has 3 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X;
MPRINT(EM_APPS_QUANTILE_BINNING):   set tempbins end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   by _NAME_;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "* Generating Bins for interval variables;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put "*------------------------------------------------------------*;";
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute(" data EMWS4.BINNING_BINMAPPINGS; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "if "||strip(_name_)||" eq . then "||strip(binVar)||"= .;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = "else do;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL1, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL2, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   if UB ne LB then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name='"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB="||UB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(LB)||" <= "||strip(display_Var)||" < "||strip(UB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" < "||strip(UB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   bin=bin+1;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB = round(COL3, 1 / 100);
MPRINT(EM_APPS_QUANTILE_BINNING):   UB = .;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("name='"||strip(_NAME_)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin_name = '"||strip(binVar)||"'; ");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("bin='"||strip(bin)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("UB=.;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("LB="||LB||";");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("EM_BIN_LABEL='"||strip(display_Var)||" >= "||strip(LB)||"';");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("output;");
MPRINT(EM_APPS_QUANTILE_BINNING):   string= "  else if "||strip(_name_)||" >= "||strip(LB)||" then "||strip(binVar)||"="||strip(bin)||";";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   string="end;";
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if NAME='' and BIN_NAME='' and BIN='' then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("  if LB=UB then delete;");
MPRINT(EM_APPS_QUANTILE_BINNING):   call execute("run;");
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      216:110   222:129   225:166   254:48    254:89    283:110   286:111   289:122   292:139   292:185   303:44    303:85    337:110   340:111   343:122   346:139   346:185   357:44    357:85    388:108   394:129   397:167   407:45    407:86
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:03,
      Create Time=16 March 2021 00:06:03
 
MPRINT(EM_APPS_QUANTILE_BINNING):   data EMWS4.BINNING_BINMAPPINGS;
MPRINT(EM_APPS_QUANTILE_BINNING):   length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 28.87;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='IMP_DEBTINC < 28.87';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 28.87;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 34.75;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='28.87 <= IMP_DEBTINC < 34.75';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 34.75;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 39.23;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='34.75 <= IMP_DEBTINC < 39.23';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_IMP_DEBTINC';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 39.23;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='IMP_DEBTINC >= 39.23';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 46609;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='IMP_MORTDUE < 46609';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 46609;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 65017;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='46609 <= IMP_MORTDUE < 65017';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 65017;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 93520;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='65017 <= IMP_MORTDUE < 93520';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_IMP_MORTDUE';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 93520;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='IMP_MORTDUE >= 93520';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='1';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='IMP_YOJ < 3';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='2';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 3;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='3 <= IMP_YOJ < 7';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name='BIN_IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='3';
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 7;
MPRINT(EM_APPS_QUANTILE_BINNING):   UB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='7 <= IMP_YOJ < 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   name='IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin_name = 'BIN_IMP_YOJ';
MPRINT(EM_APPS_QUANTILE_BINNING):   bin='4';
MPRINT(EM_APPS_QUANTILE_BINNING):   UB=.;
MPRINT(EM_APPS_QUANTILE_BINNING):   LB= 13;
MPRINT(EM_APPS_QUANTILE_BINNING):   EM_BIN_LABEL='IMP_YOJ >= 13';
MPRINT(EM_APPS_QUANTILE_BINNING):   output;
MPRINT(EM_APPS_QUANTILE_BINNING):   if NAME='' and BIN_NAME='' and BIN='' then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   if LB=UB then delete;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
NOTE: 24 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 63.
NOTE: There were 3 observations read from the data set WORK.TEMPBINS.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         +  data EMWS4.BINNING_BINMAPPINGS;
2         +    length name bin_name $32 LB UB 8 EM_BIN_LABEL BIN $200;
MPRINT(EM_APPS_QUANTILE_BINNING):  32 LB UB EM_BIN_LABEL BIN200
3         + name='IMP_DEBTINC';
4         + bin_name='BIN_IMP_DEBTINC';
5         + bin='1';
6         + LB=.;
7         + UB=       28.87;
8         + EM_BIN_LABEL='IMP_DEBTINC < 28.87';
9         + output;
10        + name='IMP_DEBTINC';
11        + bin_name='BIN_IMP_DEBTINC';
12        + bin='2';
13        + LB=       28.87;
14        + UB=       34.75;
15        + EM_BIN_LABEL='28.87 <= IMP_DEBTINC < 34.75';
16        + output;
17        + name='IMP_DEBTINC';
18        + bin_name='BIN_IMP_DEBTINC';
19        + bin='3';
20        + LB=       34.75;
21        + UB=       39.23;
22        + EM_BIN_LABEL='34.75 <= IMP_DEBTINC < 39.23';
23        + output;
24        + name='IMP_DEBTINC';
25        + bin_name = 'BIN_IMP_DEBTINC';
26        + bin='4';
27        + UB=.;
28        + LB=       39.23;
29        + EM_BIN_LABEL='IMP_DEBTINC >= 39.23';
30        + output;
31        + name='IMP_MORTDUE';
32        + bin_name='BIN_IMP_MORTDUE';
33        + bin='1';
34        + LB=.;
35        + UB=       46609;
36        + EM_BIN_LABEL='IMP_MORTDUE < 46609';
37        + output;
38        + name='IMP_MORTDUE';
39        + bin_name='BIN_IMP_MORTDUE';
40        + bin='2';
41        + LB=       46609;
42        + UB=       65017;
43        + EM_BIN_LABEL='46609 <= IMP_MORTDUE < 65017';
44        + output;
45        + name='IMP_MORTDUE';
46        + bin_name='BIN_IMP_MORTDUE';
47        + bin='3';
48        + LB=       65017;
49        + UB=       93520;
50        + EM_BIN_LABEL='65017 <= IMP_MORTDUE < 93520';
51        + output;
52        + name='IMP_MORTDUE';
53        + bin_name = 'BIN_IMP_MORTDUE';
54        + bin='4';
55        + UB=.;
56        + LB=       93520;
57        + EM_BIN_LABEL='IMP_MORTDUE >= 93520';
58        + output;
59        + name='IMP_YOJ';
60        + bin_name='BIN_IMP_YOJ';
61        + bin='1';
62        + LB=.;
63        + UB=           3;
64        + EM_BIN_LABEL='IMP_YOJ < 3';
65        + output;
66        + name='IMP_YOJ';
67        + bin_name='BIN_IMP_YOJ';
68        + bin='2';
69        + LB=           3;
70        + UB=           7;
71        + EM_BIN_LABEL='3 <= IMP_YOJ < 7';
72        + output;
73        + name='IMP_YOJ';
74        + bin_name='BIN_IMP_YOJ';
75        + bin='3';
76        + LB=           7;
77        + UB=          13;
78        + EM_BIN_LABEL='7 <= IMP_YOJ < 13';
79        + output;
80        + name='IMP_YOJ';
81        + bin_name = 'BIN_IMP_YOJ';
82        + bin='4';
83        + UB=.;
84        + LB=          13;
85        + EM_BIN_LABEL='IMP_YOJ >= 13';
86        + output;
87        +   if NAME='' and BIN_NAME='' and BIN='' then delete;
88        +   if LB=UB then delete;
89        + run;
 
NOTE: The data set EMWS4.BINNING_BINMAPPINGS has 12 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   data _null_;
MPRINT(EM_APPS_QUANTILE_BINNING):   set work.tempvars end=eof;
MPRINT(EM_APPS_QUANTILE_BINNING):   FILE X MOD;
MPRINT(EM_APPS_QUANTILE_BINNING):   length string $200;
MPRINT(EM_APPS_QUANTILE_BINNING):   if _n_=1 then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put "drop";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   string = " "||strip(name);
MPRINT(EM_APPS_QUANTILE_BINNING):   put string;
MPRINT(EM_APPS_QUANTILE_BINNING):   if eof then do;
MPRINT(EM_APPS_QUANTILE_BINNING):   put ";";
MPRINT(EM_APPS_QUANTILE_BINNING):   end;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINNINGCODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=929,
      Last Modified=16 March 2021 00:06:03,
      Create Time=16 March 2021 00:06:03
 
NOTE: 5 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 11.
NOTE: There were 3 observations read from the data set WORK.TEMPVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete pctdata tempmapping tempbins tempInt;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: The file WORK.TEMPINT (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.PCTDATA (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPBINS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_APPS_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_APPS_QUANTILE_BINNING):   delete tempvars;
MPRINT(EM_APPS_QUANTILE_BINNING):   run;
 
NOTE: Deleting WORK.TEMPVARS (memtype=DATA).
MPRINT(EM_APPS_QUANTILE_BINNING):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS4.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   by name lb;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set EMWS4.BINNING_BINMAPPINGS has 12 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data EMWS4.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS4.BINNING_BINMAPPINGS;
MPRINT(EM_QUANTILE_BINNING):   length display_var $32 grp $8;
MPRINT(EM_QUANTILE_BINNING):   display_var = name;
MPRINT(EM_QUANTILE_BINNING):   GRP = BIN + 1;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      76:92
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      76:96
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set EMWS4.BINNING_BINMAPPINGS has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS4.BINNING_BINMAPPINGS out=sortedmapping nodupkey;
MPRINT(EM_QUANTILE_BINNING):   by NAME;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: 9 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDMAPPING has 3 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: The data set WORK.TEMPMISSVALUES has 1 observations and 0 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   set sortedmapping;
MPRINT(EM_QUANTILE_BINNING):   GRP="1";
MPRINT(EM_QUANTILE_BINNING):   bin="Missing";
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = "Missing";
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDMAPPING.
NOTE: The data set WORK.TEMPMISSVALUES has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   filename X "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINNINGCODE.sas";
MPRINT(EM_QUANTILE_BINNING):   data EMWS4.BINNING_BINDATA;
MPRINT(EM_QUANTILE_BINNING):   set EMWS4.BINNING_NEWTRAIN;
NOTE: %INCLUDE (level 1) file X is file C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINNINGCODE.sas.
30745     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
30746     +* Generating Bins for interval variables;
MPRINT(EM_QUANTILE_BINNING):   * Generating Bins for interval variables;
30747     +*------------------------------------------------------------*;
MPRINT(EM_QUANTILE_BINNING):   *------------------------------------------------------------*;
30748     +if IMP_DEBTINC eq . then BIN_IMP_DEBTINC= .;
MPRINT(EM_QUANTILE_BINNING):   if IMP_DEBTINC eq . then BIN_IMP_DEBTINC= .;
30749     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
30750     +if IMP_DEBTINC < 28.87 then BIN_IMP_DEBTINC=1;
MPRINT(EM_QUANTILE_BINNING):   if IMP_DEBTINC < 28.87 then BIN_IMP_DEBTINC=1;
30751     +else if IMP_DEBTINC < 34.75 then BIN_IMP_DEBTINC=2;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_DEBTINC < 34.75 then BIN_IMP_DEBTINC=2;
30752     +else if IMP_DEBTINC < 39.23 then BIN_IMP_DEBTINC=3;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_DEBTINC < 39.23 then BIN_IMP_DEBTINC=3;
30753     +else if IMP_DEBTINC >= 39.23 then BIN_IMP_DEBTINC=4;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_DEBTINC >= 39.23 then BIN_IMP_DEBTINC=4;
30754     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
30755     +if IMP_MORTDUE eq . then BIN_IMP_MORTDUE= .;
MPRINT(EM_QUANTILE_BINNING):   if IMP_MORTDUE eq . then BIN_IMP_MORTDUE= .;
30756     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
30757     +if IMP_MORTDUE < 46609 then BIN_IMP_MORTDUE=1;
MPRINT(EM_QUANTILE_BINNING):   if IMP_MORTDUE < 46609 then BIN_IMP_MORTDUE=1;
30758     +else if IMP_MORTDUE < 65017 then BIN_IMP_MORTDUE=2;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_MORTDUE < 65017 then BIN_IMP_MORTDUE=2;
30759     +else if IMP_MORTDUE < 93520 then BIN_IMP_MORTDUE=3;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_MORTDUE < 93520 then BIN_IMP_MORTDUE=3;
30760     +else if IMP_MORTDUE >= 93520 then BIN_IMP_MORTDUE=4;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_MORTDUE >= 93520 then BIN_IMP_MORTDUE=4;
30761     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
30762     +if IMP_YOJ eq . then BIN_IMP_YOJ= .;
MPRINT(EM_QUANTILE_BINNING):   if IMP_YOJ eq . then BIN_IMP_YOJ= .;
30763     +else do;
MPRINT(EM_QUANTILE_BINNING):   else do;
30764     +if IMP_YOJ < 3 then BIN_IMP_YOJ=1;
MPRINT(EM_QUANTILE_BINNING):   if IMP_YOJ < 3 then BIN_IMP_YOJ=1;
30765     +else if IMP_YOJ < 7 then BIN_IMP_YOJ=2;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_YOJ < 7 then BIN_IMP_YOJ=2;
30766     +else if IMP_YOJ < 13 then BIN_IMP_YOJ=3;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_YOJ < 13 then BIN_IMP_YOJ=3;
30767     +else if IMP_YOJ >= 13 then BIN_IMP_YOJ=4;
MPRINT(EM_QUANTILE_BINNING):   else if IMP_YOJ >= 13 then BIN_IMP_YOJ=4;
30768     +end;
MPRINT(EM_QUANTILE_BINNING):   end;
30769     +drop
30770     +IMP_DEBTINC
30771     +IMP_MORTDUE
30772     +IMP_YOJ
30773     +;
MPRINT(EM_QUANTILE_BINNING):   drop IMP_DEBTINC IMP_MORTDUE IMP_YOJ ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_NEWTRAIN.
NOTE: The data set EMWS4.BINNING_BINDATA has 2979 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set EMWS4.BINNING_BINMAPPINGS tempmissvalues;
MPRINT(EM_QUANTILE_BINNING):   length newgroup _group_ _order_ 8 _level_ $8;
MPRINT(EM_QUANTILE_BINNING):   newgroup =.;
MPRINT(EM_QUANTILE_BINNING):   _LEVEL_ = 'ORDINAL';
MPRINT(EM_QUANTILE_BINNING):   _Group_ = grp;
MPRINT(EM_QUANTILE_BINNING):   rename NAME=DISPLAY_VAR BIN =_SPLIT_VALUE_ BIN_NAME = _VARIABLE_;
MPRINT(EM_QUANTILE_BINNING):   keep NAME NEWGROUP BIN_NAME BIN _LEVEL_ _GROUP_ _ORDER_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      196:121
NOTE: Variable _order_ is uninitialized.
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 15 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals;
MPRINT(EM_QUANTILE_BINNING):   _order_ = _N_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 15 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set WORK.TEMPSPLITVALS has 15 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data EMWS4.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set tempsplitvals ;
MPRINT(EM_QUANTILE_BINNING):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _order_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 15 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 15 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data tempvariableset;
MPRINT(EM_QUANTILE_BINNING):   set EMWS4.BINNING_VariableSet;
MPRINT(EM_QUANTILE_BINNING):   where LEVEL ^= 'INTERVAL' and TYPE = 'C' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.BINNING_VARIABLESET.
      WHERE (LEVEL not = 'INTERVAL') and (TYPE='C') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 2 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempvariableset end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro classvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend classvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_classvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_classvars = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend classvars;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global num_classvars;";
MPRINT(EM_VARMACRO):   put "%" "let num_classvars = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Tuesday, 16 March 2021 00:06:03,
      Last Modified=Tuesday, 16 March 2021 00:06:03,
      Filename=C:\Users\JOSECA~1\AppData\Local\Temp\SAS Temporary Files\_TD1116_DESKTOP-97HB97B_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M6,
      Host Created=X64_10PRO,
      Owner Name=DESKTOP-97HB97B\Jose Caloca,
      File Size=            21KB,
      File Size (bytes)=21504
 
NOTE: 5 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 24.
NOTE: There were 2 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
30774     +%macro classvars;
30775     +IMP_JOB IMP_REASON
30776     +%mend classvars;
30777     +%global num_classvars;
30778     +%let num_classvars = 2 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   proc dmdb data =EMWS4.BINNING_BINDATA classout=_classout nonorm;
MPRINT(EM_QUANTILE_BINNING):   class
MPRINT(CLASSVARS):   IMP_JOB IMP_REASON
MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc dmdb data=EMWS4.BINNING_BINDATA classout=_classout2;
MPRINT(EM_QUANTILE_BINNING):   class
MPRINT(CLASSVARS):   IMP_JOB IMP_REASON
MPRINT(EM_QUANTILE_BINNING):  ;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_BINDATA.
NOTE: The data set WORK._CLASSOUT2 has 8 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 8 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout2;
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 8 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT2 has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data _classout;
MPRINT(EM_QUANTILE_BINNING):   length _variable_ $32;
MPRINT(EM_QUANTILE_BINNING):   merge _classout _classout2 (rename=(LEVEL=_split_value_));
MPRINT(EM_QUANTILE_BINNING):   by NAME CRAW;
MPRINT(EM_QUANTILE_BINNING):   _variable_ = NAME;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 8 observations read from the data set WORK._CLASSOUT.
NOTE: There were 8 observations read from the data set WORK._CLASSOUT2.
NOTE: The data set WORK._CLASSOUT has 8 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc sort data=_classout;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 8 observations read from the data set WORK._CLASSOUT.
NOTE: The data set WORK._CLASSOUT has 8 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS4.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 15 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 15 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data EMWS4.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   length _norm_level_ $200 _split_value_ $200;
MPRINT(EM_QUANTILE_BINNING):   merge EMWS4.BINNING_SPLITVALS _classout(rename=(LEVEL=_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   by _variable_ _split_value_;
MPRINT(EM_QUANTILE_BINNING):   LEVEL = trim(left(LEVEL));
MPRINT(EM_QUANTILE_BINNING):   _split_value_ = trim(left(_split_value_));
MPRINT(EM_QUANTILE_BINNING):   _norm_level_ = trim(left(_norm_level_));
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   drop NAME FREQUENCY TYPE CRAW NRAW;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      353:121
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      353:111
NOTE: There were 15 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: There were 8 observations read from the data set WORK._CLASSOUT.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 23 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete _classout _classout2;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Deleting WORK._CLASSOUT (memtype=DATA).
NOTE: Deleting WORK._CLASSOUT2 (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   data EMWS4.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   set EMWS4.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   if _norm_level_ eq '' then _norm_level_= _split_value_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 23 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 23 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc sort data=EMWS4.BINNING_SPLITVALS;
MPRINT(EM_QUANTILE_BINNING):   by DISPLAY_VAR _Group_;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: There were 23 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 23 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_QUANTILE_BINNING):   proc datasets library=work nolist;
MPRINT(EM_QUANTILE_BINNING):   delete sortedmapping tempsplitvals tempmissvalues ;
MPRINT(EM_QUANTILE_BINNING):   run;
 
NOTE: Deleting WORK.SORTEDMAPPING (memtype=DATA).
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_QUANTILE_BINNING):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS4.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   where ((LEVEL = 'NOMINAL') OR (LEVEL='BINARY')) and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.BINNING_VARIABLESET.
      WHERE LEVEL in ('BINARY', 'NOMINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 5 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc dmdb data=EMWS4.Impt_TRAIN classout=tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   class IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ IMP_REASON ;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: The data set WORK.TEMPCLASSOUT has 48 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   data tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL='MISSING' then level='Missing';
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 48 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPCLASSOUT has 48 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=tempclassout nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by NAME descending FREQUENCY LEVEL;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 48 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPCLASSOUT has 48 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   data tempds(keep=NAME NOBS);
MPRINT(EM_CLASSVARS_GROUP):   retain NOBS;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if first.NAME then NOBS = frequency;
MPRINT(EM_CLASSVARS_GROUP):   else NOBS=NOBS+frequency;
MPRINT(EM_CLASSVARS_GROUP):   if last.name then do;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 48 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: The data set WORK.TEMPDS has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   data tempds;
MPRINT(EM_CLASSVARS_GROUP):   merge tempclassout tempds;
MPRINT(EM_CLASSVARS_GROUP):   by NAME;
MPRINT(EM_CLASSVARS_GROUP):   if ((LEVEL ne '') AND (LEVEL ne "."));
MPRINT(EM_CLASSVARS_GROUP):   PCT = 100 * (FREQUENCY/NOBS);
MPRINT(EM_CLASSVARS_GROUP):   if PCT < 5.0 then flag=1;
MPRINT(EM_CLASSVARS_GROUP):   else flag=0;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 48 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 5 observations read from the data set WORK.TEMPDS.
NOTE: The data set WORK.TEMPDS has 48 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   data tempmissvalues;
MPRINT(EM_CLASSVARS_GROUP):   length NAME $32 LEVEL $200 _LEVEL_ $8 _GROUP_ 8;
MPRINT(EM_CLASSVARS_GROUP):   NAME="IMP_DELINQ";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="IMP_DEROG";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="IMP_JOB";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="IMP_NINQ";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   NAME="IMP_REASON";
MPRINT(EM_CLASSVARS_GROUP):   LEVEL="Missing";
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_="BINARY";
MPRINT(EM_CLASSVARS_GROUP):   _group_ = 1;
MPRINT(EM_CLASSVARS_GROUP):   output;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: The data set WORK.TEMPMISSVALUES has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   data tempsplitvals;
MPRINT(EM_CLASSVARS_GROUP):   length _VARIABLE_ $32 newgroup _group_ 8 _Split_value_ $200;
MPRINT(EM_CLASSVARS_GROUP):   set tempclassout tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   if ((level ne '') AND (level ne '.'));
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "IMP_DELINQ" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "IMP_DEROG" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "IMP_JOB" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "OTHER" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "PROFEXE" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "OFFICE" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "MGR" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "IMP_NINQ" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "NOMINAL";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "0" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "1" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "2" then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "3" then _GROUP_ = 5;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 6;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   if NAME = "IMP_REASON" then do;
MPRINT(EM_CLASSVARS_GROUP):   _LEVEL_ = "BINARY";
MPRINT(EM_CLASSVARS_GROUP):   if LEVEL = "DEBTCON" then _GROUP_ = 2;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL = "HOMEIMP" then _GROUP_ = 3;
MPRINT(EM_CLASSVARS_GROUP):   else if LEVEL ^='Missing' then _GROUP_ = 4;
MPRINT(EM_CLASSVARS_GROUP):   end;
MPRINT(EM_CLASSVARS_GROUP):   _VARIABLE_ = NAME;
MPRINT(EM_CLASSVARS_GROUP):   newgroup = .;
MPRINT(EM_CLASSVARS_GROUP):   rename NAME = DISPLAY_VAR LEVEL = _SPLIT_VALUE_;
MPRINT(EM_CLASSVARS_GROUP):   keep NAME NEWGROUP _VARIABLE_ LEVEL _LEVEL_ _GROUP_;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: Variable _Split_value_ is uninitialized.
NOTE: There were 48 observations read from the data set WORK.TEMPCLASSOUT.
NOTE: There were 5 observations read from the data set WORK.TEMPMISSVALUES.
NOTE: The data set WORK.TEMPSPLITVALS has 53 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc sql;
MPRINT(EM_CLASSVARS_GROUP):   reset noprint;
MPRINT(EM_CLASSVARS_GROUP):   select count(*) into :nobs from EMWS4.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc sort data = EMWS4.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 23 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 23 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc sort data = tempsplitvals nodupkey;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_Value_ _group_;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 53 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 53 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   data EMWS4.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   merge EMWS4.BINNING_SPLITVALS tempsplitvals ;
MPRINT(EM_CLASSVARS_GROUP):   by _variable_ _split_value_ ;
MPRINT(EM_CLASSVARS_GROUP):   if display_var eq "" then delete;
MPRINT(EM_CLASSVARS_GROUP):   if _norm_level_ eq "" then _norm_level_ = _split_value_;
MPRINT(EM_CLASSVARS_GROUP):   keep display_var _split_value_ _variable_ newgroup _group_ _level_ _norm_level_;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 23 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: There were 53 observations read from the data set WORK.TEMPSPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 68 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc sort data=EMWS4.BINNING_SPLITVALS;
MPRINT(EM_CLASSVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 68 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CLASSVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_CLASSVARS_GROUP):   delete tempsplitvals tempds tempclassout tempvariableset tempvars tempmissvalues ;
MPRINT(EM_CLASSVARS_GROUP):   run;
 
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
NOTE: Deleting WORK.TEMPDS (memtype=DATA).
NOTE: Deleting WORK.TEMPCLASSOUT (memtype=DATA).
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSVALUES (memtype=DATA).
MPRINT(EM_CLASSVARS_GROUP):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS4.BINNING_VariableSet out=tempvariableset;
MPRINT(EM_ORDVARS_GROUP):   by NAME;
MPRINT(EM_ORDVARS_GROUP):   where LEVEL = 'ORDINAL' and ((ROLE='INPUT' and USE in ('Y', 'D')) OR (ROLE='REJECTED' and USE='Y'));
MPRINT(EM_ORDVARS_GROUP):   run;
 
NOTE: Input data set is empty.
NOTE: There were 0 observations read from the data set EMWS4.BINNING_VARIABLESET.
      WHERE (LEVEL='ORDINAL') and (((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y')));
NOTE: The data set WORK.TEMPVARIABLESET has 0 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_ORDVARS_GROUP):   proc sort data=EMWS4.BINNING_SPLITVALS;
MPRINT(EM_ORDVARS_GROUP):   by DISPLAY_VAR _Group_;
MPRINT(EM_ORDVARS_GROUP):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_ORDVARS_GROUP):   proc datasets library= work nolist;
MPRINT(EM_ORDVARS_GROUP):   delete tempsplitvals varvals tempvariableset tempvars ;
MPRINT(EM_ORDVARS_GROUP):   run;
 
NOTE: The file WORK.TEMPSPLITVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.VARVALS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPVARS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPVARIABLESET (memtype=DATA).
MPRINT(EM_ORDVARS_GROUP):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   proc print data=EMWS4.BINNING_VARMAPPINGS label;
MPRINT(TRAIN):   var _VARIABLE_ _GRP_VARIABLE_ ;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc sort data=EMWS4.BINNING_SPLITVALS out=tempsplitvals nodupkey;
MPRINT(TRAIN):   by _VARIABLE_;
MPRINT(TRAIN):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: 60 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPSPLITVALS has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   data EMWS4.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   set EMWS4.BINNING_VARMAPPINGS;
MPRINT(TRAIN):   length _proc_var_ $32;
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_DEBTINC" then _proc_var_ = "BIN_IMP_DEBTINC";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_MORTDUE" then _proc_var_ = "BIN_IMP_MORTDUE";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_YOJ" then _proc_var_ = "BIN_IMP_YOJ";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_DELINQ" then _proc_var_ = "IMP_DELINQ";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_DEROG" then _proc_var_ = "IMP_DEROG";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_JOB" then _proc_var_ = "IMP_JOB";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_NINQ" then _proc_var_ = "IMP_NINQ";
MPRINT(TRAIN):   if upcase(_VARIABLE_) = "IMP_REASON" then _proc_var_ = "IMP_REASON";
MPRINT(TRAIN):   if missing(_proc_var_) then _proc_var_=_variable_;
MPRINT(TRAIN):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set EMWS4.BINNING_VARMAPPINGS has 8 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):   proc datasets library=work nolist;
MPRINT(TRAIN):   delete sortedbin tempsplitvals;
MPRINT(TRAIN):   run;
 
NOTE: The file WORK.SORTEDBIN (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.TEMPSPLITVALS (memtype=DATA).
MPRINT(TRAIN):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc freq data=EMWS4.BINNING_BINDATA noprint;
MPRINT(EM_FINE_DETAIL):   table BAD / missing out=temptargetB;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETB has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete temptargetB;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: Deleting WORK.TEMPTARGETB (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS4.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 10 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   data temptrain ;
MPRINT(EM_SUMMARIZE_TABLE):   set EMWS4.BINNING_BINDATA;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTRAIN has 2979 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Prenormalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_PRENORMALIZECLASSVARS.SOURCE.
30779     +%macro em_PreNormalizeClassVars(incmeta=, outcmeta=);
30780     +
30781     +   data &outcmeta(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
30782     +      length INDEXVAR $32; retain _index 0;
30783     +      set &incmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
30784     +      if strip(LEVEL) eq 'INTERVAL' then delete;
30785     +      else do;
30786     +         _index+1;
30787     +         INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
30788     +      end;
30789     +   run;
30790     +%mend em_PreNormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp catalog 'sashelp.emapps.em_Normalizeclassvars.source';
NOTE: %INCLUDE (level 1) file _TEMP is file SASHELP.EMAPPS.EM_NORMALIZECLASSVARS.SOURCE.
30791     +%macro em_NormalizeClassVars(indata=,
30792     +                          cmeta=,
30793     +                          encodedTarget=N,
30794     +                          target=,
30795     +                          targetEvent=,
30796     +                          targetNonEvent=,
30797     +                          outdata=);
30798     + %let dsid = %sysfunc(open(&cmeta));
30799     + %let vn_name =%sysfunc(varnum(&dsid, NAME));
30800     + %let vn_indexvar =%sysfunc(varnum(&dsid, INDEXVAR));
30801     + %let vn_format =%sysfunc(varnum(&dsid, FORMAT));
30802     + %let vn_type =%sysfunc(varnum(&dsid, TYPE));
30803     +
30804     + data &outdata/view=&outdata;
30805     +      length _normedvar32 $32.;
30806     +      set &indata( rename = (
30807     +      %let k = 1;
30808     +      %do %while(^%sysfunc(fetch(&dsid)));
30809     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
30810     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
30811     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
30812     +          &_name = &_indexvar
30813     +          %let k = %eval(&k+1);
30814     +      %end;
30815     +      ));
30816     +      drop  _normedvar32;
30817     +
30818     +      %let rc=%sysfunc(rewind(&dsid));
30819     +      %let k = 1;
30820     +      %do %while(^%sysfunc(fetch(&dsid)));
30821     +          %let _name     = %sysfunc(getvarc(&dsid, &vn_name));
30822     +          %let _indexvar = %sysfunc(getvarc(&dsid, &vn_indexvar));
30823     +          %let _format   = %sysfunc(getvarc(&dsid, &vn_format));
30824     +          %let _type     = %sysfunc(getvarc(&dsid, &vn_type));
30825     +          %if &_format ne %then %do;
30826     +              _normedvar32 = put(&_indexvar, &_format);
The SAS System
 
30827     +          %end;
30828     +          %else %do;
30829     +              %if &_type = N %then %do;
30830     +                  _normedvar32 = put(&_indexvar, Best12.);
30831     +              %end;
30832     +              %else %do;
30833     +                  _normedvar32 = put(&_indexvar, $32.);
30834     +              %end;
30835     +          %end;
30836     +          %DMNORMIP(_normedvar32);
30837     +          &_name = _normedvar32;
30838     +          drop &_indexvar;
30839     +          %let k = %eval(&k+1);
30840     +      %end;
30841     +      %let dsid = %sysfunc(close(&dsid));
30842     +
30843     +      %if &encodedTarget = Y %then %do;
30844     +          %let qtargetEvent = %sysfunc(quote(&targetEvent));
30845     +          %let qtargetNonEvent = %sysfunc(quote(&targetNonEvent));
30846     +          if upcase(strip(&target)) = &qtargetEvent then _EncodedTarget_ =1;
30847     +          else if upcase(strip(&target)) = &qtargetNonEvent then _EncodedTarget_ = 0;
30848     +      %end;
30849     + run;
30850     +
30851     +%mend em_NormalizeClassVars;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_SUMMARIZE_TABLE):   filename _temp;
NOTE: Fileref _TEMP has been deassigned.
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS4.BINNING_VARMAPPINGS out=tempmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAP has 8 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   data _cmeta;
MPRINT(EM_SUMMARIZE_TABLE):   merge tempvarset tempmap(in=_a rename=(_variable_=name ));
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   if ((_a) or (role="TARGET"));
MPRINT(EM_SUMMARIZE_TABLE):   if role="INPUT" or (role="REJECTED" and Use="Y") then name=_proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if role="TARGET" then role="INPUT";
MPRINT(EM_SUMMARIZE_TABLE):   level = procLevel;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(name, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      83:121
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      86:105
NOTE: There were 10 observations read from the data set WORK.TEMPVARSET.
NOTE: There were 8 observations read from the data set WORK.TEMPMAP.
NOTE: The data set WORK._CMETA has 9 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_PRENORMALIZECLASSVARS):   data _cmetatmp(keep=INDEXVAR NAME LEVEL TYPE LABEL FORMAT INFORMAT) ;
MPRINT(EM_PRENORMALIZECLASSVARS):   length INDEXVAR $32;
MPRINT(EM_PRENORMALIZECLASSVARS):   retain _index 0;
MPRINT(EM_PRENORMALIZECLASSVARS):   set _cmeta(where=((ROLE='INPUT' and USE in('Y', 'D')) or ROLE='REJECTED' and USE='Y'));
MPRINT(EM_PRENORMALIZECLASSVARS):   if strip(LEVEL) eq 'INTERVAL' then delete;
MPRINT(EM_PRENORMALIZECLASSVARS):   else do;
MPRINT(EM_PRENORMALIZECLASSVARS):   _index+1;
MPRINT(EM_PRENORMALIZECLASSVARS):   INDEXVAR='_INDEXVAR'||strip(put(_index, Best12.));
MPRINT(EM_PRENORMALIZECLASSVARS):   end;
MPRINT(EM_PRENORMALIZECLASSVARS):   run;
 
NOTE: There were 9 observations read from the data set WORK._CMETA.
      WHERE ((ROLE='INPUT') and USE in ('D', 'Y')) or ((ROLE='REJECTED') and (USE='Y'));
NOTE: The data set WORK._CMETATMP has 9 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_NORMALIZECLASSVARS):   data _tmp_train/view=_tmp_train;
MPRINT(EM_NORMALIZECLASSVARS):   length _normedvar32 $32.;
MPRINT(EM_NORMALIZECLASSVARS):   set work.temptrain( rename = ( BAD = _INDEXVAR1 BIN_IMP_DEBTINC = _INDEXVAR2 IMP_DELINQ = _INDEXVAR3 IMP_DEROG = _INDEXVAR4 IMP_JOB = _INDEXVAR5 BIN_IMP_MORTDUE = _INDEXVAR6 IMP_NINQ = _INDEXVAR7 IMP_REASON = _INDEXVAR8
BIN_IMP_YOJ = _INDEXVAR9 ));
MPRINT(EM_NORMALIZECLASSVARS):   drop _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR1, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BAD = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR1;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR2, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_IMP_DEBTINC = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR2;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR3, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   IMP_DELINQ = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR3;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR4, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   IMP_DEROG = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR4;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR5, $32.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   IMP_JOB = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR5;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR6, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_IMP_MORTDUE = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR6;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR7, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   IMP_NINQ = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR7;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR8, $32.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   IMP_REASON = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR8;
MPRINT(EM_NORMALIZECLASSVARS):   _normedvar32 = put(_INDEXVAR9, Best12.);
MPRINT(DMNORMIP):   call dmnorm(_normedvar32,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_NORMALIZECLASSVARS):  ;
MPRINT(EM_NORMALIZECLASSVARS):   BIN_IMP_YOJ = _normedvar32;
MPRINT(EM_NORMALIZECLASSVARS):   drop _INDEXVAR9;
MPRINT(EM_NORMALIZECLASSVARS):   run;
 
NOTE: DATA STEP view saved on file WORK._TMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS4.BINNING_VARMAPPINGS out=sortedmap;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set WORK.SORTEDMAP has 8 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output CrossTabFreqs=crosstabfreq ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods listing close;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("proc freq data=_tmp_train order=formatted addnames;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("tables ("||_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(_proc_var_);
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute(") * BAD/ missing;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods output close;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("ods listing;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
MPRINT(EM_SUMMARIZE_TABLE):   ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   ods listing close;
MPRINT(EM_SUMMARIZE_TABLE):   proc freq data=_tmp_train order=formatted addnames;
MPRINT(EM_SUMMARIZE_TABLE):   ) * BAD/ missing;
MPRINT(EM_SUMMARIZE_TABLE):   run;
MPRINT(EM_SUMMARIZE_TABLE):   ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   ods listing;
NOTE: There were 8 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + ods output CrossTabFreqs=crosstabfreq ;
MPRINT(EM_SUMMARIZE_TABLE):   CrossTabFreqs ;
2         + ods listing close;
MPRINT(EM_SUMMARIZE_TABLE):   close
3         + proc freq data=_tmp_train order=formatted addnames;
4         + tables (BIN_IMP_DEBTINC
5         + BIN_IMP_MORTDUE
6         + BIN_IMP_YOJ
7         + IMP_DELINQ
8         + IMP_DEROG
9         + IMP_JOB
10        + IMP_NINQ
11        + IMP_REASON
12        + ) * BAD/ missing;
13        + run;
 
NOTE: View WORK._TMP_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2979 observations read from the data set WORK.TEMPTRAIN.
NOTE: The data set WORK.CROSSTABFREQ has 204 observations and 19 variables.
NOTE: There were 2979 observations read from the data set WORK._TMP_TRAIN.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.13 seconds
      cpu time            0.06 seconds
 
 
14        + ods output close;
MPRINT(EM_SUMMARIZE_TABLE):   close
15        + ods listing;
MPRINT(EM_SUMMARIZE_TABLE):  ;
MPRINT(EM_SUMMARIZE_TABLE):   data _null_;
MPRINT(EM_SUMMARIZE_TABLE):   set sortedmap end=eof;
MPRINT(EM_SUMMARIZE_TABLE):   by _proc_var_;
MPRINT(EM_SUMMARIZE_TABLE):   if _n_=1 then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("data crosstabs;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  length _variable_ _split_value_  $200 ;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  set crosstabfreq(where=(_type_='11'));");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _variable_= RowVariable;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("if strip(RowVariable) = '"||strip(_proc_var_)||"' then do;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("  _split_value_="||_proc_var_||";");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("end;");
MPRINT(EM_SUMMARIZE_TABLE):   if eof then do;
MPRINT(EM_SUMMARIZE_TABLE):   call execute("keep _variable_ _split_value_ BAD Frequency Percent display_var;");
MPRINT(EM_SUMMARIZE_TABLE):   call execute("run;");
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabfreq(where=(_type_='11'));
MPRINT(EM_SUMMARIZE_TABLE):   _variable_= RowVariable;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_IMP_DEBTINC' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_IMP_DEBTINC ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_IMP_MORTDUE' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_IMP_MORTDUE ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'BIN_IMP_YOJ' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=BIN_IMP_YOJ ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'IMP_DELINQ' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=IMP_DELINQ ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'IMP_DEROG' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=IMP_DEROG ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'IMP_JOB' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=IMP_JOB ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'IMP_NINQ' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=IMP_NINQ ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if strip(RowVariable) = 'IMP_REASON' then do;
MPRINT(EM_SUMMARIZE_TABLE):   _split_value_=IMP_REASON ;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   keep _variable_ _split_value_ BAD Frequency Percent display_var;
MPRINT(EM_SUMMARIZE_TABLE):   run;
NOTE: There were 8 observations read from the data set WORK.SORTEDMAP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: CALL EXECUTE generated line.
1         + data crosstabs;
2         +   length _variable_ _split_value_  $200 ;
MPRINT(EM_SUMMARIZE_TABLE):  200
3         +   set crosstabfreq(where=(_type_='11'));
4         +   _variable_= RowVariable;
5         + if strip(RowVariable) = 'BIN_IMP_DEBTINC' then do;
6         +   _split_value_=BIN_IMP_DEBTINC                 ;
7         + end;
8         + if strip(RowVariable) = 'BIN_IMP_MORTDUE' then do;
9         +   _split_value_=BIN_IMP_MORTDUE                 ;
10        + end;
11        + if strip(RowVariable) = 'BIN_IMP_YOJ' then do;
12        +   _split_value_=BIN_IMP_YOJ                     ;
13        + end;
14        + if strip(RowVariable) = 'IMP_DELINQ' then do;
15        +   _split_value_=IMP_DELINQ                      ;
16        + end;
17        + if strip(RowVariable) = 'IMP_DEROG' then do;
18        +   _split_value_=IMP_DEROG                       ;
19        + end;
20        + if strip(RowVariable) = 'IMP_JOB' then do;
21        +   _split_value_=IMP_JOB                         ;
22        + end;
23        + if strip(RowVariable) = 'IMP_NINQ' then do;
24        +   _split_value_=IMP_NINQ                        ;
25        + end;
26        + if strip(RowVariable) = 'IMP_REASON' then do;
27        +   _split_value_=IMP_REASON                      ;
28        + end;
29        + keep _variable_ _split_value_ BAD Frequency Percent display_var;
30        + run;
 
WARNING: The variable display_var in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 120 observations read from the data set WORK.CROSSTABFREQ.
      WHERE _type_='11';
NOTE: The data set WORK.CROSSTABS has 120 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 120 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 120 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   length display_var $32;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs sortedmap(rename=(_variable_=display_var _proc_var_=_variable_ ) keep=_variable_ _proc_var_ );
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 120 observations read from the data set WORK.CROSSTABS.
NOTE: There were 8 observations read from the data set WORK.SORTEDMAP.
NOTE: The data set WORK.CROSSTABS has 120 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by display_var _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 120 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 120 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=EMWS4.BINNING_VariableSet out=tempvarset;
MPRINT(EM_SUMMARIZE_TABLE):   by name;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.BINNING_VARIABLESET.
NOTE: The data set WORK.TEMPVARSET has 10 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   data crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   merge crosstabs tempvarset(rename=(name=display_var) keep=type format name level);
MPRINT(EM_SUMMARIZE_TABLE):   by display_var;
MPRINT(EM_SUMMARIZE_TABLE):   index = kindex(_variable_, "BIN_");
MPRINT(EM_SUMMARIZE_TABLE):   if index gt 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   level="ORDINAL";
MPRINT(EM_SUMMARIZE_TABLE):   format = "";
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   _temp = BAD;
MPRINT(EM_SUMMARIZE_TABLE):   drop index;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
WARNING: Multiple lengths were specified for the BY variable display_var by input data sets. This might cause unexpected results.
NOTE: There were 120 observations read from the data set WORK.CROSSTABS.
NOTE: There were 10 observations read from the data set WORK.TEMPVARSET.
NOTE: The data set WORK.CROSSTABS has 122 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   proc sort data=crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: There were 122 observations read from the data set WORK.CROSSTABS.
NOTE: The data set WORK.CROSSTABS has 122 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_SUMMARIZE_TABLE):   data EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_SUMMARIZE_TABLE):   length _variable_ _split_value_ $200 eventCount nonEventCount Total EventRate nonEventRate 8 type $1 valfmt $20 ;
MPRINT(EM_SUMMARIZE_TABLE):   retain eventCount noneventCount ;
MPRINT(EM_SUMMARIZE_TABLE):   set crosstabs;
MPRINT(EM_SUMMARIZE_TABLE):   by _variable_ _split_value_;
MPRINT(EM_SUMMARIZE_TABLE):   if first._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total=0;
MPRINT(EM_SUMMARIZE_TABLE):   eventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   noneventcount=0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   if _temp=1 then eventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   else noneventCount=Frequency;
MPRINT(EM_SUMMARIZE_TABLE):   if last._split_value_ then do;
MPRINT(EM_SUMMARIZE_TABLE):   total = eventCount + noneventCount;
MPRINT(EM_SUMMARIZE_TABLE):   if total ne 0 then do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = eventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = nonEventCount / total;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   else do;
MPRINT(EM_SUMMARIZE_TABLE):   eventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   nonEventRate = 0;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   output;
MPRINT(EM_SUMMARIZE_TABLE):   end;
MPRINT(EM_SUMMARIZE_TABLE):   valfmt = format;
MPRINT(EM_SUMMARIZE_TABLE):   drop _temp Frequency percent;
MPRINT(EM_SUMMARIZE_TABLE):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      375:126
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      1 at 394:122   1 at 403:134   1 at 406:129
NOTE: There were 122 observations read from the data set WORK.CROSSTABS.
NOTE: The data set EMWS4.BINNING_FINEDETAILDATA has 61 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):  ;
MPRINT(EM_FINE_DETAIL):   data EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   length display_var $32 newgroup numsplitval 8;
MPRINT(EM_FINE_DETAIL):   set EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   display_var = _variable_;
MPRINT(EM_FINE_DETAIL):   index = kindex(display_var, "BIN_");
MPRINT(EM_FINE_DETAIL):   if index gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 5);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   index2 = kindex(display_var, "SV_");
MPRINT(EM_FINE_DETAIL):   if index2 gt 0 then do;
MPRINT(EM_FINE_DETAIL):   display_var = ksubstr(display_var, 4);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((_SPLIT_VALUE_ = "") or (_SPLIT_VALUE_ = " ") or (_SPLIT_VALUE_ = ".")) then _SPLIT_VALUE_="MISSING";
MPRINT(EM_FINE_DETAIL):   _index_ = _N_;
MPRINT(EM_FINE_DETAIL):   newgroup = .;
MPRINT(EM_FINE_DETAIL):   drop index index2 ;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: Variable numsplitval is uninitialized.
NOTE: There were 61 observations read from the data set EMWS4.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS4.BINNING_FINEDETAILDATA has 61 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 61 observations read from the data set EMWS4.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS4.BINNING_FINEDETAILDATA has 61 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_FINE_DETAIL):   data tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   set EMWS4.BINNING_SPLITVALS;
MPRINT(EM_FINE_DETAIL):   _norm_level_ = upcase(_norm_level_);
MPRINT(EM_FINE_DETAIL):   if _split_value_ eq 'Missing' then _split_value_ = 'MISSING';
MPRINT(EM_FINE_DETAIL):   * drop _split_value_;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set WORK.TMPSPLITVALS has 68 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc sort data=tmpsplitvals out=sortedsplit;
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 68 observations read from the data set WORK.TMPSPLITVALS.
NOTE: The data set WORK.SORTEDSPLIT has 68 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc datasets library=work nolist;
MPRINT(EM_FINE_DETAIL):   delete tmpsplitvals;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: Deleting WORK.TMPSPLITVALS (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS4.BINNING_BINMAPPINGS out=sortedbin;
MPRINT(EM_FINE_DETAIL):   by BIN_NAME BIN;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set WORK.SORTEDBIN has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   data EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   merge EMWS4.BINNING_FINEDETAILDATA(in=_c) work.sortedsplit(in=_b) work.sortedbin(rename=(BIN_NAME=_variable_ BIN=_split_value_) in=_a);
MPRINT(EM_FINE_DETAIL):   by _variable_ _split_value_;
MPRINT(EM_FINE_DETAIL):   if _a then do;
MPRINT(EM_FINE_DETAIL):   binFlag = 1;
MPRINT(EM_FINE_DETAIL):   VALUE=EM_BIN_LABEL;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   else do;
MPRINT(EM_FINE_DETAIL):   binFlag = 0;
MPRINT(EM_FINE_DETAIL):   *VALUE=strip(display_var)!!"="!!strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   VALUE=strip(_split_value_);
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if ((eventCount=.) or (nonEventCount=.)) then do;
MPRINT(EM_FINE_DETAIL):   eventCount=0;
MPRINT(EM_FINE_DETAIL):   nonEventCount=0;
MPRINT(EM_FINE_DETAIL):   total = 0;
MPRINT(EM_FINE_DETAIL):   eventRate= 0;
MPRINT(EM_FINE_DETAIL):   nonEventRate = 0;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   eventCount = round(eventCount, .001);
MPRINT(EM_FINE_DETAIL):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_FINE_DETAIL):   total= round(total, .001);
MPRINT(EM_FINE_DETAIL):   eventRate = round(eventRate, .001);
MPRINT(EM_FINE_DETAIL):   nonEventRate = round(nonEventRate, .001);
MPRINT(EM_FINE_DETAIL):   if ((type='N') AND (VERIFY(trim(left(_split_value_)) , '.0123456789')=0) ) then numsplitval = _split_value_;
MPRINT(EM_FINE_DETAIL):   else if ((type='N') AND (valfmt ne "")) then numsplitval = _order_;
MPRINT(EM_FINE_DETAIL):   else numsplitval=.;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "" and _VARIABLE_ = "" then delete;
MPRINT(EM_FINE_DETAIL):   if _a and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   if _c and ^_b then delete;
MPRINT(EM_FINE_DETAIL):   drop NAME EM_BIN_LABEL valfmt;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      321:70
NOTE: Variable _order_ is uninitialized.
NOTE: There were 61 observations read from the data set EMWS4.BINNING_FINEDETAILDATA.
NOTE: There were 68 observations read from the data set WORK.SORTEDSPLIT.
NOTE: There were 12 observations read from the data set WORK.SORTEDBIN.
NOTE: The data set EMWS4.BINNING_FINEDETAILDATA has 68 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   data EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   set EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_DEBTINC" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_DELINQ" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_DEROG" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_JOB" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_MORTDUE" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_NINQ" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="NOMINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_REASON" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="BINARY";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if DISPLAY_VAR = "IMP_YOJ" then do;
MPRINT(EM_FINE_DETAIL):   if _LEVEL_ = "" then _LEVEL_ ="ORDINAL";
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then _GROUP_ = 1;
MPRINT(EM_FINE_DETAIL):   end;
MPRINT(EM_FINE_DETAIL):   if _GROUP_ = . then delete;
MPRINT(EM_FINE_DETAIL):   * if binFlag=1 and UB=LB then delete;
MPRINT(EM_FINE_DETAIL):   * if upcase(_SPLIT_VALUE_) ne "MISSING" and _index_ eq . then delete;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS4.BINNING_FINEDETAILDATA has 68 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc sort data=EMWS4.BINNING_FINEDETAILDATA;
MPRINT(EM_FINE_DETAIL):   by DISPLAY_VAR _index_;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_FINEDETAILDATA.
NOTE: The data set EMWS4.BINNING_FINEDETAILDATA has 68 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_FINE_DETAIL):   proc datasets lib=work nolist;
MPRINT(EM_FINE_DETAIL):   delete sortedsplit sortedbin ;
MPRINT(EM_FINE_DETAIL):   run;
 
NOTE: Deleting WORK.SORTEDSPLIT (memtype=DATA).
NOTE: Deleting WORK.SORTEDBIN (memtype=DATA).
MPRINT(EM_FINE_DETAIL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_CREATE_GROUPING):   proc freq data=EMWS4.BINNING_BINDATA noprint;
MPRINT(EM_CREATE_GROUPING):   table BAD / missing out=temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_BINDATA.
NOTE: The data set WORK.TEMPTARGETC has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   proc datasets lib=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete temptargetC;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: Deleting WORK.TEMPTARGETC (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   proc means data=EMWS4.BINNING_FINEDETAILDATA noprint;
MPRINT(EM_CREATE_GROUPING):   var eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   class _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   output out=summ(where=(_type_ in(2,3))) sum=eventCount nonEventCount;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_FINEDETAILDATA.
NOTE: The data set WORK.SUMM has 46 observations and 6 variables.
NOTE: PROCEDURE MEANS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   proc sort data=summ(drop=_type_ _freq_);
MPRINT(EM_CREATE_GROUPING):   by _variable_ _group_;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 46 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.SUMM has 46 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   data gini(keep=_variable_ eventCount nonEventCount groupresprate) tempcoarse(keep=_variable_ _group_ eventCount nonEventCount groupresprate groupNonRespRate eventRate nonEventRate respper nrespper);
MPRINT(EM_CREATE_GROUPING):   set summ;
MPRINT(EM_CREATE_GROUPING):   *format groupresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   *format groupnonresprate 6.2;
MPRINT(EM_CREATE_GROUPING):   by _variable_ ;
MPRINT(EM_CREATE_GROUPING):   if _group_=. then do;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   respper = eventCount / 594;
MPRINT(EM_CREATE_GROUPING):   nrespper = nonEventCount / 2385;
MPRINT(EM_CREATE_GROUPING):   if ((nonEventCount = 0) AND (eventCount = 0)) then do;
MPRINT(EM_CREATE_GROUPING):   groupresprate=0;
MPRINT(EM_CREATE_GROUPING):   groupNonresprate = 0;
MPRINT(EM_CREATE_GROUPING):   eventRate = 0;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   else do;
MPRINT(EM_CREATE_GROUPING):   groupresprate = eventCount / (eventCount + nonEventCount) ;
MPRINT(EM_CREATE_GROUPING):   groupNonRespRate = 1 - groupRespRate;
MPRINT(EM_CREATE_GROUPING):   eventRate = eventCount / 594 ;
MPRINT(EM_CREATE_GROUPING):   nonEventRate = nonEventCount / 2385 ;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   output gini tempcoarse;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 46 observations read from the data set WORK.SUMM.
NOTE: The data set WORK.GINI has 38 observations and 4 variables.
NOTE: The data set WORK.TEMPCOARSE has 38 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   proc sort data=gini;
MPRINT(EM_CREATE_GROUPING):   by _variable_ descending groupresprate;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 38 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 38 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   data gini(keep= _variable_ _gini_);
MPRINT(EM_CREATE_GROUPING):   retain between within cumresp cumnresp;
MPRINT(EM_CREATE_GROUPING):   set gini(keep=_variable_ eventCount nonEventCount);
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   if first._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   between = 0;
MPRINT(EM_CREATE_GROUPING):   within = 0;
MPRINT(EM_CREATE_GROUPING):   cumresp = 0;
MPRINT(EM_CREATE_GROUPING):   cumnresp = 0;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   between + 2 * cumnresp * eventCount;
MPRINT(EM_CREATE_GROUPING):   within + nonEventCount * eventCount;
MPRINT(EM_CREATE_GROUPING):   cumresp + eventCount;
MPRINT(EM_CREATE_GROUPING):   cumnresp + nonEventCount;
MPRINT(EM_CREATE_GROUPING):   if last._variable_ then do;
MPRINT(EM_CREATE_GROUPING):   if ^(cumnresp=0 or cumresp=0) then do;
MPRINT(EM_CREATE_GROUPING):   _gini_ = 100 * (1 - (within + between) / (cumnresp * cumresp));
MPRINT(EM_CREATE_GROUPING):   output;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   end;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 38 observations read from the data set WORK.GINI.
NOTE: The data set WORK.GINI has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   data tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   set EMWS4.BINNING_VARMAPPINGS;
MPRINT(EM_CREATE_GROUPING):   rename _variable_ = display_var _proc_var_ = _variable_;
MPRINT(EM_CREATE_GROUPING):   keep _variable_ _proc_var_ label;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPDISPLAYVAR has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   proc sort data=tempdisplayvar;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: The data set WORK.TEMPDISPLAYVAR has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   data EMWS4.BINNING_COARSE;
MPRINT(EM_CREATE_GROUPING):   length display_Var $32 label _label_ $200 role $10 _group_ 8;
MPRINT(EM_CREATE_GROUPING):   merge tempdisplayvar tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   by _variable_;
MPRINT(EM_CREATE_GROUPING):   label display_var = "Variable" eventRate = "Event Rate" nonEventRate = "Non-Event Rate" _group_ = "Group" role = "Role" _gini_ = "Gini Coefficient" eventcount = "Event Count" noneventcount = "Non-Event Count" groupresprate =
"Group Event Rate" groupnonresprate = "Group Non-Event Rate" ;
MPRINT(EM_CREATE_GROUPING):   eventCount = round(eventCount, .001);
MPRINT(EM_CREATE_GROUPING):   nonEventCount = round(nonEventCount, .001);
MPRINT(EM_CREATE_GROUPING):   groupRespRate = round(groupRespRate, .001);
MPRINT(EM_CREATE_GROUPING):   drop _variable_ index index2 respper nrespper;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: Variable _label_ is uninitialized.
NOTE: Variable role is uninitialized.
WARNING: Multiple lengths were specified for the BY variable _variable_ by input data sets. This might cause unexpected results.
WARNING: The variable index in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable index2 in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 8 observations read from the data set WORK.TEMPDISPLAYVAR.
NOTE: There were 38 observations read from the data set WORK.TEMPCOARSE.
NOTE: There were 8 observations read from the data set WORK.GINI.
NOTE: The data set EMWS4.BINNING_COARSE has 38 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CREATE_GROUPING):   proc datasets library=work nolist;
MPRINT(EM_CREATE_GROUPING):   delete tempcoarse gini ;
MPRINT(EM_CREATE_GROUPING):   run;
 
NOTE: Deleting WORK.TEMPCOARSE (memtype=DATA).
NOTE: Deleting WORK.GINI (memtype=DATA).
MPRINT(EM_CREATE_GROUPING):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\GROUPMAPPINGSCORECODE.sas";
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   FILE Y;
MPRINT(EM_GENERATE_LABELVALUES):   put " length _LABEL_ $200;";
MPRINT(EM_GENERATE_LABELVALUES):   put ' label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";';
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: The file Y is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:04,
      Create Time=16 March 2021 00:06:04
 
NOTE: 2 records were written to the file Y.
      The minimum record length was 21.
      The maximum record length was 83.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS4.BINNING_SPLITVALS out=work.sortedsplitval;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var _split_Value_;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set WORK.SORTEDSPLITVAL has 68 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=EMWS4.BINNING_BINMAPPINGS;
MPRINT(EM_GENERATE_LABELVALUES):   by display_var bin;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set EMWS4.BINNING_BINMAPPINGS has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   data temp;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a) EMWS4.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   if display_var eq '' then delete;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 68 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 60 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   data temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   merge work.sortedsplitval(in=_a rename=(_GROUP_=MISSGRP)) EMWS4.BINNING_BINMAPPINGS(rename=(BIN_NAME=_VARIABLE_ BIN=_SPLIT_VALUE_));
MPRINT(EM_GENERATE_LABELVALUES):   by Display_Var _Split_value_;
MPRINT(EM_GENERATE_LABELVALUES):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(EM_GENERATE_LABELVALUES):   if _a then output;
MPRINT(EM_GENERATE_LABELVALUES):   keep _variable_ display_var missgrp;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 68 observations read from the data set WORK.SORTEDSPLITVAL.
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   proc sort data=temp out=class;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_ LB;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 60 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 60 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   data _null_;
MPRINT(EM_GENERATE_LABELVALUES):   file Y MOD;
MPRINT(EM_GENERATE_LABELVALUES):   length string $200 flag 8;
MPRINT(EM_GENERATE_LABELVALUES):   retain string flag;
MPRINT(EM_GENERATE_LABELVALUES):   set class end=eof;
MPRINT(EM_GENERATE_LABELVALUES):   by _variable_ _group_;
MPRINT(EM_GENERATE_LABELVALUES):   index = kindex(_variable_, "BIN_");
MPRINT(EM_GENERATE_LABELVALUES):   if index gt 0 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then do;';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   if LB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   * string = strip(string)!!" _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(LB)!!"<= "!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 1;
MPRINT(EM_GENERATE_LABELVALUES):   *string = strip(string)!!" _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   string = " _LABEL_='"!!strip(DISPLAY_VAR);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._Group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   if UB ne . then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!'< '!!strip(UB)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag=1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string= " UB="!!strip(UB)!!";";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   put "end;";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(EM_GENERATE_LABELVALUES):   if first._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   flag = 0;
MPRINT(EM_GENERATE_LABELVALUES):   if ^first._variable_ then put 'else';
MPRINT(EM_GENERATE_LABELVALUES):   else put ' ';
MPRINT(EM_GENERATE_LABELVALUES):   string = "if DISPLAY_VAR='"!!strip(DISPLAY_VAR)!!"' and _GROUP_ = " !!strip(put(_GROUP_,best12.))!!' then';
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   string = "_LABEL_='"!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   if flag ne 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   tempstring = strip(string)!!', '!!strip(_split_value_);
MPRINT(EM_GENERATE_LABELVALUES):   length = length(tempstring);
MPRINT(EM_GENERATE_LABELVALUES):   if length < 195 then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = tempstring;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)||",...";
MPRINT(EM_GENERATE_LABELVALUES):   flag=1;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if last._group_ then do;
MPRINT(EM_GENERATE_LABELVALUES):   string = strip(string)!!"';";
MPRINT(EM_GENERATE_LABELVALUES):   put string;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      171:84    206:151   246:25
NOTE: The file Y is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\GROUPMAPPINGSCORECODE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=108,
      Last Modified=16 March 2021 00:06:04,
      Create Time=16 March 2021 00:06:04
 
NOTE: 114 records were written to the file Y.
      The minimum record length was 1.
      The maximum record length was 53.
NOTE: There were 60 observations read from the data set WORK.CLASS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS4.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS4.BINNING_COARSE;
NOTE: %INCLUDE (level 1) file Y is file C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\GROUPMAPPINGSCORECODE.sas.
30852     + length _LABEL_ $200;
MPRINT(EM_GENERATE_LABELVALUES):   length _LABEL_ $200;
30853     + label _LABEL_="%sysfunc(sasmsg(sashelp.dmine, rpt_groupvalues_vlabel , NOQUOTE))";
MPRINT(EM_GENERATE_LABELVALUES):   label _LABEL_= "Group Values";
30854     +
30855     +if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 2 then do;
30856     +_LABEL_='IMP_DEBTINC< 28.87';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='IMP_DEBTINC< 28.87';
30857     +UB=28.87;
MPRINT(EM_GENERATE_LABELVALUES):   UB=28.87;
30858     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30859     +else
30860     +if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 3 then do;
30861     +_LABEL_='28.87<= IMP_DEBTINC< 34.75';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='28.87<= IMP_DEBTINC< 34.75';
30862     +UB=34.75;
MPRINT(EM_GENERATE_LABELVALUES):   UB=34.75;
30863     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30864     +else
30865     +if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 4 then do;
30866     +_LABEL_='34.75<= IMP_DEBTINC< 39.23';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='34.75<= IMP_DEBTINC< 39.23';
30867     +UB=39.23;
MPRINT(EM_GENERATE_LABELVALUES):   UB=39.23;
30868     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30869     +else
30870     +if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DEBTINC' and _GROUP_ = 5 then do;
30871     +_LABEL_='39.23<= IMP_DEBTINC';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='39.23<= IMP_DEBTINC';
30872     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
30873     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30874     +
30875     +if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 2 then do;
30876     +_LABEL_='IMP_MORTDUE< 46609';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='IMP_MORTDUE< 46609';
30877     +UB=46609;
MPRINT(EM_GENERATE_LABELVALUES):   UB=46609;
30878     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30879     +else
30880     +if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 3 then do;
30881     +_LABEL_='46609<= IMP_MORTDUE< 65017';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='46609<= IMP_MORTDUE< 65017';
30882     +UB=65017;
MPRINT(EM_GENERATE_LABELVALUES):   UB=65017;
30883     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30884     +else
30885     +if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 4 then do;
30886     +_LABEL_='65017<= IMP_MORTDUE< 93520';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='65017<= IMP_MORTDUE< 93520';
30887     +UB=93520;
MPRINT(EM_GENERATE_LABELVALUES):   UB=93520;
30888     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30889     +else
30890     +if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_MORTDUE' and _GROUP_ = 5 then do;
30891     +_LABEL_='93520<= IMP_MORTDUE';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='93520<= IMP_MORTDUE';
30892     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
30893     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30894     +
30895     +if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 2 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 2 then do;
30896     +_LABEL_='IMP_YOJ< 3';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='IMP_YOJ< 3';
30897     +UB=3;
MPRINT(EM_GENERATE_LABELVALUES):   UB=3;
30898     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30899     +else
30900     +if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 3 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 3 then do;
30901     +_LABEL_='3<= IMP_YOJ< 7';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='3<= IMP_YOJ< 7';
30902     +UB=7;
MPRINT(EM_GENERATE_LABELVALUES):   UB=7;
30903     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30904     +else
30905     +if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 4 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 4 then do;
30906     +_LABEL_='7<= IMP_YOJ< 13';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='7<= IMP_YOJ< 13';
30907     +UB=13;
MPRINT(EM_GENERATE_LABELVALUES):   UB=13;
30908     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30909     +else
30910     +if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 5 then do;
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_YOJ' and _GROUP_ = 5 then do;
30911     +_LABEL_='13<= IMP_YOJ';
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_='13<= IMP_YOJ';
30912     +UB=.;
MPRINT(EM_GENERATE_LABELVALUES):   UB=.;
30913     +end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
30914     +
30915     +if DISPLAY_VAR='IMP_DELINQ' and _GROUP_ = 2 then
30916     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_DELINQ' and _GROUP_ = 2 then _LABEL_='0';
30917     +else
30918     +if DISPLAY_VAR='IMP_DELINQ' and _GROUP_ = 3 then
30919     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DELINQ' and _GROUP_ = 3 then _LABEL_='1';
30920     +else
30921     +if DISPLAY_VAR='IMP_DELINQ' and _GROUP_ = 4 then
30922     +_LABEL_='10, 11, 12, 13, 15, 2, 3, 4, 5, 6, 7, 8';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DELINQ' and _GROUP_ = 4 then _LABEL_='10, 11, 12, 13, 15, 2, 3, 4, 5, 6, 7, 8';
30923     +
30924     +if DISPLAY_VAR='IMP_DEROG' and _GROUP_ = 2 then
30925     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_DEROG' and _GROUP_ = 2 then _LABEL_='0';
30926     +else
30927     +if DISPLAY_VAR='IMP_DEROG' and _GROUP_ = 3 then
30928     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DEROG' and _GROUP_ = 3 then _LABEL_='1';
30929     +else
30930     +if DISPLAY_VAR='IMP_DEROG' and _GROUP_ = 4 then
30931     +_LABEL_='10, 2, 3, 4, 5, 6, 7, 8, 9';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_DEROG' and _GROUP_ = 4 then _LABEL_='10, 2, 3, 4, 5, 6, 7, 8, 9';
30932     +
30933     +if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 2 then
30934     +_LABEL_='OTHER';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 2 then _LABEL_='OTHER';
30935     +else
30936     +if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 3 then
30937     +_LABEL_='PROFEXE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 3 then _LABEL_='PROFEXE';
30938     +else
30939     +if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 4 then
30940     +_LABEL_='OFFICE';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 4 then _LABEL_='OFFICE';
30941     +else
30942     +if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 5 then
30943     +_LABEL_='MGR';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 5 then _LABEL_='MGR';
30944     +else
30945     +if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 6 then
30946     +_LABEL_='SALES, SELF';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_JOB' and _GROUP_ = 6 then _LABEL_='SALES, SELF';
30947     +
30948     +if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 2 then
30949     +_LABEL_='0';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 2 then _LABEL_='0';
30950     +else
30951     +if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 3 then
30952     +_LABEL_='1';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 3 then _LABEL_='1';
30953     +else
30954     +if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 4 then
30955     +_LABEL_='2';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 4 then _LABEL_='2';
30956     +else
30957     +if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 5 then
30958     +_LABEL_='3';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 5 then _LABEL_='3';
30959     +else
30960     +if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 6 then
30961     +_LABEL_='10, 11, 12, 13, 14, 4, 5, 6, 7, 8, 9';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_NINQ' and _GROUP_ = 6 then _LABEL_='10, 11, 12, 13, 14, 4, 5, 6, 7, 8, 9';
30962     +
30963     +if DISPLAY_VAR='IMP_REASON' and _GROUP_ = 2 then
30964     +_LABEL_='DEBTCON';
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR='IMP_REASON' and _GROUP_ = 2 then _LABEL_='DEBTCON';
30965     +else
30966     +if DISPLAY_VAR='IMP_REASON' and _GROUP_ = 3 then
30967     +_LABEL_='HOMEIMP';
MPRINT(EM_GENERATE_LABELVALUES):   else if DISPLAY_VAR='IMP_REASON' and _GROUP_ = 3 then _LABEL_='HOMEIMP';
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 38 observations read from the data set EMWS4.BINNING_COARSE.
NOTE: The data set EMWS4.BINNING_COARSE has 38 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   *filename Y;
MPRINT(EM_GENERATE_LABELVALUES):   data EMWS4.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   set EMWS4.BINNING_COARSE;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_DEBTINC" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_DELINQ" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_DEROG" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_JOB" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_MORTDUE" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_NINQ" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_REASON" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   if DISPLAY_VAR = "IMP_YOJ" and _GROUP_ = 1 then do;
MPRINT(EM_GENERATE_LABELVALUES):   if _LABEL_ eq '' then do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = "Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   else do;
MPRINT(EM_GENERATE_LABELVALUES):   _LABEL_ = strip(_LABEL_)!!", Missing";
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   end;
MPRINT(EM_GENERATE_LABELVALUES):   drop ub;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: There were 38 observations read from the data set EMWS4.BINNING_COARSE.
NOTE: The data set EMWS4.BINNING_COARSE has 38 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GENERATE_LABELVALUES):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_LABELVALUES):   delete class temp temp_missing;
MPRINT(EM_GENERATE_LABELVALUES):   run;
 
NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
MPRINT(EM_GENERATE_LABELVALUES):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_MODEL):   data WORK.EM_USER_MODEL;
MPRINT(EM_MODEL):   length DATA $65 TARGET $32 PREDICTED ASSESS DECSCORECODE ADJUSTPOST FITSTATISTICS CLASSIFICATION RESIDUALS $1;
MPRINT(EM_MODEL):   data = "";
MPRINT(EM_MODEL):   target = "BAD";
MPRINT(EM_MODEL):   predicted = "Y";
MPRINT(EM_MODEL):   assess = "N";
MPRINT(EM_MODEL):   decscorecode = "N";
MPRINT(EM_MODEL):   fitstatistics = "N";
MPRINT(EM_MODEL):   classification = "N";
MPRINT(EM_MODEL):   residuals = "N";
MPRINT(EM_MODEL):   adjustpost = "D";
MPRINT(EM_MODEL):   run;
 
NOTE: The data set WORK.EM_USER_MODEL has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATESTAT";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.70150321195903;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30968      *------------------------------------------------------------*;
30969      * End TRAIN: BINNING;
30970      *------------------------------------------------------------*;
30971
 
30972      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30973      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
30974      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30975      ;
MPRINT(EM_DIAGRAM):   ;
30976      ;
MPRINT(EM_DIAGRAM):   ;
30977      ;
MPRINT(EM_DIAGRAM):   ;
30978      ;
MPRINT(EM_DIAGRAM):   ;
30979      quit;
MPRINT(EM_DIAGRAM):   quit;
30980      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30981      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
30982      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30983      /*; *"; *'; */
30984      ;
MPRINT(EM_DIAGRAM):   ;
30985      run;
MPRINT(EM_DIAGRAM):   run;
30986      quit;
MPRINT(EM_DIAGRAM):   quit;
30987      /* Reset EM Options */
30988      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
30989      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
30990      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
30991      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
30992      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
30993      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:05" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                16 March 2021
Time:                00:06:05
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2TG7AC0 "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2TG7AC0 new;
MPRINT(EM_DIAGRAM):   run;
31095      %let EMEXCEPTIONSTRING=;
31096      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
31097      * SCORE: BINNING;
MPRINT(EM_DIAGRAM):   * SCORE: BINNING;
31098      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
31099      %let EM_ACTION = SCORE;
31100      %let syscc = 0;
31101      %macro main;
31102
31103        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
31104        %include temp;
31105        filename temp;
31106
31107        %setProperties;
31108
31109        %if %upcase(&EM_ACTION) = CREATE %then %do;
31110          filename temp catalog 'sashelp.emmdfy.binning_create.source';
31111          %include temp;
31112          filename temp;
31113
31114          %create;
31115        %end;
31116
31117         %else
31118         %if %upcase(&EM_ACTION) = TRAIN %then %do;
31119
31120             filename temp catalog 'sashelp.emmdfy.binning_train.source';
31121             %include temp;
31122             filename temp;
31123             %train;
31124         %end;
31125
31126        %else
31127        %if %upcase(&EM_ACTION) = SCORE %then %do;
31128          filename temp catalog 'sashelp.emmdfy.binning_score.source';
31129          %include temp;
31130          filename temp;
31131
31132          %score;
31133
31134        %end;
31135
31136        %else
31137        %if %upcase(&EM_ACTION) = REPORT %then %do;
31138
31139             filename temp catalog 'sashelp.emmdfy.binning_report.source';
31140             %include temp;
31141             filename temp;
31142
31143             %report;
31144         %end;
31145
31146         %doendm:
31147      %mend main;
31148
31149      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
31151     +%macro SetProperties;
31153     +     /* IGN options */
31154     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
31155     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
31156     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
31158     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
31159     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
31160     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
31161     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
31162     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
31163     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
31164     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
31165     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
31166     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
31167     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
31168     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
31169     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
31170     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
31171     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
31173     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
31174     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
31175     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
31178     +%mend SetProperties;
31179     +%macro appendfiles(fileref1, fileref2);
31180     +     data _null_;
31181     +       length c $256;
31182     +       fid1=fopen("&fileref1",'A');
31183     +       fid2=fopen("&fileref2",'I');
31184     +       cval = finfo(fid2,'lrecl');
31185     +       put cval= fid1= fid2=;
31186     +       if (fid2 > 0) then
31187     +         do while(fread(fid2)=0);
31188     +           rc = fget(fid2,c,256);
31189     +           _msg_=sysmsg();
31190     +           /* put rc= c= _msg_=; */
31191     +           rc = fput(fid1,strip(c));
31192     +           rc = fwrite(fid1);
31193     +         end;
31194     +         _msg_=sysmsg();
31195     +         put _msg_=;
31196     +       rc = fclose(fid1);
31197     +       rc = fclose(fid2);
31198     +     run;
31199     +%mend appendfiles;
31201     +%macro buildOptScoreCode;
31203     +    %em_register(key=BINCODE, type=FOLDER);
31205     +    filename x catalog 'sashelp.emutil.em_deldir.source';
31206     +    %inc x;
31207     +    filename x;
31208     +    %delDir(folder=%nrbquote(&em_user_bincode));
31210     +    data _null_; length rc $200;
31211     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
31212     +    run;
31214     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
31216     +    %let dsid = %sysfunc(open(class_nosv));
31217     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
31218     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
31220     +    %let oldname=;
31221     +    %do %while(^%sysfunc(fetch(&dsid)));
31222     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
31223     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
31225     +        %if &name ne &oldname %then %do;
31226     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
31227     +             data _null_;
31228     +                length string $1024 flag endflag 8;
31229     +                retain string flag endflag;
31230     +                set class_nosv end=eof;
31231     +                where DISPLAY_VAR ="&name";
31232     +                by _variable_ _group_;
31233     +                file _F1;
31234     +                index = kindex(_variable_, "BIN_");
31235     +                if index gt 0 then do;
31236     +                   if first._variable_ then do;
31237     +                      put ' ';
31238     +                      put "&EM_CODEBAR;";
31239     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
31240     +                      put string;
31241     +                      put "&EM_CODEBAR;";
31243     +                      if origLabel ne "" then do;
31244     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
31245     +                            put string;
31246     +                            string = tranwrd(origLabel,"'","''");
31247     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
31248     +                            put string;
31249     +                      end;
31250     +                      else do;
31251     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
31252     +                             put string;
31253     +                      end;
31255     +                      put ' ';
31257     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31258     +                      put string;
31259     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31260     +                      put string;
31261     +                      put "end;";
31262     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31263     +                      put string;
31264     +                   end;
31265     +                   if first._group_ then do;
31266     +                      flag = 0;
31267     +                      endflag = 1;
31268     +                      if ^first._variable_ then do;
31269     +                         put "else";
31270     +                      end;
31271     +                      if LB ne . then do;
31272     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
31273     +                      end;
31274     +                      else do;
31275     +                         flag = 1;
31276     +                         string = "if";
31277     +                      end;
31278     +                   end;
31279     +                   if last._Group_ then do;
31280     +                      if UB ne . then do;
31281     +                        if flag ne 1 then do;
31282     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
31283     +                        end;
31284     +                        else do;
31285     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
31286     +                        end;
31287     +                      end;
31288     +                      else do;
31289     +                         if flag=1 then do;
31290     +                            string = strip(DISPLAY_VAR) ;
31291     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
31292     +                            endflag=0;
31293     +                            string="";
31294     +                         end;
31295     +                         else do;
31296     +                            string = strip(string)!!" then do;";
31297     +                         end;
31298     +                      end;
31299     +                      put string;
31300     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
31301     +                      put string;
31302     +                      if endflag eq 1 then do;
31303     +                        put "end;";
31304     +                      end;
31305     +                   end;
31306     +                   if last._variable_ then do;
31307     +                     string = "end;";
31308     +                     put string;
31309     +                   end;
31311     +                end;
31312     +                else do;
31313     +                   _split_value_ = tranwrd(_split_value_,"'","''");
31314     +                   if first._group_ then do;
31315     +                      flag=0;
31316     +                      if ^first._variable_ then
31317     +                         put 'else';
31318     +                      else do;
31319     +                         put ' ';
31320     +                         put "&EM_CODEBAR;";
31321     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
31322     +                         put string;
31323     +                         put "&EM_CODEBAR;";
31325     +                         if origLabel ne "" then do;
31326     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
31327     +                               put string;
31328     +                               string = tranwrd(origLabel,"'","''");
31329     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
31330     +                               put string;
31331     +                         end;
31332     +                         else do;
31333     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
31334     +                               put string;
31335     +                         end;
31337     +                         put ' ';
31339     +                         if format ne '' then do;
31340     +                            if first._variable_ then do;
31341     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
31342     +                               put string;
31343     +                               string = '%dmnormip(_UFormat200);';
31344     +                               put string;
31346     +                               string ="if MISSING(_UFormat200) then do;";
31347     +                               put string;
31348     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31349     +                               put string;
31350     +                               put "end;";
31352     +                               string="else if NOT MISSING(_UFormat200) then do;";
31353     +                               put string;
31355     +                            end;
31356     +                         end;
31357     +                         else do;
31358     +                            if type = 'N' then do;
31359     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31360     +                              put string;
31361     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31362     +                              put string;
31363     +                              put "end;";
31365     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31366     +                              put string;
31367     +                            end;
31368     +                            else if type='C' then do;
31369     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
31370     +                              put string;
31371     +                              string = '%dmnormip(_UFormat200);';
31372     +                              put string;
31374     +                              string ="if MISSING(_UFormat200) then do;";
31375     +                              put string;
31376     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31377     +                              put string;
31378     +                              put "end;";
31380     +                              string="else if NOT MISSING(_UFormat200) then do;";
31381     +                              put string;
31382     +                              string = '%dmnormip(_UFormat200);';
31383     +                              put string;
31384     +                           end;
31385     +                         end;
31386     +                      end;
31387     +                      if format ne '' OR type='C' then do;
31388     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
31389     +                      end;
31390     +                      else do;
31391     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
31392     +                      end;
31393     +                   end;
31394     +                   else do;
31395     +                      if flag ne 1 then do;
31396     +                       if format ne '' OR type='C' then do;
31397     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
31398     +                       end;
31399     +                       else do;
31400     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
31401     +                       end;
31402     +                         length = length(tempstring);
31404     +                         if length < 195 then do;
31405     +                            string = tempstring;
31406     +                         end;
31407     +                         else do;
31409     +                            string = strip(string);
31410     +                            put string;
31411     +                            string = ") then do;";
31412     +                            put string;
31414     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
31415     +                            put string;
31416     +                            put "end;";
31418     +                            put 'else';
31419     +                            if format ne '' OR type='C' then do;
31420     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
31421     +                            end;
31422     +                            else do;
31423     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
31424     +                            end;
31425     +                         end;
31426     +                      end;
31427     +                   end;
31429     +                   if last._group_ then do;
31430     +                      string = strip(string);
31431     +                      put string;
31433     +                      string = ") then do;";
31434     +                      put string;
31436     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
31437     +                      put string;
31438     +                      put "end;";
31439     +                   end;
31441     +                   if last._variable_ then do;
31442     +                     put "else do;";
31444     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31445     +                     put string;
31447     +                     put "end;";
31448     +                     put "end;";
31449     +                   end;
31450     +                end;
31451     +             run;
31453     +             %let oldname = &name;
31454     +        %end;
31455     +    %end;
31456     +    %let dsid = %sysfunc(close(&dsid));
31458     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
31459     +    data _null_;
31460     +       file _F1;
31461     +       put "length _UFormat200 $200;";
31462     +       put "drop _UFormat200;";
31463     +       put "_UFormat200='';";
31464     +    run;
31465     +    filename _F1;
31467     +   %em_register(key=EMSCOREVAR, type=DATA);
31468     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
31469     +   proc datasets lib=&em_lib nolist;
31470     +      delete &scorevarDs;
31471     +   run;
31472     +   quit;
31474     +   %let filrf=mydir;
31475     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
31476     +   %let did=%sysfunc(dopen(&filrf));
31478     +   %if &did %then %do;  %PUT  did= &did;
31479     +       %let memcount=%sysfunc(dnum(&did));
31480     +       %if &memcount > 0 %then %do;
31481     +           data &em_user_emscorevar;
31482     +              length Name $32 formula $70 file $200;
31483     +              keep NAME Formula file;
31484     +              formula  = '';
31485     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
31486     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
31487     +               output;
31488     +           %end;
31489     +           %do i=1 %to &memcount;
31490     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
31491     +               %let newvar = %scan(&name, 1, .);
31492     +               %if "&newvar" ne "_ALL_" %then %do;
31493     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
31494     +                   output;
31495     +               %end;
31496     +           %end;
31498     +           run;
31499     +       %end;
31500     +       %let did = %sysfunc(dclose(&did));
31501     +  %end;
31503     +   %doendu:
31504     +%mend buildOptScoreCode;
31507     +%macro buildScoreCode(flowCode, publishCode);
31510     +  filename x "&flowCode";
31512     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
31513     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
31514     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
31516     +  data temp;
31517     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
31518     +    by display_var _Split_value_;
31519     +     if upcase(_Split_value_) ne 'MISSING';
31520     +   run;
31522     +   data temp_missing;
31523     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
31524     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
31525     +     by display_var _Split_value_;
31526     +     if upcase(_Split_value_) eq 'MISSING';
31527     +     keep _variable_ display_var missgrp;
31528     +   run;
31530     +   proc sort data=temp_missing; by display_var missgrp; run;
31532     +   data temp_missing;
31533     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
31534     +     by display_var missgrp;
31535     +     if ^_a then delete;
31536     +     keep _variable_ display_var missgrp ;
31537     +   run;
31539     +   data temp;
31540     +     merge temp temp_missing;
31541     +     by display_var;
31542     +     if display_Var eq '' then delete;
31543     +    run;
31545     +    /* pull in wtev values */
31546     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
31547     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
31548     +    proc sort data=temp;  by display_var _group_; run;
31550     +   data temp;
31551     +      merge temp tempcoarse(keep=display_var _group_  role) ;
31552     +      by display_var _group_;
31553     +    run;
31555     +    data temp;
31556     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
31557     +      by display_var;
31559     +      if _group_ = . then delete;
31560     +      if _variable_ = '' then delete;
31561     +    run;
31563     +    proc sort data=temp out=class;
31564     +       by _variable_ _group_ LB;
31565     +    run;
31567     +    data _null_;
31568     +      file X;
31570     +      put "length _UFormat200 $200;";
31571     +      put "drop _UFormat200;";
31572     +      put "_UFormat200='';";
31573     +    run;
31575     +    data class_nosv;
31576     +      set class;
31577     +      if upcase(role)="INPUT";
31578     +    run;
31580     +    data _null_;
31581     +       file X MOD;
31582     +       length string $1024 flag endflag 8;
31583     +       retain string flag endflag;
31584     +       set class_nosv end=eof;
31585     +       by _variable_ _group_;
31587     +       index = kindex(_variable_, "BIN_");
31588     +       if index gt 0 then do;
31590     +         if first._variable_ then do;
31591     +            put ' ';
31592     +            put "&EM_CODEBAR;";
31593     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
31594     +            put string;
31595     +            put "&EM_CODEBAR;";
31598     +            if origLabel ne "" then do;
31599     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
31600     +              put string;
31601     +              string = tranwrd(origLabel,"'","''");
31602     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
31603     +              put string;
31604     +            end;
31605     +            else do;
31606     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
31607     +             put string;
31608     +            end;
31610     +            put ' ';
31612     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31613     +            put string;
31614     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31615     +            put string;
31616     +            put "end;";
31617     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31618     +            put string;
31619     +          end;
31620     +           if first._group_ then do;
31621     +              flag = 0;
31622     +              endflag = 1;
31623     +              if ^first._variable_ then do;
31624     +                put "else";
31625     +              end;
31626     +              if LB ne . then do;
31627     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
31628     +              end;
31629     +              else do;
31630     +                 flag = 1;
31631     +                 string = "if";
31632     +              end;
31634     +           end;
31635     +           if last._Group_ then do;
31636     +              if UB ne . then do;
31637     +                if flag ne 1 then do;
31638     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
31639     +                end;
31640     +                else do;
31641     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
31642     +                end;
31643     +              end;
31644     +              else do;
31645     +                 if flag=1 then do;
31646     +                   string = strip(DISPLAY_VAR) ;
31647     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
31648     +                   endflag = 0;
31649     +                   string="";
31650     +                 end;
31651     +                 else do;
31652     +                   string = strip(string)!!" then do;";
31653     +                 end;
31654     +              end;
31655     +              put string;
31657     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
31658     +              put string;
31659     +              if endflag eq 1 then do;
31660     +                put "end;";
31661     +              end;
31662     +           end;
31663     +           if last._variable_ then do;
31664     +             string = "end;";
31665     +             put string;
31666     +           end;
31667     +       end;
31668     +       else do;
31669     +           _split_value_ = tranwrd(_split_value_,"'","''");
31670     +           if first._group_ then do;
31671     +              flag=0;
31672     +              if ^first._variable_ then
31673     +                 put 'else';
31674     +              else do;
31675     +                 put ' ';
31676     +                 put "&EM_CODEBAR;";
31677     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
31678     +                 put string;
31679     +                 put "&EM_CODEBAR;";
31681     +                 if origLabel ne "" then do;
31682     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
31683     +                   put string;
31684     +                   string = tranwrd(origLabel,"'","''");
31685     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
31686     +                   put string;
31687     +                 end;
31688     +                 else do;
31689     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
31690     +                   put string;
31691     +                 end;
31693     +                 put ' ';
31695     +                if format ne '' then do;
31696     +                  if first._variable_ then do;
31697     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
31698     +                    put string;
31699     +                    string = '%dmnormip(_UFormat200);';
31700     +                    put string;
31702     +                     string ="if MISSING(_UFormat200) then do;";
31703     +                     put string;
31704     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31705     +                     put string;
31706     +                     put "end;";
31708     +                     string="else if NOT MISSING(_UFormat200) then do;";
31709     +                     put string;
31711     +                  end;
31712     +                end;
31713     +                else do;
31714     +                     if type = 'N' then do;
31715     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31716     +                       put string;
31717     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31718     +                       put string;
31719     +                       put "end;";
31721     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
31722     +                       put string;
31724     +                     end;
31725     +                     else if type='C' then do;
31726     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
31727     +                        put string;
31728     +                        string = '%dmnormip(_UFormat200);';
31729     +                        put string;
31731     +                        string ="if MISSING(_UFormat200) then do;";
31732     +                        put string;
31733     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31734     +                        put string;
31735     +                        put "end;";
31737     +                        string="else if NOT MISSING(_UFormat200) then do;";
31738     +                        put string;
31739     +                        string = '%dmnormip(_UFormat200);';
31740     +                        put string;
31741     +                    end;
31742     +                end;
31743     +              end;
31744     +              if format ne '' OR type='C' then do;
31745     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
31746     +              end;
31747     +              else do;
31748     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
31749     +              end;
31750     +           end;
31751     +           else do;
31752     +              if flag ne 1 then do;
31753     +                if format ne '' OR type='C' then do;
31754     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
31755     +                end;
31756     +                else do;
31757     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
31758     +                end;
31759     +                length = klength(tempstring);
31761     +                if length < 195 then do;
31762     +                   string = tempstring;
31763     +                end;
31764     +                else do;
31766     +                   string = strip(string);
31767     +                   put string;
31768     +                   string = ") then do;";
31769     +                   put string;
31771     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
31772     +                   put string;
31773     +                   put "end;";
31775     +                 /*  string = strip(string)||",'...';"; */
31777     +                   put 'else';
31778     +                   if format ne '' OR type='C' then do;
31779     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
31780     +                   end;
31781     +                   else do;
31782     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
31783     +                   end;
31786     +                end;
31787     +              end;
31788     +           end;
31790     +           if last._group_ then do;
31791     +              string = strip(string);
31792     +              put string;
31793     +              string = ") then do;";
31794     +              put string;
31796     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
31797     +              put string;
31798     +              put "end;";
31799     +           end;
31801     +           if last._variable_ then do;
31802     +             put "else do;";
31804     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
31805     +             put string;
31807     +             put "end;";
31808     +             put "end;";
31809     +           end;
31810     +         *end;
31811     +       end;
31812     +    run;
31814     +    /* generate PublishCode the same as flowscorecode */
31815     +    filename Y "&publishCode";
31817     +    /* if publishCode already exists, wipe it out first */
31818     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
31819     +      %let rc = %sysfunc(fdelete(Y));
31820     +    %end;
31822     +    %appendfiles(Y, X);
31824     +    %if %EM_BINARY_TARGET= %then %do;
31825     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
31826     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
31827     +      %end;
31828     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
31829     +      %let ibn_inttarget_orig = &ibn_inttarget;
31831     +      %if %symexist(IGNBinTarget)=0 %then %do;
31832     +         %global ignbintarget ignfreqvar;
31833     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
31834     +         %include temp;
31835     +         filename temp;
31836     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
31838     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
31839     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
31840     +         %end;
31841     +      %end;
31842     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
31843     +         proc sql noprint;
31844     +            %if %EM_FREQ ne %then %do;
31845     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
31846     +            %end;
31847     +            %else %do;
31848     +               select mean(&ibn_inttarget)
31849     +            %end;
31850     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
31851     +         quit;
31852     +      %end;
31854     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
31855     +      %if &dsid %then %do;
31856     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
31857     +         %let rc=%sysfunc(close(&dsid));
31858     +      %end;
31859     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
31861     +      data _null_;
31862     +         file x mod;
31863     +         put ' ';
31865     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
31866     +             put "&EM_CODEBAR;";
31867     +             %let note = Mean Cutoff Binary Transformation for Target;
31868     +             put "* &note;";
31869     +             put "&EM_CODEBAR;";
31870     +         %end;
31871     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
31872     +             put "&EM_CODEBAR;";
31873     +             %let note = User-Specified Cutoff Binary Transformation for Target;
31874     +             put "* &note;";
31875     +             put "&EM_CODEBAR;";
31876     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
31877     +         %end;
31878     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
31879     +         put "else do;";
31880     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
31881     +         put "   else &IGNBinTarget=0;";
31882     +         put "end;";
31884     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
31885     +      run;
31887     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
31889     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
31891     +         data _null_;
31892     +            file deltaref;
31893     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
31894     +            put "if name='&IGNBinTarget' then do;";
31895     +            put "   role='TARGET';";
31896     +            put "   level='BINARY';";
31897     +            put "end;";
31898     +         run;
31900     +      %end;
31901     +      %else %do;
31903     +         data _null_;
31904     +            file deltaref;
31905     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
31906     +            put "if name='&IGNBinTarget' then do;";
31907     +            put "   role='REJECTED';";
31908     +            put "   level='BINARY';";
31909     +            put "end;";
31910     +         run;
31911     +      %end;
31913     +      filename deltaref;
31915     +   %end;
31917     +    filename X;
31918     +    filename Y;
31920     +    %buildOptScoreCode;
31922     +    proc datasets library=work nolist;
31923     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
31924     +    run;
31925     +    quit;
31927     +%mend buildScoreCode;
31929     +%macro buildMetaCode(DeltaCodeFile=);
31931     +   /* set variable roles based on New Role column in the Results table */
31932     +   data _null_;
31933     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
31934     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
31935     +      %if &dsid %then %do;
31936     +        %let obs = %sysfunc(fetch(&dsid));
31937     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
31938     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
31939     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
31941     +        %do %while(&obs=0);
31942     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
31943     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
31944     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
31946     +          /* retrieve grp and woe names from varmappings dataset */
31947     +          %let choice = _VARIABLE_ = "&inputname";
31948     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
31949     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
31950     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
31951     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
31952     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
31954     +          put "if name = '&inputname' then role='REJECTED';";
31955     +          %if "&role" ne "DEFAULT" %then %do;
31956     +            put "if name = '&grpname' then role='&role';";
31957     +          %end;
31958     +          %else %do;
31959     +            put "if name = '&grpname' then role='&oldrole';";
31960     +          %end;
31961     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
31963     +          %let obs = %sysfunc(fetch(&dsid));
31964     +        %end;
31965     +      %end;
31966     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
31967     +   run;
31969     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
31970     +   data _null_;
31971     +      file &DeltaCodeFile MOD;
31973     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
31974     +      %if &sdsid %then %do;
31975     +        %let sobs = %sysfunc(fetch(&sdsid));
31976     +        %do %while(&sobs=0);
31977     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
31978     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
31979     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
31980     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
31982     +          %let checkgrp = GRP_&checkname;
31983     +          %let lenname = %length(&checkgrp);
31984     +          %if %eval(&lenname-32) > 0 %then %do;
31985     +            %let checkgrp = %substr(&checkgrp, 1, 32);
31986     +          %end;
31988     +          %let choice = _VARIABLE_ ="&checkname";
31989     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
31991     +          /* if var not found in varmappings, delete variables; */
31992     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
31993     +          %if &vdsid eq 0 %then %do;
31994     +            put 'if name="&displayvar" then delete;';
31995     +            %let dispgrp = GRP_&displayvar;
31996     +            put 'if name="&dispgrp" then delete;';
31997     +          %end;
31999     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
32000     +          %let sobs = %sysfunc(fetch(&sdsid));
32001     +        %end;
32002     +      %end;
32003     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
32004     +   run;
32006     +%mend buildMetaCode;
32008     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
32010     +   proc sort data=&coarse out=sortedcoarse nodupkey;
32011     +     by display_var;
32012     +   run;
32013     +   proc sort data=&varmappings nodupkey;
32014     +     by _variable_;
32015     +   run;
32016     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
32017     +     proc sort data=&resultstable; by display_var; run;
32019     +     /* check that _new_role exists - did not exist in earlier releases */
32020     +     %let rds=%sysfunc(open(&resultstable));
32021     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
32022     +     %let rds=%sysfunc(close(&rds));
32023     +   %end;
32025     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
32026     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
32027     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
32028     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
32029     +     %end;
32030     +     ;
32031     +     by display_var;
32032     +     length _role_ _new_role_ $10;
32033     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
32034     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
32035     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
32036     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
32037     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
32038     +           ;
32040     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
32041     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
32042     +                _role_ = "Rejected";
32043     +             else _role_ = "Input";
32044     +           %end;
32045     +           %else %do;
32046     +             _role_ = "Input";
32047     +           %end;
32048     +           if _new_role_ eq "" then _new_role_="Default";
32049     +      if ^_a then do;
32050     +        _gini_ = 0;
32051     +        _role_ = 'Rejected';
32052     +        if _new_role_ eq "" then _new_role_="Default";
32053     +      end;
32054     +   run;
32055     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
32056     +     by NAME;
32057     +   run;
32058     +   data outlabel;
32059     +     set outlabel;
32060     +     if _label_ = '' then _label_ = _variable_;
32061     +   run;
32062     +   data &resultstable;
32063     +     merge &resultstable(in=_a_) outlabel;
32064     +     by display_Var;
32065     +     if _a_ then output;
32066     +   run;
32067     +   proc datasets library=work nolist;
32068     +     delete sortedcoarse outlabel;
32069     +   run;
32070     +   quit;
32071     +   proc sort data=&resultstable nodupkey;
32072     +      by DESCENDING
32073     +        _gini_ display_Var;
32074     +   run;
32075     +   data &resultstable;
32076     +     set &resultstable;
32078     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
32079     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
32080     +     giniOrder = _N_;
32081     +     _gini_ = round(_GINI_, .001);
32082     +     drop _variable_;
32083     +   run;
32085     +   proc print data=&resultstable label;
32086     +   run;
32088     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
32089     +   data &coarse;
32090     +     set &coarse;
32091     +     length role $10;
32092     +     %let dsid = %sysfunc(open(&resultstable));
32093     +     %if &dsid %then %do;
32094     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
32095     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
32096     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
32098     +       %let obs = %sysfunc(fetch(&dsid));
32099     +       %do %while(&obs=0);
32100     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
32101     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
32102     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
32104     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
32105     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
32106     +            giniOrder = &order;
32107     +            role = "&role";
32108     +          end;
32110     +          %let obs = %sysfunc(fetch(&dsid));
32111     +       %end;
32112     +     %end;
32113     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32114     +   run;
32117     +%mend EM_GENERATE_RESULTSTABLE;
32119     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
32121     +    /* instantiate the zchar macro to be used in adding bin definition */
32122     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
32123     +    %inc _temp;
32124     +    filename _temp;
32126     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
32127     +      by _variable_ binFlag _group_ LB;
32128     +    run;
32130     +    data tempExport;
32131     +      set sortedFine;
32132     +      by _variable_ binFlag _group_;
32133     +      length _split_value_ $200;
32135     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
32136     +      if binFlag = 0 then do;
32137     +        index = kindex(_variable_, "BIN_");
32138     +        if index gt 0 then do;
32139     +          _LEVEL_ = "INTERVAL";
32140     +        end;
32141     +        _Split_value_ = _split_value_;
32142     +        output;
32143     +      end;
32144     +      else do;
32145     +         * if last._group_ then do;
32146     +          index = kindex(_variable_, "BIN_");
32147     +          if index gt 0 then do;
32148     +            _LEVEL_ = "INTERVAL";
32149     +          end;
32150     +          _Split_value_ = %zchar(UB);
32151     +          output;
32152     +         * end;
32153     +      end;
32155     +      rename display_Var = _variable_;
32156     +      keep display_var _level_ _group_ _split_value_ binFlag;
32157     +    run;
32159     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
32160     +       data &EXPORTGROUPING;
32161     +         set tempexport;
32162     +       run;
32163     +    %end;
32164     +    %else %do;
32165     +       /* determine if EXPORTGROUPING already exists */
32166     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
32167     +         data &EXPORTGROUPING;
32168     +            set &EXPORTGROUPING tempexport;
32169     +         run;
32170     +       %end;
32171     +       %else %do;
32172     +         data &EXPORTGROUPING;
32173     +            set tempexport;
32174     +         run;
32175     +       %end;
32176     +    %end;
32178     +    proc datasets lib=work nolist;
32179     +      delete sortedFine tempexport;
32180     +    run;
32181     +    quit;
32183     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_SCORE.SOURCE.
32189     +%macro buildMetaCode(DeltaCodeFile=);
32191     +   /* set variable roles based on New Role column in the Results table */
32192     +   data _null_;
32193     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
32194     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
32195     +      %if &dsid %then %do;
32196     +        %let obs = %sysfunc(fetch(&dsid));
32197     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
32198     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
32199     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
32201     +        %do %while(&obs=0);
32202     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
32203     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
32204     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
32206     +          /* retrieve grp and woe names from varmappings dataset */
32207     +          %let choice = _VARIABLE_ = "&inputname";
32208     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
32209     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
32210     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
32211     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
32212     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
32214     +          put "if name = '&inputname' then role='REJECTED';";
32215     +          %if "&role" ne "DEFAULT" %then %do;
32216     +            put "if name = '&grpname' then role='&role';";
32217     +          %end;
32218     +          %else %do;
32219     +            put "if name = '&grpname' then role='&oldrole';";
32220     +          %end;
32221     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
32223     +          %let obs = %sysfunc(fetch(&dsid));
32224     +        %end;
32225     +      %end;
32226     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32227     +   run;
32229     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
32230     +   data _null_;
32231     +      file &DeltaCodeFile MOD;
32233     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
32234     +      %if &sdsid %then %do;
32235     +        %let sobs = %sysfunc(fetch(&sdsid));
32236     +        %do %while(&sobs=0);
32237     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
32238     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
32239     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
32240     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
32242     +          %let checkgrp = GRP_&checkname;
32243     +          %let lenname = %length(&checkgrp);
32244     +          %if %eval(&lenname-32) > 0 %then %do;
32245     +            %let checkgrp = %substr(&checkgrp, 1, 32);
32246     +          %end;
32248     +          %let choice = _VARIABLE_ ="&checkname";
32249     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
32251     +          /* if var not found in varmappings, delete variables; */
32252     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
32253     +          %if &vdsid eq 0 %then %do;
32254     +            put 'if name="&displayvar" then delete;';
32255     +            %let dispgrp = GRP_&displayvar;
32256     +            put 'if name="&dispgrp" then delete;';
32257     +          %end;
32259     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
32260     +          %let sobs = %sysfunc(fetch(&sdsid));
32261     +        %end;
32262     +      %end;
32263     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
32264     +   run;
32266     +%mend buildMetaCode;
32268     +%macro score;
32270     +   /* generate results table */
32271     +   %EM_GETNAME(key=COARSE, type=DATA);
32272     +   %EM_GETNAME(key=RESULTSTABLE, type=DATA);
32273     +   %EM_GETNAME(key=VARMAPPINGS, type=DATA);
32274     +   %EM_GETNAME(key=SPLITVALS, type=DATA);
32276     +   %EM_GENERATE_RESULTSTABLE(&EM_USER_COARSE, &EM_USER_RESULTSTABLE, &EM_USER_VARMAPPINGS);
32278     +   /* Generate Publish score code; same as flowscorecode */
32279     +   %EM_GETNAME(key=BINMAPPINGS, type=DATA);
32280     +   %buildScoreCode(&EM_FILE_EMFLOWSCORECODE, &EM_FILE_EMPUBLISHSCORECODE);
32282     +   filename deltaref "&EM_FILE_CDELTA_TRAIN";
32283     +   %buildMetaCode(DeltaCodeFile=deltaref);
32284     +   filename deltaref;
32286     +   /* generate results tables */
32287     +   %EM_REPORT(key=RESULTSTABLE, viewtype=DATA, block=MODEL, description=OUTPUTTABLE, autodisplay=Y);
32288     +   %EM_REPORT(key=RESULTSTABLE, viewtype=BAR, X=DISPLAY_VAR, Freq=_GINI_, TIPTEXT=_ROLE_, block=MODEL, description=STATPLOT, autodisplay=Y);
32290     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS4.BINNING_COARSE out=sortedcoarse nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 38 observations read from the data set EMWS4.BINNING_COARSE.
NOTE: 30 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDCOARSE has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS4.BINNING_VARMAPPINGS nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS4.BINNING_VARMAPPINGS has 8 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS4.BINNING_RESULTSTABLE (Keep = display_var _gini_ _role_ _new_role_ procLevel);
MPRINT(EM_GENERATE_RESULTSTABLE):   merge sortedcoarse(in=_a) EMWS4.BINNING_VARMAPPINGS(rename=(_Variable_ = DISPLAY_VAR)) ;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   length _role_ _new_role_ $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   label display_var = "Variable" _gini_ = "Gini Statistic" _role_ = "Calculated Role" _new_role_ = "New Role" LEVEL = "Level" ;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _gini_ < 20 then _role_ = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   else _role_ = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   if ^_a then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = 0;
MPRINT(EM_GENERATE_RESULTSTABLE):   _role_ = 'Rejected';
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: Variable LEVEL is uninitialized.
NOTE: There were 8 observations read from the data set WORK.SORTEDCOARSE.
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set EMWS4.BINNING_RESULTSTABLE has 8 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS4.BINNING_VariableSet out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
MPRINT(EM_GENERATE_RESULTSTABLE):   by NAME;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.BINNING_VARIABLESET.
NOTE: The data set WORK.OUTLABEL has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   data outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   set outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _label_ = '' then _label_ = _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: Variable _variable_ is uninitialized.
NOTE: There were 10 observations read from the data set WORK.OUTLABEL.
NOTE: The data set WORK.OUTLABEL has 10 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS4.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   merge EMWS4.BINNING_RESULTSTABLE(in=_a_) outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _a_ then output;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
WARNING: Multiple lengths were specified for the BY variable display_Var by input data sets. This might cause unexpected results.
NOTE: There were 8 observations read from the data set EMWS4.BINNING_RESULTSTABLE.
NOTE: There were 10 observations read from the data set WORK.OUTLABEL.
NOTE: The data set EMWS4.BINNING_RESULTSTABLE has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_RESULTSTABLE):   delete sortedcoarse outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: Deleting WORK.SORTEDCOARSE (memtype=DATA).
NOTE: Deleting WORK.OUTLABEL (memtype=DATA).
MPRINT(EM_GENERATE_RESULTSTABLE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS4.BINNING_RESULTSTABLE nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by DESCENDING _gini_ display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_RESULTSTABLE.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS4.BINNING_RESULTSTABLE has 8 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS4.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS4.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering" LEVEL = "Level";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = _N_;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = round(_GINI_, .001);
MPRINT(EM_GENERATE_RESULTSTABLE):   drop _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_RESULTSTABLE.
NOTE: The data set EMWS4.BINNING_RESULTSTABLE has 8 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   proc print data=EMWS4.BINNING_RESULTSTABLE label;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.BINNING_RESULTSTABLE.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS4.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS4.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   length role $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_DELINQ" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 1;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_NINQ" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 2;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_DEROG" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 3;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_DEBTINC" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 4;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_JOB" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 5;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_YOJ" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 6;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_MORTDUE" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 7;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "IMP_REASON" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 8;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;
 
NOTE: There were 38 observations read from the data set EMWS4.BINNING_COARSE.
NOTE: The data set EMWS4.BINNING_COARSE has 38 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(BUILDSCORECODE):   filename x "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(BUILDSCORECODE):   proc sort data=EMWS4.BINNING_SPLITVALS;
MPRINT(BUILDSCORECODE):   by display_var _split_Value_;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: The data set EMWS4.BINNING_SPLITVALS has 68 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=EMWS4.BINNING_BINMAPPINGS;
MPRINT(BUILDSCORECODE):   by display_var bin;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=EMWS4.BINNING_COARSE out=tempcoarse;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 38 observations read from the data set EMWS4.BINNING_COARSE.
NOTE: The data set WORK.TEMPCOARSE has 38 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge EMWS4.BINNING_SPLITVALS EMWS4.BINNING_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 60 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge EMWS4.BINNING_SPLITVALS(rename=(_GROUP_=MISSGRP)) EMWS4.BINNING_BINMAPPINGS(rename=( BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 68 observations read from the data set EMWS4.BINNING_SPLITVALS.
NOTE: There were 12 observations read from the data set EMWS4.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=temp_missing;
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP_MISSING has 8 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   if ^_a then delete;
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp ;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMP_MISSING.
NOTE: There were 38 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP_MISSING has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp temp_missing;
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if display_Var eq '' then delete;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 60 observations read from the data set WORK.TEMP.
NOTE: There were 8 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP has 60 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=EMWS4.BINNING_VARMAPPINGS out=tempmappings;
MPRINT(BUILDSCORECODE):   by _variable_;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 8 observations read from the data set EMWS4.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAPPINGS has 8 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=EMWS4.Impt_CMeta_TRAIN out=tempcmeta;
MPRINT(BUILDSCORECODE):   by NAME;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.TEMPCMETA has 10 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=temp;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 60 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 60 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempcoarse(keep=display_var _group_ role) ;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 60 observations read from the data set WORK.TEMP.
NOTE: There were 38 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP has 68 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if _group_ = . then delete;
MPRINT(BUILDSCORECODE):   if _variable_ = '' then delete;
MPRINT(BUILDSCORECODE):   run;
 
WARNING: Multiple lengths were specified for the BY variable DISPLAY_VAR by input data sets. This might cause unexpected results.
NOTE: There were 68 observations read from the data set WORK.TEMP.
NOTE: There were 8 observations read from the data set WORK.TEMPMAPPINGS.
NOTE: There were 10 observations read from the data set WORK.TEMPCMETA.
NOTE: The data set WORK.TEMP has 60 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   proc sort data=temp out=class;
MPRINT(BUILDSCORECODE):   by _variable_ _group_ LB;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 60 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 60 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X;
MPRINT(BUILDSCORECODE):   put "length _UFormat200 $200;";
MPRINT(BUILDSCORECODE):   put "drop _UFormat200;";
MPRINT(BUILDSCORECODE):   put "_UFormat200='';";
MPRINT(BUILDSCORECODE):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:01:12
 
NOTE: 3 records were written to the file X.
      The minimum record length was 15.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDSCORECODE):   data class_nosv;
MPRINT(BUILDSCORECODE):   set class;
MPRINT(BUILDSCORECODE):   if upcase(role)="INPUT";
MPRINT(BUILDSCORECODE):   run;
 
NOTE: There were 60 observations read from the data set WORK.CLASS.
NOTE: The data set WORK.CLASS_NOSV has 40 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X MOD;
MPRINT(BUILDSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDSCORECODE):   retain string flag endflag;
MPRINT(BUILDSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDSCORECODE):   by _variable_ _group_;
MPRINT(BUILDSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDSCORECODE):   if index gt 0 then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag = 0;
MPRINT(BUILDSCORECODE):   endflag = 1;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if LB ne . then do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   flag = 1;
MPRINT(BUILDSCORECODE):   string = "if";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._Group_ then do;
MPRINT(BUILDSCORECODE):   if UB ne . then do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag=1 then do;
MPRINT(BUILDSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDSCORECODE):   endflag = 0;
MPRINT(BUILDSCORECODE):   string="";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "end;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag=0;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   if format ne '' then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if type = 'N' then do;
MPRINT(BUILDSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else if type='C' then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   length = klength(tempstring);
MPRINT(BUILDSCORECODE):   if length < 195 then do;
MPRINT(BUILDSCORECODE):   string = tempstring;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put 'else';
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._group_ then do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else do;";
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   *end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      338:165   379:137   414:178   424:174   474:40    622:165   663:165   714:165   835:40    913:40    939:38
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:01:12
 
NOTE: 102 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 192.
NOTE: There were 40 observations read from the data set WORK.CLASS_NOSV.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDSCORECODE):   filename Y "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMPUBLISHSCORE.sas";
MPRINT(APPENDFILES):   data _null_;
MPRINT(APPENDFILES):   length c $256;
MPRINT(APPENDFILES):   fid1=fopen("Y",'A');
MPRINT(APPENDFILES):   fid2=fopen("X",'I');
MPRINT(APPENDFILES):   cval = finfo(fid2,'lrecl');
MPRINT(APPENDFILES):   put cval= fid1= fid2=;
MPRINT(APPENDFILES):   if (fid2 > 0) then do while(fread(fid2)=0);
MPRINT(APPENDFILES):   rc = fget(fid2,c,256);
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   rc = fput(fid1,strip(c));
MPRINT(APPENDFILES):   rc = fwrite(fid1);
MPRINT(APPENDFILES):   end;
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   put _msg_=;
MPRINT(APPENDFILES):   rc = fclose(fid1);
MPRINT(APPENDFILES):   rc = fclose(fid2);
MPRINT(APPENDFILES):   run;
 
cval=32767 fid1=1 fid2=2
_msg_=WARNING: End of file.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDSCORECODE):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("BINCODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "BINCODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
32291     +%macro delDir(folder=);
32292     +   %let filrf=mydir;
32293     +   %let rc=%sysfunc(filename(filrf,&folder));
32294     +   %let did=%sysfunc(dopen(&filrf));
32295     +
32296     +   %if &did %then %do;
32297     +       %let memcount=%sysfunc(dnum(&did));
32298     +       %if &memcount > 0 %then %do;
32299     +           %do i=1 %to &memcount;
32300     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
32301     +               data _null_;
32302     +                  fname="_temp&i";
32303     +                  rc=filename(fname,"&folder&em_dsep.&name");
32304     +                  if rc = 0 and fexist(fname) then
32305     +                     rc=fdelete(fname);
32306     +                  rc=filename(fname);
32307     +               run;
32308     +           %end;
32309     +       %end;
32310     +       %let rc=%sysfunc(dclose(&did));
32311     +   %end;
32312     +   %let rc = %sysfunc(fdelete(&filrf));
32313     +   %let rc=%sysfunc(filename(filrf));
32314     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(BUILDOPTSCORECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length rc $200;
MPRINT(BUILDOPTSCORECODE):   rc = dcreate('BINCODE', "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING");
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\GRP_IMP_DELINQ.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="IMP_DELINQ";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      176:165   228:137   268:178   280:174   340:165   532:165   582:165   642:165   794:40    882:40    914:38
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\GRP_IMP_DELINQ.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:06:05
 
NOTE: 34 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 176.
NOTE: There were 14 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='IMP_DELINQ';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\GRP_IMP_DEROG.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="IMP_DEROG";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1078:165   1130:137   1170:178   1182:174   1242:165   1434:165   1484:165   1544:165   1696:40    1784:40    1816:38
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\GRP_IMP_DEROG.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:06:05
 
NOTE: 29 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 163.
NOTE: There were 11 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='IMP_DEROG';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\GRP_IMP_NINQ.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="IMP_NINQ";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1980:165   2032:137   2072:178   2084:174   2144:165   2336:165   2386:165   2446:165   2598:40    2686:40    2718:38
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\GRP_IMP_NINQ.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:06:05
 
NOTE: 39 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 192.
NOTE: There were 15 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='IMP_NINQ';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   put "length _UFormat200 $200;";
MPRINT(BUILDOPTSCORECODE):   put "drop _UFormat200;";
MPRINT(BUILDOPTSCORECODE):   put "_UFormat200='';";
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\BINCODE\_ALL_.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:06:05
 
NOTE: 3 records were written to the file _F1.
      The minimum record length was 15.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDOPTSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "BINNING_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   proc datasets lib=EMWS4 nolist;
MPRINT(BUILDOPTSCORECODE):   delete BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: The file EMWS4.BINNING_EMSCOREVAR (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(BUILDOPTSCORECODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
did= 1
MPRINT(BUILDOPTSCORECODE):   data EMWS4.BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   length Name $32 formula $70 file $200;
MPRINT(BUILDOPTSCORECODE):   keep NAME Formula file;
MPRINT(BUILDOPTSCORECODE):   formula = '';
MPRINT(BUILDOPTSCORECODE):   name='';
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_IMP_DELINQ";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_IMP_DELINQ.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_IMP_DEROG";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_IMP_DEROG.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_IMP_NINQ";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_IMP_NINQ.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   run;
 
NOTE: The data set EMWS4.BINNING_EMSCOREVAR has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   proc datasets library=work nolist;
MPRINT(BUILDSCORECODE):   delete class class_nosv temp temp_missing tempmappings tempcmeta;
MPRINT(BUILDSCORECODE):   run;
 
NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.CLASS_NOSV (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPINGS (memtype=DATA).
NOTE: Deleting WORK.TEMPCMETA (memtype=DATA).
MPRINT(BUILDSCORECODE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\CDELTA_TRAIN.sas";
MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file
MPRINT(BUILDMETACODE):   deltaref;
MPRINT(BUILDMETACODE):   put "if name = 'IMP_DELINQ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_DELINQ' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_DELINQ' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_NINQ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_NINQ' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_NINQ' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_DEROG' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_DEROG' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_DEROG' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_DEBTINC' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_DEBTINC' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_DEBTINC' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_JOB' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_JOB' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_JOB' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_YOJ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_YOJ' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_YOJ' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_MORTDUE' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_MORTDUE' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_MORTDUE' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'IMP_REASON' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_REASON' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_IMP_REASON' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   run;
 
NOTE: The file DELTAREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:01:12
 
NOTE: 24 records were written to the file DELTAREF.
      The minimum record length was 41.
      The maximum record length was 49.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.01 seconds
 
 
MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref MOD;
MPRINT(BUILDMETACODE):   run;
 
NOTE: The file DELTAREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1138,
      Last Modified=16 March 2021 00:06:05,
      Create Time=16 March 2021 00:01:12
 
NOTE: 0 records were written to the file DELTAREF.
NOTE: DATA statement used (Total process time):
      real time           0.44 seconds
      cpu time            0.09 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref;
NOTE: Fileref DELTAREF has been deassigned.
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "OUTPUTTABLE";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.74427800054861;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "STATPLOT";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_GINI_";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_ROLE_";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89204269223475;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32315      *------------------------------------------------------------*;
32316      * End SCORE: BINNING;
32317      *------------------------------------------------------------*;
32318
 
32319      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32320      *------------------------------------------------------------*;
32321      * BINNING: Scoring DATA data;
32322      *------------------------------------------------------------*;
32323      data EMWS4.BINNING_TRAIN
32324      / view=EMWS4.BINNING_TRAIN
32325      ;
MPRINT(EM_DIAGRAM):   data EMWS4.BINNING_TRAIN / view=EMWS4.BINNING_TRAIN ;
32326      set EMWS4.Impt_TRAIN
32327      ;
MPRINT(EM_DIAGRAM):   set EMWS4.Impt_TRAIN ;
32328      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas.
32329     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
32330     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
32331     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
32332     +
32333     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32334     +* Variable: IMP_DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_DELINQ;
32335     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32336     +LABEL GRP_IMP_DELINQ =
32337     +'Grouped: Imputed DELINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_DELINQ = 'Grouped: Imputed DELINQ';
32338     +
32339     +if MISSING(IMP_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_DELINQ) then do;
32340     +GRP_IMP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 1;
32341     +end;
MPRINT(EM_DIAGRAM):   end;
32342     +else if NOT MISSING(IMP_DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_DELINQ) then do;
32343     +if (IMP_DELINQ eq 0
32344     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_DELINQ eq 0 ) then do;
32345     +GRP_IMP_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 2;
32346     +end;
MPRINT(EM_DIAGRAM):   end;
32347     +else
32348     +if (IMP_DELINQ eq 1
32349     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 1 ) then do;
32350     +GRP_IMP_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 3;
32351     +end;
MPRINT(EM_DIAGRAM):   end;
32352     +else
32353     +if (IMP_DELINQ eq 10 OR IMP_DELINQ eq 11 OR IMP_DELINQ eq 12 OR IMP_DELINQ eq 13 OR IMP_DELINQ eq 15 OR IMP_DELINQ eq 2 OR IMP_DELINQ eq 3 OR IMP_DELINQ eq 4 OR IMP_DELINQ eq 5
32354     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 10 OR IMP_DELINQ eq 11 OR IMP_DELINQ eq 12 OR IMP_DELINQ eq 13 OR IMP_DELINQ eq 15 OR IMP_DELINQ eq 2 OR IMP_DELINQ eq 3 OR IMP_DELINQ eq 4 OR IMP_DELINQ eq 5 ) then do;
32355     +GRP_IMP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 4;
32356     +end;
MPRINT(EM_DIAGRAM):   end;
32357     +else
32358     +if (IMP_DELINQ eq 6 OR IMP_DELINQ eq 7 OR IMP_DELINQ eq 8
32359     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 6 OR IMP_DELINQ eq 7 OR IMP_DELINQ eq 8 ) then do;
32360     +GRP_IMP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 4;
32361     +end;
MPRINT(EM_DIAGRAM):   end;
32362     +else do;
MPRINT(EM_DIAGRAM):   else do;
32363     +GRP_IMP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 1;
32364     +end;
MPRINT(EM_DIAGRAM):   end;
32365     +end;
MPRINT(EM_DIAGRAM):   end;
32366     +
32367     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32368     +* Variable: IMP_DEROG;
MPRINT(EM_DIAGRAM):   * Variable: IMP_DEROG;
32369     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32370     +LABEL GRP_IMP_DEROG =
32371     +'Grouped: Imputed DEROG';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_DEROG = 'Grouped: Imputed DEROG';
32372     +
32373     +if MISSING(IMP_DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_DEROG) then do;
32374     +GRP_IMP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 1;
32375     +end;
MPRINT(EM_DIAGRAM):   end;
32376     +else if NOT MISSING(IMP_DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_DEROG) then do;
32377     +if (IMP_DEROG eq 0
32378     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_DEROG eq 0 ) then do;
32379     +GRP_IMP_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 2;
32380     +end;
MPRINT(EM_DIAGRAM):   end;
32381     +else
32382     +if (IMP_DEROG eq 1
32383     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DEROG eq 1 ) then do;
32384     +GRP_IMP_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 3;
32385     +end;
MPRINT(EM_DIAGRAM):   end;
32386     +else
32387     +if (IMP_DEROG eq 10 OR IMP_DEROG eq 2 OR IMP_DEROG eq 3 OR IMP_DEROG eq 4 OR IMP_DEROG eq 5 OR IMP_DEROG eq 6 OR IMP_DEROG eq 7 OR IMP_DEROG eq 8 OR IMP_DEROG eq 9
32388     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DEROG eq 10 OR IMP_DEROG eq 2 OR IMP_DEROG eq 3 OR IMP_DEROG eq 4 OR IMP_DEROG eq 5 OR IMP_DEROG eq 6 OR IMP_DEROG eq 7 OR IMP_DEROG eq 8 OR IMP_DEROG eq 9 ) then do;
32389     +GRP_IMP_DEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 4;
32390     +end;
MPRINT(EM_DIAGRAM):   end;
32391     +else do;
MPRINT(EM_DIAGRAM):   else do;
32392     +GRP_IMP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 1;
32393     +end;
MPRINT(EM_DIAGRAM):   end;
32394     +end;
MPRINT(EM_DIAGRAM):   end;
32395     +
32396     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32397     +* Variable: IMP_NINQ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_NINQ;
32398     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32399     +LABEL GRP_IMP_NINQ =
32400     +'Grouped: Imputed NINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_NINQ = 'Grouped: Imputed NINQ';
32401     +
32402     +if MISSING(IMP_NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_NINQ) then do;
32403     +GRP_IMP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 1;
32404     +end;
MPRINT(EM_DIAGRAM):   end;
32405     +else if NOT MISSING(IMP_NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_NINQ) then do;
32406     +if (IMP_NINQ eq 0
32407     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_NINQ eq 0 ) then do;
32408     +GRP_IMP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 2;
32409     +end;
MPRINT(EM_DIAGRAM):   end;
32410     +else
32411     +if (IMP_NINQ eq 1
32412     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 1 ) then do;
32413     +GRP_IMP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 3;
32414     +end;
MPRINT(EM_DIAGRAM):   end;
32415     +else
32416     +if (IMP_NINQ eq 2
32417     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 2 ) then do;
32418     +GRP_IMP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 4;
32419     +end;
MPRINT(EM_DIAGRAM):   end;
32420     +else
32421     +if (IMP_NINQ eq 3
32422     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 3 ) then do;
32423     +GRP_IMP_NINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 5;
32424     +end;
MPRINT(EM_DIAGRAM):   end;
32425     +else
32426     +if (IMP_NINQ eq 10 OR IMP_NINQ eq 11 OR IMP_NINQ eq 12 OR IMP_NINQ eq 13 OR IMP_NINQ eq 14 OR IMP_NINQ eq 4 OR IMP_NINQ eq 5 OR IMP_NINQ eq 6 OR IMP_NINQ eq 7 OR IMP_NINQ eq 8 OR IMP_NINQ eq 9
32427     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 10 OR IMP_NINQ eq 11 OR IMP_NINQ eq 12 OR IMP_NINQ eq 13 OR IMP_NINQ eq 14 OR IMP_NINQ eq 4 OR IMP_NINQ eq 5 OR IMP_NINQ eq 6 OR IMP_NINQ eq 7 OR IMP_NINQ eq 8 OR IMP_NINQ eq 9 ) then do;
32428     +GRP_IMP_NINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 6;
32429     +end;
MPRINT(EM_DIAGRAM):   end;
32430     +else do;
MPRINT(EM_DIAGRAM):   else do;
32431     +GRP_IMP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 1;
32432     +end;
MPRINT(EM_DIAGRAM):   end;
32433     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32434      run;
 
NOTE: DATA STEP view saved on file EMWS4.BINNING_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
32435      quit;
32436      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
32437      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32438      *------------------------------------------------------------*;
32439      * BINNING: Scoring VALIDATE data;
32440      *------------------------------------------------------------*;
32441      data EMWS4.BINNING_VALIDATE
32442      / view=EMWS4.BINNING_VALIDATE
32443      ;
MPRINT(EM_DIAGRAM):   data EMWS4.BINNING_VALIDATE / view=EMWS4.BINNING_VALIDATE ;
32444      set EMWS4.Impt_VALIDATE
32445      ;
MPRINT(EM_DIAGRAM):   set EMWS4.Impt_VALIDATE ;
32446      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas.
32447     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
32448     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
32449     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
32450     +
32451     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32452     +* Variable: IMP_DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_DELINQ;
32453     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32454     +LABEL GRP_IMP_DELINQ =
32455     +'Grouped: Imputed DELINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_DELINQ = 'Grouped: Imputed DELINQ';
32456     +
32457     +if MISSING(IMP_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_DELINQ) then do;
32458     +GRP_IMP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 1;
32459     +end;
MPRINT(EM_DIAGRAM):   end;
32460     +else if NOT MISSING(IMP_DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_DELINQ) then do;
32461     +if (IMP_DELINQ eq 0
32462     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_DELINQ eq 0 ) then do;
32463     +GRP_IMP_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 2;
32464     +end;
MPRINT(EM_DIAGRAM):   end;
32465     +else
32466     +if (IMP_DELINQ eq 1
32467     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 1 ) then do;
32468     +GRP_IMP_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 3;
32469     +end;
MPRINT(EM_DIAGRAM):   end;
32470     +else
32471     +if (IMP_DELINQ eq 10 OR IMP_DELINQ eq 11 OR IMP_DELINQ eq 12 OR IMP_DELINQ eq 13 OR IMP_DELINQ eq 15 OR IMP_DELINQ eq 2 OR IMP_DELINQ eq 3 OR IMP_DELINQ eq 4 OR IMP_DELINQ eq 5
32472     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 10 OR IMP_DELINQ eq 11 OR IMP_DELINQ eq 12 OR IMP_DELINQ eq 13 OR IMP_DELINQ eq 15 OR IMP_DELINQ eq 2 OR IMP_DELINQ eq 3 OR IMP_DELINQ eq 4 OR IMP_DELINQ eq 5 ) then do;
32473     +GRP_IMP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 4;
32474     +end;
MPRINT(EM_DIAGRAM):   end;
32475     +else
32476     +if (IMP_DELINQ eq 6 OR IMP_DELINQ eq 7 OR IMP_DELINQ eq 8
32477     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 6 OR IMP_DELINQ eq 7 OR IMP_DELINQ eq 8 ) then do;
32478     +GRP_IMP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 4;
32479     +end;
MPRINT(EM_DIAGRAM):   end;
32480     +else do;
MPRINT(EM_DIAGRAM):   else do;
32481     +GRP_IMP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 1;
32482     +end;
MPRINT(EM_DIAGRAM):   end;
32483     +end;
MPRINT(EM_DIAGRAM):   end;
32484     +
32485     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32486     +* Variable: IMP_DEROG;
MPRINT(EM_DIAGRAM):   * Variable: IMP_DEROG;
32487     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32488     +LABEL GRP_IMP_DEROG =
32489     +'Grouped: Imputed DEROG';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_DEROG = 'Grouped: Imputed DEROG';
32490     +
32491     +if MISSING(IMP_DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_DEROG) then do;
32492     +GRP_IMP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 1;
32493     +end;
MPRINT(EM_DIAGRAM):   end;
32494     +else if NOT MISSING(IMP_DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_DEROG) then do;
32495     +if (IMP_DEROG eq 0
32496     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_DEROG eq 0 ) then do;
32497     +GRP_IMP_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 2;
32498     +end;
MPRINT(EM_DIAGRAM):   end;
32499     +else
32500     +if (IMP_DEROG eq 1
32501     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DEROG eq 1 ) then do;
32502     +GRP_IMP_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 3;
32503     +end;
MPRINT(EM_DIAGRAM):   end;
32504     +else
32505     +if (IMP_DEROG eq 10 OR IMP_DEROG eq 2 OR IMP_DEROG eq 3 OR IMP_DEROG eq 4 OR IMP_DEROG eq 5 OR IMP_DEROG eq 6 OR IMP_DEROG eq 7 OR IMP_DEROG eq 8 OR IMP_DEROG eq 9
32506     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DEROG eq 10 OR IMP_DEROG eq 2 OR IMP_DEROG eq 3 OR IMP_DEROG eq 4 OR IMP_DEROG eq 5 OR IMP_DEROG eq 6 OR IMP_DEROG eq 7 OR IMP_DEROG eq 8 OR IMP_DEROG eq 9 ) then do;
32507     +GRP_IMP_DEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 4;
32508     +end;
MPRINT(EM_DIAGRAM):   end;
32509     +else do;
MPRINT(EM_DIAGRAM):   else do;
32510     +GRP_IMP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 1;
32511     +end;
MPRINT(EM_DIAGRAM):   end;
32512     +end;
MPRINT(EM_DIAGRAM):   end;
32513     +
32514     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32515     +* Variable: IMP_NINQ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_NINQ;
32516     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32517     +LABEL GRP_IMP_NINQ =
32518     +'Grouped: Imputed NINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_NINQ = 'Grouped: Imputed NINQ';
32519     +
32520     +if MISSING(IMP_NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_NINQ) then do;
32521     +GRP_IMP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 1;
32522     +end;
MPRINT(EM_DIAGRAM):   end;
32523     +else if NOT MISSING(IMP_NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_NINQ) then do;
32524     +if (IMP_NINQ eq 0
32525     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_NINQ eq 0 ) then do;
32526     +GRP_IMP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 2;
32527     +end;
MPRINT(EM_DIAGRAM):   end;
32528     +else
32529     +if (IMP_NINQ eq 1
32530     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 1 ) then do;
32531     +GRP_IMP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 3;
32532     +end;
MPRINT(EM_DIAGRAM):   end;
32533     +else
32534     +if (IMP_NINQ eq 2
32535     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 2 ) then do;
32536     +GRP_IMP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 4;
32537     +end;
MPRINT(EM_DIAGRAM):   end;
32538     +else
32539     +if (IMP_NINQ eq 3
32540     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 3 ) then do;
32541     +GRP_IMP_NINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 5;
32542     +end;
MPRINT(EM_DIAGRAM):   end;
32543     +else
32544     +if (IMP_NINQ eq 10 OR IMP_NINQ eq 11 OR IMP_NINQ eq 12 OR IMP_NINQ eq 13 OR IMP_NINQ eq 14 OR IMP_NINQ eq 4 OR IMP_NINQ eq 5 OR IMP_NINQ eq 6 OR IMP_NINQ eq 7 OR IMP_NINQ eq 8 OR IMP_NINQ eq 9
32545     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 10 OR IMP_NINQ eq 11 OR IMP_NINQ eq 12 OR IMP_NINQ eq 13 OR IMP_NINQ eq 14 OR IMP_NINQ eq 4 OR IMP_NINQ eq 5 OR IMP_NINQ eq 6 OR IMP_NINQ eq 7 OR IMP_NINQ eq 8 OR IMP_NINQ eq 9 ) then do;
32546     +GRP_IMP_NINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 6;
32547     +end;
MPRINT(EM_DIAGRAM):   end;
32548     +else do;
MPRINT(EM_DIAGRAM):   else do;
32549     +GRP_IMP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 1;
32550     +end;
MPRINT(EM_DIAGRAM):   end;
32551     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32552      run;
 
NOTE: DATA STEP view saved on file EMWS4.BINNING_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
32553      quit;
32554      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
32555      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32556      *------------------------------------------------------------*;
32557      * BINNING: Scoring TEST data;
32558      *------------------------------------------------------------*;
32559      data EMWS4.BINNING_TEST
32560      / view=EMWS4.BINNING_TEST
32561      ;
MPRINT(EM_DIAGRAM):   data EMWS4.BINNING_TEST / view=EMWS4.BINNING_TEST ;
32562      set EMWS4.Impt_TEST
32563      ;
MPRINT(EM_DIAGRAM):   set EMWS4.Impt_TEST ;
32564      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMFLOWSCORE.sas.
32565     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
32566     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
32567     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
32568     +
32569     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32570     +* Variable: IMP_DELINQ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_DELINQ;
32571     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32572     +LABEL GRP_IMP_DELINQ =
32573     +'Grouped: Imputed DELINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_DELINQ = 'Grouped: Imputed DELINQ';
32574     +
32575     +if MISSING(IMP_DELINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_DELINQ) then do;
32576     +GRP_IMP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 1;
32577     +end;
MPRINT(EM_DIAGRAM):   end;
32578     +else if NOT MISSING(IMP_DELINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_DELINQ) then do;
32579     +if (IMP_DELINQ eq 0
32580     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_DELINQ eq 0 ) then do;
32581     +GRP_IMP_DELINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 2;
32582     +end;
MPRINT(EM_DIAGRAM):   end;
32583     +else
32584     +if (IMP_DELINQ eq 1
32585     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 1 ) then do;
32586     +GRP_IMP_DELINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 3;
32587     +end;
MPRINT(EM_DIAGRAM):   end;
32588     +else
32589     +if (IMP_DELINQ eq 10 OR IMP_DELINQ eq 11 OR IMP_DELINQ eq 12 OR IMP_DELINQ eq 13 OR IMP_DELINQ eq 15 OR IMP_DELINQ eq 2 OR IMP_DELINQ eq 3 OR IMP_DELINQ eq 4 OR IMP_DELINQ eq 5
32590     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 10 OR IMP_DELINQ eq 11 OR IMP_DELINQ eq 12 OR IMP_DELINQ eq 13 OR IMP_DELINQ eq 15 OR IMP_DELINQ eq 2 OR IMP_DELINQ eq 3 OR IMP_DELINQ eq 4 OR IMP_DELINQ eq 5 ) then do;
32591     +GRP_IMP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 4;
32592     +end;
MPRINT(EM_DIAGRAM):   end;
32593     +else
32594     +if (IMP_DELINQ eq 6 OR IMP_DELINQ eq 7 OR IMP_DELINQ eq 8
32595     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DELINQ eq 6 OR IMP_DELINQ eq 7 OR IMP_DELINQ eq 8 ) then do;
32596     +GRP_IMP_DELINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 4;
32597     +end;
MPRINT(EM_DIAGRAM):   end;
32598     +else do;
MPRINT(EM_DIAGRAM):   else do;
32599     +GRP_IMP_DELINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DELINQ = 1;
32600     +end;
MPRINT(EM_DIAGRAM):   end;
32601     +end;
MPRINT(EM_DIAGRAM):   end;
32602     +
32603     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32604     +* Variable: IMP_DEROG;
MPRINT(EM_DIAGRAM):   * Variable: IMP_DEROG;
32605     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32606     +LABEL GRP_IMP_DEROG =
32607     +'Grouped: Imputed DEROG';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_DEROG = 'Grouped: Imputed DEROG';
32608     +
32609     +if MISSING(IMP_DEROG) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_DEROG) then do;
32610     +GRP_IMP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 1;
32611     +end;
MPRINT(EM_DIAGRAM):   end;
32612     +else if NOT MISSING(IMP_DEROG) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_DEROG) then do;
32613     +if (IMP_DEROG eq 0
32614     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_DEROG eq 0 ) then do;
32615     +GRP_IMP_DEROG = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 2;
32616     +end;
MPRINT(EM_DIAGRAM):   end;
32617     +else
32618     +if (IMP_DEROG eq 1
32619     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DEROG eq 1 ) then do;
32620     +GRP_IMP_DEROG = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 3;
32621     +end;
MPRINT(EM_DIAGRAM):   end;
32622     +else
32623     +if (IMP_DEROG eq 10 OR IMP_DEROG eq 2 OR IMP_DEROG eq 3 OR IMP_DEROG eq 4 OR IMP_DEROG eq 5 OR IMP_DEROG eq 6 OR IMP_DEROG eq 7 OR IMP_DEROG eq 8 OR IMP_DEROG eq 9
32624     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_DEROG eq 10 OR IMP_DEROG eq 2 OR IMP_DEROG eq 3 OR IMP_DEROG eq 4 OR IMP_DEROG eq 5 OR IMP_DEROG eq 6 OR IMP_DEROG eq 7 OR IMP_DEROG eq 8 OR IMP_DEROG eq 9 ) then do;
32625     +GRP_IMP_DEROG = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 4;
32626     +end;
MPRINT(EM_DIAGRAM):   end;
32627     +else do;
MPRINT(EM_DIAGRAM):   else do;
32628     +GRP_IMP_DEROG = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_DEROG = 1;
32629     +end;
MPRINT(EM_DIAGRAM):   end;
32630     +end;
MPRINT(EM_DIAGRAM):   end;
32631     +
32632     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32633     +* Variable: IMP_NINQ;
MPRINT(EM_DIAGRAM):   * Variable: IMP_NINQ;
32634     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32635     +LABEL GRP_IMP_NINQ =
32636     +'Grouped: Imputed NINQ';
MPRINT(EM_DIAGRAM):   LABEL GRP_IMP_NINQ = 'Grouped: Imputed NINQ';
32637     +
32638     +if MISSING(IMP_NINQ) then do;
MPRINT(EM_DIAGRAM):   if MISSING(IMP_NINQ) then do;
32639     +GRP_IMP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 1;
32640     +end;
MPRINT(EM_DIAGRAM):   end;
32641     +else if NOT MISSING(IMP_NINQ) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(IMP_NINQ) then do;
32642     +if (IMP_NINQ eq 0
32643     +) then do;
MPRINT(EM_DIAGRAM):   if (IMP_NINQ eq 0 ) then do;
32644     +GRP_IMP_NINQ = 2;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 2;
32645     +end;
MPRINT(EM_DIAGRAM):   end;
32646     +else
32647     +if (IMP_NINQ eq 1
32648     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 1 ) then do;
32649     +GRP_IMP_NINQ = 3;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 3;
32650     +end;
MPRINT(EM_DIAGRAM):   end;
32651     +else
32652     +if (IMP_NINQ eq 2
32653     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 2 ) then do;
32654     +GRP_IMP_NINQ = 4;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 4;
32655     +end;
MPRINT(EM_DIAGRAM):   end;
32656     +else
32657     +if (IMP_NINQ eq 3
32658     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 3 ) then do;
32659     +GRP_IMP_NINQ = 5;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 5;
32660     +end;
MPRINT(EM_DIAGRAM):   end;
32661     +else
32662     +if (IMP_NINQ eq 10 OR IMP_NINQ eq 11 OR IMP_NINQ eq 12 OR IMP_NINQ eq 13 OR IMP_NINQ eq 14 OR IMP_NINQ eq 4 OR IMP_NINQ eq 5 OR IMP_NINQ eq 6 OR IMP_NINQ eq 7 OR IMP_NINQ eq 8 OR IMP_NINQ eq 9
32663     +) then do;
MPRINT(EM_DIAGRAM):   else if (IMP_NINQ eq 10 OR IMP_NINQ eq 11 OR IMP_NINQ eq 12 OR IMP_NINQ eq 13 OR IMP_NINQ eq 14 OR IMP_NINQ eq 4 OR IMP_NINQ eq 5 OR IMP_NINQ eq 6 OR IMP_NINQ eq 7 OR IMP_NINQ eq 8 OR IMP_NINQ eq 9 ) then do;
32664     +GRP_IMP_NINQ = 6;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 6;
32665     +end;
MPRINT(EM_DIAGRAM):   end;
32666     +else do;
MPRINT(EM_DIAGRAM):   else do;
32667     +GRP_IMP_NINQ = 1;
MPRINT(EM_DIAGRAM):   GRP_IMP_NINQ = 1;
32668     +end;
MPRINT(EM_DIAGRAM):   end;
32669     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
32670      run;
 
NOTE: DATA STEP view saved on file EMWS4.BINNING_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
32671      quit;
32672      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
32674      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
32675      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
32676      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
32677      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32678      * BINNING: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * BINNING: Computing metadata for TRAIN data;
32679      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS4.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS4.BINNING_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS4.BINNING_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS4.BINNING_TRAIN out=WORK.M3WP2BTU noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3WP2BTU;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3WP2BTU(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3WP2BTU;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3WP2BTU;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M15YPMYE NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2IV9ZD4(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   set WORK.M15YPMYE;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS4.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS4.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.BINNING_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "BINNING";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = 'IMP_DELINQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_DELINQ' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_DELINQ' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_NINQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_NINQ' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_NINQ' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_DEROG' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_DEROG' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_DEROG' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_DEBTINC' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_DEBTINC' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_DEBTINC' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_JOB' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_JOB' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_JOB' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_YOJ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_YOJ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_YOJ' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_MORTDUE' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_MORTDUE' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_MORTDUE' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'IMP_REASON' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_REASON' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_IMP_REASON' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS4.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS4.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS4.BINNING_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:07" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                16 March 2021
Time:                00:06:07
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1SBOAHK "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1SBOAHK new;
MPRINT(EM_DIAGRAM):   run;
33064      %let EMEXCEPTIONSTRING=;
33065      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
33066      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
33067      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33068      %let EM_ACTION = REPORT;
33069      %let syscc = 0;
33070      %macro main;
33071
33072        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
33073        %include temp;
33074        filename temp;
33075
33076        %setProperties;
33077
33078        %if %upcase(&EM_ACTION) = CREATE %then %do;
33079          filename temp catalog 'sashelp.emmdfy.binning_create.source';
33080          %include temp;
33081          filename temp;
33082
33083          %create;
33084        %end;
33085
33086         %else
33087         %if %upcase(&EM_ACTION) = TRAIN %then %do;
33088
33089             filename temp catalog 'sashelp.emmdfy.binning_train.source';
33090             %include temp;
33091             filename temp;
33092             %train;
33093         %end;
33094
33095        %else
33096        %if %upcase(&EM_ACTION) = SCORE %then %do;
33097          filename temp catalog 'sashelp.emmdfy.binning_score.source';
33098          %include temp;
33099          filename temp;
33100
33101          %score;
33102
33103        %end;
33104
33105        %else
33106        %if %upcase(&EM_ACTION) = REPORT %then %do;
33107
33108             filename temp catalog 'sashelp.emmdfy.binning_report.source';
33109             %include temp;
33110             filename temp;
33111
33112             %report;
33113         %end;
33114
33115         %doendm:
33116      %mend main;
33117
33118      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
33120     +%macro SetProperties;
33122     +     /* IGN options */
33123     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
33124     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
33125     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
33127     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
33128     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
33129     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
33130     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
33131     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
33132     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
33133     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
33134     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
33135     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
33136     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
33137     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
33138     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
33139     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
33140     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
33142     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
33143     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
33144     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
33147     +%mend SetProperties;
33148     +%macro appendfiles(fileref1, fileref2);
33149     +     data _null_;
33150     +       length c $256;
33151     +       fid1=fopen("&fileref1",'A');
33152     +       fid2=fopen("&fileref2",'I');
33153     +       cval = finfo(fid2,'lrecl');
33154     +       put cval= fid1= fid2=;
33155     +       if (fid2 > 0) then
33156     +         do while(fread(fid2)=0);
33157     +           rc = fget(fid2,c,256);
33158     +           _msg_=sysmsg();
33159     +           /* put rc= c= _msg_=; */
33160     +           rc = fput(fid1,strip(c));
33161     +           rc = fwrite(fid1);
33162     +         end;
33163     +         _msg_=sysmsg();
33164     +         put _msg_=;
33165     +       rc = fclose(fid1);
33166     +       rc = fclose(fid2);
33167     +     run;
33168     +%mend appendfiles;
33170     +%macro buildOptScoreCode;
33172     +    %em_register(key=BINCODE, type=FOLDER);
33174     +    filename x catalog 'sashelp.emutil.em_deldir.source';
33175     +    %inc x;
33176     +    filename x;
33177     +    %delDir(folder=%nrbquote(&em_user_bincode));
33179     +    data _null_; length rc $200;
33180     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
33181     +    run;
33183     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
33185     +    %let dsid = %sysfunc(open(class_nosv));
33186     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
33187     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
33189     +    %let oldname=;
33190     +    %do %while(^%sysfunc(fetch(&dsid)));
33191     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
33192     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
33194     +        %if &name ne &oldname %then %do;
33195     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
33196     +             data _null_;
33197     +                length string $1024 flag endflag 8;
33198     +                retain string flag endflag;
33199     +                set class_nosv end=eof;
33200     +                where DISPLAY_VAR ="&name";
33201     +                by _variable_ _group_;
33202     +                file _F1;
33203     +                index = kindex(_variable_, "BIN_");
33204     +                if index gt 0 then do;
33205     +                   if first._variable_ then do;
33206     +                      put ' ';
33207     +                      put "&EM_CODEBAR;";
33208     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33209     +                      put string;
33210     +                      put "&EM_CODEBAR;";
33212     +                      if origLabel ne "" then do;
33213     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33214     +                            put string;
33215     +                            string = tranwrd(origLabel,"'","''");
33216     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33217     +                            put string;
33218     +                      end;
33219     +                      else do;
33220     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33221     +                             put string;
33222     +                      end;
33224     +                      put ' ';
33226     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33227     +                      put string;
33228     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33229     +                      put string;
33230     +                      put "end;";
33231     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33232     +                      put string;
33233     +                   end;
33234     +                   if first._group_ then do;
33235     +                      flag = 0;
33236     +                      endflag = 1;
33237     +                      if ^first._variable_ then do;
33238     +                         put "else";
33239     +                      end;
33240     +                      if LB ne . then do;
33241     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
33242     +                      end;
33243     +                      else do;
33244     +                         flag = 1;
33245     +                         string = "if";
33246     +                      end;
33247     +                   end;
33248     +                   if last._Group_ then do;
33249     +                      if UB ne . then do;
33250     +                        if flag ne 1 then do;
33251     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33252     +                        end;
33253     +                        else do;
33254     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33255     +                        end;
33256     +                      end;
33257     +                      else do;
33258     +                         if flag=1 then do;
33259     +                            string = strip(DISPLAY_VAR) ;
33260     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
33261     +                            endflag=0;
33262     +                            string="";
33263     +                         end;
33264     +                         else do;
33265     +                            string = strip(string)!!" then do;";
33266     +                         end;
33267     +                      end;
33268     +                      put string;
33269     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33270     +                      put string;
33271     +                      if endflag eq 1 then do;
33272     +                        put "end;";
33273     +                      end;
33274     +                   end;
33275     +                   if last._variable_ then do;
33276     +                     string = "end;";
33277     +                     put string;
33278     +                   end;
33280     +                end;
33281     +                else do;
33282     +                   _split_value_ = tranwrd(_split_value_,"'","''");
33283     +                   if first._group_ then do;
33284     +                      flag=0;
33285     +                      if ^first._variable_ then
33286     +                         put 'else';
33287     +                      else do;
33288     +                         put ' ';
33289     +                         put "&EM_CODEBAR;";
33290     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33291     +                         put string;
33292     +                         put "&EM_CODEBAR;";
33294     +                         if origLabel ne "" then do;
33295     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33296     +                               put string;
33297     +                               string = tranwrd(origLabel,"'","''");
33298     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33299     +                               put string;
33300     +                         end;
33301     +                         else do;
33302     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33303     +                               put string;
33304     +                         end;
33306     +                         put ' ';
33308     +                         if format ne '' then do;
33309     +                            if first._variable_ then do;
33310     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
33311     +                               put string;
33312     +                               string = '%dmnormip(_UFormat200);';
33313     +                               put string;
33315     +                               string ="if MISSING(_UFormat200) then do;";
33316     +                               put string;
33317     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33318     +                               put string;
33319     +                               put "end;";
33321     +                               string="else if NOT MISSING(_UFormat200) then do;";
33322     +                               put string;
33324     +                            end;
33325     +                         end;
33326     +                         else do;
33327     +                            if type = 'N' then do;
33328     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33329     +                              put string;
33330     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33331     +                              put string;
33332     +                              put "end;";
33334     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33335     +                              put string;
33336     +                            end;
33337     +                            else if type='C' then do;
33338     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
33339     +                              put string;
33340     +                              string = '%dmnormip(_UFormat200);';
33341     +                              put string;
33343     +                              string ="if MISSING(_UFormat200) then do;";
33344     +                              put string;
33345     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33346     +                              put string;
33347     +                              put "end;";
33349     +                              string="else if NOT MISSING(_UFormat200) then do;";
33350     +                              put string;
33351     +                              string = '%dmnormip(_UFormat200);';
33352     +                              put string;
33353     +                           end;
33354     +                         end;
33355     +                      end;
33356     +                      if format ne '' OR type='C' then do;
33357     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33358     +                      end;
33359     +                      else do;
33360     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33361     +                      end;
33362     +                   end;
33363     +                   else do;
33364     +                      if flag ne 1 then do;
33365     +                       if format ne '' OR type='C' then do;
33366     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
33367     +                       end;
33368     +                       else do;
33369     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33370     +                       end;
33371     +                         length = length(tempstring);
33373     +                         if length < 195 then do;
33374     +                            string = tempstring;
33375     +                         end;
33376     +                         else do;
33378     +                            string = strip(string);
33379     +                            put string;
33380     +                            string = ") then do;";
33381     +                            put string;
33383     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33384     +                            put string;
33385     +                            put "end;";
33387     +                            put 'else';
33388     +                            if format ne '' OR type='C' then do;
33389     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33390     +                            end;
33391     +                            else do;
33392     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33393     +                            end;
33394     +                         end;
33395     +                      end;
33396     +                   end;
33398     +                   if last._group_ then do;
33399     +                      string = strip(string);
33400     +                      put string;
33402     +                      string = ") then do;";
33403     +                      put string;
33405     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33406     +                      put string;
33407     +                      put "end;";
33408     +                   end;
33410     +                   if last._variable_ then do;
33411     +                     put "else do;";
33413     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33414     +                     put string;
33416     +                     put "end;";
33417     +                     put "end;";
33418     +                   end;
33419     +                end;
33420     +             run;
33422     +             %let oldname = &name;
33423     +        %end;
33424     +    %end;
33425     +    %let dsid = %sysfunc(close(&dsid));
33427     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
33428     +    data _null_;
33429     +       file _F1;
33430     +       put "length _UFormat200 $200;";
33431     +       put "drop _UFormat200;";
33432     +       put "_UFormat200='';";
33433     +    run;
33434     +    filename _F1;
33436     +   %em_register(key=EMSCOREVAR, type=DATA);
33437     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
33438     +   proc datasets lib=&em_lib nolist;
33439     +      delete &scorevarDs;
33440     +   run;
33441     +   quit;
33443     +   %let filrf=mydir;
33444     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
33445     +   %let did=%sysfunc(dopen(&filrf));
33447     +   %if &did %then %do;  %PUT  did= &did;
33448     +       %let memcount=%sysfunc(dnum(&did));
33449     +       %if &memcount > 0 %then %do;
33450     +           data &em_user_emscorevar;
33451     +              length Name $32 formula $70 file $200;
33452     +              keep NAME Formula file;
33453     +              formula  = '';
33454     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
33455     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
33456     +               output;
33457     +           %end;
33458     +           %do i=1 %to &memcount;
33459     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
33460     +               %let newvar = %scan(&name, 1, .);
33461     +               %if "&newvar" ne "_ALL_" %then %do;
33462     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
33463     +                   output;
33464     +               %end;
33465     +           %end;
33467     +           run;
33468     +       %end;
33469     +       %let did = %sysfunc(dclose(&did));
33470     +  %end;
33472     +   %doendu:
33473     +%mend buildOptScoreCode;
33476     +%macro buildScoreCode(flowCode, publishCode);
33479     +  filename x "&flowCode";
33481     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
33482     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
33483     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
33485     +  data temp;
33486     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
33487     +    by display_var _Split_value_;
33488     +     if upcase(_Split_value_) ne 'MISSING';
33489     +   run;
33491     +   data temp_missing;
33492     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
33493     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
33494     +     by display_var _Split_value_;
33495     +     if upcase(_Split_value_) eq 'MISSING';
33496     +     keep _variable_ display_var missgrp;
33497     +   run;
33499     +   proc sort data=temp_missing; by display_var missgrp; run;
33501     +   data temp_missing;
33502     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
33503     +     by display_var missgrp;
33504     +     if ^_a then delete;
33505     +     keep _variable_ display_var missgrp ;
33506     +   run;
33508     +   data temp;
33509     +     merge temp temp_missing;
33510     +     by display_var;
33511     +     if display_Var eq '' then delete;
33512     +    run;
33514     +    /* pull in wtev values */
33515     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
33516     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
33517     +    proc sort data=temp;  by display_var _group_; run;
33519     +   data temp;
33520     +      merge temp tempcoarse(keep=display_var _group_  role) ;
33521     +      by display_var _group_;
33522     +    run;
33524     +    data temp;
33525     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
33526     +      by display_var;
33528     +      if _group_ = . then delete;
33529     +      if _variable_ = '' then delete;
33530     +    run;
33532     +    proc sort data=temp out=class;
33533     +       by _variable_ _group_ LB;
33534     +    run;
33536     +    data _null_;
33537     +      file X;
33539     +      put "length _UFormat200 $200;";
33540     +      put "drop _UFormat200;";
33541     +      put "_UFormat200='';";
33542     +    run;
33544     +    data class_nosv;
33545     +      set class;
33546     +      if upcase(role)="INPUT";
33547     +    run;
33549     +    data _null_;
33550     +       file X MOD;
33551     +       length string $1024 flag endflag 8;
33552     +       retain string flag endflag;
33553     +       set class_nosv end=eof;
33554     +       by _variable_ _group_;
33556     +       index = kindex(_variable_, "BIN_");
33557     +       if index gt 0 then do;
33559     +         if first._variable_ then do;
33560     +            put ' ';
33561     +            put "&EM_CODEBAR;";
33562     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33563     +            put string;
33564     +            put "&EM_CODEBAR;";
33567     +            if origLabel ne "" then do;
33568     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33569     +              put string;
33570     +              string = tranwrd(origLabel,"'","''");
33571     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33572     +              put string;
33573     +            end;
33574     +            else do;
33575     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33576     +             put string;
33577     +            end;
33579     +            put ' ';
33581     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33582     +            put string;
33583     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33584     +            put string;
33585     +            put "end;";
33586     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33587     +            put string;
33588     +          end;
33589     +           if first._group_ then do;
33590     +              flag = 0;
33591     +              endflag = 1;
33592     +              if ^first._variable_ then do;
33593     +                put "else";
33594     +              end;
33595     +              if LB ne . then do;
33596     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
33597     +              end;
33598     +              else do;
33599     +                 flag = 1;
33600     +                 string = "if";
33601     +              end;
33603     +           end;
33604     +           if last._Group_ then do;
33605     +              if UB ne . then do;
33606     +                if flag ne 1 then do;
33607     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33608     +                end;
33609     +                else do;
33610     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33611     +                end;
33612     +              end;
33613     +              else do;
33614     +                 if flag=1 then do;
33615     +                   string = strip(DISPLAY_VAR) ;
33616     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
33617     +                   endflag = 0;
33618     +                   string="";
33619     +                 end;
33620     +                 else do;
33621     +                   string = strip(string)!!" then do;";
33622     +                 end;
33623     +              end;
33624     +              put string;
33626     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33627     +              put string;
33628     +              if endflag eq 1 then do;
33629     +                put "end;";
33630     +              end;
33631     +           end;
33632     +           if last._variable_ then do;
33633     +             string = "end;";
33634     +             put string;
33635     +           end;
33636     +       end;
33637     +       else do;
33638     +           _split_value_ = tranwrd(_split_value_,"'","''");
33639     +           if first._group_ then do;
33640     +              flag=0;
33641     +              if ^first._variable_ then
33642     +                 put 'else';
33643     +              else do;
33644     +                 put ' ';
33645     +                 put "&EM_CODEBAR;";
33646     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33647     +                 put string;
33648     +                 put "&EM_CODEBAR;";
33650     +                 if origLabel ne "" then do;
33651     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33652     +                   put string;
33653     +                   string = tranwrd(origLabel,"'","''");
33654     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33655     +                   put string;
33656     +                 end;
33657     +                 else do;
33658     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33659     +                   put string;
33660     +                 end;
33662     +                 put ' ';
33664     +                if format ne '' then do;
33665     +                  if first._variable_ then do;
33666     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
33667     +                    put string;
33668     +                    string = '%dmnormip(_UFormat200);';
33669     +                    put string;
33671     +                     string ="if MISSING(_UFormat200) then do;";
33672     +                     put string;
33673     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33674     +                     put string;
33675     +                     put "end;";
33677     +                     string="else if NOT MISSING(_UFormat200) then do;";
33678     +                     put string;
33680     +                  end;
33681     +                end;
33682     +                else do;
33683     +                     if type = 'N' then do;
33684     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33685     +                       put string;
33686     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33687     +                       put string;
33688     +                       put "end;";
33690     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33691     +                       put string;
33693     +                     end;
33694     +                     else if type='C' then do;
33695     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
33696     +                        put string;
33697     +                        string = '%dmnormip(_UFormat200);';
33698     +                        put string;
33700     +                        string ="if MISSING(_UFormat200) then do;";
33701     +                        put string;
33702     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33703     +                        put string;
33704     +                        put "end;";
33706     +                        string="else if NOT MISSING(_UFormat200) then do;";
33707     +                        put string;
33708     +                        string = '%dmnormip(_UFormat200);';
33709     +                        put string;
33710     +                    end;
33711     +                end;
33712     +              end;
33713     +              if format ne '' OR type='C' then do;
33714     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33715     +              end;
33716     +              else do;
33717     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33718     +              end;
33719     +           end;
33720     +           else do;
33721     +              if flag ne 1 then do;
33722     +                if format ne '' OR type='C' then do;
33723     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
33724     +                end;
33725     +                else do;
33726     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33727     +                end;
33728     +                length = klength(tempstring);
33730     +                if length < 195 then do;
33731     +                   string = tempstring;
33732     +                end;
33733     +                else do;
33735     +                   string = strip(string);
33736     +                   put string;
33737     +                   string = ") then do;";
33738     +                   put string;
33740     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33741     +                   put string;
33742     +                   put "end;";
33744     +                 /*  string = strip(string)||",'...';"; */
33746     +                   put 'else';
33747     +                   if format ne '' OR type='C' then do;
33748     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33749     +                   end;
33750     +                   else do;
33751     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33752     +                   end;
33755     +                end;
33756     +              end;
33757     +           end;
33759     +           if last._group_ then do;
33760     +              string = strip(string);
33761     +              put string;
33762     +              string = ") then do;";
33763     +              put string;
33765     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33766     +              put string;
33767     +              put "end;";
33768     +           end;
33770     +           if last._variable_ then do;
33771     +             put "else do;";
33773     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33774     +             put string;
33776     +             put "end;";
33777     +             put "end;";
33778     +           end;
33779     +         *end;
33780     +       end;
33781     +    run;
33783     +    /* generate PublishCode the same as flowscorecode */
33784     +    filename Y "&publishCode";
33786     +    /* if publishCode already exists, wipe it out first */
33787     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
33788     +      %let rc = %sysfunc(fdelete(Y));
33789     +    %end;
33791     +    %appendfiles(Y, X);
33793     +    %if %EM_BINARY_TARGET= %then %do;
33794     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
33795     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
33796     +      %end;
33797     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
33798     +      %let ibn_inttarget_orig = &ibn_inttarget;
33800     +      %if %symexist(IGNBinTarget)=0 %then %do;
33801     +         %global ignbintarget ignfreqvar;
33802     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
33803     +         %include temp;
33804     +         filename temp;
33805     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
33807     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
33808     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
33809     +         %end;
33810     +      %end;
33811     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
33812     +         proc sql noprint;
33813     +            %if %EM_FREQ ne %then %do;
33814     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
33815     +            %end;
33816     +            %else %do;
33817     +               select mean(&ibn_inttarget)
33818     +            %end;
33819     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
33820     +         quit;
33821     +      %end;
33823     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
33824     +      %if &dsid %then %do;
33825     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
33826     +         %let rc=%sysfunc(close(&dsid));
33827     +      %end;
33828     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
33830     +      data _null_;
33831     +         file x mod;
33832     +         put ' ';
33834     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
33835     +             put "&EM_CODEBAR;";
33836     +             %let note = Mean Cutoff Binary Transformation for Target;
33837     +             put "* &note;";
33838     +             put "&EM_CODEBAR;";
33839     +         %end;
33840     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
33841     +             put "&EM_CODEBAR;";
33842     +             %let note = User-Specified Cutoff Binary Transformation for Target;
33843     +             put "* &note;";
33844     +             put "&EM_CODEBAR;";
33845     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
33846     +         %end;
33847     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
33848     +         put "else do;";
33849     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
33850     +         put "   else &IGNBinTarget=0;";
33851     +         put "end;";
33853     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
33854     +      run;
33856     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
33858     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
33860     +         data _null_;
33861     +            file deltaref;
33862     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
33863     +            put "if name='&IGNBinTarget' then do;";
33864     +            put "   role='TARGET';";
33865     +            put "   level='BINARY';";
33866     +            put "end;";
33867     +         run;
33869     +      %end;
33870     +      %else %do;
33872     +         data _null_;
33873     +            file deltaref;
33874     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
33875     +            put "if name='&IGNBinTarget' then do;";
33876     +            put "   role='REJECTED';";
33877     +            put "   level='BINARY';";
33878     +            put "end;";
33879     +         run;
33880     +      %end;
33882     +      filename deltaref;
33884     +   %end;
33886     +    filename X;
33887     +    filename Y;
33889     +    %buildOptScoreCode;
33891     +    proc datasets library=work nolist;
33892     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
33893     +    run;
33894     +    quit;
33896     +%mend buildScoreCode;
33898     +%macro buildMetaCode(DeltaCodeFile=);
33900     +   /* set variable roles based on New Role column in the Results table */
33901     +   data _null_;
33902     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
33903     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
33904     +      %if &dsid %then %do;
33905     +        %let obs = %sysfunc(fetch(&dsid));
33906     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
33907     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
33908     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
33910     +        %do %while(&obs=0);
33911     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
33912     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
33913     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
33915     +          /* retrieve grp and woe names from varmappings dataset */
33916     +          %let choice = _VARIABLE_ = "&inputname";
33917     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
33918     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
33919     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
33920     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
33921     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
33923     +          put "if name = '&inputname' then role='REJECTED';";
33924     +          %if "&role" ne "DEFAULT" %then %do;
33925     +            put "if name = '&grpname' then role='&role';";
33926     +          %end;
33927     +          %else %do;
33928     +            put "if name = '&grpname' then role='&oldrole';";
33929     +          %end;
33930     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
33932     +          %let obs = %sysfunc(fetch(&dsid));
33933     +        %end;
33934     +      %end;
33935     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
33936     +   run;
33938     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
33939     +   data _null_;
33940     +      file &DeltaCodeFile MOD;
33942     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
33943     +      %if &sdsid %then %do;
33944     +        %let sobs = %sysfunc(fetch(&sdsid));
33945     +        %do %while(&sobs=0);
33946     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
33947     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
33948     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
33949     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
33951     +          %let checkgrp = GRP_&checkname;
33952     +          %let lenname = %length(&checkgrp);
33953     +          %if %eval(&lenname-32) > 0 %then %do;
33954     +            %let checkgrp = %substr(&checkgrp, 1, 32);
33955     +          %end;
33957     +          %let choice = _VARIABLE_ ="&checkname";
33958     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
33960     +          /* if var not found in varmappings, delete variables; */
33961     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
33962     +          %if &vdsid eq 0 %then %do;
33963     +            put 'if name="&displayvar" then delete;';
33964     +            %let dispgrp = GRP_&displayvar;
33965     +            put 'if name="&dispgrp" then delete;';
33966     +          %end;
33968     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
33969     +          %let sobs = %sysfunc(fetch(&sdsid));
33970     +        %end;
33971     +      %end;
33972     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
33973     +   run;
33975     +%mend buildMetaCode;
33977     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
33979     +   proc sort data=&coarse out=sortedcoarse nodupkey;
33980     +     by display_var;
33981     +   run;
33982     +   proc sort data=&varmappings nodupkey;
33983     +     by _variable_;
33984     +   run;
33985     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
33986     +     proc sort data=&resultstable; by display_var; run;
33988     +     /* check that _new_role exists - did not exist in earlier releases */
33989     +     %let rds=%sysfunc(open(&resultstable));
33990     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
33991     +     %let rds=%sysfunc(close(&rds));
33992     +   %end;
33994     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
33995     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
33996     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
33997     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
33998     +     %end;
33999     +     ;
34000     +     by display_var;
34001     +     length _role_ _new_role_ $10;
34002     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
34003     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
34004     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
34005     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
34006     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
34007     +           ;
34009     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
34010     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
34011     +                _role_ = "Rejected";
34012     +             else _role_ = "Input";
34013     +           %end;
34014     +           %else %do;
34015     +             _role_ = "Input";
34016     +           %end;
34017     +           if _new_role_ eq "" then _new_role_="Default";
34018     +      if ^_a then do;
34019     +        _gini_ = 0;
34020     +        _role_ = 'Rejected';
34021     +        if _new_role_ eq "" then _new_role_="Default";
34022     +      end;
34023     +   run;
34024     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
34025     +     by NAME;
34026     +   run;
34027     +   data outlabel;
34028     +     set outlabel;
34029     +     if _label_ = '' then _label_ = _variable_;
34030     +   run;
34031     +   data &resultstable;
34032     +     merge &resultstable(in=_a_) outlabel;
34033     +     by display_Var;
34034     +     if _a_ then output;
34035     +   run;
34036     +   proc datasets library=work nolist;
34037     +     delete sortedcoarse outlabel;
34038     +   run;
34039     +   quit;
34040     +   proc sort data=&resultstable nodupkey;
34041     +      by DESCENDING
34042     +        _gini_ display_Var;
34043     +   run;
34044     +   data &resultstable;
34045     +     set &resultstable;
34047     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
34048     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
34049     +     giniOrder = _N_;
34050     +     _gini_ = round(_GINI_, .001);
34051     +     drop _variable_;
34052     +   run;
34054     +   proc print data=&resultstable label;
34055     +   run;
34057     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
34058     +   data &coarse;
34059     +     set &coarse;
34060     +     length role $10;
34061     +     %let dsid = %sysfunc(open(&resultstable));
34062     +     %if &dsid %then %do;
34063     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
34064     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
34065     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
34067     +       %let obs = %sysfunc(fetch(&dsid));
34068     +       %do %while(&obs=0);
34069     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
34070     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
34071     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
34073     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
34074     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
34075     +            giniOrder = &order;
34076     +            role = "&role";
34077     +          end;
34079     +          %let obs = %sysfunc(fetch(&dsid));
34080     +       %end;
34081     +     %end;
34082     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
34083     +   run;
34086     +%mend EM_GENERATE_RESULTSTABLE;
34088     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
34090     +    /* instantiate the zchar macro to be used in adding bin definition */
34091     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
34092     +    %inc _temp;
34093     +    filename _temp;
34095     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
34096     +      by _variable_ binFlag _group_ LB;
34097     +    run;
34099     +    data tempExport;
34100     +      set sortedFine;
34101     +      by _variable_ binFlag _group_;
34102     +      length _split_value_ $200;
34104     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
34105     +      if binFlag = 0 then do;
34106     +        index = kindex(_variable_, "BIN_");
34107     +        if index gt 0 then do;
34108     +          _LEVEL_ = "INTERVAL";
34109     +        end;
34110     +        _Split_value_ = _split_value_;
34111     +        output;
34112     +      end;
34113     +      else do;
34114     +         * if last._group_ then do;
34115     +          index = kindex(_variable_, "BIN_");
34116     +          if index gt 0 then do;
34117     +            _LEVEL_ = "INTERVAL";
34118     +          end;
34119     +          _Split_value_ = %zchar(UB);
34120     +          output;
34121     +         * end;
34122     +      end;
34124     +      rename display_Var = _variable_;
34125     +      keep display_var _level_ _group_ _split_value_ binFlag;
34126     +    run;
34128     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
34129     +       data &EXPORTGROUPING;
34130     +         set tempexport;
34131     +       run;
34132     +    %end;
34133     +    %else %do;
34134     +       /* determine if EXPORTGROUPING already exists */
34135     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
34136     +         data &EXPORTGROUPING;
34137     +            set &EXPORTGROUPING tempexport;
34138     +         run;
34139     +       %end;
34140     +       %else %do;
34141     +         data &EXPORTGROUPING;
34142     +            set tempexport;
34143     +         run;
34144     +       %end;
34145     +    %end;
34147     +    proc datasets lib=work nolist;
34148     +      delete sortedFine tempexport;
34149     +    run;
34150     +    quit;
34152     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
34156     +
34157     +%macro report;
34158     +
34159     +   /* if createGrouping then create a dataset for export */
34160     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
34161     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
34162     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
34163     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
34164     +   %end;
34165     +   %else %do;
34166     +     proc datasets library=&EM_LIB nolist;
34167     +       delete &EM_NODEID._EXPORTGROUP;
34168     +     run;
34169     +     quit;
34170     +   %end;
34171     +
34172     +
34173     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
34174     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
34175     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
34176     +   %end;
34177     +   %else %do;
34178     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
34179     +   %end;
34180     +
34181     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
34182     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
34183     +
34184     +
34185     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS4 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;
 
NOTE: The file EMWS4.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34186      *------------------------------------------------------------*;
34187      * End REPORT: BINNING;
34188      *------------------------------------------------------------*;
34189
 
34190      /* Reset EM Options */
34191      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
34192      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
34193      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
34194      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
34195      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
34196      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
