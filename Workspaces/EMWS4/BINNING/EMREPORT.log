MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:07" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                16 March 2021
Time:                00:06:07
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1SBOAHK "C:\Jose\DM_ang\Workspaces\EMWS4\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1SBOAHK new;
MPRINT(EM_DIAGRAM):   run;
33064      %let EMEXCEPTIONSTRING=;
33065      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
33066      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
33067      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33068      %let EM_ACTION = REPORT;
33069      %let syscc = 0;
33070      %macro main;
33071      
33072        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
33073        %include temp;
33074        filename temp;
33075      
33076        %setProperties;
33077      
33078        %if %upcase(&EM_ACTION) = CREATE %then %do;
33079          filename temp catalog 'sashelp.emmdfy.binning_create.source';
33080          %include temp;
33081          filename temp;
33082      
33083          %create;
33084        %end;
33085      
33086         %else
33087         %if %upcase(&EM_ACTION) = TRAIN %then %do;
33088      
33089             filename temp catalog 'sashelp.emmdfy.binning_train.source';
33090             %include temp;
33091             filename temp;
33092             %train;
33093         %end;
33094      
33095        %else
33096        %if %upcase(&EM_ACTION) = SCORE %then %do;
33097          filename temp catalog 'sashelp.emmdfy.binning_score.source';
33098          %include temp;
33099          filename temp;
33100      
33101          %score;
33102      
33103        %end;
33104      
33105        %else
33106        %if %upcase(&EM_ACTION) = REPORT %then %do;
33107      
33108             filename temp catalog 'sashelp.emmdfy.binning_report.source';
33109             %include temp;
33110             filename temp;
33111      
33112             %report;
33113         %end;
33114      
33115         %doendm:
33116      %mend main;
33117      
33118      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
33120     +%macro SetProperties;
33122     +     /* IGN options */
33123     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
33124     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
33125     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
33127     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
33128     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
33129     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
33130     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
33131     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
33132     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
33133     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
33134     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
33135     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
33136     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
33137     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
33138     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
33139     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
33140     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
33142     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
33143     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
33144     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
33147     +%mend SetProperties;
33148     +%macro appendfiles(fileref1, fileref2);
33149     +     data _null_;
33150     +       length c $256;
33151     +       fid1=fopen("&fileref1",'A');
33152     +       fid2=fopen("&fileref2",'I');
33153     +       cval = finfo(fid2,'lrecl');
33154     +       put cval= fid1= fid2=;
33155     +       if (fid2 > 0) then
33156     +         do while(fread(fid2)=0);
33157     +           rc = fget(fid2,c,256);
33158     +           _msg_=sysmsg();
33159     +           /* put rc= c= _msg_=; */
33160     +           rc = fput(fid1,strip(c));
33161     +           rc = fwrite(fid1);
33162     +         end;
33163     +         _msg_=sysmsg();
33164     +         put _msg_=;
33165     +       rc = fclose(fid1);
33166     +       rc = fclose(fid2);
33167     +     run;
33168     +%mend appendfiles;
33170     +%macro buildOptScoreCode;
33172     +    %em_register(key=BINCODE, type=FOLDER);
33174     +    filename x catalog 'sashelp.emutil.em_deldir.source';
33175     +    %inc x;
33176     +    filename x;
33177     +    %delDir(folder=%nrbquote(&em_user_bincode));
33179     +    data _null_; length rc $200;
33180     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
33181     +    run;
33183     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
33185     +    %let dsid = %sysfunc(open(class_nosv));
33186     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
33187     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
33189     +    %let oldname=;
33190     +    %do %while(^%sysfunc(fetch(&dsid)));
33191     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
33192     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
33194     +        %if &name ne &oldname %then %do;
33195     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
33196     +             data _null_;
33197     +                length string $1024 flag endflag 8;
33198     +                retain string flag endflag;
33199     +                set class_nosv end=eof;
33200     +                where DISPLAY_VAR ="&name";
33201     +                by _variable_ _group_;
33202     +                file _F1;
33203     +                index = kindex(_variable_, "BIN_");
33204     +                if index gt 0 then do;
33205     +                   if first._variable_ then do;
33206     +                      put ' ';
33207     +                      put "&EM_CODEBAR;";
33208     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33209     +                      put string;
33210     +                      put "&EM_CODEBAR;";
33212     +                      if origLabel ne "" then do;
33213     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33214     +                            put string;
33215     +                            string = tranwrd(origLabel,"'","''");
33216     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33217     +                            put string;
33218     +                      end;
33219     +                      else do;
33220     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33221     +                             put string;
33222     +                      end;
33224     +                      put ' ';
33226     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33227     +                      put string;
33228     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33229     +                      put string;
33230     +                      put "end;";
33231     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33232     +                      put string;
33233     +                   end;
33234     +                   if first._group_ then do;
33235     +                      flag = 0;
33236     +                      endflag = 1;
33237     +                      if ^first._variable_ then do;
33238     +                         put "else";
33239     +                      end;
33240     +                      if LB ne . then do;
33241     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
33242     +                      end;
33243     +                      else do;
33244     +                         flag = 1;
33245     +                         string = "if";
33246     +                      end;
33247     +                   end;
33248     +                   if last._Group_ then do;
33249     +                      if UB ne . then do;
33250     +                        if flag ne 1 then do;
33251     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33252     +                        end;
33253     +                        else do;
33254     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33255     +                        end;
33256     +                      end;
33257     +                      else do;
33258     +                         if flag=1 then do;
33259     +                            string = strip(DISPLAY_VAR) ;
33260     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
33261     +                            endflag=0;
33262     +                            string="";
33263     +                         end;
33264     +                         else do;
33265     +                            string = strip(string)!!" then do;";
33266     +                         end;
33267     +                      end;
33268     +                      put string;
33269     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33270     +                      put string;
33271     +                      if endflag eq 1 then do;
33272     +                        put "end;";
33273     +                      end;
33274     +                   end;
33275     +                   if last._variable_ then do;
33276     +                     string = "end;";
33277     +                     put string;
33278     +                   end;
33280     +                end;
33281     +                else do;
33282     +                   _split_value_ = tranwrd(_split_value_,"'","''");
33283     +                   if first._group_ then do;
33284     +                      flag=0;
33285     +                      if ^first._variable_ then
33286     +                         put 'else';
33287     +                      else do;
33288     +                         put ' ';
33289     +                         put "&EM_CODEBAR;";
33290     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33291     +                         put string;
33292     +                         put "&EM_CODEBAR;";
33294     +                         if origLabel ne "" then do;
33295     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33296     +                               put string;
33297     +                               string = tranwrd(origLabel,"'","''");
33298     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33299     +                               put string;
33300     +                         end;
33301     +                         else do;
33302     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33303     +                               put string;
33304     +                         end;
33306     +                         put ' ';
33308     +                         if format ne '' then do;
33309     +                            if first._variable_ then do;
33310     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
33311     +                               put string;
33312     +                               string = '%dmnormip(_UFormat200);';
33313     +                               put string;
33315     +                               string ="if MISSING(_UFormat200) then do;";
33316     +                               put string;
33317     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33318     +                               put string;
33319     +                               put "end;";
33321     +                               string="else if NOT MISSING(_UFormat200) then do;";
33322     +                               put string;
33324     +                            end;
33325     +                         end;
33326     +                         else do;
33327     +                            if type = 'N' then do;
33328     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33329     +                              put string;
33330     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33331     +                              put string;
33332     +                              put "end;";
33334     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33335     +                              put string;
33336     +                            end;
33337     +                            else if type='C' then do;
33338     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
33339     +                              put string;
33340     +                              string = '%dmnormip(_UFormat200);';
33341     +                              put string;
33343     +                              string ="if MISSING(_UFormat200) then do;";
33344     +                              put string;
33345     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33346     +                              put string;
33347     +                              put "end;";
33349     +                              string="else if NOT MISSING(_UFormat200) then do;";
33350     +                              put string;
33351     +                              string = '%dmnormip(_UFormat200);';
33352     +                              put string;
33353     +                           end;
33354     +                         end;
33355     +                      end;
33356     +                      if format ne '' OR type='C' then do;
33357     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33358     +                      end;
33359     +                      else do;
33360     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33361     +                      end;
33362     +                   end;
33363     +                   else do;
33364     +                      if flag ne 1 then do;
33365     +                       if format ne '' OR type='C' then do;
33366     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
33367     +                       end;
33368     +                       else do;
33369     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33370     +                       end;
33371     +                         length = length(tempstring);
33373     +                         if length < 195 then do;
33374     +                            string = tempstring;
33375     +                         end;
33376     +                         else do;
33378     +                            string = strip(string);
33379     +                            put string;
33380     +                            string = ") then do;";
33381     +                            put string;
33383     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33384     +                            put string;
33385     +                            put "end;";
33387     +                            put 'else';
33388     +                            if format ne '' OR type='C' then do;
33389     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33390     +                            end;
33391     +                            else do;
33392     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33393     +                            end;
33394     +                         end;
33395     +                      end;
33396     +                   end;
33398     +                   if last._group_ then do;
33399     +                      string = strip(string);
33400     +                      put string;
33402     +                      string = ") then do;";
33403     +                      put string;
33405     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33406     +                      put string;
33407     +                      put "end;";
33408     +                   end;
33410     +                   if last._variable_ then do;
33411     +                     put "else do;";
33413     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33414     +                     put string;
33416     +                     put "end;";
33417     +                     put "end;";
33418     +                   end;
33419     +                end;
33420     +             run;
33422     +             %let oldname = &name;
33423     +        %end;
33424     +    %end;
33425     +    %let dsid = %sysfunc(close(&dsid));
33427     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
33428     +    data _null_;
33429     +       file _F1;
33430     +       put "length _UFormat200 $200;";
33431     +       put "drop _UFormat200;";
33432     +       put "_UFormat200='';";
33433     +    run;
33434     +    filename _F1;
33436     +   %em_register(key=EMSCOREVAR, type=DATA);
33437     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
33438     +   proc datasets lib=&em_lib nolist;
33439     +      delete &scorevarDs;
33440     +   run;
33441     +   quit;
33443     +   %let filrf=mydir;
33444     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
33445     +   %let did=%sysfunc(dopen(&filrf));
33447     +   %if &did %then %do;  %PUT  did= &did;
33448     +       %let memcount=%sysfunc(dnum(&did));
33449     +       %if &memcount > 0 %then %do;
33450     +           data &em_user_emscorevar;
33451     +              length Name $32 formula $70 file $200;
33452     +              keep NAME Formula file;
33453     +              formula  = '';
33454     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
33455     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
33456     +               output;
33457     +           %end;
33458     +           %do i=1 %to &memcount;
33459     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
33460     +               %let newvar = %scan(&name, 1, .);
33461     +               %if "&newvar" ne "_ALL_" %then %do;
33462     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
33463     +                   output;
33464     +               %end;
33465     +           %end;
33467     +           run;
33468     +       %end;
33469     +       %let did = %sysfunc(dclose(&did));
33470     +  %end;
33472     +   %doendu:
33473     +%mend buildOptScoreCode;
33476     +%macro buildScoreCode(flowCode, publishCode);
33479     +  filename x "&flowCode";
33481     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
33482     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
33483     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
33485     +  data temp;
33486     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
33487     +    by display_var _Split_value_;
33488     +     if upcase(_Split_value_) ne 'MISSING';
33489     +   run;
33491     +   data temp_missing;
33492     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
33493     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
33494     +     by display_var _Split_value_;
33495     +     if upcase(_Split_value_) eq 'MISSING';
33496     +     keep _variable_ display_var missgrp;
33497     +   run;
33499     +   proc sort data=temp_missing; by display_var missgrp; run;
33501     +   data temp_missing;
33502     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
33503     +     by display_var missgrp;
33504     +     if ^_a then delete;
33505     +     keep _variable_ display_var missgrp ;
33506     +   run;
33508     +   data temp;
33509     +     merge temp temp_missing;
33510     +     by display_var;
33511     +     if display_Var eq '' then delete;
33512     +    run;
33514     +    /* pull in wtev values */
33515     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
33516     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
33517     +    proc sort data=temp;  by display_var _group_; run;
33519     +   data temp;
33520     +      merge temp tempcoarse(keep=display_var _group_  role) ;
33521     +      by display_var _group_;
33522     +    run;
33524     +    data temp;
33525     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
33526     +      by display_var;
33528     +      if _group_ = . then delete;
33529     +      if _variable_ = '' then delete;
33530     +    run;
33532     +    proc sort data=temp out=class;
33533     +       by _variable_ _group_ LB;
33534     +    run;
33536     +    data _null_;
33537     +      file X;
33539     +      put "length _UFormat200 $200;";
33540     +      put "drop _UFormat200;";
33541     +      put "_UFormat200='';";
33542     +    run;
33544     +    data class_nosv;
33545     +      set class;
33546     +      if upcase(role)="INPUT";
33547     +    run;
33549     +    data _null_;
33550     +       file X MOD;
33551     +       length string $1024 flag endflag 8;
33552     +       retain string flag endflag;
33553     +       set class_nosv end=eof;
33554     +       by _variable_ _group_;
33556     +       index = kindex(_variable_, "BIN_");
33557     +       if index gt 0 then do;
33559     +         if first._variable_ then do;
33560     +            put ' ';
33561     +            put "&EM_CODEBAR;";
33562     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33563     +            put string;
33564     +            put "&EM_CODEBAR;";
33567     +            if origLabel ne "" then do;
33568     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33569     +              put string;
33570     +              string = tranwrd(origLabel,"'","''");
33571     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33572     +              put string;
33573     +            end;
33574     +            else do;
33575     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33576     +             put string;
33577     +            end;
33579     +            put ' ';
33581     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33582     +            put string;
33583     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33584     +            put string;
33585     +            put "end;";
33586     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33587     +            put string;
33588     +          end;
33589     +           if first._group_ then do;
33590     +              flag = 0;
33591     +              endflag = 1;
33592     +              if ^first._variable_ then do;
33593     +                put "else";
33594     +              end;
33595     +              if LB ne . then do;
33596     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
33597     +              end;
33598     +              else do;
33599     +                 flag = 1;
33600     +                 string = "if";
33601     +              end;
33603     +           end;
33604     +           if last._Group_ then do;
33605     +              if UB ne . then do;
33606     +                if flag ne 1 then do;
33607     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33608     +                end;
33609     +                else do;
33610     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
33611     +                end;
33612     +              end;
33613     +              else do;
33614     +                 if flag=1 then do;
33615     +                   string = strip(DISPLAY_VAR) ;
33616     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
33617     +                   endflag = 0;
33618     +                   string="";
33619     +                 end;
33620     +                 else do;
33621     +                   string = strip(string)!!" then do;";
33622     +                 end;
33623     +              end;
33624     +              put string;
33626     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33627     +              put string;
33628     +              if endflag eq 1 then do;
33629     +                put "end;";
33630     +              end;
33631     +           end;
33632     +           if last._variable_ then do;
33633     +             string = "end;";
33634     +             put string;
33635     +           end;
33636     +       end;
33637     +       else do;
33638     +           _split_value_ = tranwrd(_split_value_,"'","''");
33639     +           if first._group_ then do;
33640     +              flag=0;
33641     +              if ^first._variable_ then
33642     +                 put 'else';
33643     +              else do;
33644     +                 put ' ';
33645     +                 put "&EM_CODEBAR;";
33646     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
33647     +                 put string;
33648     +                 put "&EM_CODEBAR;";
33650     +                 if origLabel ne "" then do;
33651     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
33652     +                   put string;
33653     +                   string = tranwrd(origLabel,"'","''");
33654     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
33655     +                   put string;
33656     +                 end;
33657     +                 else do;
33658     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
33659     +                   put string;
33660     +                 end;
33662     +                 put ' ';
33664     +                if format ne '' then do;
33665     +                  if first._variable_ then do;
33666     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
33667     +                    put string;
33668     +                    string = '%dmnormip(_UFormat200);';
33669     +                    put string;
33671     +                     string ="if MISSING(_UFormat200) then do;";
33672     +                     put string;
33673     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33674     +                     put string;
33675     +                     put "end;";
33677     +                     string="else if NOT MISSING(_UFormat200) then do;";
33678     +                     put string;
33680     +                  end;
33681     +                end;
33682     +                else do;
33683     +                     if type = 'N' then do;
33684     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33685     +                       put string;
33686     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33687     +                       put string;
33688     +                       put "end;";
33690     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
33691     +                       put string;
33693     +                     end;
33694     +                     else if type='C' then do;
33695     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
33696     +                        put string;
33697     +                        string = '%dmnormip(_UFormat200);';
33698     +                        put string;
33700     +                        string ="if MISSING(_UFormat200) then do;";
33701     +                        put string;
33702     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33703     +                        put string;
33704     +                        put "end;";
33706     +                        string="else if NOT MISSING(_UFormat200) then do;";
33707     +                        put string;
33708     +                        string = '%dmnormip(_UFormat200);';
33709     +                        put string;
33710     +                    end;
33711     +                end;
33712     +              end;
33713     +              if format ne '' OR type='C' then do;
33714     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33715     +              end;
33716     +              else do;
33717     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33718     +              end;
33719     +           end;
33720     +           else do;
33721     +              if flag ne 1 then do;
33722     +                if format ne '' OR type='C' then do;
33723     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
33724     +                end;
33725     +                else do;
33726     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33727     +                end;
33728     +                length = klength(tempstring);
33730     +                if length < 195 then do;
33731     +                   string = tempstring;
33732     +                end;
33733     +                else do;
33735     +                   string = strip(string);
33736     +                   put string;
33737     +                   string = ") then do;";
33738     +                   put string;
33740     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33741     +                   put string;
33742     +                   put "end;";
33744     +                 /*  string = strip(string)||",'...';"; */
33746     +                   put 'else';
33747     +                   if format ne '' OR type='C' then do;
33748     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
33749     +                   end;
33750     +                   else do;
33751     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
33752     +                   end;
33755     +                end;
33756     +              end;
33757     +           end;
33759     +           if last._group_ then do;
33760     +              string = strip(string);
33761     +              put string;
33762     +              string = ") then do;";
33763     +              put string;
33765     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
33766     +              put string;
33767     +              put "end;";
33768     +           end;
33770     +           if last._variable_ then do;
33771     +             put "else do;";
33773     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
33774     +             put string;
33776     +             put "end;";
33777     +             put "end;";
33778     +           end;
33779     +         *end;
33780     +       end;
33781     +    run;
33783     +    /* generate PublishCode the same as flowscorecode */
33784     +    filename Y "&publishCode";
33786     +    /* if publishCode already exists, wipe it out first */
33787     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
33788     +      %let rc = %sysfunc(fdelete(Y));
33789     +    %end;
33791     +    %appendfiles(Y, X);
33793     +    %if %EM_BINARY_TARGET= %then %do;
33794     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
33795     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
33796     +      %end;
33797     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
33798     +      %let ibn_inttarget_orig = &ibn_inttarget;
33800     +      %if %symexist(IGNBinTarget)=0 %then %do;
33801     +         %global ignbintarget ignfreqvar;
33802     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
33803     +         %include temp;
33804     +         filename temp;
33805     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
33807     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
33808     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
33809     +         %end;
33810     +      %end;
33811     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
33812     +         proc sql noprint;
33813     +            %if %EM_FREQ ne %then %do;
33814     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
33815     +            %end;
33816     +            %else %do;
33817     +               select mean(&ibn_inttarget)
33818     +            %end;
33819     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
33820     +         quit;
33821     +      %end;
33823     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
33824     +      %if &dsid %then %do;
33825     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
33826     +         %let rc=%sysfunc(close(&dsid));
33827     +      %end;
33828     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
33830     +      data _null_;
33831     +         file x mod;
33832     +         put ' ';
33834     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
33835     +             put "&EM_CODEBAR;";
33836     +             %let note = Mean Cutoff Binary Transformation for Target;
33837     +             put "* &note;";
33838     +             put "&EM_CODEBAR;";
33839     +         %end;
33840     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
33841     +             put "&EM_CODEBAR;";
33842     +             %let note = User-Specified Cutoff Binary Transformation for Target;
33843     +             put "* &note;";
33844     +             put "&EM_CODEBAR;";
33845     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
33846     +         %end;
33847     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
33848     +         put "else do;";
33849     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
33850     +         put "   else &IGNBinTarget=0;";
33851     +         put "end;";
33853     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
33854     +      run;
33856     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
33858     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
33860     +         data _null_;
33861     +            file deltaref;
33862     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
33863     +            put "if name='&IGNBinTarget' then do;";
33864     +            put "   role='TARGET';";
33865     +            put "   level='BINARY';";
33866     +            put "end;";
33867     +         run;
33869     +      %end;
33870     +      %else %do;
33872     +         data _null_;
33873     +            file deltaref;
33874     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
33875     +            put "if name='&IGNBinTarget' then do;";
33876     +            put "   role='REJECTED';";
33877     +            put "   level='BINARY';";
33878     +            put "end;";
33879     +         run;
33880     +      %end;
33882     +      filename deltaref;
33884     +   %end;
33886     +    filename X;
33887     +    filename Y;
33889     +    %buildOptScoreCode;
33891     +    proc datasets library=work nolist;
33892     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
33893     +    run;
33894     +    quit;
33896     +%mend buildScoreCode;
33898     +%macro buildMetaCode(DeltaCodeFile=);
33900     +   /* set variable roles based on New Role column in the Results table */
33901     +   data _null_;
33902     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
33903     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
33904     +      %if &dsid %then %do;
33905     +        %let obs = %sysfunc(fetch(&dsid));
33906     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
33907     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
33908     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
33910     +        %do %while(&obs=0);
33911     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
33912     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
33913     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
33915     +          /* retrieve grp and woe names from varmappings dataset */
33916     +          %let choice = _VARIABLE_ = "&inputname";
33917     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
33918     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
33919     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
33920     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
33921     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
33923     +          put "if name = '&inputname' then role='REJECTED';";
33924     +          %if "&role" ne "DEFAULT" %then %do;
33925     +            put "if name = '&grpname' then role='&role';";
33926     +          %end;
33927     +          %else %do;
33928     +            put "if name = '&grpname' then role='&oldrole';";
33929     +          %end;
33930     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
33932     +          %let obs = %sysfunc(fetch(&dsid));
33933     +        %end;
33934     +      %end;
33935     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
33936     +   run;
33938     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
33939     +   data _null_;
33940     +      file &DeltaCodeFile MOD;
33942     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
33943     +      %if &sdsid %then %do;
33944     +        %let sobs = %sysfunc(fetch(&sdsid));
33945     +        %do %while(&sobs=0);
33946     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
33947     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
33948     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
33949     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
33951     +          %let checkgrp = GRP_&checkname;
33952     +          %let lenname = %length(&checkgrp);
33953     +          %if %eval(&lenname-32) > 0 %then %do;
33954     +            %let checkgrp = %substr(&checkgrp, 1, 32);
33955     +          %end;
33957     +          %let choice = _VARIABLE_ ="&checkname";
33958     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
33960     +          /* if var not found in varmappings, delete variables; */
33961     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
33962     +          %if &vdsid eq 0 %then %do;
33963     +            put 'if name="&displayvar" then delete;';
33964     +            %let dispgrp = GRP_&displayvar;
33965     +            put 'if name="&dispgrp" then delete;';
33966     +          %end;
33968     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
33969     +          %let sobs = %sysfunc(fetch(&sdsid));
33970     +        %end;
33971     +      %end;
33972     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
33973     +   run;
33975     +%mend buildMetaCode;
33977     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
33979     +   proc sort data=&coarse out=sortedcoarse nodupkey;
33980     +     by display_var;
33981     +   run;
33982     +   proc sort data=&varmappings nodupkey;
33983     +     by _variable_;
33984     +   run;
33985     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
33986     +     proc sort data=&resultstable; by display_var; run;
33988     +     /* check that _new_role exists - did not exist in earlier releases */
33989     +     %let rds=%sysfunc(open(&resultstable));
33990     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
33991     +     %let rds=%sysfunc(close(&rds));
33992     +   %end;
33994     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
33995     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
33996     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
33997     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
33998     +     %end;
33999     +     ;
34000     +     by display_var;
34001     +     length _role_ _new_role_ $10;
34002     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
34003     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
34004     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
34005     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
34006     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
34007     +           ;
34009     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
34010     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
34011     +                _role_ = "Rejected";
34012     +             else _role_ = "Input";
34013     +           %end;
34014     +           %else %do;
34015     +             _role_ = "Input";
34016     +           %end;
34017     +           if _new_role_ eq "" then _new_role_="Default";
34018     +      if ^_a then do;
34019     +        _gini_ = 0;
34020     +        _role_ = 'Rejected';
34021     +        if _new_role_ eq "" then _new_role_="Default";
34022     +      end;
34023     +   run;
34024     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
34025     +     by NAME;
34026     +   run;
34027     +   data outlabel;
34028     +     set outlabel;
34029     +     if _label_ = '' then _label_ = _variable_;
34030     +   run;
34031     +   data &resultstable;
34032     +     merge &resultstable(in=_a_) outlabel;
34033     +     by display_Var;
34034     +     if _a_ then output;
34035     +   run;
34036     +   proc datasets library=work nolist;
34037     +     delete sortedcoarse outlabel;
34038     +   run;
34039     +   quit;
34040     +   proc sort data=&resultstable nodupkey;
34041     +      by DESCENDING
34042     +        _gini_ display_Var;
34043     +   run;
34044     +   data &resultstable;
34045     +     set &resultstable;
34047     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
34048     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
34049     +     giniOrder = _N_;
34050     +     _gini_ = round(_GINI_, .001);
34051     +     drop _variable_;
34052     +   run;
34054     +   proc print data=&resultstable label;
34055     +   run;
34057     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
34058     +   data &coarse;
34059     +     set &coarse;
34060     +     length role $10;
34061     +     %let dsid = %sysfunc(open(&resultstable));
34062     +     %if &dsid %then %do;
34063     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
34064     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
34065     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
34067     +       %let obs = %sysfunc(fetch(&dsid));
34068     +       %do %while(&obs=0);
34069     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
34070     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
34071     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
34073     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
34074     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
34075     +            giniOrder = &order;
34076     +            role = "&role";
34077     +          end;
34079     +          %let obs = %sysfunc(fetch(&dsid));
34080     +       %end;
34081     +     %end;
34082     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
34083     +   run;
34086     +%mend EM_GENERATE_RESULTSTABLE;
34088     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
34090     +    /* instantiate the zchar macro to be used in adding bin definition */
34091     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
34092     +    %inc _temp;
34093     +    filename _temp;
34095     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
34096     +      by _variable_ binFlag _group_ LB;
34097     +    run;
34099     +    data tempExport;
34100     +      set sortedFine;
34101     +      by _variable_ binFlag _group_;
34102     +      length _split_value_ $200;
34104     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
34105     +      if binFlag = 0 then do;
34106     +        index = kindex(_variable_, "BIN_");
34107     +        if index gt 0 then do;
34108     +          _LEVEL_ = "INTERVAL";
34109     +        end;
34110     +        _Split_value_ = _split_value_;
34111     +        output;
34112     +      end;
34113     +      else do;
34114     +         * if last._group_ then do;
34115     +          index = kindex(_variable_, "BIN_");
34116     +          if index gt 0 then do;
34117     +            _LEVEL_ = "INTERVAL";
34118     +          end;
34119     +          _Split_value_ = %zchar(UB);
34120     +          output;
34121     +         * end;
34122     +      end;
34124     +      rename display_Var = _variable_;
34125     +      keep display_var _level_ _group_ _split_value_ binFlag;
34126     +    run;
34128     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
34129     +       data &EXPORTGROUPING;
34130     +         set tempexport;
34131     +       run;
34132     +    %end;
34133     +    %else %do;
34134     +       /* determine if EXPORTGROUPING already exists */
34135     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
34136     +         data &EXPORTGROUPING;
34137     +            set &EXPORTGROUPING tempexport;
34138     +         run;
34139     +       %end;
34140     +       %else %do;
34141     +         data &EXPORTGROUPING;
34142     +            set tempexport;
34143     +         run;
34144     +       %end;
34145     +    %end;
34147     +    proc datasets lib=work nolist;
34148     +      delete sortedFine tempexport;
34149     +    run;
34150     +    quit;
34152     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
34156     +
34157     +%macro report;
34158     +
34159     +   /* if createGrouping then create a dataset for export */
34160     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
34161     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
34162     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
34163     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
34164     +   %end;
34165     +   %else %do;
34166     +     proc datasets library=&EM_LIB nolist;
34167     +       delete &EM_NODEID._EXPORTGROUP;
34168     +     run;
34169     +     quit;
34170     +   %end;
34171     +
34172     +
34173     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
34174     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
34175     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
34176     +   %end;
34177     +   %else %do;
34178     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
34179     +   %end;
34180     +
34181     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
34182     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
34183     +
34184     +
34185     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS4 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS4.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.3784284989249;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34186      *------------------------------------------------------------*;
34187      * End REPORT: BINNING;
34188      *------------------------------------------------------------*;
34189      

34190      /* Reset EM Options */
34191      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
34192      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
34193      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
34194      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
34195      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
34196      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
