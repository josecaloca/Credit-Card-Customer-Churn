*------------------------------------------------------------*
User:                Jose Caloca
Date:                16 March 2021
Time:                00:06:20
Site:                70115216
Platform:            X64_10PRO
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:15" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16 March 2021
Time:                00:06:15
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2M24F8H "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2M24F8H new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:15" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:15" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
55634      proc freq data=EMWS4.Reg_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS4.Reg_VariableSet noprint;
55635      table ROLE*LEVEL/out=WORK.RegMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.RegMETA;
55636      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.REG_VARIABLESET.
NOTE: The data set WORK.REGMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.12 seconds
      cpu time            0.01 seconds
 
 
55637      proc print data=WORK.RegMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.RegMETA label noobs;
55638      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
55639      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
55640      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
55641      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
55642      run;
 
NOTE: There were 5 observations read from the data set WORK.REGMETA.
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55643      title10;
MPRINT(EM_DIAGRAM):   title10;
55644      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS4.BINNING_TRAIN EMWS4.BINNING_TRAIN
EMWS4.BINNING_TRAIN EMWS4.BINNING_TRAIN EMWS4 BINNING_TRAIN
EMWS4.BINNING_TRAIN EMWS4.BINNING_TRAIN
EMWS4.BINNING_TRAIN EMWS4.BINNING_TRAIN EMWS4 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS4.BINNING_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
55673      data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Reg_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
55674      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
55675      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
55676         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
55677      set EMWS4.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS4.IDS_BAD_DM( where=(_TYPE_="TARGET"));
55678      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
55679      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
55680      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
55681      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
55682      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
55683      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
55684      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
55685      end;
MPRINT(EM_DIAGRAM):   end;
55686      output;
MPRINT(EM_DIAGRAM):   output;
55687      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.REG_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
55688      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
55689      proc print data=WORK.Reg_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Reg_EVENT noobs label;
55690      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
55691      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
55692      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
55693      run;
 
NOTE: There were 1 observations read from the data set WORK.REG_EVENT.
NOTE: The PROCEDURE PRINT printed page 17.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55694      title10;
MPRINT(EM_DIAGRAM):   title10;
55695      proc print data = EMWS4.Ids_BAD_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS4.Ids_BAD_DD noobs label;
55696      var BAD
55697      TRAINPRIOR
55698      DECISION1
55699      DECISION2
55700      ;
MPRINT(EM_DIAGRAM):   var BAD TRAINPRIOR DECISION1 DECISION2 ;
55701      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
55702      title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   run;
55703      run;
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DD.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55704      title10;
MPRINT(EM_DIAGRAM):   title10;
55705      proc print data = EMWS4.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS4.Ids_BAD_DM noobs label;
55706      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
55707      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
55708      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
55709      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
55710      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
55711      run;
 
NOTE: There were 11 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
55712      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Preparing metadata for Training *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M19GMZE_;
MPRINT(EM_DIAGRAM):   set WORK.M19GMZE_;
MPRINT(EM_DIAGRAM):   where use = 'Y' or (role = 'INPUT' and use = 'D') ;
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   if use = 'D' then use = 'Y';
MPRINT(EM_DIAGRAM):   run;
55722      data WORK.M19GMZE_;
MPRINT(EM_DIAGRAM):    data WORK.M19GMZE_;
55723      set WORK.M19GMZE_ end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M19GMZE_ end=eof;
55724      output;
MPRINT(EM_DIAGRAM):   output;
55725      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
55726      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
55727      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
55728      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
55729      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
55730      output;
MPRINT(EM_DIAGRAM):   output;
55731      end;
MPRINT(EM_DIAGRAM):   end;
55732      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.M19GMZE_.
NOTE: The data set WORK.M19GMZE_ has 5 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DD.
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
55733      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
55734      * Reg: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Reg: Create decision matrix;
55735      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
55736      data WORK.BAD;
MPRINT(EM_DIAGRAM):   data WORK.BAD;
55737        length   BAD                              $  32
55738                 COUNT                                8
55739                 DATAPRIOR                            8
55740                 TRAINPRIOR                           8
55741                 DECPRIOR                             8
55742                 DECISION1                            8
55743                 DECISION2                            8
55744                 ;
MPRINT(EM_DIAGRAM):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
55745
55746        label    COUNT="Level Counts"
55747                 DATAPRIOR="Data Proportions"
55748                 TRAINPRIOR="Training Proportions"
55749                 DECPRIOR="Decision Priors"
55750                 DECISION1="1"
55751                 DECISION2="0"
55752                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
55753        format   COUNT 10.
55754                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
55755      BAD="1"; COUNT=1189; DATAPRIOR=0.1994966442953; TRAINPRIOR=0.1994966442953; DECPRIOR=0; DECISION1=0; DECISION2=5;
MPRINT(EM_DIAGRAM):   BAD="1";
MPRINT(EM_DIAGRAM):   COUNT=1189;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DIAGRAM):   DECPRIOR=0;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=5;
55756      output;
MPRINT(EM_DIAGRAM):   output;
55757      BAD="0"; COUNT=4771; DATAPRIOR=0.80050335570469; TRAINPRIOR=0.80050335570469; DECPRIOR=0; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   BAD="0";
MPRINT(EM_DIAGRAM):   COUNT=4771;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DIAGRAM):   DECPRIOR=0;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
55758      output;
MPRINT(EM_DIAGRAM):   output;
55759      ;
MPRINT(EM_DIAGRAM):   ;
55760      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.BAD has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55761      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
55762      modify BAD(type=LOSS label=BAD);
MPRINT(EM_DIAGRAM):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
55763      label DECISION1= '1';
55764      label DECISION2= '0';
55765      run;
 
NOTE: MODIFY was successful for WORK.BAD.DATA.
55766      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
55767      data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
55768      set EMWS4.BINNING_TRAIN(keep=
55769      BAD GRP_IMP_DELINQ GRP_IMP_DEROG GRP_IMP_NINQ );
MPRINT(EM_DIAGRAM):   set EMWS4.BINNING_TRAIN(keep= BAD GRP_IMP_DELINQ GRP_IMP_DEROG GRP_IMP_NINQ );
55770      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
55771      *------------------------------------------------------------* ;
55772      * Reg: DMDBClass Macro ;
55773      *------------------------------------------------------------* ;
55774      %macro DMDBClass;
55775          BAD(DESC) GRP_IMP_DELINQ(ASC) GRP_IMP_DEROG(ASC) GRP_IMP_NINQ(ASC)
55776      %mend DMDBClass;
55777      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
55778      * Reg: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Reg: DMDBVar Macro ;
55779      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
55780      %macro DMDBVar;
55781
55782      %mend DMDBVar;
55783      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
55784      * Reg: Create DMDB;
MPRINT(EM_DIAGRAM):   * Reg: Create DMDB;
55785      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
55786      proc dmdb batch data=WORK.EM_DMREG
55787      dmdbcat=WORK.Reg_DMDB
55788      maxlevel = 513
55789      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Reg_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
55790      class %DMDBClass;
MPRINT(DMDBCLASS):   BAD(DESC) GRP_IMP_DELINQ(ASC) GRP_IMP_DEROG(ASC) GRP_IMP_NINQ(ASC)
MPRINT(EM_DIAGRAM):  ;
55791      var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(EM_DIAGRAM):  ;
55792      target
55793      BAD
55794      ;
MPRINT(EM_DIAGRAM):   target BAD ;
55795      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_TRAIN.
NOTE: There were 2979 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
55796      quit;
55797      *--- end code ---*;
 
55798      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
55799      * Reg: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Reg: Run DMREG procedure;
55800      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
55801      proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB
55802      validata = EMWS4.BINNING_VALIDATE
55803      outest = EMWS4.Reg_EMESTIMATE
55804      outterms = EMWS4.Reg_OUTTERMS
55805      outmap= EMWS4.Reg_MAPDS namelen=200
55806      ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Reg_DMDB validata = EMWS4.BINNING_VALIDATE outest = EMWS4.Reg_EMESTIMATE outterms = EMWS4.Reg_OUTTERMS outmap= EMWS4.Reg_MAPDS namelen=200 ;
55807      class
55808      BAD
55809      GRP_IMP_DELINQ
55810      GRP_IMP_DEROG
55811      GRP_IMP_NINQ
55812      ;
MPRINT(EM_DIAGRAM):   class BAD GRP_IMP_DELINQ GRP_IMP_DEROG GRP_IMP_NINQ ;
55813      model BAD =
55814      GRP_IMP_DELINQ
55815      GRP_IMP_DEROG
55816      GRP_IMP_NINQ
55817      /error=binomial link=LOGIT
55818      coding=DEVIATION
55819      nodesignprint
55820      selection=STEPWISE choose=VDECDATA
55821      Hierarchy=CLASS
55822      Rule=NONE
55823      ;
MPRINT(EM_DIAGRAM):   model BAD = GRP_IMP_DELINQ GRP_IMP_DEROG GRP_IMP_NINQ /error=binomial link=LOGIT coding=DEVIATION nodesignprint selection=STEPWISE choose=VDECDATA Hierarchy=CLASS Rule=NONE ;
55824      ;
MPRINT(EM_DIAGRAM):   ;
55825      decision decdata=WORK.BAD
55826      decvars=
55827      DECISION1
55828      DECISION2
55829      ;
MPRINT(EM_DIAGRAM):   decision decdata=WORK.BAD decvars= DECISION1 DECISION2 ;
55830      score data=EMWS4.BINNING_TEST
55831      out=_null_
55832      outfit=EMWS4.Reg_FITTEST
55833      role = TEST
55834      ;
MPRINT(EM_DIAGRAM):   score data=EMWS4.BINNING_TEST out=_null_ outfit=EMWS4.Reg_FITTEST role = TEST ;
55835      code file="C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMPUBLISHSCORE.sas"
55836      group=Reg
55837      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMPUBLISHSCORE.sas" group=Reg ;
55838      code file="C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas"
55839      group=Reg
55840      residual
55841      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas" group=Reg residual ;
55842      run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that BAD=1.
NOTE: Convergence criterion (ABSGCONV=0.00001) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMPUBLISHSCORE.sas opened.
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas opened.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      58 at 107384:41    43 at 107385:39    251 at 107386:43   251 at 107387:14   25 at 107388:14    106 at 107388:43   121 at 107389:14   26 at 107389:40    33 at 107390:14    100 at 107390:39
NOTE: There were 1193 observations read from the data set EMWS4.PART_TEST.
NOTE: There were 1193 observations read from the data set EMWS4.VARCLUS_TEST.
NOTE: View EMWS4.BINNING_TEST.VIEW used (Total process time):
      real time           0.25 seconds
      cpu time            0.23 seconds
 
NOTE: There were 1193 observations read from the data set EMWS4.IMPT_TEST.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
NOTE: View EMWS4.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.31 seconds
      cpu time            0.29 seconds
 
NOTE: There were 1788 observations read from the data set EMWS4.IMPT_VALIDATE.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.40 seconds
      cpu time            0.37 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_TRAIN.
NOTE: There were 2979 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1788 observations read from the data set EMWS4.BINNING_VALIDATE.
NOTE: There were 1193 observations read from the data set EMWS4.BINNING_TEST.
NOTE: The data set EMWS4.REG_EMESTIMATE has 15 observations and 49 variables.
NOTE: The data set EMWS4.REG_OUTTERMS has 5 observations and 6 variables.
NOTE: The data set EMWS4.REG_MAPDS has 2 observations and 10 variables.
NOTE: The data set EMWS4.REG_FITTEST has 4 observations and 17 variables.
NOTE: The PROCEDURE DMREG printed pages 20-24.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.46 seconds
      cpu time            0.37 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
55843      quit;
 
55844      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
55845      delete Reg_DMDB;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB;
55846      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.REG_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
55847      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
55848      proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
55849      delete Reg_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Reg_DMDB / memtype=catalog;
55850      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.REG_DMDB (memtype=CATALOG).
55851      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55852      data WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):    data WORK.ESTIMATE;
55853      length _NAME_ $32;
MPRINT(EM_DIAGRAM):   length _NAME_ $32;
55854      set EMWS4.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMESTIMATE;
55855      drop _AIC_--_VALOSS_
55856      ;
MPRINT(EM_DIAGRAM):   drop _AIC_--_VALOSS_ ;
55857      where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_ in('PARMS', 'T', 'P');
55858      drop _STEP_ _CHOSEN_;
MPRINT(EM_DIAGRAM):   drop _STEP_ _CHOSEN_;
55859      select(_TYPE_);
MPRINT(EM_DIAGRAM):   select(_TYPE_);
55860      when('PARMS') _NAME_='Coefficient';
MPRINT(EM_DIAGRAM):   when('PARMS') _NAME_='Coefficient';
55861      when('T') _NAME_='tValue';
MPRINT(EM_DIAGRAM):   when('T') _NAME_='tValue';
55862      when('P') _NAME_='PValue';
MPRINT(EM_DIAGRAM):   when('P') _NAME_='PValue';
55863      otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
55864      end;
MPRINT(EM_DIAGRAM):   end;
55865      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS4.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set WORK.ESTIMATE has 3 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55866      proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.ESTIMATE out=WORK.ESTIMATE(rename=(_NAME_=Effect));
55867      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 9 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
55868      proc transpose data=EMWS4.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable
55869      ));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS4.Reg_MAPDS out=WORK.MAP(rename=(_NAME_=Effect INPUT=Variable ));
55870      var 'GRP_IMP_DELINQ2'n--'GRP_IMP_NINQ5'n;
MPRINT(EM_DIAGRAM):   var 'GRP_IMP_DELINQ2'n--'GRP_IMP_NINQ5'n;
55871      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.REG_MAPDS.
NOTE: The data set WORK.MAP has 8 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
55872      proc sort data=WORK.MAP;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MAP;
55873      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
55874      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.MAP.
NOTE: The data set WORK.MAP has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
55875      proc sort data=WORK.ESTIMATE;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.ESTIMATE;
55876      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
55877      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set WORK.ESTIMATE.
NOTE: The data set WORK.ESTIMATE has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
55878      data EMWS4.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EFFECTS(rename=(_LABEL_=EffectLabel));
55879      length Variable ClassLevel $32;
MPRINT(EM_DIAGRAM):   length Variable ClassLevel $32;
55880      merge WORK.ESTIMATE WORK.MAP;
MPRINT(EM_DIAGRAM):   merge WORK.ESTIMATE WORK.MAP;
55881      by Effect;
MPRINT(EM_DIAGRAM):   by Effect;
55882      label Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Variable = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" Sign = "%sysfunc(sasmsg(sashelp.dmine, rpt_sign_vlabel, NOQUOTE))" ClassLevel =
55883         "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))" Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" _LABEL_ =
55884         "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" CODE = "%sysfunc(sasmsg(sashelp.dmine, rpt_scorecodevar_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label Effect = "Effect" Variable = "Variable" Sign = "Sign" ClassLevel = "Level" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" _LABEL_ = "Effect Label" CODE = "Score Code Variable";
55885      label tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))" PValue = "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))"
55885    ! ;
MPRINT(EM_DIAGRAM):   label tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
55886      abstvalue = abs(tValue);
MPRINT(EM_DIAGRAM):   abstvalue = abs(tValue);
55887      if index(Effect, 'Intercept') then do;
MPRINT(EM_DIAGRAM):   if index(Effect, 'Intercept') then do;
55888      variable = 'Intercept';
MPRINT(EM_DIAGRAM):   variable = 'Intercept';
55889      classLevel = scan(_LABEL_, 2, '=');
MPRINT(EM_DIAGRAM):   classLevel = scan(_LABEL_, 2, '=');
55890      end;
MPRINT(EM_DIAGRAM):   end;
55891      if ^indexc(variable, '*') then do;
MPRINT(EM_DIAGRAM):   if ^indexc(variable, '*') then do;
55892      if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
MPRINT(EM_DIAGRAM):   if length(effect)>length(variable) then classlevel = substr(Effect, length(variable)+1);
55893      end;
MPRINT(EM_DIAGRAM):   end;
55894      if Effect eq '' then Effect = Variable;
MPRINT(EM_DIAGRAM):   if Effect eq '' then Effect = Variable;
55895      if coefficient < 0 then sign = '-';
MPRINT(EM_DIAGRAM):   if coefficient < 0 then sign = '-';
55896      else sign = '+';
MPRINT(EM_DIAGRAM):   else sign = '+';
55897      abscoefficient = abs(coefficient);
MPRINT(EM_DIAGRAM):   abscoefficient = abs(coefficient);
55898      if _LABEL_ = '' then _LABEL_ = Effect;
MPRINT(EM_DIAGRAM):   if _LABEL_ = '' then _LABEL_ = Effect;
55899      if coefficient ne . then output;
MPRINT(EM_DIAGRAM):   if coefficient ne . then output;
55900      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      4 at 55886:13   4 at 55897:18
NOTE: There were 9 observations read from the data set WORK.ESTIMATE.
NOTE: There were 8 observations read from the data set WORK.MAP.
NOTE: The data set EMWS4.REG_EFFECTS has 5 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
55901      proc sort data =EMWS4.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS4.Reg_EFFECTS;
55902      by
55903      descending abstvalue;
MPRINT(EM_DIAGRAM):   by descending abstvalue;
55904      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.REG_EFFECTS.
NOTE: The data set EMWS4.REG_EFFECTS has 5 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55905      data EMWS4.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EFFECTS;
55906      set EMWS4.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EFFECTS;
55907      format TEffectNum 3.;
MPRINT(EM_DIAGRAM):   format TEffectNum 3.;
55908      label TEffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_teffectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label TEffectNum = "TScore Number";
55909      retain TEffectNum;
MPRINT(EM_DIAGRAM):   retain TEffectNum;
55910      TEffectNum = _N_;
MPRINT(EM_DIAGRAM):   TEffectNum = _N_;
55911      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.REG_EFFECTS.
NOTE: The data set EMWS4.REG_EFFECTS has 5 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55912      proc sort data =EMWS4.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):    proc sort data =EMWS4.Reg_EFFECTS;
55913      by
55914      descending absCoefficient;
MPRINT(EM_DIAGRAM):   by descending absCoefficient;
55915      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.REG_EFFECTS.
NOTE: The data set EMWS4.REG_EFFECTS has 5 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
55916      data EMWS4.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EFFECTS;
55917      set EMWS4.Reg_EFFECTS;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EFFECTS;
55918      format EffectNum 3.;
MPRINT(EM_DIAGRAM):   format EffectNum 3.;
55919      label EffectNum = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectnum_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectNum = "Effect Number";
55920      retain EffectNum;
MPRINT(EM_DIAGRAM):   retain EffectNum;
55921      EffectNum = _N_;
MPRINT(EM_DIAGRAM):   EffectNum = _N_;
55922      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.REG_EFFECTS.
NOTE: The data set EMWS4.REG_EFFECTS has 5 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
55923      proc transpose data=EMWS4.Reg_EMESTIMATE out=EMWS4.Reg_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS4.Reg_EMESTIMATE out=EMWS4.Reg_ESTIMATEGRID(rename=(PARMS=Coefficient T=TValue _NAME_=Effect _LABEL_=EffectLabel));
55924      where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
MPRINT(EM_DIAGRAM):   where _CHOSEN_ eq '' and _TYPE_ in('PARMS', 'T', 'P');
55925      var 'GRP_IMP_DELINQ2'n--'GRP_IMP_NINQ5'n;
MPRINT(EM_DIAGRAM):   var 'GRP_IMP_DELINQ2'n--'GRP_IMP_NINQ5'n;
55926      by _STEP_;
MPRINT(EM_DIAGRAM):   by _STEP_;
55927      id _TYPE_;
MPRINT(EM_DIAGRAM):   id _TYPE_;
55928      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.REG_EMESTIMATE.
      WHERE (_CHOSEN_=' ') and _TYPE_ in ('P', 'PARMS', 'T');
NOTE: The data set EMWS4.REG_ESTIMATEGRID has 32 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
55929      data EMWS4.Reg_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_ESTIMATEGRID;
55930      set EMWS4.Reg_ESTIMATEGRID;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_ESTIMATEGRID;
55931      if EffectLabel eq '' then EffectLabel = Effect;
MPRINT(EM_DIAGRAM):   if EffectLabel eq '' then EffectLabel = Effect;
55932      label EffectLabel = "%sysfunc(sasmsg(sashelp.dmine, rpt_effectLabel_vlabel, NOQUOTE))" Effect = "%sysfunc(sasmsg(sashelp.dmine, rpt_effect_vlabel, NOQUOTE))" Abscoefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_abscoefficient_vlabel, NOQUOTE))"
55933         Coefficient = "%sysfunc(sasmsg(sashelp.dmine, rpt_coefficient_vlabel, NOQUOTE))" tvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_tvalue_vlabel,         NOQUOTE))" abstvalue = "%sysfunc(sasmsg(sashelp.dmine, rpt_absoluteTvalue_vlabel, NOQUOTE))"
55933    ! PValue =
55934         "%sysfunc(sasmsg(sashelp.dmine, rpt_pvalue_vlabel,         NOQUOTE))";
MPRINT(EM_DIAGRAM):   label EffectLabel = "Effect Label" Effect = "Effect" Abscoefficient = "Absolute Coefficient" Coefficient = "Coefficient" tvalue = "T-value" abstvalue = "Absolute T-value" PValue = "P Value";
55935      AbsCoefficient = abs(Coefficient);
MPRINT(EM_DIAGRAM):   AbsCoefficient = abs(Coefficient);
55936      AbsTValue = abs(TValue);
MPRINT(EM_DIAGRAM):   AbsTValue = abs(TValue);
55937      where coefficient ne .;
MPRINT(EM_DIAGRAM):   where coefficient ne .;
55938      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable PValue is uninitialized.
NOTE: There were 14 observations read from the data set EMWS4.REG_ESTIMATEGRID.
      WHERE coefficient not = .;
NOTE: The data set EMWS4.REG_ESTIMATEGRID has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:17" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                16 March 2021
Time:                00:06:17
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1YWYRPS "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1YWYRPS new;
MPRINT(EM_DIAGRAM):   run;
56040      proc transpose data=EMWS4.Reg_EMESTIMATE out=WORK.TEMPREG;
MPRINT(EM_DIAGRAM):    proc transpose data=EMWS4.Reg_EMESTIMATE out=WORK.TEMPREG;
56041      where _CHOSEN_ ne '' and _TYPE_='PARMS';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '' and _TYPE_='PARMS';
56042      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.REG_EMESTIMATE.
      WHERE (_CHOSEN_ not = ' ') and (_TYPE_='PARMS');
NOTE: The data set WORK.TEMPREG has 46 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
56043      proc transpose data=EMWS4.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
MPRINT(EM_DIAGRAM):   proc transpose data=EMWS4.Reg_MAPDS out=WORK.TEMPREG2(rename=(TARGET=_TARGET_));
56044      var "GRP_IMP_DELINQ2"n--"GRP_IMP_NINQ5"n;
MPRINT(EM_DIAGRAM):   var "GRP_IMP_DELINQ2"n--"GRP_IMP_NINQ5"n;
56045      run;
MPRINT(EM_DIAGRAM):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 2 observations read from the data set EMWS4.REG_MAPDS.
NOTE: The data set WORK.TEMPREG2 has 8 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
56046      proc sort data=WORK.TEMPREG NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG NOTHREADS;
56047      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
56048      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK.TEMPREG.
NOTE: The data set WORK.TEMPREG has 46 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
56049      proc sort data=WORK.TEMPREG2 NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG2 NOTHREADS;
56050      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
56051      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG2 has 8 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
56052      data WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3;
56053      merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
MPRINT(EM_DIAGRAM):   merge WORK.TEMPREG(in=ina) WORK.TEMPREG2(in=inb);
56054      by _NAME_;
MPRINT(EM_DIAGRAM):   by _NAME_;
56055      if (ina and inb) and BAD ne . then output;
MPRINT(EM_DIAGRAM):   if (ina and inb) and BAD ne . then output;
56056      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 46 observations read from the data set WORK.TEMPREG.
NOTE: There were 8 observations read from the data set WORK.TEMPREG2.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
56057      data WORK.TEMPREG3(KEEP=TERM);
MPRINT(EM_DIAGRAM):   data WORK.TEMPREG3(KEEP=TERM);
56058      length term $32;
MPRINT(EM_DIAGRAM):   length term $32;
56059      set WORK.TEMPREG3;
MPRINT(EM_DIAGRAM):   set WORK.TEMPREG3;
56060      i=1;
MPRINT(EM_DIAGRAM):   i=1;
56061      do while( scan(input , i, '*') ne '' );
MPRINT(EM_DIAGRAM):   do while( scan(input , i, '*') ne '' );
56062      term= scan(input , i, '*');
MPRINT(EM_DIAGRAM):   term= scan(input , i, '*');
56063      i=i+1;
MPRINT(EM_DIAGRAM):   i=i+1;
56064      output;
MPRINT(EM_DIAGRAM):   output;
56065      end;
MPRINT(EM_DIAGRAM):   end;
56066      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: The data set WORK.TEMPREG3 has 4 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
56067      proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.TEMPREG3 nodupkey NOTHREADS;
56068      by TERM;
MPRINT(EM_DIAGRAM):   by TERM;
56069      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.TEMPREG3.
NOTE: 2 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPREG3 has 2 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
56070      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
56071      *------------------------------------------------------------*;
56072      * Reg: Scoring DATA data;
56073      *------------------------------------------------------------*;
56074      data EMWS4.Reg_TRAIN
56075      / view=EMWS4.Reg_TRAIN
56076      ;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_TRAIN / view=EMWS4.Reg_TRAIN ;
56077      set EMWS4.BINNING_TRAIN
56078      ;
MPRINT(EM_DIAGRAM):   set EMWS4.BINNING_TRAIN ;
56079      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas.
56080     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56081     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
56082     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56083     +
56084     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
56085     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
56086     +
56087     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
56088     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
56089     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
56090     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
56091     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
56092     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
56093     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
56094     +
56095     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
56096     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
56097     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
56098     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
56099     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
56100     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56101     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
56102     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
56103     +end;
MPRINT(EM_DIAGRAM):   end;
56104     +else do;
MPRINT(EM_DIAGRAM):   else do;
56105     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
56106     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
56107     +   end;
MPRINT(EM_DIAGRAM):   end;
56108     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
56109     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
56110     +   end;
MPRINT(EM_DIAGRAM):   end;
56111     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56112     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
56113     +   end;
MPRINT(EM_DIAGRAM):   end;
56114     +end;
MPRINT(EM_DIAGRAM):   end;
56115     +
56116     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
56117     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
56118     +
56119     +*** Generate dummy variables for GRP_IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DELINQ ;
56120     +drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
56121     +if missing( GRP_IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DELINQ ) then do;
56122     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
56123     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
56124     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
56125     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56126     +end;
MPRINT(EM_DIAGRAM):   end;
56127     +else do;
MPRINT(EM_DIAGRAM):   else do;
56128     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
56129     +   _dm12 = put( GRP_IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DELINQ , BEST12. );
56130     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56131     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
56132     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
56133     +      _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
56134     +   end;
MPRINT(EM_DIAGRAM):   end;
56135     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
56136     +      _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
56137     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
56138     +   end;
MPRINT(EM_DIAGRAM):   end;
56139     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
56140     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
56141     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
56142     +   end;
MPRINT(EM_DIAGRAM):   end;
56143     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56144     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
56145     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
56146     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
56147     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56148     +   end;
MPRINT(EM_DIAGRAM):   end;
56149     +end;
MPRINT(EM_DIAGRAM):   end;
56150     +
56151     +*** Generate dummy variables for GRP_IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DEROG ;
56152     +drop _2_0 _2_1 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 ;
56153     +if missing( GRP_IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DEROG ) then do;
56154     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
56155     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
56156     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
56157     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56158     +end;
MPRINT(EM_DIAGRAM):   end;
56159     +else do;
MPRINT(EM_DIAGRAM):   else do;
56160     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
56161     +   _dm12 = put( GRP_IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DEROG , BEST12. );
56162     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56163     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
56164     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
56165     +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
56166     +   end;
MPRINT(EM_DIAGRAM):   end;
56167     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
56168     +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
56169     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
56170     +   end;
MPRINT(EM_DIAGRAM):   end;
56171     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
56172     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
56173     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
56174     +   end;
MPRINT(EM_DIAGRAM):   end;
56175     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56176     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
56177     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
56178     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
56179     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56180     +   end;
MPRINT(EM_DIAGRAM):   end;
56181     +end;
MPRINT(EM_DIAGRAM):   end;
56182     +
56183     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
56184     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
56185     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
56186     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
56187     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
56188     +end;
MPRINT(EM_DIAGRAM):   end;
56189     +
56190     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
56191     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
56192     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
56193     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
56194     +
56195     +***  Effect: GRP_IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_IMP_DELINQ ;
56196     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
56197     +_LP0 = _LP0 + (   -0.95433214767846) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.95433214767846) * _TEMP * _1_0;
56198     +_LP0 = _LP0 + (   -0.07771239174577) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07771239174577) * _TEMP * _1_1;
56199     +
56200     +***  Effect: GRP_IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_IMP_DEROG ;
56201     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
56202     +_LP0 = _LP0 + (   -0.94790053438677) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.94790053438677) * _TEMP * _2_0;
56203     +_LP0 = _LP0 + (    0.11606584736529) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11606584736529) * _TEMP * _2_1;
56204     +
56205     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
56206     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
56207     +_TEMP =    -0.07908916701392 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.07908916701392 + _LP0;
56208     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
56209     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
56210     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
56211     +end;
MPRINT(EM_DIAGRAM):   end;
56212     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
56213     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
56214     +
56215     +REGDR1:
56216     +
56217     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
56218     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
56219     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
56220     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
56221     +end;
MPRINT(EM_DIAGRAM):   end;
56222     +else do;
MPRINT(EM_DIAGRAM):   else do;
56223     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
56224     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
56225     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
56226     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
56227     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
56228     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
56229     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
56230     +   end;
MPRINT(EM_DIAGRAM):   end;
56231     +end;
MPRINT(EM_DIAGRAM):   end;
56232     +
56233     +
56234     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
56235     +label D_BAD = 'Decision: BAD' ;
MPRINT(EM_DIAGRAM):   label D_BAD = 'Decision: BAD' ;
56236     +label EL_BAD = 'Expected Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label EL_BAD = 'Expected Loss: BAD' ;
56237     +label BL_BAD = 'Best Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label BL_BAD = 'Best Loss: BAD' ;
56238     +label CL_BAD = 'Computed Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label CL_BAD = 'Computed Loss: BAD' ;
56239     +
56240     +length D_BAD $ 9;
MPRINT(EM_DIAGRAM):   length D_BAD $ 9;
56241     +
56242     +D_BAD = ' ';
MPRINT(EM_DIAGRAM):   D_BAD = ' ';
56243     +EL_BAD = .;
MPRINT(EM_DIAGRAM):   EL_BAD = .;
56244     +BL_BAD = .;
MPRINT(EM_DIAGRAM):   BL_BAD = .;
56245     +CL_BAD = .;
MPRINT(EM_DIAGRAM):   CL_BAD = .;
56246     +
56247     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
56248     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
56249     +
56250     +D_BAD = '1' ;
MPRINT(EM_DIAGRAM):   D_BAD = '1' ;
56251     +EL_BAD = _P0 * 0 + _P1 * 1;
MPRINT(EM_DIAGRAM):   EL_BAD = _P0 * 0 + _P1 * 1;
56252     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
56253     +_sum = _P0 * 5 + _P1 * 0;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 5 + _P1 * 0;
56254     +if _sum < EL_BAD + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_BAD + -2.27374E-12 then do;
56255     +   EL_BAD = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_BAD = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
56256     +   D_BAD = '0' ;
MPRINT(EM_DIAGRAM):   D_BAD = '0' ;
56257     +end;
MPRINT(EM_DIAGRAM):   end;
56258     +
56259     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
56260     +array REGdema [2,2] _temporary_ (
56261     +/* row 1 */  0 5
56262     +/* row 2 */  1 0
56263     +);
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 0 5 1 0 );
56264     +
56265     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
56266     +drop _tarnum; select( F_BAD );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_BAD );
56267     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
56268     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
56269     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
56270     +end;
MPRINT(EM_DIAGRAM):   end;
56271     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
56272     +
56273     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
56274     +CL_BAD = REGdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_BAD = REGdema [_tarnum,_decnum];
56275     +
56276     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
56277     +array REGdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 0 0);
56278     +BL_BAD = REGdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_BAD = REGdebe [_tarnum];
56279     +
56280     +
56281     +REGdeex:;
MPRINT(EM_DIAGRAM):   REGdeex:;
56282     +
56283     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
56284     +
56285     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
56286     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
56287     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
56288     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
56289     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
56290     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
56291     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
56292     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
56293     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
56294     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
56295     +end;
MPRINT(EM_DIAGRAM):   end;
56296     +I_BAD = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REGDRF[_IY];
56297     +U_BAD = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REGDRU[_IY];
56298     +
56299     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56300     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
56301     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
56302      run;
 
NOTE: DATA STEP view saved on file EMWS4.REG_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
56303      quit;
56304      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
56305      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
56306      *------------------------------------------------------------*;
56307      * Reg: Scoring VALIDATE data;
56308      *------------------------------------------------------------*;
56309      data EMWS4.Reg_VALIDATE
56310      / view=EMWS4.Reg_VALIDATE
56311      ;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_VALIDATE / view=EMWS4.Reg_VALIDATE ;
56312      set EMWS4.BINNING_VALIDATE
56313      ;
MPRINT(EM_DIAGRAM):   set EMWS4.BINNING_VALIDATE ;
56314      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas.
56315     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56316     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
56317     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56318     +
56319     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
56320     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
56321     +
56322     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
56323     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
56324     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
56325     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
56326     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
56327     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
56328     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
56329     +
56330     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
56331     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
56332     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
56333     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
56334     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
56335     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56336     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
56337     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
56338     +end;
MPRINT(EM_DIAGRAM):   end;
56339     +else do;
MPRINT(EM_DIAGRAM):   else do;
56340     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
56341     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
56342     +   end;
MPRINT(EM_DIAGRAM):   end;
56343     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
56344     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
56345     +   end;
MPRINT(EM_DIAGRAM):   end;
56346     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56347     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
56348     +   end;
MPRINT(EM_DIAGRAM):   end;
56349     +end;
MPRINT(EM_DIAGRAM):   end;
56350     +
56351     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
56352     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
56353     +
56354     +*** Generate dummy variables for GRP_IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DELINQ ;
56355     +drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
56356     +if missing( GRP_IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DELINQ ) then do;
56357     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
56358     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
56359     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
56360     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56361     +end;
MPRINT(EM_DIAGRAM):   end;
56362     +else do;
MPRINT(EM_DIAGRAM):   else do;
56363     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
56364     +   _dm12 = put( GRP_IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DELINQ , BEST12. );
56365     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56366     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
56367     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
56368     +      _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
56369     +   end;
MPRINT(EM_DIAGRAM):   end;
56370     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
56371     +      _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
56372     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
56373     +   end;
MPRINT(EM_DIAGRAM):   end;
56374     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
56375     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
56376     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
56377     +   end;
MPRINT(EM_DIAGRAM):   end;
56378     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56379     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
56380     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
56381     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
56382     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56383     +   end;
MPRINT(EM_DIAGRAM):   end;
56384     +end;
MPRINT(EM_DIAGRAM):   end;
56385     +
56386     +*** Generate dummy variables for GRP_IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DEROG ;
56387     +drop _2_0 _2_1 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 ;
56388     +if missing( GRP_IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DEROG ) then do;
56389     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
56390     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
56391     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
56392     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56393     +end;
MPRINT(EM_DIAGRAM):   end;
56394     +else do;
MPRINT(EM_DIAGRAM):   else do;
56395     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
56396     +   _dm12 = put( GRP_IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DEROG , BEST12. );
56397     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56398     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
56399     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
56400     +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
56401     +   end;
MPRINT(EM_DIAGRAM):   end;
56402     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
56403     +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
56404     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
56405     +   end;
MPRINT(EM_DIAGRAM):   end;
56406     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
56407     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
56408     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
56409     +   end;
MPRINT(EM_DIAGRAM):   end;
56410     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56411     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
56412     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
56413     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
56414     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56415     +   end;
MPRINT(EM_DIAGRAM):   end;
56416     +end;
MPRINT(EM_DIAGRAM):   end;
56417     +
56418     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
56419     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
56420     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
56421     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
56422     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
56423     +end;
MPRINT(EM_DIAGRAM):   end;
56424     +
56425     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
56426     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
56427     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
56428     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
56429     +
56430     +***  Effect: GRP_IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_IMP_DELINQ ;
56431     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
56432     +_LP0 = _LP0 + (   -0.95433214767846) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.95433214767846) * _TEMP * _1_0;
56433     +_LP0 = _LP0 + (   -0.07771239174577) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07771239174577) * _TEMP * _1_1;
56434     +
56435     +***  Effect: GRP_IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_IMP_DEROG ;
56436     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
56437     +_LP0 = _LP0 + (   -0.94790053438677) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.94790053438677) * _TEMP * _2_0;
56438     +_LP0 = _LP0 + (    0.11606584736529) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11606584736529) * _TEMP * _2_1;
56439     +
56440     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
56441     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
56442     +_TEMP =    -0.07908916701392 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.07908916701392 + _LP0;
56443     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
56444     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
56445     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
56446     +end;
MPRINT(EM_DIAGRAM):   end;
56447     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
56448     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
56449     +
56450     +REGDR1:
56451     +
56452     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
56453     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
56454     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
56455     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
56456     +end;
MPRINT(EM_DIAGRAM):   end;
56457     +else do;
MPRINT(EM_DIAGRAM):   else do;
56458     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
56459     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
56460     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
56461     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
56462     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
56463     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
56464     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
56465     +   end;
MPRINT(EM_DIAGRAM):   end;
56466     +end;
MPRINT(EM_DIAGRAM):   end;
56467     +
56468     +
56469     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
56470     +label D_BAD = 'Decision: BAD' ;
MPRINT(EM_DIAGRAM):   label D_BAD = 'Decision: BAD' ;
56471     +label EL_BAD = 'Expected Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label EL_BAD = 'Expected Loss: BAD' ;
56472     +label BL_BAD = 'Best Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label BL_BAD = 'Best Loss: BAD' ;
56473     +label CL_BAD = 'Computed Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label CL_BAD = 'Computed Loss: BAD' ;
56474     +
56475     +length D_BAD $ 9;
MPRINT(EM_DIAGRAM):   length D_BAD $ 9;
56476     +
56477     +D_BAD = ' ';
MPRINT(EM_DIAGRAM):   D_BAD = ' ';
56478     +EL_BAD = .;
MPRINT(EM_DIAGRAM):   EL_BAD = .;
56479     +BL_BAD = .;
MPRINT(EM_DIAGRAM):   BL_BAD = .;
56480     +CL_BAD = .;
MPRINT(EM_DIAGRAM):   CL_BAD = .;
56481     +
56482     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
56483     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
56484     +
56485     +D_BAD = '1' ;
MPRINT(EM_DIAGRAM):   D_BAD = '1' ;
56486     +EL_BAD = _P0 * 0 + _P1 * 1;
MPRINT(EM_DIAGRAM):   EL_BAD = _P0 * 0 + _P1 * 1;
56487     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
56488     +_sum = _P0 * 5 + _P1 * 0;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 5 + _P1 * 0;
56489     +if _sum < EL_BAD + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_BAD + -2.27374E-12 then do;
56490     +   EL_BAD = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_BAD = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
56491     +   D_BAD = '0' ;
MPRINT(EM_DIAGRAM):   D_BAD = '0' ;
56492     +end;
MPRINT(EM_DIAGRAM):   end;
56493     +
56494     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
56495     +array REGdema [2,2] _temporary_ (
56496     +/* row 1 */  0 5
56497     +/* row 2 */  1 0
56498     +);
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 0 5 1 0 );
56499     +
56500     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
56501     +drop _tarnum; select( F_BAD );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_BAD );
56502     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
56503     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
56504     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
56505     +end;
MPRINT(EM_DIAGRAM):   end;
56506     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
56507     +
56508     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
56509     +CL_BAD = REGdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_BAD = REGdema [_tarnum,_decnum];
56510     +
56511     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
56512     +array REGdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 0 0);
56513     +BL_BAD = REGdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_BAD = REGdebe [_tarnum];
56514     +
56515     +
56516     +REGdeex:;
MPRINT(EM_DIAGRAM):   REGdeex:;
56517     +
56518     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
56519     +
56520     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
56521     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
56522     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
56523     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
56524     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
56525     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
56526     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
56527     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
56528     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
56529     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
56530     +end;
MPRINT(EM_DIAGRAM):   end;
56531     +I_BAD = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REGDRF[_IY];
56532     +U_BAD = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REGDRU[_IY];
56533     +
56534     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56535     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
56536     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
56537      run;
 
NOTE: DATA STEP view saved on file EMWS4.REG_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.BINNING_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
56538      quit;
56539      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
56540      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
56541      *------------------------------------------------------------*;
56542      * Reg: Scoring TEST data;
56543      *------------------------------------------------------------*;
56544      data EMWS4.Reg_TEST
56545      / view=EMWS4.Reg_TEST
56546      ;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_TEST / view=EMWS4.Reg_TEST ;
56547      set EMWS4.BINNING_TEST
56548      ;
MPRINT(EM_DIAGRAM):   set EMWS4.BINNING_TEST ;
56549      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMFLOWSCORE.sas.
56550     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56551     +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
56552     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56553     +
56554     +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
56555     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
56556     +
56557     +length I_BAD $ 12;
MPRINT(EM_DIAGRAM):   length I_BAD $ 12;
56558     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
56559     +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
56560     +array REGDRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array REGDRF [2] $12 _temporary_ ('1' '0' );
56561     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
56562     +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
56563     +ARRAY REGDRU[2]  _TEMPORARY_ (1 0);
MPRINT(EM_DIAGRAM):   ARRAY REGDRU[2] _TEMPORARY_ (1 0);
56564     +
56565     +*** Generate dummy variables for BAD ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for BAD ;
56566     +drop _Y ;
MPRINT(EM_DIAGRAM):   drop _Y ;
56567     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
56568     +length F_BAD $ 12;
MPRINT(EM_DIAGRAM):   length F_BAD $ 12;
56569     +F_BAD = put( BAD , BEST12. );
MPRINT(EM_DIAGRAM):   F_BAD = put( BAD , BEST12. );
56570     +%DMNORMIP( F_BAD )
MPRINT(DMNORMIP):   call dmnorm(F_BAD,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56571     +if missing( BAD ) then do;
MPRINT(EM_DIAGRAM):   if missing( BAD ) then do;
56572     +   _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
56573     +end;
MPRINT(EM_DIAGRAM):   end;
56574     +else do;
MPRINT(EM_DIAGRAM):   else do;
56575     +   if F_BAD = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_BAD = '0' then do;
56576     +      _Y = 1;
MPRINT(EM_DIAGRAM):   _Y = 1;
56577     +   end;
MPRINT(EM_DIAGRAM):   end;
56578     +   else if F_BAD = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_BAD = '1' then do;
56579     +      _Y = 0;
MPRINT(EM_DIAGRAM):   _Y = 0;
56580     +   end;
MPRINT(EM_DIAGRAM):   end;
56581     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56582     +      _Y = .;
MPRINT(EM_DIAGRAM):   _Y = .;
56583     +   end;
MPRINT(EM_DIAGRAM):   end;
56584     +end;
MPRINT(EM_DIAGRAM):   end;
56585     +
56586     +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
56587     +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
56588     +
56589     +*** Generate dummy variables for GRP_IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DELINQ ;
56590     +drop _1_0 _1_1 ;
MPRINT(EM_DIAGRAM):   drop _1_0 _1_1 ;
56591     +if missing( GRP_IMP_DELINQ ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DELINQ ) then do;
56592     +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
56593     +   _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
56594     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
56595     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56596     +end;
MPRINT(EM_DIAGRAM):   end;
56597     +else do;
MPRINT(EM_DIAGRAM):   else do;
56598     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
56599     +   _dm12 = put( GRP_IMP_DELINQ , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DELINQ , BEST12. );
56600     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56601     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
56602     +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
56603     +      _1_1 = 0;
MPRINT(EM_DIAGRAM):   _1_1 = 0;
56604     +   end;
MPRINT(EM_DIAGRAM):   end;
56605     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
56606     +      _1_0 = 0;
MPRINT(EM_DIAGRAM):   _1_0 = 0;
56607     +      _1_1 = 1;
MPRINT(EM_DIAGRAM):   _1_1 = 1;
56608     +   end;
MPRINT(EM_DIAGRAM):   end;
56609     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
56610     +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
56611     +      _1_1 = -1;
MPRINT(EM_DIAGRAM):   _1_1 = -1;
56612     +   end;
MPRINT(EM_DIAGRAM):   end;
56613     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56614     +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
56615     +      _1_1 = .;
MPRINT(EM_DIAGRAM):   _1_1 = .;
56616     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
56617     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56618     +   end;
MPRINT(EM_DIAGRAM):   end;
56619     +end;
MPRINT(EM_DIAGRAM):   end;
56620     +
56621     +*** Generate dummy variables for GRP_IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_IMP_DEROG ;
56622     +drop _2_0 _2_1 ;
MPRINT(EM_DIAGRAM):   drop _2_0 _2_1 ;
56623     +if missing( GRP_IMP_DEROG ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_IMP_DEROG ) then do;
56624     +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
56625     +   _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
56626     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
56627     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56628     +end;
MPRINT(EM_DIAGRAM):   end;
56629     +else do;
MPRINT(EM_DIAGRAM):   else do;
56630     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
56631     +   _dm12 = put( GRP_IMP_DEROG , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_IMP_DEROG , BEST12. );
56632     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
56633     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
56634     +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
56635     +      _2_1 = 0;
MPRINT(EM_DIAGRAM):   _2_1 = 0;
56636     +   end;
MPRINT(EM_DIAGRAM):   end;
56637     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
56638     +      _2_0 = 0;
MPRINT(EM_DIAGRAM):   _2_0 = 0;
56639     +      _2_1 = 1;
MPRINT(EM_DIAGRAM):   _2_1 = 1;
56640     +   end;
MPRINT(EM_DIAGRAM):   end;
56641     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
56642     +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
56643     +      _2_1 = -1;
MPRINT(EM_DIAGRAM):   _2_1 = -1;
56644     +   end;
MPRINT(EM_DIAGRAM):   end;
56645     +   else do;
MPRINT(EM_DIAGRAM):   else do;
56646     +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
56647     +      _2_1 = .;
MPRINT(EM_DIAGRAM):   _2_1 = .;
56648     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
The SAS System
 
56649     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
56650     +   end;
MPRINT(EM_DIAGRAM):   end;
56651     +end;
MPRINT(EM_DIAGRAM):   end;
56652     +
56653     +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
56654     +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
56655     +   _P0 = 0.1993957704;
MPRINT(EM_DIAGRAM):   _P0 = 0.1993957704;
56656     +   _P1 = 0.8006042296;
MPRINT(EM_DIAGRAM):   _P1 = 0.8006042296;
56657     +   goto REGDR1;
MPRINT(EM_DIAGRAM):   goto REGDR1;
56658     +end;
MPRINT(EM_DIAGRAM):   end;
56659     +
56660     +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
56661     +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
56662     +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
56663     +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
56664     +
56665     +***  Effect: GRP_IMP_DELINQ ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_IMP_DELINQ ;
56666     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
56667     +_LP0 = _LP0 + (   -0.95433214767846) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.95433214767846) * _TEMP * _1_0;
56668     +_LP0 = _LP0 + (   -0.07771239174577) * _TEMP * _1_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.07771239174577) * _TEMP * _1_1;
56669     +
56670     +***  Effect: GRP_IMP_DEROG ;
MPRINT(EM_DIAGRAM):   *** Effect: GRP_IMP_DEROG ;
56671     +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
56672     +_LP0 = _LP0 + (   -0.94790053438677) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.94790053438677) * _TEMP * _2_0;
56673     +_LP0 = _LP0 + (    0.11606584736529) * _TEMP * _2_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.11606584736529) * _TEMP * _2_1;
56674     +
56675     +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
56676     +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
56677     +_TEMP =    -0.07908916701392 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.07908916701392 + _LP0;
56678     +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
56679     +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
56680     +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
56681     +end;
MPRINT(EM_DIAGRAM):   end;
56682     +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
56683     +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
56684     +
56685     +REGDR1:
56686     +
56687     +*** Residuals;
MPRINT(EM_DIAGRAM):   REGDR1: *** Residuals;
56688     +if (_Y = .) then do;
MPRINT(EM_DIAGRAM):   if (_Y = .) then do;
56689     +   R_BAD1 = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
56690     +   R_BAD0 = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
56691     +end;
MPRINT(EM_DIAGRAM):   end;
56692     +else do;
MPRINT(EM_DIAGRAM):   else do;
56693     +    label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
56694     +    label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
56695     +   R_BAD1 = - _P0;
MPRINT(EM_DIAGRAM):   R_BAD1 = - _P0;
56696     +   R_BAD0 = - _P1;
MPRINT(EM_DIAGRAM):   R_BAD0 = - _P1;
56697     +   select( _Y );
MPRINT(EM_DIAGRAM):   select( _Y );
56698     +      when (0)  R_BAD1 = R_BAD1 + 1;
MPRINT(EM_DIAGRAM):   when (0) R_BAD1 = R_BAD1 + 1;
56699     +      when (1)  R_BAD0 = R_BAD0 + 1;
MPRINT(EM_DIAGRAM):   when (1) R_BAD0 = R_BAD0 + 1;
56700     +   end;
MPRINT(EM_DIAGRAM):   end;
56701     +end;
MPRINT(EM_DIAGRAM):   end;
56702     +
56703     +
56704     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
56705     +label D_BAD = 'Decision: BAD' ;
MPRINT(EM_DIAGRAM):   label D_BAD = 'Decision: BAD' ;
56706     +label EL_BAD = 'Expected Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label EL_BAD = 'Expected Loss: BAD' ;
56707     +label BL_BAD = 'Best Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label BL_BAD = 'Best Loss: BAD' ;
56708     +label CL_BAD = 'Computed Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label CL_BAD = 'Computed Loss: BAD' ;
56709     +
56710     +length D_BAD $ 9;
MPRINT(EM_DIAGRAM):   length D_BAD $ 9;
56711     +
56712     +D_BAD = ' ';
MPRINT(EM_DIAGRAM):   D_BAD = ' ';
56713     +EL_BAD = .;
MPRINT(EM_DIAGRAM):   EL_BAD = .;
56714     +BL_BAD = .;
MPRINT(EM_DIAGRAM):   BL_BAD = .;
56715     +CL_BAD = .;
MPRINT(EM_DIAGRAM):   CL_BAD = .;
56716     +
56717     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
56718     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
56719     +
56720     +D_BAD = '1' ;
MPRINT(EM_DIAGRAM):   D_BAD = '1' ;
56721     +EL_BAD = _P0 * 0 + _P1 * 1;
MPRINT(EM_DIAGRAM):   EL_BAD = _P0 * 0 + _P1 * 1;
56722     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
56723     +_sum = _P0 * 5 + _P1 * 0;
MPRINT(EM_DIAGRAM):   _sum = _P0 * 5 + _P1 * 0;
56724     +if _sum < EL_BAD + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_BAD + -2.27374E-12 then do;
56725     +   EL_BAD = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_BAD = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
56726     +   D_BAD = '0' ;
MPRINT(EM_DIAGRAM):   D_BAD = '0' ;
56727     +end;
MPRINT(EM_DIAGRAM):   end;
56728     +
56729     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
56730     +array REGdema [2,2] _temporary_ (
56731     +/* row 1 */  0 5
56732     +/* row 2 */  1 0
56733     +);
MPRINT(EM_DIAGRAM):   array REGdema [2,2] _temporary_ ( 0 5 1 0 );
56734     +
56735     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
56736     +drop _tarnum; select( F_BAD );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_BAD );
56737     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
56738     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
56739     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
56740     +end;
MPRINT(EM_DIAGRAM):   end;
56741     +if _tarnum <= 0 then goto REGdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto REGdeex;
56742     +
56743     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
56744     +CL_BAD = REGdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_BAD = REGdema [_tarnum,_decnum];
56745     +
56746     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
56747     +array REGdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array REGdebe [2] _temporary_ ( 0 0);
56748     +BL_BAD = REGdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_BAD = REGdebe [_tarnum];
56749     +
56750     +
56751     +REGdeex:;
MPRINT(EM_DIAGRAM):   REGdeex:;
56752     +
56753     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
56754     +
56755     +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   *** Posterior Probabilities and Predicted Level;
56756     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
56757     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
56758     +P_BAD1 = _P0;
MPRINT(EM_DIAGRAM):   P_BAD1 = _P0;
56759     +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
56760     +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
56761     +P_BAD0 = _P1;
MPRINT(EM_DIAGRAM):   P_BAD0 = _P1;
56762     +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
56763     +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
56764     +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
56765     +end;
MPRINT(EM_DIAGRAM):   end;
56766     +I_BAD = REGDRF[_IY];
MPRINT(EM_DIAGRAM):   I_BAD = REGDRF[_IY];
56767     +U_BAD = REGDRU[_IY];
MPRINT(EM_DIAGRAM):   U_BAD = REGDRU[_IY];
56768     +
56769     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
56770     +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
56771     +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
56772      run;
 
NOTE: DATA STEP view saved on file EMWS4.REG_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.BINNING_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
56773      quit;
56774      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
56775      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
56776      * Reg: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Reg: Computing metadata for TRAIN data;
56777      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS4.REG_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS4.Reg_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS4.Reg_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS4.Reg_TRAIN out=WORK.M0FWEU9_ noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FWEU9_;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0FWEU9_(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0FWEU9_;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0FWEU9_;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0OBXY5J NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3UD76LH(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   set WORK.M0OBXY5J;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS4.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS4.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Reg";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_BAD1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_BAD1") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("P_BAD0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("R_BAD0") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("F_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("I_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("U_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("D_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("EL_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("CL_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("BL_BAD") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Reg";
MPRINT(EM_DIAGRAM):   when("BAD") model = "Reg";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Reg: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if ROLE in('INPUT', 'REJECTED') then do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) in( 'GRP_IMP_DELINQ' 'GRP_IMP_DEROG' ) then ROLE='INPUT';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   COMMENT = "Reg: Rejected using stepwise selection";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
57144      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
57145      set EMWS4.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMINFO;
57146      where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Reg' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
57147      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS4.REG_EMINFO.
      WHERE (DATA='Reg') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57148      data EMWS4.Reg_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMINFO;
57149      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
57150      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
57151      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS4.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
57155      run;
57156      data EMWS4.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMINFO;
57157      set EMWS4.Reg_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMINFO WORK.MODELTEMP_INFO;
57158      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS4.REG_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS4.REG_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57159      proc sort data = EMWS4.Reg_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS4.Reg_EMINFO NOTHREADS;
57160      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
57161      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS4.REG_EMINFO.
NOTE: The data set EMWS4.REG_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57162      proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
57163      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
57164      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
57165      proc sort data = EMWS4.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS4.Reg_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
57166      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
57167      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.REG_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57168      data EMWS4.Reg_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMINFO;
57169      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
57170      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
57171      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.REG_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
57172      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
57173      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
57174      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
57175      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.REG_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS4.REG_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: View EMWS4.REG_TEST.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:06:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                16 March 2021
Time:                00:06:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1R0PM0P "C:\Jose\DM_ang\Workspaces\EMWS4\Reg\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1R0PM0P new;
MPRINT(EM_DIAGRAM):   run;
57199      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):    data WORK.DMREGTEMP;
57200      set EMWS4.Reg_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMESTIMATE;
57201      where _CHOSEN_ ne '';
MPRINT(EM_DIAGRAM):   where _CHOSEN_ ne '';
57202      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS4.REG_EMESTIMATE.
      WHERE _CHOSEN_ not = ' ';
NOTE: The data set WORK.DMREGTEMP has 3 observations and 49 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57203      data WORK.DMREGTEMP;
MPRINT(EM_DIAGRAM):   data WORK.DMREGTEMP;
57204      merge WORK.DMREGTEMP EMWS4.Reg_FITTEST;
MPRINT(EM_DIAGRAM):   merge WORK.DMREGTEMP EMWS4.Reg_FITTEST;
57205      by _step_;
MPRINT(EM_DIAGRAM):   by _step_;
57206      if _CHOSEN_ ne '' then output;
MPRINT(EM_DIAGRAM):   if _CHOSEN_ ne '' then output;
57207      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.DMREGTEMP.
NOTE: There were 4 observations read from the data set EMWS4.REG_FITTEST.
NOTE: The data set WORK.DMREGTEMP has 3 observations and 65 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
57208      data EMWS4.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMOUTFIT;
57209      length TARGET $32;
MPRINT(EM_DIAGRAM):   length TARGET $32;
57210      set WORK.DMREGTEMP end=eof;
MPRINT(EM_DIAGRAM):   set WORK.DMREGTEMP end=eof;
57211      where (_TYPE_='PARMS');
MPRINT(EM_DIAGRAM):   where (_TYPE_='PARMS');
57212      drop _STEP_--GRP_IMP_NINQ5;
MPRINT(EM_DIAGRAM):   drop _STEP_--GRP_IMP_NINQ5;
57213      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
57214      TARGET = "BAD";
MPRINT(EM_DIAGRAM):   TARGET = "BAD";
57215      output;
MPRINT(EM_DIAGRAM):   output;
57216      end;
MPRINT(EM_DIAGRAM):   end;
57217      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.DMREGTEMP.
      WHERE _TYPE_='PARMS';
NOTE: The data set EMWS4.REG_EMOUTFIT has 1 observations and 53 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57218      data EMWS4.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMOUTFIT;
57219      set EMWS4.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMOUTFIT;
57220      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
57221      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
57222      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS4.REG_EMOUTFIT.
NOTE: The data set EMWS4.REG_EMOUTFIT has 1 observations and 54 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57223      proc sort data=EMWS4.Reg_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Reg_EMREPORTFIT nothreads;
57224      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
57225      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 22 observations read from the data set EMWS4.REG_EMREPORTFIT.
NOTE: The data set EMWS4.REG_EMREPORTFIT has 22 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57226      %let _EMwarndup = 0;
57227      %let _EMtargetdup =;
57228      %let _EMASEtargetdup =;
57229      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
57230      set EMWS4.Reg_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMOUTFIT;
57231      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
57232      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
57233      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
57234      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
57235      end;
MPRINT(EM_DIAGRAM):   end;
57236      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.REG_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57237      proc sort data=EMWS4.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
57238      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
57239      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set EMWS4.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 13 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
57240      proc sort data=EMWS4.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS4.Reg_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
57241      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
57242      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.REG_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 12 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
57243      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
57244      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
57245      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
57246      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 12 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 13 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57247      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
57248      set EMWS4.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_CMeta_TRAIN;
57249      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
57250      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
57251      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
57252      set EMWS4.Reg_TRAIN(keep=
57253      BL_BAD
57254      CL_BAD
57255      D_BAD
57256      EL_BAD
57257      F_BAD
57258      I_BAD
57259      P_BAD0
57260      P_BAD1
57261      R_BAD0
57262      R_BAD1
57263      U_BAD
57264      _WARN_
57265      BAD
57266      );
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_TRAIN(keep= BL_BAD CL_BAD D_BAD EL_BAD F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
57267      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: View EMWS4.REG_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.BINNING_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.REG_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2979 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg_21U76AE nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_BAD*F_BAD / out = WORK.Reg_2GZQX9U nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_21U76AE;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_21U76AE(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Reg_21U76AE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_21U76AE;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_2GZQX9U;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_2GZQX9U(rename=(F_BAD=FROM D_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMCLASSIFICATION WORK.Reg_2GZQX9U;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD D_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_BAD" > " " AND UPCASE(NAME) = UPCASE("D_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 EL_BAD CL_BAD BL_BAD _tmpfreqvar_ D_BAD );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 D_BAD NTARGET _tmpfreqvar_ EL_BAD CL_BAD BL_BAD WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 D_BAD ;
MPRINT(EM_ASSESS):   VAR NTARGET EL_BAD CL_BAD BL_BAD ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANELTARGET _MEANCLTARGET _MEANBLTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEL_TARGET MINEL_TARGET MAXEL_TARGET TOTALEL_TARGET CUMULATIVEEL CUMULATIVETOTALEL MNCL_TARGET MINCL_TARGET MAXCL_TARGET TOTALCL_TARGET CUMULATIVECL CUMULATIVETOTALCL BASECL
BASECUMTOTALCL BASECUMULATIVECL BASETOTALCL BESTTOTALBL BESTCUMULATIVEBL BESTCUMTOTALBL BESTBL ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP
SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_ELMEAN SCR_ELMIN SCR_ELMAX SCR_CLMEAN SCR_CLMIN SCR_CLMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMLOSS1 - CUMLOSS20 0 CUMBLOSS1 - CUMBLOSS20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 -
FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 - EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1993957704 _NEVENTS 594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN ELTARGET1 - ELTARGET20 0 MINELTARGET1 - MINELTARGET20 0 MAXELTARGET1 - MAXELTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY ELTARGET (20) ELTARGET1 - ELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINELTARGET (20) MINELTARGET1 - MINELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXELTARGET (20) MAXELTARGET1 - MAXELTARGET20;
MPRINT(EM_ASSESS):   DROP ELTARGET1 - ELTARGET20 _MEANELTARGET MINELTARGET1 - MINELTARGET20 MAXELTARGET1 - MAXELTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CLTARGET1 - CLTARGET20 0 MINCLTARGET1 - MINCLTARGET20 0 MAXCLTARGET1 - MAXCLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CLTARGET (20) CLTARGET1 - CLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCLTARGET (20) MINCLTARGET1 - MINCLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCLTARGET (20) MAXCLTARGET1 - MAXCLTARGET20;
MPRINT(EM_ASSESS):   DROP CLTARGET1 - CLTARGET20 _MEANCLTARGET MINCLTARGET1 - MINCLTARGET20 MAXCLTARGET1 - MAXCLTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BLTARGET1 - BLTARGET20 0 MINBLTARGET1 - MINBLTARGET20 0 MAXBLTARGET1 - MAXBLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BLTARGET (20) BLTARGET1 - BLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBLTARGET (20) MINBLTARGET1 - MINBLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBLTARGET (20) MAXBLTARGET1 - MAXBLTARGET20;
MPRINT(EM_ASSESS):   DROP BLTARGET1 - BLTARGET20 _MEANBLTARGET MINBLTARGET1 - MINBLTARGET20 MAXBLTARGET1 - MAXBLTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_ELMEAN1- SCR_ELMEAN1000 0 SCR_ELMIN1 - SCR_ELMIN1000 1 SCR_ELMAX1 - SCR_ELMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMEANS (1000) SCR_ELMEAN1 - SCR_ELMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMINS (1000) SCR_ELMIN1 - SCR_ELMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMAXS (1000) SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_ELMEAN1 - SCR_ELMEAN1000 SCR_ELMIN1 - SCR_ELMIN1000 SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_CLMEAN1- SCR_CLMEAN1000 0 SCR_CLMIN1 - SCR_CLMIN1000 1 SCR_CLMAX1 - SCR_CLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMEANS (1000) SCR_CLMEAN1 - SCR_CLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMINS (1000) SCR_CLMIN1 - SCR_CLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMAXS (1000) SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_CLMEAN1 - SCR_CLMEAN1000 SCR_CLMIN1 - SCR_CLMIN1000 SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_BLMEAN1- SCR_BLMEAN1000 0 SCR_BLMIN1 - SCR_BLMIN1000 1 SCR_BLMAX1 - SCR_BLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMEANS (1000) SCR_BLMEAN1 - SCR_BLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMINS (1000) SCR_BLMIN1 - SCR_BLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMAXS (1000) SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_BLMEAN1 - SCR_BLMEAN1000 SCR_BLMIN1 - SCR_BLMIN1000 SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   ELTARGET (DECILE) = SUM ( ELTARGET (DECILE) , _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINELTARGET (DECILE) = MIN (MINELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXELTARGET (DECILE) = MAX (MAXELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CLTARGET (DECILE) = SUM ( CLTARGET (DECILE) , _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCLTARGET (DECILE) = MIN (MINCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCLTARGET (DECILE) = MAX (MAXCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BLTARGET (DECILE) = SUM ( BLTARGET (DECILE) , _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBLTARGET (DECILE) = MIN (MINBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBLTARGET (DECILE) = MAX (MAXBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_BAD = TRANSLATE (D_BAD, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_BAD = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_BAD = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_ELMEANS ( SLOT ) = MEAN (SCR_ELMEANS (SLOT), _MEANELTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_ELMINS ( SLOT ) = MIN (SCR_ELMINS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_ELMAXS ( SLOT ) = MAX (SCR_ELMAXS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_CLMEANS ( SLOT ) = MEAN (SCR_CLMEANS (SLOT), _MEANCLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CLMINS ( SLOT ) = MIN (SCR_CLMINS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_CLMAXS ( SLOT ) = MAX (SCR_CLMAXS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMEANS ( SLOT ) = MEAN (SCR_BLMEANS (SLOT), _MEANBLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BLMINS ( SLOT ) = MIN (SCR_BLMINS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMAXS ( SLOT ) = MAX (SCR_BLMAXS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.1211779985 OVLMAX 0.856287334 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEL = SUM (OF ELTARGET1 - ELTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEL ;
MPRINT(EM_ASSESS):   SUMCL = SUM (OF CLTARGET1 - CLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCL ;
MPRINT(EM_ASSESS):   SUMBL = SUM (OF BLTARGET1 - BLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBL ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2979/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2979/20) ) / ( AVGNUMRESP / (2979/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2979/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2979/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEL_TARGET = ELTARGET (GROUP);
MPRINT(EM_ASSESS):   EL_TARGET = TOTALEL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEL + ELTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEL = CUMULATIVETOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEL_TARGET = MINELTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEL_TARGET = MAXELTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEL_TARGET = EL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEL_TARGET + MAXEL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEL >= C_MAXEL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEL = MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEL = MIN (MAXEL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEL < 0 THEN BESTEL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEL + BESTTOTALEL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEL - C_MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEL = BESTCUMTOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEL = SUMEL / 2979;
MPRINT(EM_ASSESS):   BASECUMULATIVEEL + BASEEL;
MPRINT(EM_ASSESS):   BASETOTALEL = SUMEL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEL + BASETOTALEL;
MPRINT(EM_ASSESS):   TOTALCL_TARGET = CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CL_TARGET = TOTALCL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCL + CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECL = CUMULATIVETOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCL_TARGET = MINCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCL_TARGET = MAXCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCL_TARGET = CL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCL_TARGET + MAXCL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCL >= C_MAXCL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCL = MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCL = MIN (MAXCL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCL < 0 THEN BESTCL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCL + BESTTOTALCL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCL - C_MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECL = BESTCUMTOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECL = SUMCL / 2979;
MPRINT(EM_ASSESS):   BASECUMULATIVECL + BASECL;
MPRINT(EM_ASSESS):   BASETOTALCL = SUMCL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCL + BASETOTALCL;
MPRINT(EM_ASSESS):   TOTALBL_TARGET = BLTARGET (GROUP);
MPRINT(EM_ASSESS):   BL_TARGET = TOTALBL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBL_TARGET = MINBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBL_TARGET = MAXBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBL_TARGET = BL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBL_TARGET + MAXBL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBL >= C_MAXBL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBL = MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBL = MIN (MAXBL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBL < 0 THEN BESTBL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBL + BESTTOTALBL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBL - C_MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBL = BESTCUMTOTALBL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBL = SUMBL / 2979;
MPRINT(EM_ASSESS):   BASECUMULATIVEBL + BASEBL;
MPRINT(EM_ASSESS):   BASETOTALBL = SUMBL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBL + BASETOTALBL;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN96 - SCR_ELMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN96 - SCR_ELMIN100);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX96 - SCR_ELMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN96 - SCR_CLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN96 - SCR_CLMIN100);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX96 - SCR_CLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN96 - SCR_BLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN96 - SCR_BLMIN100);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX96 - SCR_BLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN91 - SCR_ELMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN91 - SCR_ELMIN95);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX91 - SCR_ELMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN91 - SCR_CLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN91 - SCR_CLMIN95);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX91 - SCR_CLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN91 - SCR_BLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN91 - SCR_BLMIN95);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX91 - SCR_BLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN86 - SCR_ELMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN86 - SCR_ELMIN90);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX86 - SCR_ELMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN86 - SCR_CLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN86 - SCR_CLMIN90);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX86 - SCR_CLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN86 - SCR_BLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN86 - SCR_BLMIN90);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX86 - SCR_BLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN81 - SCR_ELMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN81 - SCR_ELMIN85);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX81 - SCR_ELMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN81 - SCR_CLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN81 - SCR_CLMIN85);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX81 - SCR_CLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN81 - SCR_BLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN81 - SCR_BLMIN85);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX81 - SCR_BLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN76 - SCR_ELMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN76 - SCR_ELMIN80);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX76 - SCR_ELMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN76 - SCR_CLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN76 - SCR_CLMIN80);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX76 - SCR_CLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN76 - SCR_BLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN76 - SCR_BLMIN80);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX76 - SCR_BLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN71 - SCR_ELMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN71 - SCR_ELMIN75);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX71 - SCR_ELMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN71 - SCR_CLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN71 - SCR_CLMIN75);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX71 - SCR_CLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN71 - SCR_BLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN71 - SCR_BLMIN75);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX71 - SCR_BLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN66 - SCR_ELMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN66 - SCR_ELMIN70);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX66 - SCR_ELMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN66 - SCR_CLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN66 - SCR_CLMIN70);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX66 - SCR_CLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN66 - SCR_BLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN66 - SCR_BLMIN70);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX66 - SCR_BLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN61 - SCR_ELMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN61 - SCR_ELMIN65);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX61 - SCR_ELMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN61 - SCR_CLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN61 - SCR_CLMIN65);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX61 - SCR_CLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN61 - SCR_BLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN61 - SCR_BLMIN65);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX61 - SCR_BLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN56 - SCR_ELMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN56 - SCR_ELMIN60);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX56 - SCR_ELMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN56 - SCR_CLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN56 - SCR_CLMIN60);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX56 - SCR_CLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN56 - SCR_BLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN56 - SCR_BLMIN60);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX56 - SCR_BLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN51 - SCR_ELMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN51 - SCR_ELMIN55);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX51 - SCR_ELMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN51 - SCR_CLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN51 - SCR_CLMIN55);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX51 - SCR_CLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN51 - SCR_BLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN51 - SCR_BLMIN55);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX51 - SCR_BLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN46 - SCR_ELMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN46 - SCR_ELMIN50);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX46 - SCR_ELMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN46 - SCR_CLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN46 - SCR_CLMIN50);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX46 - SCR_CLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN46 - SCR_BLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN46 - SCR_BLMIN50);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX46 - SCR_BLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN41 - SCR_ELMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN41 - SCR_ELMIN45);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX41 - SCR_ELMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN41 - SCR_CLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN41 - SCR_CLMIN45);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX41 - SCR_CLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN41 - SCR_BLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN41 - SCR_BLMIN45);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX41 - SCR_BLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN36 - SCR_ELMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN36 - SCR_ELMIN40);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX36 - SCR_ELMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN36 - SCR_CLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN36 - SCR_CLMIN40);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX36 - SCR_CLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN36 - SCR_BLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN36 - SCR_BLMIN40);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX36 - SCR_BLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN31 - SCR_ELMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN31 - SCR_ELMIN35);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX31 - SCR_ELMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN31 - SCR_CLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN31 - SCR_CLMIN35);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX31 - SCR_CLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN31 - SCR_BLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN31 - SCR_BLMIN35);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX31 - SCR_BLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN26 - SCR_ELMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN26 - SCR_ELMIN30);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX26 - SCR_ELMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN26 - SCR_CLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN26 - SCR_CLMIN30);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX26 - SCR_CLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN26 - SCR_BLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN26 - SCR_BLMIN30);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX26 - SCR_BLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN21 - SCR_ELMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN21 - SCR_ELMIN25);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX21 - SCR_ELMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN21 - SCR_CLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN21 - SCR_CLMIN25);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX21 - SCR_CLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN21 - SCR_BLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN21 - SCR_BLMIN25);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX21 - SCR_BLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN16 - SCR_ELMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN16 - SCR_ELMIN20);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX16 - SCR_ELMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN16 - SCR_CLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN16 - SCR_CLMIN20);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX16 - SCR_CLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN16 - SCR_BLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN16 - SCR_BLMIN20);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX16 - SCR_BLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN11 - SCR_ELMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN11 - SCR_ELMIN15);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX11 - SCR_ELMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN11 - SCR_CLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN11 - SCR_CLMIN15);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX11 - SCR_CLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN11 - SCR_BLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN11 - SCR_BLMIN15);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX11 - SCR_BLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN6 - SCR_ELMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN6 - SCR_ELMIN10);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX6 - SCR_ELMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN6 - SCR_CLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN6 - SCR_CLMIN10);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX6 - SCR_CLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN6 - SCR_BLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN6 - SCR_BLMIN10);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX6 - SCR_BLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN1 - SCR_ELMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN1 - SCR_ELMIN5);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX1 - SCR_ELMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN1 - SCR_CLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN1 - SCR_CLMIN5);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX1 - SCR_CLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN1 - SCR_BLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN1 - SCR_BLMIN5);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX1 - SCR_BLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS SCR_ELMEAN = _MEANEL_ SCR_ELMAX = _MAXEL_ SCR_ELMIN = _MINEL_ SCR_CLMEAN = _MEANCL_ SCR_CLMAX = _MAXCL_ SCR_CLMIN = _MINCL_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" _MEANCL_ = "Mean Computed Loss" _MAXCL_ = "Max Computed Loss" _MINCL_ = "Min Computed Loss" _MAXEL_ = "Max Expected Loss" _MINEL_ = "Min Expected Loss" _MEANEL_ = "Mean Expected Loss" DECISION1= "Report: Number of Decisions = 1"
DECISION2= "Report: Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC BESTBL = BESTLOSS BESTCUMTOTALBL = BESTCUMULATIVETOTALLOSS BESTCUMULATIVEBL = BESTCUMULATIVELOSS BESTTOTALBL = BESTTOTALLOSS MAXEL_TARGET =
_MAXEL_ MINEL_TARGET = _MINEL_ MNEL_TARGET = _MEANEL_ CUMULATIVEEL = CUMULATIVEEXPECTEDLOSS CUMULATIVETOTALEL= CUMULATIVETOTALEXPECTEDLOSS TOTALEL_TARGET = TOTALEXPECTEDLOSS BASECL = BASELOSS BASETOTALCL = BASETOTALLOSS MAXCL_TARGET = _MAXCL_ MINCL_TARGET
= _MINCL_ MNCL_TARGET = _MEANCL_ BASECUMTOTALCL = BASECUMULATIVETOTALLOSS BASECUMULATIVECL = BASECUMULATIVELOSS TOTALCL_TARGET = TOTALLOSS CUMULATIVECL = CUMULATIVELOSS CUMULATIVETOTALCL= CUMULATIVETOTALLOSS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCL_ = "Mean Computed Loss" _MINCL_ = "Min Computed Loss" _MAXCL_ = "Max Computed Loss" BASELOSS = "Baseline Loss" TOTALLOSS = "Total Computed Loss" CUMULATIVELOSS = "Cumulative Computed Loss" CUMULATIVETOTALLOSS =
"Cumulative Total Computed Loss" BASETOTALLOSS = "Baseline Total Loss" BASECUMULATIVETOTALLOSS = "Baseline Cumulative Total Loss" BASECUMULATIVELOSS = "Baseline Cumulative Loss" BASELOSS = "Baseline Loss" BESTLOSS = "Best Loss" BESTTOTALLOSS = "Best Total
Loss" BESTCUMULATIVETOTALLOSS = "Best Cumulative Total Loss" BESTCUMULATIVELOSS = "Best Cumulative Loss" _MEANEL_ = "Mean Expected Loss" _MINEL_ = "Min Expected Loss" _MAXEL_ = "Max Expected Loss" CUMULATIVETOTALEXPECTEDLOSS = "Cumulative Expected Total
Loss" CUMULATIVEEXPECTEDLOSS = "Cumulative Expected Loss" TOTALEXPECTEDLOSS = "Total Expected Loss" _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline
Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT =
"Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of
Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
61576      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
61577      set EMWS4.Reg_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_CMeta_TRAIN;
61578      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
61579      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS4.REG_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
61580      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
61581      set EMWS4.Reg_VALIDATE(keep=
61582      BL_BAD
61583      CL_BAD
61584      D_BAD
61585      EL_BAD
61586      F_BAD
61587      I_BAD
61588      P_BAD0
61589      P_BAD1
61590      R_BAD0
61591      R_BAD1
61592      U_BAD
61593      _WARN_
61594      BAD
61595      );
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_VALIDATE(keep= BL_BAD CL_BAD D_BAD EL_BAD F_BAD I_BAD P_BAD0 P_BAD1 R_BAD0 R_BAD1 U_BAD _WARN_ BAD );
61596      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS4.IMPT_VALIDATE.
NOTE: View EMWS4.REG_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 1788 observations read from the data set EMWS4.BINNING_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS4.REG_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Reg_08Y796L nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_BAD*F_BAD / out = WORK.Reg_2Q2OB9A nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_08Y796L;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_08Y796L(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMCLASSIFICATION WORK.Reg_08Y796L;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Reg_08Y796L;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Reg_2Q2OB9A;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Reg_2Q2OB9A(rename=(F_BAD=FROM D_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMCLASSIFICATION WORK.Reg_2Q2OB9A;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD D_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_BAD" > " " AND UPCASE(NAME) = UPCASE("D_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 EL_BAD CL_BAD BL_BAD _tmpfreqvar_ D_BAD );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 D_BAD NTARGET _tmpfreqvar_ EL_BAD CL_BAD BL_BAD WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 D_BAD ;
MPRINT(EM_ASSESS):   VAR NTARGET EL_BAD CL_BAD BL_BAD ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANELTARGET _MEANCLTARGET _MEANBLTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEL_TARGET MINEL_TARGET MAXEL_TARGET TOTALEL_TARGET CUMULATIVEEL CUMULATIVETOTALEL MNCL_TARGET MINCL_TARGET MAXCL_TARGET TOTALCL_TARGET CUMULATIVECL CUMULATIVETOTALCL BASECL
BASECUMTOTALCL BASECUMULATIVECL BASETOTALCL BESTTOTALBL BESTCUMULATIVEBL BESTCUMTOTALBL BESTBL ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP
SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_ELMEAN SCR_ELMIN SCR_ELMAX SCR_CLMEAN SCR_CLMIN SCR_CLMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMLOSS1 - CUMLOSS20 0 CUMBLOSS1 - CUMBLOSS20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 -
FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 - EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1996644295 _NEVENTS 357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN ELTARGET1 - ELTARGET20 0 MINELTARGET1 - MINELTARGET20 0 MAXELTARGET1 - MAXELTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY ELTARGET (20) ELTARGET1 - ELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINELTARGET (20) MINELTARGET1 - MINELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXELTARGET (20) MAXELTARGET1 - MAXELTARGET20;
MPRINT(EM_ASSESS):   DROP ELTARGET1 - ELTARGET20 _MEANELTARGET MINELTARGET1 - MINELTARGET20 MAXELTARGET1 - MAXELTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CLTARGET1 - CLTARGET20 0 MINCLTARGET1 - MINCLTARGET20 0 MAXCLTARGET1 - MAXCLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CLTARGET (20) CLTARGET1 - CLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCLTARGET (20) MINCLTARGET1 - MINCLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCLTARGET (20) MAXCLTARGET1 - MAXCLTARGET20;
MPRINT(EM_ASSESS):   DROP CLTARGET1 - CLTARGET20 _MEANCLTARGET MINCLTARGET1 - MINCLTARGET20 MAXCLTARGET1 - MAXCLTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BLTARGET1 - BLTARGET20 0 MINBLTARGET1 - MINBLTARGET20 0 MAXBLTARGET1 - MAXBLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BLTARGET (20) BLTARGET1 - BLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBLTARGET (20) MINBLTARGET1 - MINBLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBLTARGET (20) MAXBLTARGET1 - MAXBLTARGET20;
MPRINT(EM_ASSESS):   DROP BLTARGET1 - BLTARGET20 _MEANBLTARGET MINBLTARGET1 - MINBLTARGET20 MAXBLTARGET1 - MAXBLTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_ELMEAN1- SCR_ELMEAN1000 0 SCR_ELMIN1 - SCR_ELMIN1000 1 SCR_ELMAX1 - SCR_ELMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMEANS (1000) SCR_ELMEAN1 - SCR_ELMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMINS (1000) SCR_ELMIN1 - SCR_ELMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMAXS (1000) SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_ELMEAN1 - SCR_ELMEAN1000 SCR_ELMIN1 - SCR_ELMIN1000 SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_CLMEAN1- SCR_CLMEAN1000 0 SCR_CLMIN1 - SCR_CLMIN1000 1 SCR_CLMAX1 - SCR_CLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMEANS (1000) SCR_CLMEAN1 - SCR_CLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMINS (1000) SCR_CLMIN1 - SCR_CLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMAXS (1000) SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_CLMEAN1 - SCR_CLMEAN1000 SCR_CLMIN1 - SCR_CLMIN1000 SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_BLMEAN1- SCR_BLMEAN1000 0 SCR_BLMIN1 - SCR_BLMIN1000 1 SCR_BLMAX1 - SCR_BLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMEANS (1000) SCR_BLMEAN1 - SCR_BLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMINS (1000) SCR_BLMIN1 - SCR_BLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMAXS (1000) SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_BLMEAN1 - SCR_BLMEAN1000 SCR_BLMIN1 - SCR_BLMIN1000 SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   ELTARGET (DECILE) = SUM ( ELTARGET (DECILE) , _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINELTARGET (DECILE) = MIN (MINELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXELTARGET (DECILE) = MAX (MAXELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CLTARGET (DECILE) = SUM ( CLTARGET (DECILE) , _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCLTARGET (DECILE) = MIN (MINCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCLTARGET (DECILE) = MAX (MAXCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BLTARGET (DECILE) = SUM ( BLTARGET (DECILE) , _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBLTARGET (DECILE) = MIN (MINBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBLTARGET (DECILE) = MAX (MAXBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_BAD = TRANSLATE (D_BAD, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_BAD = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_BAD = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_ELMEANS ( SLOT ) = MEAN (SCR_ELMEANS (SLOT), _MEANELTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_ELMINS ( SLOT ) = MIN (SCR_ELMINS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_ELMAXS ( SLOT ) = MAX (SCR_ELMAXS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_CLMEANS ( SLOT ) = MEAN (SCR_CLMEANS (SLOT), _MEANCLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CLMINS ( SLOT ) = MIN (SCR_CLMINS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_CLMAXS ( SLOT ) = MAX (SCR_CLMAXS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMEANS ( SLOT ) = MEAN (SCR_BLMEANS (SLOT), _MEANBLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BLMINS ( SLOT ) = MIN (SCR_BLMINS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMAXS ( SLOT ) = MAX (SCR_BLMAXS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.1211779985 OVLMAX 0.856287334 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEL = SUM (OF ELTARGET1 - ELTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEL ;
MPRINT(EM_ASSESS):   SUMCL = SUM (OF CLTARGET1 - CLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCL ;
MPRINT(EM_ASSESS):   SUMBL = SUM (OF BLTARGET1 - BLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBL ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / ( AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEL_TARGET = ELTARGET (GROUP);
MPRINT(EM_ASSESS):   EL_TARGET = TOTALEL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEL + ELTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEL = CUMULATIVETOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEL_TARGET = MINELTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEL_TARGET = MAXELTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEL_TARGET = EL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEL_TARGET + MAXEL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEL >= C_MAXEL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEL = MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEL = MIN (MAXEL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEL < 0 THEN BESTEL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEL + BESTTOTALEL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEL - C_MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEL = BESTCUMTOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEL = SUMEL / 1788;
MPRINT(EM_ASSESS):   BASECUMULATIVEEL + BASEEL;
MPRINT(EM_ASSESS):   BASETOTALEL = SUMEL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEL + BASETOTALEL;
MPRINT(EM_ASSESS):   TOTALCL_TARGET = CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CL_TARGET = TOTALCL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCL + CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECL = CUMULATIVETOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCL_TARGET = MINCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCL_TARGET = MAXCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCL_TARGET = CL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCL_TARGET + MAXCL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCL >= C_MAXCL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCL = MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCL = MIN (MAXCL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCL < 0 THEN BESTCL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCL + BESTTOTALCL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCL - C_MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECL = BESTCUMTOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECL = SUMCL / 1788;
MPRINT(EM_ASSESS):   BASECUMULATIVECL + BASECL;
MPRINT(EM_ASSESS):   BASETOTALCL = SUMCL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCL + BASETOTALCL;
MPRINT(EM_ASSESS):   TOTALBL_TARGET = BLTARGET (GROUP);
MPRINT(EM_ASSESS):   BL_TARGET = TOTALBL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBL_TARGET = MINBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBL_TARGET = MAXBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBL_TARGET = BL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBL_TARGET + MAXBL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBL >= C_MAXBL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBL = MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBL = MIN (MAXBL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBL < 0 THEN BESTBL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBL + BESTTOTALBL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBL - C_MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBL = BESTCUMTOTALBL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBL = SUMBL / 1788;
MPRINT(EM_ASSESS):   BASECUMULATIVEBL + BASEBL;
MPRINT(EM_ASSESS):   BASETOTALBL = SUMBL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBL + BASETOTALBL;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN96 - SCR_ELMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN96 - SCR_ELMIN100);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX96 - SCR_ELMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN96 - SCR_CLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN96 - SCR_CLMIN100);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX96 - SCR_CLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN96 - SCR_BLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN96 - SCR_BLMIN100);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX96 - SCR_BLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN91 - SCR_ELMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN91 - SCR_ELMIN95);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX91 - SCR_ELMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN91 - SCR_CLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN91 - SCR_CLMIN95);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX91 - SCR_CLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN91 - SCR_BLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN91 - SCR_BLMIN95);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX91 - SCR_BLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN86 - SCR_ELMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN86 - SCR_ELMIN90);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX86 - SCR_ELMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN86 - SCR_CLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN86 - SCR_CLMIN90);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX86 - SCR_CLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN86 - SCR_BLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN86 - SCR_BLMIN90);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX86 - SCR_BLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN81 - SCR_ELMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN81 - SCR_ELMIN85);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX81 - SCR_ELMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN81 - SCR_CLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN81 - SCR_CLMIN85);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX81 - SCR_CLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN81 - SCR_BLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN81 - SCR_BLMIN85);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX81 - SCR_BLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN76 - SCR_ELMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN76 - SCR_ELMIN80);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX76 - SCR_ELMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN76 - SCR_CLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN76 - SCR_CLMIN80);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX76 - SCR_CLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN76 - SCR_BLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN76 - SCR_BLMIN80);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX76 - SCR_BLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN71 - SCR_ELMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN71 - SCR_ELMIN75);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX71 - SCR_ELMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN71 - SCR_CLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN71 - SCR_CLMIN75);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX71 - SCR_CLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN71 - SCR_BLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN71 - SCR_BLMIN75);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX71 - SCR_BLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN66 - SCR_ELMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN66 - SCR_ELMIN70);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX66 - SCR_ELMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN66 - SCR_CLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN66 - SCR_CLMIN70);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX66 - SCR_CLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN66 - SCR_BLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN66 - SCR_BLMIN70);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX66 - SCR_BLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN61 - SCR_ELMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN61 - SCR_ELMIN65);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX61 - SCR_ELMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN61 - SCR_CLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN61 - SCR_CLMIN65);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX61 - SCR_CLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN61 - SCR_BLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN61 - SCR_BLMIN65);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX61 - SCR_BLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN56 - SCR_ELMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN56 - SCR_ELMIN60);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX56 - SCR_ELMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN56 - SCR_CLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN56 - SCR_CLMIN60);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX56 - SCR_CLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN56 - SCR_BLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN56 - SCR_BLMIN60);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX56 - SCR_BLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN51 - SCR_ELMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN51 - SCR_ELMIN55);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX51 - SCR_ELMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN51 - SCR_CLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN51 - SCR_CLMIN55);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX51 - SCR_CLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN51 - SCR_BLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN51 - SCR_BLMIN55);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX51 - SCR_BLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN46 - SCR_ELMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN46 - SCR_ELMIN50);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX46 - SCR_ELMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN46 - SCR_CLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN46 - SCR_CLMIN50);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX46 - SCR_CLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN46 - SCR_BLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN46 - SCR_BLMIN50);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX46 - SCR_BLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN41 - SCR_ELMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN41 - SCR_ELMIN45);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX41 - SCR_ELMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN41 - SCR_CLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN41 - SCR_CLMIN45);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX41 - SCR_CLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN41 - SCR_BLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN41 - SCR_BLMIN45);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX41 - SCR_BLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN36 - SCR_ELMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN36 - SCR_ELMIN40);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX36 - SCR_ELMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN36 - SCR_CLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN36 - SCR_CLMIN40);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX36 - SCR_CLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN36 - SCR_BLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN36 - SCR_BLMIN40);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX36 - SCR_BLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN31 - SCR_ELMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN31 - SCR_ELMIN35);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX31 - SCR_ELMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN31 - SCR_CLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN31 - SCR_CLMIN35);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX31 - SCR_CLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN31 - SCR_BLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN31 - SCR_BLMIN35);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX31 - SCR_BLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN26 - SCR_ELMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN26 - SCR_ELMIN30);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX26 - SCR_ELMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN26 - SCR_CLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN26 - SCR_CLMIN30);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX26 - SCR_CLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN26 - SCR_BLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN26 - SCR_BLMIN30);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX26 - SCR_BLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN21 - SCR_ELMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN21 - SCR_ELMIN25);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX21 - SCR_ELMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN21 - SCR_CLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN21 - SCR_CLMIN25);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX21 - SCR_CLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN21 - SCR_BLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN21 - SCR_BLMIN25);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX21 - SCR_BLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN16 - SCR_ELMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN16 - SCR_ELMIN20);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX16 - SCR_ELMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN16 - SCR_CLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN16 - SCR_CLMIN20);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX16 - SCR_CLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN16 - SCR_BLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN16 - SCR_BLMIN20);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX16 - SCR_BLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN11 - SCR_ELMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN11 - SCR_ELMIN15);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX11 - SCR_ELMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN11 - SCR_CLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN11 - SCR_CLMIN15);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX11 - SCR_CLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN11 - SCR_BLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN11 - SCR_BLMIN15);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX11 - SCR_BLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN6 - SCR_ELMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN6 - SCR_ELMIN10);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX6 - SCR_ELMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN6 - SCR_CLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN6 - SCR_CLMIN10);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX6 - SCR_CLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN6 - SCR_BLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN6 - SCR_BLMIN10);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX6 - SCR_BLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN1 - SCR_ELMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN1 - SCR_ELMIN5);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX1 - SCR_ELMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN1 - SCR_CLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN1 - SCR_CLMIN5);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX1 - SCR_CLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN1 - SCR_BLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN1 - SCR_BLMIN5);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX1 - SCR_BLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS SCR_ELMEAN = _MEANEL_ SCR_ELMAX = _MAXEL_ SCR_ELMIN = _MINEL_ SCR_CLMEAN = _MEANCL_ SCR_CLMAX = _MAXCL_ SCR_CLMIN = _MINCL_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" _MEANCL_ = "Mean Computed Loss" _MAXCL_ = "Max Computed Loss" _MINCL_ = "Min Computed Loss" _MAXEL_ = "Max Expected Loss" _MINEL_ = "Min Expected Loss" _MEANEL_ = "Mean Expected Loss" DECISION1= "Report: Number of Decisions = 1"
DECISION2= "Report: Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC BESTBL = BESTLOSS BESTCUMTOTALBL = BESTCUMULATIVETOTALLOSS BESTCUMULATIVEBL = BESTCUMULATIVELOSS BESTTOTALBL = BESTTOTALLOSS MAXEL_TARGET =
_MAXEL_ MINEL_TARGET = _MINEL_ MNEL_TARGET = _MEANEL_ CUMULATIVEEL = CUMULATIVEEXPECTEDLOSS CUMULATIVETOTALEL= CUMULATIVETOTALEXPECTEDLOSS TOTALEL_TARGET = TOTALEXPECTEDLOSS BASECL = BASELOSS BASETOTALCL = BASETOTALLOSS MAXCL_TARGET = _MAXCL_ MINCL_TARGET
= _MINCL_ MNCL_TARGET = _MEANCL_ BASECUMTOTALCL = BASECUMULATIVETOTALLOSS BASECUMULATIVECL = BASECUMULATIVELOSS TOTALCL_TARGET = TOTALLOSS CUMULATIVECL = CUMULATIVELOSS CUMULATIVETOTALCL= CUMULATIVETOTALLOSS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCL_ = "Mean Computed Loss" _MINCL_ = "Min Computed Loss" _MAXCL_ = "Max Computed Loss" BASELOSS = "Baseline Loss" TOTALLOSS = "Total Computed Loss" CUMULATIVELOSS = "Cumulative Computed Loss" CUMULATIVETOTALLOSS =
"Cumulative Total Computed Loss" BASETOTALLOSS = "Baseline Total Loss" BASECUMULATIVETOTALLOSS = "Baseline Cumulative Total Loss" BASECUMULATIVELOSS = "Baseline Cumulative Loss" BASELOSS = "Baseline Loss" BESTLOSS = "Best Loss" BESTTOTALLOSS = "Best Total
Loss" BESTCUMULATIVETOTALLOSS = "Best Cumulative Total Loss" BESTCUMULATIVELOSS = "Best Cumulative Loss" _MEANEL_ = "Mean Expected Loss" _MINEL_ = "Min Expected Loss" _MAXEL_ = "Max Expected Loss" CUMULATIVETOTALEXPECTEDLOSS = "Cumulative Expected Total
Loss" CUMULATIVEEXPECTEDLOSS = "Cumulative Expected Loss" TOTALEXPECTEDLOSS = "Total Expected Loss" _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline
Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT =
"Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of
Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
65914      %let _cn = %sysfunc(getoption(CENTER));
65915      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
65916      proc print data=EMWS4.Reg_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Reg_EMREPORTFIT noobs label;
65917      var STAT LABEL TRAIN
65918      VALIDATE
65919      TEST
65920      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
65921      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
65922      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65923      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
65924      run;
 
NOTE: There were 22 observations read from the data set EMWS4.REG_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65925      title10;
MPRINT(EM_DIAGRAM):   title10;
65926      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
65927      proc sort data=EMWS4.Reg_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Reg_EMCLASSIFICATION nothreads;
65928      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
65929      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS4.REG_EMCLASSIFICATION.
NOTE: The data set EMWS4.REG_EMCLASSIFICATION has 16 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
65930      %let _cn = %sysfunc(getoption(CENTER));
65931      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
65932      proc print data=EMWS4.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Reg_EMCLASSIFICATION noobs label;
65933      var from into pct_row pct_col count percent
65934      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
65935      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
65936      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
65937      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
65938      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
65939      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
65940      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
65941      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
65942      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
65943      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65944      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
65945      run;
 
NOTE: There were 8 observations read from the data set EMWS4.REG_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65946      proc print data=EMWS4.Reg_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Reg_EMCLASSIFICATION noobs label;
65947      var from into pct_row pct_col count percent
65948      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
65949      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
65950      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
65951      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
65952      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
65953      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
65954      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
65955      where _TYPE_='DECISION';
MPRINT(EM_DIAGRAM):   where _TYPE_='DECISION';
65956      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
65957      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65958      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Decision Table";
MPRINT(EM_DIAGRAM):   run;
65959      run;
 
NOTE: There were 8 observations read from the data set EMWS4.REG_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 27.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
65960      title9;
MPRINT(EM_DIAGRAM):   title9;
65961      title10;
MPRINT(EM_DIAGRAM):   title10;
65962      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
65963      %let _cn = %sysfunc(getoption(CENTER));
65964      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
65965      data EMWS4.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS4.Reg_EMEVENTREPORT;
65966      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
65967      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
65967    ! FALSEEVENT
65968      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
65969         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True Positive" TRUENEVENT = "True Negative";
65970      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
65971      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
65972      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
65973      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
65974      set EMWS4.Reg_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.Reg_EMEVENTREPORT;
65975      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.REG_EMEVENTREPORT.
NOTE: The data set EMWS4.REG_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
65976      proc print data=EMWS4.Reg_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Reg_EMEVENTREPORT noobs label;
65977      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
65978      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
65979      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
65980      run;
 
NOTE: There were 2 observations read from the data set EMWS4.REG_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 28.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
65981      title10;
MPRINT(EM_DIAGRAM):   title10;
65982      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
65983      proc datasets library=EMWS4 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS4 nolist;
65984      modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   modify Reg_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
65985      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
65986      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
65987      run;
 
NOTE: MODIFY was successful for EMWS4.REG_EMRANK.DATA.
65988      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
65989      %let _cn = %sysfunc(getoption(CENTER));
65990      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
65991      proc print data=EMWS4.Reg_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Reg_EMRANK label noobs;
65992      var
65993      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
65994      by
65995      notsorted DATAROLE
65996      notsorted TARGET
65997      notsorted TARGETLABEL
65998      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
65999      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
66000      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
66001      run;
 
NOTE: There were 40 observations read from the data set EMWS4.REG_EMRANK.
NOTE: The PROCEDURE PRINT printed page 29.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
66002      title10;
MPRINT(EM_DIAGRAM):   title10;
66003      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
66004      proc datasets library=EMWS4 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS4 nolist;
66005      modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Reg_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
66006      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
66007      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
66008      run;
 
NOTE: MODIFY was successful for EMWS4.REG_EMSCOREDIST.DATA.
66009      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Reg_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
