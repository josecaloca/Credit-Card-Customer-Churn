*------------------------------------------------------------*
User:                Jose Caloca
Date:                16 March 2021
Time:                00:11:01
Site:                70115216
Platform:            X64_10PRO
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16 March 2021
Time:                00:10:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0INHM3Y "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0INHM3Y new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:54" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:54" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
24611      proc freq data=EMWS4.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS4.Tree_VariableSet noprint;
24612      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
24613      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
24614      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
24615      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
24616      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
24617      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24618      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
24619      run;
 
NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
24620      title10;
MPRINT(EM_DIAGRAM):   title10;
24621      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN EMWS4 Impt_TRAIN
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN EMWS4 Impt_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS4.Impt_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
24650      data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
24651      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
24652      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
24653         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
24654      set EMWS4.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS4.IDS_BAD_DM( where=(_TYPE_="TARGET"));
24655      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
24656      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
24657      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
24658      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
24659      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
24660      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
24661      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
24662      end;
MPRINT(EM_DIAGRAM):   end;
24663      output;
MPRINT(EM_DIAGRAM):   output;
24664      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
24665      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24666      proc print data=WORK.Tree_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree_EVENT noobs label;
24667      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
24668      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24669      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
24670      run;
 
NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24671      title10;
MPRINT(EM_DIAGRAM):   title10;
24672      proc print data = EMWS4.Ids_BAD_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS4.Ids_BAD_DD noobs label;
24673      var BAD
24674      TRAINPRIOR
24675      DECISION1
24676      DECISION2
24677      ;
MPRINT(EM_DIAGRAM):   var BAD TRAINPRIOR DECISION1 DECISION2 ;
24678      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24679      title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   run;
24680      run;
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DD.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24681      title10;
MPRINT(EM_DIAGRAM):   title10;
24682      proc print data = EMWS4.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS4.Ids_BAD_DM noobs label;
24683      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
24684      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
24685      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
24686      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24687      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
24688      run;
 
NOTE: There were 11 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
24689      title10;
MPRINT(EM_DIAGRAM):   title10;
24690      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Regression';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.BAD;
MPRINT(EM_DECDATA):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   BAD="1";
MPRINT(EM_DECDATA):   COUNT=1189;
MPRINT(EM_DECDATA):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DECDATA):   DECPRIOR=0;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=5;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   BAD="0";
MPRINT(EM_DECDATA):   COUNT=4771;
MPRINT(EM_DECDATA):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DECDATA):   DECPRIOR=0;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="BAD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS4.Ids_BAD_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS4.Ids_BAD_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="BAD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS4.Ids_BAD_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS4.Ids_BAD_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
25198      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25199      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
25200      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
25201      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
25202      %let EMEXCEPTIONSTRING=;
25203      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25204      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
25205      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25206      %let EM_ACTION = TRAIN;
25207      %let syscc = 0;
25208      %macro main;
25209
25210        %if %upcase(&EM_ACTION) = CREATE %then %do;
25211          filename temp catalog 'sashelp.emmodl.tree_create.source';
25212          %include temp;
25213          filename temp;
25214
25215          %em_tree_create;
25216        %end;
25217
25218         %else
25219         %if %upcase(&EM_ACTION) = TRAIN %then %do;
25220
25221             filename temp catalog 'sashelp.emmodl.tree_train.source';
25222             %include temp;
25223             filename temp;
25224             %em_tree_train;
25225         %end;
25226
25227        %else
25228        %if %upcase(&EM_ACTION) = SCORE %then %do;
25229          filename temp catalog 'sashelp.emmodl.tree_score.source';
25230          %include temp;
25231          filename temp;
25232
25233          %em_tree_score;
25234
25235        %end;
25236
25237        %else
25238        %if %upcase(&EM_ACTION) = REPORT %then %do;
25239
25240             filename temp catalog 'sashelp.emmodl.tree_report.source';
25241             %include temp;
25242             filename temp;
25243
25244             %em_tree_report;
25245         %end;
25246
25247        %else
25248        %if %upcase(&EM_ACTION) = OPENINT %then %do;
25249
25250             filename temp catalog 'sashelp.emmodl.tree_actions.source';
25251             %include temp;
25252             filename temp;
25253             %EM_TREE_OPENTREEVIEWER;
25254
25255         %end;
25256
25257        %else
25258        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
25259
25260             filename temp catalog 'sashelp.emmodl.tree_actions.source';
25261             %include temp;
25262             filename temp;
25263             %EM_TREE_CLOSETREEVIEWER;
25264
25265         %end;
25266
25267
25268         %doendm:
25269      %mend main;
25270
25271      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
25273     +%macro em_tree_train;
25275     +   %if &EM_IMPORT_DATA eq %then %do;
25276     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25277     +       %put &em_codebar;
25278     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
25279     +       %put &errormsg;
25280     +       %put &em_codebar;
25281     +       %goto doendm;
25282     +   %end;
25283     +   %else
25284     +       %let EMEXCEPTIONSTRING =;
25286     +   %if  &EM_NUM_TARGET lt 1 %then %do;
25287     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
25288     +        %put &em_codebar;
25289     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
25290     +        %put &errormsg;
25291     +        %put &em_codebar;
25292     +        %goto doendm;
25293     +   %end;
25295     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
25296     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
25297     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
25298     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
25299     +        %put &em_codebar;
25300     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
25301     +        %put &errormsg;
25302     +        %put &em_codebar;
25303     +        %goto doendm;
25304     +   %end;
25306     +   /* Initialize property macro variables */
25307     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
25308     +   %include temp;
25309     +   filename temp;
25311     +   %EM_SetProperties;
25313     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
25314     +   %EM_GETNAME(key=EMTREE, type=DATA);
25315     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
25316     +     /* if import eq Y and no importtable defined, throw an exception */
25317     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
25318     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
25319     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
25320     +         %put &em_codebar;
25321     +         %put &errmsg;
25322     +         %put &em_codebar;
25323     +         %goto doendm;
25324     +      %end;
25325     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
25326     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
25327     +         %put &em_codebar;
25328     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
25329     +         %put &errormsg;
25330     +         %put &em_codebar;
25331     +         %goto doendm;
25332     +      %end;
25333     +      %else %do;
25334     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
25335     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
25336     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
25337     +         %let varnumX = %sysfunc(varnum(&dsid,X));
25338     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
25339     +         %let dsid = %sysfunc(close(&dsid));
25340     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
25341     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
25342     +            %put &em_codebar;
25343     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
25344     +            %put &errormsg;
25345     +            %put &em_codebar;
25346     +            %goto doendm;
25347     +         %end;
25348     +      %end;
25349     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
25350     +         proc delete data=&EM_USER_EMTREE;
25351     +         run;
25352     +      %end;
25353     +   %end;
25354     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
25355     +      proc delete data=&EM_USER_EMTREE;
25356     +      run;
25357     +   %end;
25359     +   /* load tree macros */
25360     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
25361     +   %include temp;
25362     +   filename temp;
25364     +   /* data sets */
25365     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
25366     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
25367     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
25369     +   /* files */
25370     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
25372     +   /* check actual num of target levels */
25373     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
25374     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
25375     +                              nLevel=_nTargetLevel );
25376     +      %if &_nTargetLevel  > 2 %then %do;
25377     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
25378     +        %put &em_codebar;
25379     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
25380     +        %put &errormsg;
25381     +        %put &em_codebar;
25382     +        %goto doendm;
25383     +      %end;
25384     +   %end;
25386     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
25387     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
25388     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
25389     +        %let costflag=0;
25390     +        data _null_;
25391     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
25392     +          if eof then call symput("costflag", _N_);
25393     +        run;
25394     +        %if &costflag gt 0 %then %do;
25395     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
25396     +          %put &em_codebar;
25397     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
25398     +          %put &errormsg;
25399     +          %put &em_codebar;
25400     +          %goto doendm;
25401     +       %end;
25402     +     %end;
25403     +   %end;
25405     +   /* determine if multiple targets will be processed */
25406     +   %let em_tree_multipleTargets=N;
25407     +   %let em_tree_numTarget = 1;
25408     +   %let em_tree_targetVars=;
25410     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
25411     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
25412     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
25413     +         %let em_tree_multipleTargets=N;
25414     +      %end;
25415     +      %else %do;
25416     +         /* create macro array of targets  */
25417     +         data _null_;
25418     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
25419     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
25420     +           if eof then
25421     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
25422     +        run;
25424     +        %if &em_tree_numTarget gt 1 %then %do;
25425     +           %let em_tree_multipleTargets=Y;
25426     +        %end;
25427     +      %end;
25428     +   %end;
25430     +   /* create view of only necessary variable for performance reasons */
25431     +   %let tempData = &EM_LIB..em_&EM_NODEID;
25432     +   data &tempData / view=&tempData;
25433     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
25434     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
25435     +       %EM_TARGET
25436     +     %end;
25437     +     %else %do;
25438     +       %if &em_tree_numTarget ne 0 %then %do;
25439     +         %do i=1 %to &em_tree_numTarget;
25440     +            &&em_tree_targetVars&i
25441     +         %end;
25442     +       %end;
25443     +     %end;
25444     +     );
25445     +   run;
25447     +   /* run Tree procedure */
25448     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
25450     +   /* Check return code and throw exception if error is detected */
25451     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
25452     +   %if &syserr %then %do;
25453     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
25454     +     %goto doendm;
25455     +   %end;
25457     +   /* add decision score code if multiple targets are processed */
25458     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
25459     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
25460     +   %end;
25462     +   /* create outfit dataset if multiple score statements have been executed */
25463     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
25465     +   /* create English Rules */
25466     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
25467     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
25468     +       %em_tree_makeEnglishRules;
25470     +       /* English Rules */
25471     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
25473     +     %end;
25474     +   filename x;
25476     +   %doendm:
25477     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
25478     +%macro EM_SetProperties;
25480     +   /* train properties */
25481     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
25482     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
25483     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
25484     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
25485     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
25486     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
25487     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
25488     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
25489     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
25490     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
25491     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
25492     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
25493     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
25494     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
25495     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
25496     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
25497     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
25498     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
25499     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
25500     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
25501     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
25502     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
25503     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
25504     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
25505     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
25506     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
25507     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
25508     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
25509     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
25510     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
25511     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
25512     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
25513     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
25514     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
25515     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
25516     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
25517     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
25518     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
25519     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
25520     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
25521     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
25523     +   /* properties for interactive sample */
25524     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
25525     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
25526     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
25527     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
25529     +   /* report properties */
25530     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
25531     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
25532     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
25533     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
25534     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
25535     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
25536     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
25537     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
25538     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
25539     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
25540     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
25541     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
25542     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
25544     +   /* score properties */
25545     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
25546     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
25548     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
25550     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
25551     +  %global &nLevel;
25552     +  proc dmdb batch data=&indata
25553     +    classout=_tmp_dmdbout;
25554     +    class &target;
25555     +  run;
25556     +  data _tmp_dmdbout;
25557     +    set _tmp_dmdbout;
25558     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
25559     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
25560     +  run;
25561     +  data _null_;
25562     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
25563     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
25564     +    %let dsid = %sysfunc(close(&dsid));
25565     +     call symput("&nLevel", put(&_obs, Best12.));
25566     +  run;
25568     +  proc datasets lib=work nolist;
25569     +     delete _tmp_dmdbout;
25570     +  run;
25571     +  quit;
25572     +%Mend EM_CheckBinaryTargetLevel;
25575     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
25577     +  /* determine the number of obs in training data */
25578     +  proc sql;
25579     +    reset noprint;
25580     +    select count(*) into :em_nobs from &indata;
25581     +  quit;
25583     +  /* determine the number of input variables */
25584     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
25585     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
25587     +  /* retrieve targetEvent from decmeta */
25588     +  %let targetEvent=;
25589     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
25590     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
25591     +      data _null_;
25592     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
25593     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
25594     +      run;
25595     +    %end;
25596     +  %end;
25598     +  /* create targetTable if multipleTar eq Y */
25599     +  data temptarget;
25600     +    set &EM_DATA_VARIABLESET;
25601     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
25602     +  run;
25604     + /* data sets */
25605     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
25606     + %EM_GETNAME(key=EMTREE,        type=DATA);
25607     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
25608     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
25609     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
25610     + %EM_GETNAME(key=OUTNODES,      type=DATA);
25611     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
25612     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
25613     + %EM_GETNAME(key=OUTPATH,       type=DATA);
25614     + %EM_GETNAME(key=OUTRULES,      type=DATA);
25616     + /* files */
25617     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
25618     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
25620     + /* turn on pmml if requested */
25621     + %let nnpmml=0;
25622     + %if %symexist(EM_PMML) %then %do;
25623     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
25624     +       %let nnpmml=1;
25626     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
25627     +   %end;
25628     +%end;
25630     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
25632     +%if &nnpmml or &numClassTarget %then %do;
25634     +    /* create dmdb needed for pmml generation */
25635     +    %let tree_maxlevel = 512;
25636     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
25637     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
25638     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
25639     +      %end;
25640     +    %end;
25641     +    %if &tree_maxlevel gt 0 %then %do;
25642     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
25643     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
25644     +    %end;
25646     +    %let targetOrderString =;
25647     +    %let targetString = ;
25648     +    data _null_;
25649     +       length orderString nameString $10000;
25650     +       retain orderString nameString;
25651     +       set &em_data_variableset end=eof;
25652     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
25653     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
25654     +       %end;
25655     +       %else %do;
25656     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
25657     +       %end;          select(order);
25658     +         when('')        order ='DESC';
25659     +         when('FMTASC')  order='ASCFMT';
25660     +         when('FMTDESC') order='DESFMT';
25661     +         otherwise;
25662     +       end;
25663     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
25664     +       nameString = trim(nameString)!!' '!!trim(NAME);
25666     +       if eof then do;
25667     +          call symput('targetOrderString', trim(orderString));
25668     +          call symput('targetString', trim(nameString));
25669     +       end;
25670     +    run;
25672     +    %let arborkluge= "work._treeDMDB";
25674     +    proc dmdb batch data=&indata
25675     +    %if &nnpmml %then %do;
25676     +        PMML
25677     +    %end;
25678     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
25680     +      %if &nnpmml %then %do;
25681     +           %if "%EM_ID" ne "" %then %do;
25682     +             id %EM_ID;
25683     +           %end;
25684     +           %if &EM_NUM_CLASS gt 0 %then %do;
25685     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
25686     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
25687     +                  &targetOrderString;
25688     +           %end;
25689     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
25690     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
25691     +           %end;
25692     +           target &targetString %EM_INTERVAL_TARGET;
25693     +           %if "%EM_FREQ" ne "" %then %do;
25694     +             freq %EM_FREQ;
25695     +           %end;
25696     +      %end;
25697     +      %else %do;
25698     +         class  &targetOrderString;
25699     +         target &targetString %EM_INTERVAL_TARGET;
25700     +      %end;
25701     +    run;
25702     +    quit;
25704     +    proc datasets lib=work nolist;
25705     +       delete classout varout;
25706     +    run;
25707     +    quit;
25709     + %end;
25712     + /* run Arbor procedure */
25713     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
25714     +  proc arbor data=&INDATA
25716     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
25717     +    Leafsize = &EM_PROPERTY_LEAFSIZE
25718     +  %end;
25720     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
25721     +    Splitsize = &EM_PROPERTY_SPLITSIZE
25722     +  %end;
25724     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
25725     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
25726     +  %end;
25728     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
25729     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
25730     +  %end;
25732     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
25733     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
25734     +  %end;
25736     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
25737     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
25738     +  %end;
25739     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
25740     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
25741     +  %end;
25742     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
25743     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
25744     +  %end;
25746     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
25747     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
25748     +      alpha = &EM_PROPERTY_SIGLEVEL
25749     +    %end;
25750     +  %end;
25752     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
25753     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
25754     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
25755     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
25756     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
25758     +        padjust =
25759     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
25760     +          &chaid
25761     +        %end;
25762     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
25763     +          DEPTH
25764     +        %end;
25765     +      %end;
25766     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
25767     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
25768     +         pvars = &num_inputs
25769     +      %end;
25770     +    %end;
25771     +  %end;
25772     +  %else %do;
25773     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
25774     +         padjust = NONE
25775     +      %end;
25776     +  %end;
25778     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
25779     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
25780     +    Maxrules = &num_nrules
25781     +  %end;
25783     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
25784     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
25785     +    Maxsurrs = &num_nsurrs
25786     +  %end;
25788     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
25789     +     Missing=&EM_PROPERTY_MISSINGVALUE
25790     +  %end;
25792     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
25793     +     USEVARONCE
25794     +  %end;
25796     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
25797     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
25798     +  %end;
25801     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
25802     +    event = "&targetEvent"
25803     +  %end;
25805     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
25806     +     DECSEARCH
25807     +  %end;
25809     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
25810     +     PRIORSSEARCH
25811     +  %end;
25813     +  %if &arbor_1 ne %then %do;
25814     +    &arbor_1
25815     +  %end;
25817     +  %if &em_arbor ne %then %do;
25818     +     &em_arbor
25819     +  %end;
25820     +  ;
25821     + %end;
25822     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
25823     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
25824     +       Performance &EM_PROPERTY_PERFORMANCE
25825     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25826     +         nodesize=&EM_PROPERTY_NODESAMPLE
25827     +       %end;
25828     +       ;
25829     +       interact;
25830     + %end;
25831     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
25832     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
25833     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
25834     +    %put &em_codebar;
25835     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
25836     +    %put &errormsg;
25837     +    %put &em_codebar;
25838     +    %goto doendm;
25839     +   %end;
25840     +   %else %do;
25841     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
25842     +       Performance &EM_PROPERTY_PERFORMANCE
25843     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25844     +         nodesize=&EM_PROPERTY_NODESAMPLE
25845     +       %end;
25846     +       ;
25847     +       interact;
25848     +   %end;
25849     + %end;
25851     + %else %do;
25852     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
25853     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
25854     +    %put &em_codebar;
25855     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
25856     +    %put &errormsg;
25857     +    %put &em_codebar;
25858     +    %goto doendm;
25859     +   %end;
25860     +   %else %do;
25861     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
25862     +       Performance &EM_PROPERTY_PERFORMANCE
25863     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25864     +         nodesize=&EM_PROPERTY_NODESAMPLE
25865     +       %end;
25866     +       ;
25867     +        interact;
25868     +   %end;
25869     + %end;
25871     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
25872     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
25873     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
25874     +    %end;
25876     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
25877     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
25878     +    %end;
25880     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
25881     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
25882     +    %end;
25884     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
25885     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
25886     +    %end;
25888     +    %if "%EM_FREQ" ne "" %then %do;
25889     +       freq %EM_FREQ;
25890     +    %end;
25892     +    %if "&multipleTar" eq "Y" %then %do;
25893     +       /* cycle through all target vars in variableset */
25894     +       %let tdsid = %sysfunc(open(temptarget));
25895     +       %if &tdsid %then %do;
25896     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
25897     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
25898     +          %do %while(^ %sysfunc(fetch(&tdsid)));
25899     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
25900     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
25901     +             target &var / level = &lvl
25902     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
25903     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
25904     +             %end;
25905     +             %else %if "&lvl" eq "INTERVAL" %then %do;
25906     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
25907     +             %end;
25908     +             %else %if "&lvl" eq "ORDINAL" %then %do;
25909     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
25910     +             %end;
25911     +          %end;
25912     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
25913     +       %end;
25914     +       useTarget variable = %EM_TARGET;
25915     +    %end;
25916     +    %else %do;
25917     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
25918     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
25919     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
25920     +      %end;
25921     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
25922     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
25923     +      %end;
25924     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
25925     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
25926     +      %end;
25927     +    %end;
25929     +    %if "&multipleTar" eq "N" %then %do;
25930     +      &EM_DEC_STATEMENT;
25931     +    %end;
25933     +    Performance &EM_PROPERTY_PERFORMANCE
25934     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25935     +      nodesize=&EM_PROPERTY_NODESAMPLE
25936     +    %end;
25937     +    ;
25939     +    %if "&intFlag" eq "Y" %then %do;
25940     +       INTERACT Largest;
25941     +       Train maxnewdepth=0;
25942     +    %end;
25944     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
25945     +         Assess
25946     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
25947     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
25948     +              %put &em_codebar;
25949     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
25950     +              %put &errormsg;
25951     +              %put &em_codebar;
25952     +            %end;
25953     +            %else %do;
25954     +               Validata=&EM_IMPORT_VALIDATE
25955     +            %end;
25956     +         %end;
25957     +         %else %do;
25958     +           NoValidata
25959     +         %end;
25960     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
25961     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
25962     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
25963     +               %if &dsid %then %do;
25964     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
25965     +                 %do %while(^ %sysfunc(fetch(&dsid)));
25966     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
25967     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
25968     +                   %else %do;
25969     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
25970     +                      %else %let measure= MISC;
25971     +                   %end;
25972     +                 %end;
25973     +               %end;
25974     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25975     +            %end;
25976     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
25977     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
25978     +                 %let measure=ASE;
25979     +              %end;
25980     +              %else %do;
25981     +                 %let measure=MISC;
25982     +              %end;
25983     +            %end;
25984     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
25985     +              %let measure=ASE;
25986     +            %end;
25987     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
25988     +               %let measure = LIFT;
25989     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
25990     +               %if &dsid %then %do;
25991     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
25992     +                 %do %while(^ %sysfunc(fetch(&dsid)));
25993     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
25994     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
25995     +                 %end;
25996     +               %end;
25997     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25998     +            %end;
25999     +            measure=&measure
26000     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
26001     +               event = "&targetEvent"
26002     +            %end;
26003     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
26004     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
26005     +            %end;
26006     +         %end;
26007     +         %if "&multipleTar" eq "N" %then %do;
26008     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
26009     +               CV
26010     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
26011     +                 CVNITer = &EM_PROPERTY_CVNITER
26012     +               %end;
26013     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
26014     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
26015     +               %end;
26016     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
26017     +                 CVSeed = &EM_PROPERTY_CVSEED
26018     +               %end;
26019     +            %end;
26020     +         %end;
26021     +       %end;
26022     +      ;
26024     +      %if "&intFlag" ne "Y" %then %do;
26025     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
26026     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
26027     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
26028     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
26030     +          SUBTREE &subtree
26031     +          %if "&subtree" eq "NLEAVES" %then %do;
26032     +            =&EM_PROPERTY_NSUBTREE
26033     +          %end;
26034     +          ;
26035     +        %end;
26037     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
26038     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
26039     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
26040     +          %end;
26041     +       %end;
26042     +      %end;
26043     + %end;
26046     + MakeMacro nleaves = nleaves;
26047     + save
26048     + %if "&EM_USER_EMTREE" ne "" %then %do;
26049     +   MODEL=&EM_USER_EMTREE
26050     + %end;
26051     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
26052     +   SEQUENCE=&EM_USER_OUTSEQ
26053     + %end;
26054     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
26055     +   IMPORTANCE=&EM_USER_OUTIMPORT
26056     + %end;
26057     + %if "&EM_USER_OUTNODES" ne "" %then %do;
26058     +   NODESTAT=&EM_USER_OUTNODES
26059     + %end;
26060     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
26061     +   SUMMARY=&EM_USER_OUTSUMMARY
26062     + %end;
26063     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
26064     +   STATSBYNODE=&EM_USER_OUTSTATS
26065     + %end;
26066     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
26067     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
26068     + %end;
26069     + %if "&EM_USER_OUTPATH" ne "" %then %do;
26070     +   Pathlistnonmissing=&EM_USER_OUTPATH
26071     + %end;
26072     + %if "&EM_USER_OUTRULES" ne "" %then %do;
26073     +   RULES = &EM_USER_OUTRULES
26074     + %end;
26075     + ;
26077     + %if "&intFlag" ne "Y" %then %do;
26079     +   %let lookupString = ;
26080     +   %if ^%symexist(EM_OPTION) %then
26081     +      %let EM_OPTION=;
26083     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
26084     +      %let lookupString = LOOKUP=SELECT;
26085     +   %end;
26087     +   %let codetext=;
26088     +   %let norescodetxt=;
26090     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
26091     +     %let codetext=&codetext DUMMY;
26092     +     %let norescodetxt=&norescodetxt DUMMY;
26093     +   %end;
26094     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
26095     +     %let codetext=&codetext NOLEAFID;
26096     +     %let norescodetxt=&norescodetxt NOLEAFID;
26097     +   %end;
26098     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
26099     +     %let norescodetxt=&norescodetxt NOPRED;
26100     +   %end;
26102     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
26103     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
26105     +   %if &nnpmml %then %do;
26106     +     code pmml;
26107     +   %end;
26109     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
26110     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26111     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
26112     +   %end;
26113     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
26114     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
26115     +   %end;
26116     + %end;
26118     + run;
26119     + quit;
26121     + /*%em_checkerror(); */
26122     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
26123     +   /* Delete DMDB catalog */
26124     +   proc datasets lib=work nolist;
26125     +       delete _treeDMDB / mt=cat;
26126     +  run;
26127     +  %end;
26129     + %if &nnpmml %then %do;
26130     +    ods pmml close;
26131     + %end;
26133     +  %doendm:
26135     +%mend em_tree_runTreeProcedure;
26137     +%macro em_tree_createFitStats( multipleTar= );
26140     +  /* create targetTable is multipleTar eq Y */
26141     +  data temptarget;
26142     +    set &EM_DATA_VARIABLESET;
26143     +    where ROLE="TARGET";
26144     +  run;
26146     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
26147     +   data &EM_USER_EMOUTFIT;
26148     +     length target $32;
26149     +     merge work.fit_train
26150     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26151     +       work.fit_valid
26152     +     %end;
26153     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
26154     +       work.fit_test
26155     +     %end;
26156     +     ;
26157     +     %if "&multipleTar" eq "N" %then %do;
26158     +       target="%EM_TARGET";
26159     +     %end;
26160     +     %else %do;
26161     +       target = _TARGET_;
26162     +     %end;
26163     +     drop _NW_ _SUMW_
26164     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26165     +        _VSUMW_
26166     +     %end;
26167     +     ;
26168     +   run;
26170     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26171     +     proc datasets library=work nolist;
26172     +       delete fit_valid;
26173     +     run;
26174     +   %end;
26175     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
26176     +     proc datasets library=work nolist;
26177     +       delete fit_test;
26178     +     run;
26179     +   %end;
26181     +%mend em_tree_createFitStats;
26184     +%macro em_tree_makeEnglishRules;
26186     +  %EM_GETNAME(key=OUTNODES, type=DATA);
26187     +  %EM_GETNAME(key=OUTPATH, type=DATA);
26189     +  /* verify that necessary tables exist and if not, skip processing */
26190     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
26191     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
26192     +    %goto doendm;
26193     +  %end;
26194     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
26195     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
26196     +    %goto doendm;
26197     +  %end;
26199     +  /* determine length of variable in outpath dataset */
26200     +  %let vlength= ;
26201     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
26202     +  %if &dsid ne %then %do;
26203     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
26204     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
26205     +  %end;
26206     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
26208     +  data tempoutpath;
26209     +    length varname $&vlength;
26210     +    retain varname;
26211     +    set &EM_USER_OUTPATH;
26213     +    if ^missing(variable) then varname=variable;
26214     +    else if ^missing(var_name) then varname=var_name;
26215     +    output;
26216     +  run;
26218     +  /* create an array of generated predicted variable names */
26219     +  %let tree_pred_vars = ;
26220     +  %let tree_pred_label = ;
26221     +  %let numpred= 0;
26222     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
26224     +    data _null_;
26225     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
26226     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
26227     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
26228     +     if eof then
26229     +       call symput('numpred', strip(put(_N_, BEST.)));
26230     +    run;
26231     +  %end;
26233     +  /* determine if NPRIORS exists in outnodes  */
26234     +  %local nprior_flag;
26235     +  data _null_;
26236     +    set &EM_USER_OUTNODES(obs=2) end=eof;
26237     +    if eof then do;
26238     +      call symput('nprior_flag', strip(put(npriors, best.)));
26239     +    end;
26240     +  run;
26242     +  proc sort data=tempoutpath; by node; run;
26243     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
26245     +  data tempoutpath;
26246     +    merge tempoutpath(in=_a) outnodes(keep= node
26247     +    %if "&nprior_flag" ne "." %then %do;
26248     +      NPRIORS
26249     +    %end;
26250     +    %else %do;
26251     +      N
26252     +    %end;
26253     +    %if &numpred gt 0 %then %do;
26254     +      %do i=1 %to &numpred;
26255     +        &&tree_pred_vars&i
26256     +      %end;
26257     +    %end;
26258     +    );
26259     +    by node;
26260     +    if _a;
26261     +  run;
26263     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
26265     +  data _null_;
26266     +    file x;
26267     +    set tempoutpath;
26268     +    by node descending varname;
26269     +    retain origvar oldnode string;
26270     +    length origvar $32 oldnode 8 string $5000;
26272     +    if _N_ = 1 then do;
26273     +      origvar = varname;
26274     +      oldnode = node;
26275     +    end;
26277     +    if first.node then do;
26278     +       put "&EM_CODEBAR";
26279     +       put " Node = " node;
26280     +       put "&EM_CODEBAR";
26281     +    end;
26283     +      if first.varname then do;
26284     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
26285     +            if MISSING(CHARACTER_VALUE) then do;
26286     +             if NUMERIC_VALUE ne .  then do;
26287     +              if ^first.node then do;
26288     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26289     +              end;
26290     +              else do;
26291     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26292     +              end;
26293     +             end;
26294     +            end;
26295     +            else do;
26296     +              if ^first.node then do;
26297     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26298     +              end;
26299     +              else do;
26300     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26301     +              end;
26302     +             end;
26303     +         end;
26304     +         else if RELATION in ("=") then do;
26305     +            if ^first.node then do;
26306     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
26307     +            end;
26308     +            else do;
26309     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
26310     +            end;
26311     +         end;
26312     +         else if RELATION in ("ISMISSING") then do;
26313     +            if ^first.node then do;
26314     +              string = " AND "|| strip(varname) || " equals Missing";
26315     +            end;
26316     +            else do;
26317     +              string = "if "|| strip(varname) ||" equals Missing";
26318     +            end;
26319     +         end;
26320     +         else if RELATION in ("ISNOTMISSING") then do;
26321     +            if ^first.node then do;
26322     +              string = " AND "|| strip(varname) || " equals All Values";
26323     +            end;
26324     +            else do;
26325     +              string = "if "|| strip(varname) ||" equals All Values";
26326     +            end;
26327     +         end;
26328     +         if ^missing(varname) then origvar = varname;
26329     +         oldnode=node;
26331     +      end;
26332     +      else do;
26333     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
26334     +          if MISSING(CHARACTER_VALUE) then do;
26335     +           if  NUMERIC_VALUE ne .  then do;
26336     +            if ^MISSING(string) then
26337     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26338     +            else
26339     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26340     +           end;
26341     +          end;
26342     +          else do;
26343     +            if ^MISSING(string) then
26344     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26345     +            else
26346     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26347     +          end;
26349     +         end;
26350     +         else if RELATION in ("=") then do;
26351     +           string = strip(string)||", "||strip(character_value);
26352     +         end;
26353     +         else if RELATION in ("ISMISSING") then do;
26355     +         end;
26356     +         if ^missing(varname) then origvar = varname;
26357     +         oldnode=node;
26358     +      end;
26359     +      if last.varname then do;
26360     +         if RELATION in ("ISMISSING") then do;
26361     +           if ^first.varname then do;
26362     +             string = strip(string) || " or MISSING";
26363     +           end;
26364     +         end;
26365     +         put string;
26366     +         if ^missing(varname) then origvar = varname;
26367     +         oldnode=node;
26368     +      end;
26370     +      if last.node then do;
26371     +         put "then ";
26372     +         put " Tree Node Identifier   = " node;
26374     +         %if "&nprior_flag" ne "." %then %do;
26375     +           put " Number of Observations = " NPRIORS;
26376     +         %end;
26377     +         %else %do;
26378     +           put " Number of Observations = " N;
26379     +         %end;
26381     +         %if &numpred gt 0 %then %do;
26382     +           %do i=1 %to &numpred;
26383     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
26384     +           %end;
26385     +         %end;
26387     +         put " ";
26388     +         if ^missing(varname) then origvar = varname;
26389     +         oldnode=node;
26390     +      end;
26392     +  run;
26394     +  proc datasets lib=work nolist;
26395     +    delete tempoutpath outnodes;
26396     +  run;
26398     +  %doendm:
26399     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS4.Impt_TRAIN classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class BAD;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;
 
NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS4.em_Tree / view=EMWS4.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS4.Impt_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_MORTDUE IMP_NINQ IMP_REASON IMP_YOJ BAD BAD );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS4.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS4.em_Tree;
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS4.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS4.Tree_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS4.em_Tree dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class BAD(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target BAD
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS4.em_Tree Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   IMP_DEBTINC IMP_MORTDUE IMP_YOJ
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_BINARY_INPUT):   IMP_REASON
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   BAD
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   decision decdata=WORK.BAD decvars= DECISION1 DECISION2;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS4.Impt_VALIDATE measure=PROFIT
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1377711 kilobytes of physical memory.
NOTE: Will use 2979 out of 2979 training cases.
NOTE: Using memory pool with 87539712 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 702272 bytes of work memory.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: View EMWS4.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
 
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
NOTE: The subtree sequence contains 16 subtrees. The largest has 31 nodes and 16 leaves.
NOTE: Using subtree with 11 nodes and 6 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 11 nodes and 6 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 6.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS4.Tree_EMTREE SEQUENCE=EMWS4.Tree_OUTSEQ IMPORTANCE=EMWS4.Tree_OUTIMPORT NODESTAT=EMWS4.Tree_OUTNODES SUMMARY=EMWS4.Tree_OUTSUMMARY STATSBYNODE=EMWS4.Tree_OUTSTATS TOPOLOGY=EMWS4.Tree_OUTTOPOLOGY
Pathlistnonmissing=EMWS4.Tree_OUTPATH RULES = EMWS4.Tree_OUTRULES ;
NOTE: The data set EMWS4.TREE_OUTIMPORT has 8 observations and 6 variables.
NOTE: The data set EMWS4.TREE_EMTREE has 1141 observations and 4 variables.
NOTE: The data set EMWS4.TREE_OUTNODES has 11 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTPATH has 58 observations and 7 variables.
NOTE: The data set EMWS4.TREE_OUTRULES has 338 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTSEQ has 16 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTSTATS has 121 observations and 5 variables.
NOTE: The data set EMWS4.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTTOPOLOGY has 11 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS4.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 12 variables.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.09 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS4.Impt_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 10 variables.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: View EMWS4.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
 
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS4.Impt_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 10 variables.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      58 at 107384:41    43 at 107385:39    251 at 107386:43   251 at 107387:14   25 at 107388:14    106 at 107388:43   121 at 107389:14   26 at 107389:40    33 at 107390:14    100 at 107390:39
NOTE: There were 1193 observations read from the data set EMWS4.PART_TEST.
NOTE: View EMWS4.IMPT_TEST.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
NOTE: There were 1193 observations read from the data set EMWS4.VARCLUS_TEST.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.59 seconds
      cpu time            0.48 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.62 seconds
      cpu time            0.48 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS4.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS4.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "BAD";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $15;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS4.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 58 observations read from the data set EMWS4.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS4.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS4.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 11 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS P_BAD1 P_BAD0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 11 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $5000;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: BAD=1 = " P_BAD1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: BAD=0 = " P_BAD0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=16 March 2021 00:10:56,
      Create Time=16 March 2021 00:10:56
 
NOTE: 72 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 71.
NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26401
26402      *------------------------------------------------------------*;
26403      * End TRAIN: Tree;
26404      *------------------------------------------------------------*;
 
26405      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26406      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
26407      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26408      ;
MPRINT(EM_DIAGRAM):   ;
26409      ;
MPRINT(EM_DIAGRAM):   ;
26410      ;
MPRINT(EM_DIAGRAM):   ;
26411      ;
MPRINT(EM_DIAGRAM):   ;
26412      quit;
MPRINT(EM_DIAGRAM):   quit;
26413      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26414      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
26415      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26416      /*; *"; *'; */
26417      ;
MPRINT(EM_DIAGRAM):   ;
26418      run;
MPRINT(EM_DIAGRAM):   run;
26419      quit;
MPRINT(EM_DIAGRAM):   quit;
26420      /* Reset EM Options */
26421      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
26422      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
26423      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
26424      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
26425      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
26426      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:57" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                16 March 2021
Time:                00:10:57
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1Y789YB "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1Y789YB new;
MPRINT(EM_DIAGRAM):   run;
26528      %let EMEXCEPTIONSTRING=;
26529      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26530      * SCORE: Tree;
MPRINT(EM_DIAGRAM):   * SCORE: Tree;
26531      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26532      %let EM_ACTION = SCORE;
26533      %let syscc = 0;
26534      %macro main;
26535
26536        %if %upcase(&EM_ACTION) = CREATE %then %do;
26537          filename temp catalog 'sashelp.emmodl.tree_create.source';
26538          %include temp;
26539          filename temp;
26540
26541          %em_tree_create;
26542        %end;
26543
26544         %else
26545         %if %upcase(&EM_ACTION) = TRAIN %then %do;
26546
26547             filename temp catalog 'sashelp.emmodl.tree_train.source';
26548             %include temp;
26549             filename temp;
26550             %em_tree_train;
26551         %end;
26552
26553        %else
26554        %if %upcase(&EM_ACTION) = SCORE %then %do;
26555          filename temp catalog 'sashelp.emmodl.tree_score.source';
26556          %include temp;
26557          filename temp;
26558
26559          %em_tree_score;
26560
26561        %end;
26562
26563        %else
26564        %if %upcase(&EM_ACTION) = REPORT %then %do;
26565
26566             filename temp catalog 'sashelp.emmodl.tree_report.source';
26567             %include temp;
26568             filename temp;
26569
26570             %em_tree_report;
26571         %end;
26572
26573        %else
26574        %if %upcase(&EM_ACTION) = OPENINT %then %do;
26575
26576             filename temp catalog 'sashelp.emmodl.tree_actions.source';
26577             %include temp;
26578             filename temp;
26579             %EM_TREE_OPENTREEVIEWER;
26580
26581         %end;
26582
26583        %else
26584        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
26585
26586             filename temp catalog 'sashelp.emmodl.tree_actions.source';
26587             %include temp;
26588             filename temp;
26589             %EM_TREE_CLOSETREEVIEWER;
26590
26591         %end;
26592
26593
26594         %doendm:
26595      %mend main;
26596
26597      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
26599     +%macro em_tree_score;
26601     +   /* determine if multiple targets will be processed */
26602     +   %let em_tree_multipleTargets=N;
26603     +   %let em_tree_numTarget=1;
26604     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
26605     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
26606     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
26607     +         %let em_tree_multipleTargets=N;
26608     +      %end;
26609     +      %else %do;
26610     +         /* create macro array of targets  */
26611     +         data _null_;
26612     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
26613     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
26614     +           if eof then
26615     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
26616     +        run;
26618     +        %if &em_tree_numTarget gt 1 %then %do;
26619     +           %let em_tree_multipleTargets=Y;
26620     +        %end;
26621     +      %end;
26622     +   %end;
26624     +   /* build flow and publish scoring code */
26625     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
26626     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
26628     +   filename treeflow "&EM_USER_TREEFLOW";
26629     +   filename treepub "&EM_USER_TREEPUBLISH";
26631     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
26632     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
26634     +   %em_copyfile(infref=treeflow, outfref=flowref);
26635     +   %em_copyfile(infref=treepub, outfref=pubref);
26637     +   filename treeflow;
26638     +   filename treepub;
26640     +   /* if priors are used, add code to generate unadjusted residuals in export */
26641     +   %let useAdjPriors = N;
26642     +   data _null_;
26643     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
26644     +     if USE="Y" then call symput('useAdjPriors', 'Y');
26645     +   run;
26646     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
26647     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
26648     +      %include temp;
26649     +      filename temp;
26651     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
26652     +      filename adjref "&EM_USER_adjResidualCode";
26653     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
26655     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
26657     +      filename adjref;
26658     +   %end;
26660     +   /* LEAF */
26661     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
26662     +      data _null_;
26663     +        file flowref mod;
26664     +        put 'drop _LEAF_;';
26665     +      run;
26667     +      data _null_;
26668     +        file pubref mod;
26669     +        put 'drop _LEAF_;';
26670     +      run;
26672     +   %end;
26674     +   filename flowref;
26675     +   filename pubref;
26677     +   /* em_metachange code */
26678     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
26679     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
26680     +   %end;
26682     +   /* variable selection based on importance stat    */
26683     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
26684     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
26685     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
26686     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
26687     +     %let obs = %sysfunc(fetch(&dsid));
26688     +     %do %while(&obs=0);
26689     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
26690     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
26691     +       %EM_METACHANGE(name=&varname, role=REJECTED);
26692     +       %let obs = %sysfunc(fetch(&dsid));
26693     +     %end;
26694     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
26695     +   %end;
26697     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
26698     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
26699     +    %let tree_pred_vars = ;
26700     +    %let tree_pred_lvl =;
26701     +    %let numpred= 0;
26703     +    data _null_;
26704     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
26705     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
26706     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
26707     +     if eof then
26708     +       call symput('numpred', strip(put(_N_, BEST.)));
26709     +    run;
26710     +   %end;
26712     +   %if &numpred ne 0 %then %do;
26713     +    %do i=1 %to &numpred;
26714     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
26715     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
26716     +    %end;
26717     +   %end;
26719     +   /* determine if multiple targets will be processed */
26720     +   %let em_tree_multipleTargets=N;
26721     +   %let em_tree_numTarget=1;
26722     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
26723     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
26724     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
26725     +         %let em_tree_multipleTargets=N;
26726     +      %end;
26727     +      %else %do;
26728     +        data _null_;
26729     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
26730     +          if eof then
26731     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
26732     +        run;
26734     +        %if &em_tree_numTarget gt 1 %then %do;
26735     +           %let em_tree_multipleTargets=Y;
26736     +        %end;
26737     +     %end;
26738     +   %end;
26740     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
26741     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
26743     +      /* variable importance */
26744     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
26745     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
26747     +         %let validexist=0;
26748     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
26749     +           %let validexist=1;
26750     +         %end;
26752     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
26753     +         /* and the columns may not be generated                                                                                 */
26754     +         %let em_tree_cvexists=;
26755     +         %let em_tree_surrexists=.;
26756     +         data _null_;
26757     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
26758     +            if eof then do ;
26759     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
26760     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
26761     +            end;
26762     +         run;
26764     +         data &EM_USER_OUTIMPORT;
26765     +            set &EM_USER_OUTIMPORT;
26767     +            /* format columns based on Precison value specified */
26768     +            format importance 15.&EM_PROPERTY_PRECISION
26769     +                 %if &validexist %then %do;
26770     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
26771     +                 %end;
26772     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
26773     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
26774     +                 %end;
26775     +            ;
26776     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
26777     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
26778     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
26779     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
26780     +                 %if "&em_tree_surrexists" ne "" %then %do;
26781     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
26782     +                 %end;
26783     +                 %if &validexist %then %do;
26784     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
26785     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
26786     +                 %end;
26787     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
26788     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
26789     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
26790     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
26791     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
26792     +                 %end;
26793     +            ;
26794     +         run;
26796     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
26797     +      %end;
26798     +   %end;
26800     +   %doendm:
26801     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=16 March 2021 00:10:56,
      Create Time=16 March 2021 00:10:00
 
NOTE: 196 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 74.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=16 March 2021 00:10:56,
      Create Time=16 March 2021 00:10:00
 
NOTE: 147 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 74.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=5929,
      Last Modified=16 March 2021 00:10:56,
      Create Time=16 March 2021 00:10:00
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4754,
      Last Modified=16 March 2021 00:10:56,
      Create Time=16 March 2021 00:10:00
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("IMP_YOJ                         ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("IMP_MORTDUE                     ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("IMP_JOB                         ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("IMP_REASON                      ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_BAD1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_BAD0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS4.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data EMWS4.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS4.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 8 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.02300069482205;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26802
26803      *------------------------------------------------------------*;
26804      * End SCORE: Tree;
26805      *------------------------------------------------------------*;
 
26806      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
26807      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
26808      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26809      filename x "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas";
26810      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
26811      file x;
MPRINT(EM_DIAGRAM):   file x;
26812      put 'if upcase(NAME) = "IMP_JOB" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "IMP_JOB" then do;';
26813      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26814      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26815      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26816      put 'if upcase(NAME) = "IMP_MORTDUE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "IMP_MORTDUE" then do;';
26817      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26818      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26819      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26820      put 'if upcase(NAME) = "IMP_REASON" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "IMP_REASON" then do;';
26821      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26822      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26823      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26824      put 'if upcase(NAME) = "IMP_YOJ" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "IMP_YOJ" then do;';
26825      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26826      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26827      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26828      put 'if upcase(NAME) = "Q_BAD0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_BAD0" then do;';
26829      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
26830      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26831      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26832      put 'if upcase(NAME) = "Q_BAD1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_BAD1" then do;';
26833      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
26834      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26835      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26836      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
26837      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
26838      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
26839      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26840      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=16 March 2021 00:10:57,
      Create Time=16 March 2021 00:10:00
 
NOTE: 28 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 40.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
26841      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
26842      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26843      *------------------------------------------------------------*;
26844      * Tree: Scoring DATA data;
26845      *------------------------------------------------------------*;
26846      data EMWS4.Tree_TRAIN
26847      / view=EMWS4.Tree_TRAIN
26848      ;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_TRAIN / view=EMWS4.Tree_TRAIN ;
26849      set EMWS4.Impt_TRAIN
26850      ;
MPRINT(EM_DIAGRAM):   set EMWS4.Impt_TRAIN ;
26851      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
26852     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
26853     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
26854     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
26855     +
26856     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
26857     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
26858     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
26859     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
26860     +
26861     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
26862     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
26863     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
26864     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
26865     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
26866     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
26867     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
26868     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
26869     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
26870     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
26871     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
26872     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
26873     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
26874     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
26875     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
26876     +
26877     +
26878     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
26879     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
26880     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
26881     +
26882     +
26883     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
26884     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_DELINQ , BEST12.);
26885     +
26886     +******             ASSIGN OBSERVATION TO NODE             ******;
26887     +_ARBFMT_12 = PUT( IMP_DELINQ , BEST12.);
26888     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ,'1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(IMP_DEBTINC ) AND 44.7336573513381 <= IMP_DEBTINC THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
26889     +IF _ARBFMT_12 IN ('0' ,'1' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.72972972972972;
26890     +  IF  NOT MISSING(IMP_DEBTINC ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.27027027027027;
26891     +        44.7336573513381 <= IMP_DEBTINC  THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.72972972972972;
26892     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.27027027027027;
26893     +    _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.71428571428571;
26894     +    P_BAD1  =     0.72972972972972;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.28571428571428;
26895     +    P_BAD0  =     0.27027027027027;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
26896     +    Q_BAD1  =     0.72972972972972;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
26897     +    Q_BAD0  =     0.27027027027027;
MPRINT(EM_DIAGRAM):   END;
26898     +    V_BAD1  =     0.71428571428571;
26899     +    V_BAD0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   ELSE DO;
26900     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_DEROG , BEST12.);
26901     +    U_BAD  =                    1;
26902     +    END;
26903     +  ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
26904     +    _ARBFMT_12 = PUT( IMP_DEROG , BEST12.);
26905     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_NINQ , BEST12.);
26906     +    IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
26907     +      _ARBFMT_12 = PUT( IMP_NINQ , BEST12.);
26908     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'0' ,'2' ,'3' ,'4' ,'8' ,'7' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(IMP_DEBTINC ) AND IMP_DEBTINC < 12.5702078408748 THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
26909     +      IF _ARBFMT_12 IN ('1' ,'0' ,'2' ,'3' ,'4' ,'8' ,'7' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.43636363636363;
26910     +        IF  NOT MISSING(IMP_DEBTINC ) AND
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.56363636363636;
26911     +          IMP_DEBTINC  <     12.5702078408748 THEN DO;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.43636363636363;
26912     +          _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.56363636363636;
26913     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1875;
26914     +          P_BAD1  =     0.43636363636363;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.8125;
26915     +          P_BAD0  =     0.56363636363636;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
26916     +          Q_BAD1  =     0.43636363636363;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
26917     +          Q_BAD0  =     0.56363636363636;
MPRINT(EM_DIAGRAM):   END;
26918     +          V_BAD1  =               0.1875;
26919     +          V_BAD0  =               0.8125;
MPRINT(EM_DIAGRAM):   ELSE DO;
26920     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
26921     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
26922     +          END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.10176211453744;
26923     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.89823788546255;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.10176211453744;
26924     +          _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.89823788546255;
26925     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1155589123867;
26926     +          P_BAD1  =     0.10176211453744;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.88444108761329;
26927     +          P_BAD0  =     0.89823788546255;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
26928     +          Q_BAD1  =     0.10176211453744;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
26929     +          Q_BAD0  =     0.89823788546255;
MPRINT(EM_DIAGRAM):   END;
26930     +          V_BAD1  =      0.1155589123867;
MPRINT(EM_DIAGRAM):   END;
26931     +          V_BAD0  =     0.88444108761329;
26932     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
26933     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
26934     +          END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
26935     +        END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.52941176470588;
26936     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.47058823529411;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.52941176470588;
26937     +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.47058823529411;
26938     +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.24137931034482;
26939     +        P_BAD1  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.75862068965517;
26940     +        P_BAD0  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
26941     +        Q_BAD1  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
26942     +        Q_BAD0  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   END;
26943     +        V_BAD1  =     0.24137931034482;
MPRINT(EM_DIAGRAM):   END;
26944     +        V_BAD0  =     0.75862068965517;
26945     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
26946     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   _NODE_ = 9;
26947     +        END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
26948     +      END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.37743190661478;
26949     +    ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.62256809338521;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.37743190661478;
26950     +      _NODE_  =                    9;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.62256809338521;
26951     +      _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.31927710843373;
26952     +      P_BAD1  =     0.37743190661478;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.68072289156626;
26953     +      P_BAD0  =     0.62256809338521;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
26954     +      Q_BAD1  =     0.37743190661478;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
26955     +      Q_BAD0  =     0.62256809338521;
MPRINT(EM_DIAGRAM):   END;
26956     +      V_BAD1  =     0.31927710843373;
MPRINT(EM_DIAGRAM):   END;
26957     +      V_BAD0  =     0.68072289156626;
MPRINT(EM_DIAGRAM):   END;
26958     +      I_BAD  = '0' ;
26959     +      U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   ELSE DO;
26960     +      END;
MPRINT(EM_DIAGRAM):   _NODE_ = 3;
26961     +    END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
26962     +  END;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.59191176470588;
26963     +ELSE DO;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.40808823529411;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.59191176470588;
26964     +  _NODE_  =                    3;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.40808823529411;
26965     +  _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.54143646408839;
26966     +  P_BAD1  =     0.59191176470588;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.4585635359116;
26967     +  P_BAD0  =     0.40808823529411;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
26968     +  Q_BAD1  =     0.59191176470588;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
26969     +  Q_BAD0  =     0.40808823529411;
MPRINT(EM_DIAGRAM):   END;
26970     +  V_BAD1  =     0.54143646408839;
26971     +  V_BAD0  =      0.4585635359116;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
26972     +  I_BAD  = '1' ;
26973     +  U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
26974     +  END;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
26975     +
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
26976     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   END;
26977     +IF  F_BAD  NE '1'
26978     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
26979     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
26980     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
26981     + END;
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
26982     + ELSE DO;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
26983     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   END;
26984     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   END;
26985     +       SELECT( F_BAD  );
26986     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
26987     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
26988     +       END;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
26989     + END;
MPRINT(EM_DIAGRAM):   label D_BAD = 'Decision: BAD' ;
26990     +
26991     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   label EL_BAD = 'Expected Loss: BAD' ;
26992     +
26993     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   label BL_BAD = 'Best Loss: BAD' ;
26994     +label D_BAD = 'Decision: BAD' ;
MPRINT(EM_DIAGRAM):   label CL_BAD = 'Computed Loss: BAD' ;
26995     +label EL_BAD = 'Expected Loss: BAD' ;
26996     +label BL_BAD = 'Best Loss: BAD' ;
MPRINT(EM_DIAGRAM):   length D_BAD $ 9;
26997     +label CL_BAD = 'Computed Loss: BAD' ;
MPRINT(EM_DIAGRAM):   D_BAD = ' ';
26998     +
MPRINT(EM_DIAGRAM):   EL_BAD = .;
26999     +length D_BAD $ 9;
MPRINT(EM_DIAGRAM):   BL_BAD = .;
MPRINT(EM_DIAGRAM):   CL_BAD = .;
27000     +
27001     +D_BAD = ' ';
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
27002     +EL_BAD = .;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
27003     +BL_BAD = .;
27004     +CL_BAD = .;
MPRINT(EM_DIAGRAM):   D_BAD = '1' ;
27005     +
MPRINT(EM_DIAGRAM):   EL_BAD = P_BAD1 * 0 + P_BAD0 * 1;
27006     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   drop _sum;
27007     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _sum = P_BAD1 * 5 + P_BAD0 * 0;
27008     +
MPRINT(EM_DIAGRAM):   if _sum < EL_BAD + -2.27374E-12 then do;
27009     +D_BAD = '1' ;
MPRINT(EM_DIAGRAM):   EL_BAD = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
27010     +EL_BAD = P_BAD1 * 0 + P_BAD0 * 1;
MPRINT(EM_DIAGRAM):   D_BAD = '0' ;
27011     +drop _sum;
MPRINT(EM_DIAGRAM):   end;
27012     +_sum = P_BAD1 * 5 + P_BAD0 * 0;
27013     +if _sum < EL_BAD + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
27014     +   EL_BAD = _sum; _decnum = 2;
27015     +   D_BAD = '0' ;
27016     +end;
27017     +
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 0 5 1 0 );
27018     +*** Decision Matrix;
27019     +array TREEdema [2,2] _temporary_ (
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
27020     +/* row 1 */  0 5
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_BAD );
27021     +/* row 2 */  1 0
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
27022     +);
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
27023     +
27024     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
27025     +drop _tarnum; select( F_BAD );
MPRINT(EM_DIAGRAM):   end;
27026     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
27027     +   when('0' ) _tarnum = 2;
27028     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   CL_BAD = TREEdema [_tarnum,_decnum];
27029     +end;
27030     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
27031     +
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 0 0);
27032     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   BL_BAD = TREEdebe [_tarnum];
27033     +CL_BAD = TREEdema [_tarnum,_decnum];
27034     +
27035     +*** Best Possible Consequence of Any Decision without Cost;
27036     +array TREEdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   TREEdeex:;
27037     +BL_BAD = TREEdebe [_tarnum];
27038     +
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
27039     +
27040     +TREEdeex:;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
27041     +
MPRINT(EM_DIAGRAM):   ****************************************************************;
27042     +*** End Decision Processing ;
27043     +
MPRINT(EM_DIAGRAM):   drop _LEAF_;
27044     +****************************************************************;
27045     +******          END OF DECISION TREE SCORING CODE         ******;
27046     +****************************************************************;
27047     +
27048     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
27049      run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
27050      quit;
27051      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
27052      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27053      *------------------------------------------------------------*;
27054      * Tree: Scoring VALIDATE data;
27055      *------------------------------------------------------------*;
27056      data EMWS4.Tree_VALIDATE
27057      / view=EMWS4.Tree_VALIDATE
27058      ;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_VALIDATE / view=EMWS4.Tree_VALIDATE ;
27059      set EMWS4.Impt_VALIDATE
27060      ;
MPRINT(EM_DIAGRAM):   set EMWS4.Impt_VALIDATE ;
27061      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
27062     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27063     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
27064     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27065     +
27066     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
27067     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
27068     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
27069     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
27070     +
27071     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
27072     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
27073     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
27074     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
27075     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
27076     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
27077     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
27078     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
27079     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
27080     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
27081     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
27082     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
27083     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
27084     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
27085     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
27086     +
27087     +
27088     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
27089     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
27090     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
27091     +
27092     +
27093     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
27094     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
27095     +
27096     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
27097     +_ARBFMT_12 = PUT( IMP_DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_DELINQ , BEST12.);
27098     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27099     +IF _ARBFMT_12 IN ('0' ,'1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ,'1' ) THEN DO;
27100     +  IF  NOT MISSING(IMP_DEBTINC ) AND
27101     +        44.7336573513381 <= IMP_DEBTINC  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(IMP_DEBTINC ) AND 44.7336573513381 <= IMP_DEBTINC THEN DO;
27102     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
27103     +    _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
27104     +    P_BAD1  =     0.72972972972972;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.72972972972972;
27105     +    P_BAD0  =     0.27027027027027;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.27027027027027;
27106     +    Q_BAD1  =     0.72972972972972;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.72972972972972;
27107     +    Q_BAD0  =     0.27027027027027;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.27027027027027;
27108     +    V_BAD1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.71428571428571;
27109     +    V_BAD0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.28571428571428;
27110     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
27111     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
27112     +    END;
MPRINT(EM_DIAGRAM):   END;
27113     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27114     +    _ARBFMT_12 = PUT( IMP_DEROG , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_DEROG , BEST12.);
27115     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27116     +    IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
27117     +      _ARBFMT_12 = PUT( IMP_NINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_NINQ , BEST12.);
27118     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27119     +      IF _ARBFMT_12 IN ('1' ,'0' ,'2' ,'3' ,'4' ,'8' ,'7' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'0' ,'2' ,'3' ,'4' ,'8' ,'7' ,'11' ) THEN DO;
27120     +        IF  NOT MISSING(IMP_DEBTINC ) AND
27121     +          IMP_DEBTINC  <     12.5702078408748 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(IMP_DEBTINC ) AND IMP_DEBTINC < 12.5702078408748 THEN DO;
27122     +          _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
27123     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
27124     +          P_BAD1  =     0.43636363636363;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.43636363636363;
27125     +          P_BAD0  =     0.56363636363636;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.56363636363636;
27126     +          Q_BAD1  =     0.43636363636363;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.43636363636363;
27127     +          Q_BAD0  =     0.56363636363636;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.56363636363636;
27128     +          V_BAD1  =               0.1875;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1875;
27129     +          V_BAD0  =               0.8125;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.8125;
27130     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
27131     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
27132     +          END;
MPRINT(EM_DIAGRAM):   END;
27133     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27134     +          _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
27135     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
27136     +          P_BAD1  =     0.10176211453744;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.10176211453744;
27137     +          P_BAD0  =     0.89823788546255;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.89823788546255;
27138     +          Q_BAD1  =     0.10176211453744;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.10176211453744;
27139     +          Q_BAD0  =     0.89823788546255;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.89823788546255;
27140     +          V_BAD1  =      0.1155589123867;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1155589123867;
27141     +          V_BAD0  =     0.88444108761329;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.88444108761329;
27142     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
27143     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
27144     +          END;
MPRINT(EM_DIAGRAM):   END;
27145     +        END;
MPRINT(EM_DIAGRAM):   END;
27146     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27147     +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
27148     +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
27149     +        P_BAD1  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.52941176470588;
27150     +        P_BAD0  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.47058823529411;
27151     +        Q_BAD1  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.52941176470588;
27152     +        Q_BAD0  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.47058823529411;
27153     +        V_BAD1  =     0.24137931034482;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.24137931034482;
27154     +        V_BAD0  =     0.75862068965517;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.75862068965517;
27155     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
27156     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
27157     +        END;
MPRINT(EM_DIAGRAM):   END;
27158     +      END;
MPRINT(EM_DIAGRAM):   END;
27159     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27160     +      _NODE_  =                    9;
MPRINT(EM_DIAGRAM):   _NODE_ = 9;
27161     +      _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
27162     +      P_BAD1  =     0.37743190661478;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.37743190661478;
27163     +      P_BAD0  =     0.62256809338521;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.62256809338521;
27164     +      Q_BAD1  =     0.37743190661478;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.37743190661478;
27165     +      Q_BAD0  =     0.62256809338521;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.62256809338521;
27166     +      V_BAD1  =     0.31927710843373;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.31927710843373;
27167     +      V_BAD0  =     0.68072289156626;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.68072289156626;
27168     +      I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
27169     +      U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
27170     +      END;
MPRINT(EM_DIAGRAM):   END;
27171     +    END;
MPRINT(EM_DIAGRAM):   END;
27172     +  END;
MPRINT(EM_DIAGRAM):   END;
27173     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27174     +  _NODE_  =                    3;
MPRINT(EM_DIAGRAM):   _NODE_ = 3;
27175     +  _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
27176     +  P_BAD1  =     0.59191176470588;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.59191176470588;
27177     +  P_BAD0  =     0.40808823529411;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.40808823529411;
27178     +  Q_BAD1  =     0.59191176470588;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.59191176470588;
27179     +  Q_BAD0  =     0.40808823529411;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.40808823529411;
27180     +  V_BAD1  =     0.54143646408839;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.54143646408839;
27181     +  V_BAD0  =      0.4585635359116;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.4585635359116;
27182     +  I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
27183     +  U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
27184     +  END;
MPRINT(EM_DIAGRAM):   END;
27185     +
27186     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
27187     +IF  F_BAD  NE '1'
27188     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
27189     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
27190     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
27191     + END;
MPRINT(EM_DIAGRAM):   END;
27192     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27193     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
27194     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
27195     +       SELECT( F_BAD  );
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
27196     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
27197     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
27198     +       END;
MPRINT(EM_DIAGRAM):   END;
27199     + END;
MPRINT(EM_DIAGRAM):   END;
27200     +
27201     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
27202     +
27203     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
27204     +label D_BAD = 'Decision: BAD' ;
MPRINT(EM_DIAGRAM):   label D_BAD = 'Decision: BAD' ;
27205     +label EL_BAD = 'Expected Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label EL_BAD = 'Expected Loss: BAD' ;
27206     +label BL_BAD = 'Best Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label BL_BAD = 'Best Loss: BAD' ;
27207     +label CL_BAD = 'Computed Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label CL_BAD = 'Computed Loss: BAD' ;
27208     +
27209     +length D_BAD $ 9;
MPRINT(EM_DIAGRAM):   length D_BAD $ 9;
27210     +
27211     +D_BAD = ' ';
MPRINT(EM_DIAGRAM):   D_BAD = ' ';
27212     +EL_BAD = .;
MPRINT(EM_DIAGRAM):   EL_BAD = .;
27213     +BL_BAD = .;
MPRINT(EM_DIAGRAM):   BL_BAD = .;
27214     +CL_BAD = .;
MPRINT(EM_DIAGRAM):   CL_BAD = .;
27215     +
27216     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
27217     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
27218     +
27219     +D_BAD = '1' ;
MPRINT(EM_DIAGRAM):   D_BAD = '1' ;
27220     +EL_BAD = P_BAD1 * 0 + P_BAD0 * 1;
MPRINT(EM_DIAGRAM):   EL_BAD = P_BAD1 * 0 + P_BAD0 * 1;
27221     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
27222     +_sum = P_BAD1 * 5 + P_BAD0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_BAD1 * 5 + P_BAD0 * 0;
27223     +if _sum < EL_BAD + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_BAD + -2.27374E-12 then do;
27224     +   EL_BAD = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_BAD = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
27225     +   D_BAD = '0' ;
MPRINT(EM_DIAGRAM):   D_BAD = '0' ;
27226     +end;
MPRINT(EM_DIAGRAM):   end;
27227     +
27228     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
27229     +array TREEdema [2,2] _temporary_ (
27230     +/* row 1 */  0 5
27231     +/* row 2 */  1 0
27232     +);
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 0 5 1 0 );
27233     +
27234     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
27235     +drop _tarnum; select( F_BAD );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_BAD );
27236     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
27237     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
27238     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
27239     +end;
MPRINT(EM_DIAGRAM):   end;
27240     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
27241     +
27242     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
27243     +CL_BAD = TREEdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_BAD = TREEdema [_tarnum,_decnum];
27244     +
27245     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
27246     +array TREEdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 0 0);
27247     +BL_BAD = TREEdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_BAD = TREEdebe [_tarnum];
27248     +
27249     +
27250     +TREEdeex:;
MPRINT(EM_DIAGRAM):   TREEdeex:;
27251     +
27252     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
27253     +
27254     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27255     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
27256     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27257     +
27258     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
27259      run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
27260      quit;
27261      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
27262      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27263      *------------------------------------------------------------*;
27264      * Tree: Scoring TEST data;
27265      *------------------------------------------------------------*;
27266      data EMWS4.Tree_TEST
27267      / view=EMWS4.Tree_TEST
27268      ;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_TEST / view=EMWS4.Tree_TEST ;
27269      set EMWS4.Impt_TEST
27270      ;
MPRINT(EM_DIAGRAM):   set EMWS4.Impt_TEST ;
27271      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMFLOWSCORE.sas.
27272     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27273     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
27274     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27275     +
27276     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
27277     +LENGTH F_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_BAD $ 12;
27278     +LENGTH I_BAD  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_BAD $ 12;
27279     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
27280     +
27281     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
27282     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
27283     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
27284     +label P_BAD1 = 'Predicted: BAD=1' ;
MPRINT(EM_DIAGRAM):   label P_BAD1 = 'Predicted: BAD=1' ;
27285     +label P_BAD0 = 'Predicted: BAD=0' ;
MPRINT(EM_DIAGRAM):   label P_BAD0 = 'Predicted: BAD=0' ;
27286     +label Q_BAD1 = 'Unadjusted P: BAD=1' ;
MPRINT(EM_DIAGRAM):   label Q_BAD1 = 'Unadjusted P: BAD=1' ;
27287     +label Q_BAD0 = 'Unadjusted P: BAD=0' ;
MPRINT(EM_DIAGRAM):   label Q_BAD0 = 'Unadjusted P: BAD=0' ;
27288     +label V_BAD1 = 'Validated: BAD=1' ;
MPRINT(EM_DIAGRAM):   label V_BAD1 = 'Validated: BAD=1' ;
27289     +label V_BAD0 = 'Validated: BAD=0' ;
MPRINT(EM_DIAGRAM):   label V_BAD0 = 'Validated: BAD=0' ;
27290     +label R_BAD1 = 'Residual: BAD=1' ;
MPRINT(EM_DIAGRAM):   label R_BAD1 = 'Residual: BAD=1' ;
27291     +label R_BAD0 = 'Residual: BAD=0' ;
MPRINT(EM_DIAGRAM):   label R_BAD0 = 'Residual: BAD=0' ;
27292     +label F_BAD = 'From: BAD' ;
MPRINT(EM_DIAGRAM):   label F_BAD = 'From: BAD' ;
27293     +label I_BAD = 'Into: BAD' ;
MPRINT(EM_DIAGRAM):   label I_BAD = 'Into: BAD' ;
27294     +label U_BAD = 'Unnormalized Into: BAD' ;
MPRINT(EM_DIAGRAM):   label U_BAD = 'Unnormalized Into: BAD' ;
27295     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
27296     +
27297     +
27298     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
27299     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
27300     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
27301     +
27302     +
27303     +_ARBFMT_12 = PUT( BAD , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( BAD , BEST12.);
27304     + %DMNORMCP( _ARBFMT_12, F_BAD );
MPRINT(DMNORMCP):   F_BAD=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
27305     +
27306     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
27307     +_ARBFMT_12 = PUT( IMP_DELINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_DELINQ , BEST12.);
27308     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27309     +IF _ARBFMT_12 IN ('0' ,'1' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ,'1' ) THEN DO;
27310     +  IF  NOT MISSING(IMP_DEBTINC ) AND
27311     +        44.7336573513381 <= IMP_DEBTINC  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(IMP_DEBTINC ) AND 44.7336573513381 <= IMP_DEBTINC THEN DO;
27312     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
27313     +    _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
27314     +    P_BAD1  =     0.72972972972972;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.72972972972972;
27315     +    P_BAD0  =     0.27027027027027;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.27027027027027;
27316     +    Q_BAD1  =     0.72972972972972;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.72972972972972;
27317     +    Q_BAD0  =     0.27027027027027;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.27027027027027;
27318     +    V_BAD1  =     0.71428571428571;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.71428571428571;
27319     +    V_BAD0  =     0.28571428571428;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.28571428571428;
27320     +    I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
27321     +    U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
27322     +    END;
MPRINT(EM_DIAGRAM):   END;
27323     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27324     +    _ARBFMT_12 = PUT( IMP_DEROG , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_DEROG , BEST12.);
27325     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27326     +    IF _ARBFMT_12 IN ('0' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('0' ) THEN DO;
27327     +      _ARBFMT_12 = PUT( IMP_NINQ , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( IMP_NINQ , BEST12.);
27328     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27329     +      IF _ARBFMT_12 IN ('1' ,'0' ,'2' ,'3' ,'4' ,'8' ,'7' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('1' ,'0' ,'2' ,'3' ,'4' ,'8' ,'7' ,'11' ) THEN DO;
27330     +        IF  NOT MISSING(IMP_DEBTINC ) AND
27331     +          IMP_DEBTINC  <     12.5702078408748 THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(IMP_DEBTINC ) AND IMP_DEBTINC < 12.5702078408748 THEN DO;
27332     +          _NODE_  =                   22;
MPRINT(EM_DIAGRAM):   _NODE_ = 22;
27333     +          _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
27334     +          P_BAD1  =     0.43636363636363;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.43636363636363;
27335     +          P_BAD0  =     0.56363636363636;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.56363636363636;
27336     +          Q_BAD1  =     0.43636363636363;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.43636363636363;
27337     +          Q_BAD0  =     0.56363636363636;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.56363636363636;
27338     +          V_BAD1  =               0.1875;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1875;
27339     +          V_BAD0  =               0.8125;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.8125;
27340     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
27341     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
27342     +          END;
MPRINT(EM_DIAGRAM):   END;
27343     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27344     +          _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
27345     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
27346     +          P_BAD1  =     0.10176211453744;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.10176211453744;
27347     +          P_BAD0  =     0.89823788546255;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.89823788546255;
27348     +          Q_BAD1  =     0.10176211453744;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.10176211453744;
27349     +          Q_BAD0  =     0.89823788546255;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.89823788546255;
27350     +          V_BAD1  =      0.1155589123867;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.1155589123867;
27351     +          V_BAD0  =     0.88444108761329;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.88444108761329;
27352     +          I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
27353     +          U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
27354     +          END;
MPRINT(EM_DIAGRAM):   END;
27355     +        END;
MPRINT(EM_DIAGRAM):   END;
27356     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27357     +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
27358     +        _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
27359     +        P_BAD1  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.52941176470588;
27360     +        P_BAD0  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.47058823529411;
27361     +        Q_BAD1  =     0.52941176470588;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.52941176470588;
27362     +        Q_BAD0  =     0.47058823529411;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.47058823529411;
27363     +        V_BAD1  =     0.24137931034482;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.24137931034482;
27364     +        V_BAD0  =     0.75862068965517;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.75862068965517;
27365     +        I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
27366     +        U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
27367     +        END;
MPRINT(EM_DIAGRAM):   END;
27368     +      END;
MPRINT(EM_DIAGRAM):   END;
27369     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27370     +      _NODE_  =                    9;
MPRINT(EM_DIAGRAM):   _NODE_ = 9;
27371     +      _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
27372     +      P_BAD1  =     0.37743190661478;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.37743190661478;
27373     +      P_BAD0  =     0.62256809338521;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.62256809338521;
27374     +      Q_BAD1  =     0.37743190661478;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.37743190661478;
27375     +      Q_BAD0  =     0.62256809338521;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.62256809338521;
27376     +      V_BAD1  =     0.31927710843373;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.31927710843373;
27377     +      V_BAD0  =     0.68072289156626;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.68072289156626;
27378     +      I_BAD  = '0' ;
MPRINT(EM_DIAGRAM):   I_BAD = '0' ;
27379     +      U_BAD  =                    0;
MPRINT(EM_DIAGRAM):   U_BAD = 0;
27380     +      END;
MPRINT(EM_DIAGRAM):   END;
27381     +    END;
MPRINT(EM_DIAGRAM):   END;
27382     +  END;
MPRINT(EM_DIAGRAM):   END;
27383     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27384     +  _NODE_  =                    3;
MPRINT(EM_DIAGRAM):   _NODE_ = 3;
27385     +  _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
27386     +  P_BAD1  =     0.59191176470588;
MPRINT(EM_DIAGRAM):   P_BAD1 = 0.59191176470588;
27387     +  P_BAD0  =     0.40808823529411;
MPRINT(EM_DIAGRAM):   P_BAD0 = 0.40808823529411;
27388     +  Q_BAD1  =     0.59191176470588;
MPRINT(EM_DIAGRAM):   Q_BAD1 = 0.59191176470588;
27389     +  Q_BAD0  =     0.40808823529411;
MPRINT(EM_DIAGRAM):   Q_BAD0 = 0.40808823529411;
27390     +  V_BAD1  =     0.54143646408839;
MPRINT(EM_DIAGRAM):   V_BAD1 = 0.54143646408839;
27391     +  V_BAD0  =      0.4585635359116;
MPRINT(EM_DIAGRAM):   V_BAD0 = 0.4585635359116;
27392     +  I_BAD  = '1' ;
MPRINT(EM_DIAGRAM):   I_BAD = '1' ;
27393     +  U_BAD  =                    1;
MPRINT(EM_DIAGRAM):   U_BAD = 1;
27394     +  END;
MPRINT(EM_DIAGRAM):   END;
27395     +
27396     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
27397     +IF  F_BAD  NE '1'
27398     +AND F_BAD  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_BAD NE '1' AND F_BAD NE '0' THEN DO;
27399     +        R_BAD1  = .;
MPRINT(EM_DIAGRAM):   R_BAD1 = .;
27400     +        R_BAD0  = .;
MPRINT(EM_DIAGRAM):   R_BAD0 = .;
27401     + END;
MPRINT(EM_DIAGRAM):   END;
27402     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27403     +       R_BAD1  =  -P_BAD1 ;
MPRINT(EM_DIAGRAM):   R_BAD1 = -P_BAD1 ;
27404     +       R_BAD0  =  -P_BAD0 ;
MPRINT(EM_DIAGRAM):   R_BAD0 = -P_BAD0 ;
27405     +       SELECT( F_BAD  );
MPRINT(EM_DIAGRAM):   SELECT( F_BAD );
27406     +          WHEN( '1'  ) R_BAD1  = R_BAD1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_BAD1 = R_BAD1 +1;
27407     +          WHEN( '0'  ) R_BAD0  = R_BAD0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_BAD0 = R_BAD0 +1;
27408     +       END;
MPRINT(EM_DIAGRAM):   END;
27409     + END;
MPRINT(EM_DIAGRAM):   END;
27410     +
27411     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
27412     +
27413     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
27414     +label D_BAD = 'Decision: BAD' ;
MPRINT(EM_DIAGRAM):   label D_BAD = 'Decision: BAD' ;
27415     +label EL_BAD = 'Expected Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label EL_BAD = 'Expected Loss: BAD' ;
27416     +label BL_BAD = 'Best Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label BL_BAD = 'Best Loss: BAD' ;
27417     +label CL_BAD = 'Computed Loss: BAD' ;
MPRINT(EM_DIAGRAM):   label CL_BAD = 'Computed Loss: BAD' ;
27418     +
27419     +length D_BAD $ 9;
MPRINT(EM_DIAGRAM):   length D_BAD $ 9;
27420     +
27421     +D_BAD = ' ';
MPRINT(EM_DIAGRAM):   D_BAD = ' ';
27422     +EL_BAD = .;
MPRINT(EM_DIAGRAM):   EL_BAD = .;
27423     +BL_BAD = .;
MPRINT(EM_DIAGRAM):   BL_BAD = .;
27424     +CL_BAD = .;
MPRINT(EM_DIAGRAM):   CL_BAD = .;
27425     +
27426     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
27427     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
27428     +
27429     +D_BAD = '1' ;
MPRINT(EM_DIAGRAM):   D_BAD = '1' ;
27430     +EL_BAD = P_BAD1 * 0 + P_BAD0 * 1;
MPRINT(EM_DIAGRAM):   EL_BAD = P_BAD1 * 0 + P_BAD0 * 1;
27431     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
27432     +_sum = P_BAD1 * 5 + P_BAD0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_BAD1 * 5 + P_BAD0 * 0;
27433     +if _sum < EL_BAD + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_BAD + -2.27374E-12 then do;
27434     +   EL_BAD = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_BAD = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
27435     +   D_BAD = '0' ;
MPRINT(EM_DIAGRAM):   D_BAD = '0' ;
27436     +end;
MPRINT(EM_DIAGRAM):   end;
27437     +
27438     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
27439     +array TREEdema [2,2] _temporary_ (
27440     +/* row 1 */  0 5
27441     +/* row 2 */  1 0
27442     +);
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 0 5 1 0 );
27443     +
27444     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
27445     +drop _tarnum; select( F_BAD );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_BAD );
27446     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
27447     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
27448     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
27449     +end;
MPRINT(EM_DIAGRAM):   end;
27450     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
27451     +
27452     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
27453     +CL_BAD = TREEdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_BAD = TREEdema [_tarnum,_decnum];
27454     +
27455     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
27456     +array TREEdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 0 0);
27457     +BL_BAD = TREEdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_BAD = TREEdebe [_tarnum];
27458     +
27459     +
27460     +TREEdeex:;
MPRINT(EM_DIAGRAM):   TREEdeex:;
27461     +
27462     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
27463     +
27464     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27465     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
27466     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27467     +
27468     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
27469      run;
 
NOTE: DATA STEP view saved on file EMWS4.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_TEST.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
27470      quit;
27471      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
27473      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
27474      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
27475      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
27476      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
27477      * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
27478      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS4.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS4.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS4.Tree_TRAIN out=WORK.M0YEK2HT noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YEK2HT;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YEK2HT(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0YEK2HT;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0YEK2HT;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0CE_8PB NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M24XNKBM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   set WORK.M0CE_8PB;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS4.Impt_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS4.Impt_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("BAD") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "IMP_JOB" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "IMP_MORTDUE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "IMP_REASON" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "IMP_YOJ" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_BAD0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_BAD1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
27851      data EMWS4.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMINFO;
27852      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
27853      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
27854      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
27858      run;
27859      proc sort data = EMWS4.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS4.Tree_EMINFO NOTHREADS;
27860      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27861      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: The data set EMWS4.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27862      proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS4.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
27863      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27864      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS4.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27865      proc sort data = EMWS4.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS4.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
27866      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27867      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS4.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27868      data EMWS4.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_EMINFO;
27869      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
27870      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27871      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS4.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27872      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
27873      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
27874      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
27875      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS4.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS4.TREE_TEST.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:58" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                16 March 2021
Time:                00:10:58
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3WDKOLL "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3WDKOLL new;
MPRINT(EM_DIAGRAM):   run;
27899      data EMWS4.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMOUTFIT;
27900      set EMWS4.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMOUTFIT;
27901      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
27902      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
27903      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 31 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27904      proc sort data=EMWS4.Tree_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Tree_EMREPORTFIT nothreads;
27905      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
27906      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The data set EMWS4.TREE_EMREPORTFIT has 10 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27907      %let _EMwarndup = 0;
27908      %let _EMtargetdup =;
27909      %let _EMASEtargetdup =;
27910      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
27911      set EMWS4.Tree_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMOUTFIT;
27912      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
27913      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
27914      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
27915      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
27916      end;
MPRINT(EM_DIAGRAM):   end;
27917      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27918      %let EMEXCEPTIONSTRING=;
27919      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
27920      * REPORT: Tree;
MPRINT(EM_DIAGRAM):   * REPORT: Tree;
27921      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27922      %let EM_ACTION = REPORT;
27923      %let syscc = 0;
27924      %macro main;
27925
27926        %if %upcase(&EM_ACTION) = CREATE %then %do;
27927          filename temp catalog 'sashelp.emmodl.tree_create.source';
27928          %include temp;
27929          filename temp;
27930
27931          %em_tree_create;
27932        %end;
27933
27934         %else
27935         %if %upcase(&EM_ACTION) = TRAIN %then %do;
27936
27937             filename temp catalog 'sashelp.emmodl.tree_train.source';
27938             %include temp;
27939             filename temp;
27940             %em_tree_train;
27941         %end;
27942
27943        %else
27944        %if %upcase(&EM_ACTION) = SCORE %then %do;
27945          filename temp catalog 'sashelp.emmodl.tree_score.source';
27946          %include temp;
27947          filename temp;
27948
27949          %em_tree_score;
27950
27951        %end;
27952
27953        %else
27954        %if %upcase(&EM_ACTION) = REPORT %then %do;
27955
27956             filename temp catalog 'sashelp.emmodl.tree_report.source';
27957             %include temp;
27958             filename temp;
27959
27960             %em_tree_report;
27961         %end;
27962
27963        %else
27964        %if %upcase(&EM_ACTION) = OPENINT %then %do;
27965
27966             filename temp catalog 'sashelp.emmodl.tree_actions.source';
27967             %include temp;
27968             filename temp;
27969             %EM_TREE_OPENTREEVIEWER;
27970
27971         %end;
27972
27973        %else
27974        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
27975
27976             filename temp catalog 'sashelp.emmodl.tree_actions.source';
27977             %include temp;
27978             filename temp;
27979             %EM_TREE_CLOSETREEVIEWER;
27980
27981         %end;
27982
27983
27984         %doendm:
27985      %mend main;
27986
27987      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
27989     +%macro em_tree_makePlotDs( multipleTar= );
27991     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
27992     +  %EM_GETNAME(key=OUTNODES, type=DATA);
27993     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
27994     +  %EM_GETNAME(key=OUTRULES, type=DATA);
27996     +  /* determine if validation statistics will be displayed */
27997     +  %let validflag=N;
27998     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
27999     +    /* determine if validation data exists */
28000     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
28001     +      %let validflag=Y;
28002     +    %end;
28003     +  %end;
28005     +   /* retrieve name of decmeta even in presence of multiple targets */
28006     +   %let decmeta = ;
28007     +   %if &EM_DEC_DECMETA eq %then %do;
28008     +     data _Target;
28009     +       set &em_data_variableset;
28010     +       where ROLE='TARGET' and USE in('D', 'Y');
28011     +       keep NAME;
28012     +     run;
28013     +     proc sort data=_Target;
28014     +       by NAME;
28015     +     run;
28016     +     proc sort data=EM_TARGETDECINFO;
28017     +       by TARGET;
28018     +     run;
28019     +     data _Target;
28020     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
28021     +       by NAME;
28022     +       if _a then do;
28023     +         call symput('decmeta', trim(DECMETA));
28024     +       end;
28025     +     run;
28026     +     proc delete data=_Target;run;
28027     +   %end;
28028     +   %else %let decmeta = &EM_DEC_DECMETA;
28031     +  /* retrieve targetEvent from decmeta */
28032     +  %let targetEvent=;
28033     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
28034     +    %if %sysfunc(exist(&DECMETA)) %then %do;
28035     +      data _null_;
28036     +       set &DECMETA(where=(_TYPE_="TARGET"));
28037     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
28038     +      run;
28039     +    %end;
28040     +  %end;
28042     +  /* retrieve predicted var for targetEvent from decmeta */
28043     +  %let predTarget=;
28044     +  %let predLvl=;
28045     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
28046     +    %if %sysfunc(exist(&DECMETA)) %then %do;
28047     +      data _null_;
28048     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
28049     +       call symput('predTarget', strip(VARIABLE));
28050     +       call symput('predLvl', strip(LEVEL));
28051     +      run;
28052     +    %end;
28053     +  %end;
28054     +  %else %do;
28055     +    %if %sysfunc(exist(&DECMETA)) %then %do;
28056     +      data _null_;
28057     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
28058     +       call symput('predTarget', strip(VARIABLE));
28059     +      run;
28060     +    %end;
28061     +  %end;
28063     +  /* create BelowText value */
28064     +  data belowtext;
28065     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
28066     +    keep node belowtext;
28067     +  run;
28069     +  /* replace belowtext with variable label if it exists */
28070     +  data belowtext2;
28071     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
28072     +    keep node belowtextlbl;
28073     +  run;
28075     +  proc sort data=belowtext; by node; run;
28076     +  proc sort data=belowtext2; by node; run;
28078     +  data belowtext;
28079     +    merge belowtext belowtext2(in=_a);
28080     +    by node;
28081     +    if _a then belowtext=belowtextlbl;
28082     +    keep node belowtext;
28083     +  run;
28085     +  /* create AboveText value */
28086     +  data abovetext;
28087     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
28088     +  run;
28089     +  proc sort data=abovetext; by node numeric_value; run;
28091     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
28092     +  data abovetext;
28093     +    set abovetext(rename=(node=parent));
28094     +    by parent numeric_value;
28095     +    retain abovetext tempstring flag branch origval origchar ;
28096     +    length abovetext $256;
28097     +    length tempstring origchar $64;
28099     +    if STAT in ("INTERVAL", "ORDINAL") then do;
28100     +      if first.parent then do;
28101     +        if missing(character_value) then do;
28102     +          numeric_value = round(numeric_value, &sp_precision);
28103     +          abovetext = "< "||strip(NUMERIC_VALUE);
28104     +          branch = 1;
28105     +          origval = numeric_value;
28106     +          output;
28107     +        end;
28108     +        else do;
28109     +          abovetext = "< "||strip(CHARACTER_VALUE);
28110     +          branch = 1;
28111     +          origchar = character_value;
28112     +          output;
28113     +        end;
28115     +        if first.parent AND last.parent then do;
28116     +          if missing(character_value) then do;
28117     +            numeric_value = round(numeric_value, &sp_precision);
28118     +            branch = branch + 1;
28119     +            abovetext = ">= "||strip(NUMERIC_VALUE);
28120     +            output;
28121     +          end;
28122     +          else do;
28123     +            branch = branch + 1;
28124     +            abovetext = ">= "||strip(CHARACTER_VALUE);
28125     +            output;
28126     +          end;
28127     +        end;
28128     +      end;
28129     +      else if last.parent then do;
28130     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
28131     +          if missing(character_value) then do;
28132     +            numeric_value = round(numeric_value, &sp_precision);
28133     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
28134     +          end;
28135     +          else do;
28136     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
28137     +          end;
28138     +          branch = branch + 1;
28139     +          output;
28141     +          if missing(character_value) then do;
28142     +            numeric_value = round(numeric_value, &sp_precision);
28143     +            abovetext = ">= "||strip(NUMERIC_VALUE);
28144     +          end;
28145     +          else do;
28146     +            abovetext = ">= "||strip(CHARACTER_VALUE);
28147     +          end;
28148     +          branch = branch + 1;
28149     +          output;
28150     +        end;
28151     +        else do;
28152     +          if missing(character_value) then do;
28153     +            numeric_value = round(numeric_value, &sp_precision);
28154     +            abovetext = ">= "||strip(NUMERIC_VALUE);
28155     +          end;
28156     +          else do;
28157     +            abovetext = ">= "||strip(CHARACTER_VALUE);
28158     +          end;
28159     +          branch = branch + 1;
28160     +          output;
28161     +        end;
28162     +      end;
28163     +      else do;
28164     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
28165     +          if missing(character_value) then do;
28166     +            numeric_value = round(numeric_value,&sp_precision);
28167     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
28168     +            origval = numeric_value;
28169     +          end;
28170     +          else do;
28171     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
28172     +            origchar = character_value;
28173     +          end;
28174     +          branch = branch + 1;
28175     +          output;
28177     +        end;
28178     +        else do;
28179     +          if missing(character_value) then do;
28180     +            numeric_value = round(numeric_value, &sp_precision);
28181     +            abovetext = ">= "||strip(NUMERIC_VALUE);
28182     +            origval = numeric_value;
28183     +          end;
28184     +          else do;
28185     +            abovetext = ">= "||strip(CHARACTER_VALUE);
28186     +            origval = character_value;
28187     +          end;
28188     +          branch = branch + 1;
28189     +          output;
28190     +        end;
28191     +      end;
28192     +    end;
28193     +    else do;
28194     +       if first.numeric_value then do;
28195     +         flag = 0;
28196     +         abovetext = strip(CHARACTER_VALUE);
28197     +         branch = numeric_value;
28198     +         if first.numeric_value AND last.numeric_value then do;
28199     +           output;
28200     +         end;
28201     +       end;
28202     +       else if last.numeric_value then do;
28203     +         if flag=0 then do;
28204     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
28205     +           length = length(strip(tempstring));
28206     +           if length < 32 then do;
28207     +             abovetext = strip(tempstring);
28208     +           end;
28209     +           else do;
28210     +             abovetext = strip(abovetext)||", ...";
28211     +             flag = 1;
28212     +           end;
28213     +         end;
28214     +         branch = numeric_value;
28215     +         output;
28216     +       end;
28217     +       else do;
28218     +         if flag=0 then do;
28219     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
28220     +           length = length(strip(tempstring));
28221     +           if length < 32 then do;
28222     +             abovetext = strip(tempstring);
28223     +           end;
28224     +           else do;
28225     +             abovetext = strip(abovetext)||", ...";
28226     +             flag=1;
28227     +           end;
28228     +         end;
28229     +         branch = numeric_value;
28230     +       end;
28231     +    end;
28232     +    keep parent branch abovetext;
28233     +  run;
28235     +  /* Missing value to abovetext */
28236     +  data tempmissing;
28237     +    set &EM_USER_OUTRULES;
28238     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
28239     +    rename node=parent numeric_value=branch character_value=misschar;
28240     +  run;
28243     +  proc sort data=abovetext; by parent branch; run;
28244     +  proc sort data=tempmissing; by parent branch; run;
28245     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
28247     +  data tempoutnodes;
28248     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
28249     +    by parent branch;
28250     +    length traintotal validtotal 8;
28251     +    retain traintotal validtotal;
28253     +    if _a then do;
28254     +      if ^MISSING(abovetext) then do;
28255     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
28256     +      end;
28257     +      else do;
28258     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
28259     +      end;
28260     +    end;
28261     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
28263     +    if node=1 then do;
28264     +      traintotal = N;
28265     +      validtotal=VN;
28266     +    end;
28268     +    drop role rank stat misschar belowtext;
28269     +  run;
28270     +  proc sort data=tempoutnodes; by node; run;
28271     +  proc sort data=belowtext; by node; run;
28273     +  data tempoutnodes;
28274     +    merge tempoutnodes belowtext;
28275     +    by node;
28277     +  run;
28279     +  /* determine if adjusted counts exists; if so, use these vs true counts */
28280     +  %let adjusted = N;
28281     +  %let npriors = 0;
28282     +  data _null_ ;
28283     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
28284     +    if eof then do ;
28285     +      call symput("npriors" , strip(put(_N_,best.))) ;
28286     +    end;
28287     +  run;
28288     +  %if &npriors gt 0 %then %let adjusted=Y;
28291     +  /* create a table with targetUsed and targetLevel columns for each node */
28292     +  data temptarmeta;
28293     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
28294     +    %if &multipleTar eq N %then %do;
28295     +      AND USE in ('D', 'Y')
28296     +    %end;
28297     +    ));
28298     +    length TARGET $32;
28299     +    Target=name;
28300     +    keep target level;
28301     +  run;
28303     +  %if &multipleTar eq Y %then %do;
28304     +    data temptargetused;
28305     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
28306     +      keep node target;
28307     +    run;
28308     +    proc sort data=temptargetused; by target; run;
28309     +    proc sort data=temptarmeta; by target; run;
28310     +    data temptargetused;
28311     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
28312     +      by target;
28313     +      if _a and _b;
28314     +    run;
28315     +  %end;
28316     +  %else %do;
28317     +    data temptargetused;
28318     +      set &EM_USER_OUTSTATS;
28319     +      length target $32 tarlevel $10;
28320     +      target="%EM_TARGET";
28321     +      tarlevel="%EM_TARGET_LEVEL";
28322     +      keep node target tarlevel;
28323     +    run;
28324     +    proc sort data=temptargetused nodupkey; by node; run;
28325     +  %end;
28327     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
28328     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
28329     +  proc sort data=temptargetused; by node; run;
28332     +  /* create tables for all interval targets as well as all class targets */
28333     +  data tempinterval tempclass;
28334     +    merge tempoutstats temptargetused( rename=(target=targetused));
28335     +    by node;
28336     +    %if "&multipleTar" eq "Y" %then %do;
28337     +      if ((missing(Target)) OR (target=targetused ));
28338     +    %end;
28340     +    if tarlevel="INTERVAL" then output tempinterval;
28341     +    else output tempclass;
28342     +  run;
28344     +  /* initialize intTarget and classTarget flags */
28345     +  %let em_intNobs =0;
28346     +  %let em_classNobs = 0;
28347     +  %let em_intTarget= N;
28348     +  %let em_classTarget= N;
28350     +  proc sql;
28351     +    reset noprint;
28352     +    select count(*) into :em_intNobs from tempinterval;
28353     +  quit;
28354     +  proc sql;
28355     +    reset noprint;
28356     +    select count(*) into :em_classNobs from tempclass;
28357     +  quit;
28359     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
28360     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
28362     +  /* retrieve all information for interval targets */
28363     +  %if &em_intTarget eq Y %then %do;
28365     +    /* determine if leaf variable exists */
28366     +    %let dsid=%sysfunc(open(tempinterval,i));
28367     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
28368     +    %let rc=%sysfunc(close(&dsid));
28370     +    proc transpose data=tempinterval
28371     +      %if &leafexists %then %do;
28372     +        (drop=leaf)
28373     +      %end;
28374     +      %if &validexist %then %do;
28375     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
28376     +      %end;
28377     +      %else %do;
28378     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
28379     +      %end;
28380     +      by node;
28381     +      id statname;
28382     +    run;
28383     +    data tempinterval;
28384     +      set tempinterval;
28385     +      if missing(N) then delete;
28386     +    run;
28387     +  %end;
28389     +  /* retrieve all information for class targets */
28390     +  %if &em_classTarget eq Y %then %do;
28391     +    proc sort data=tempclass; by node category; run;
28392     +    %if &validflag eq N %then %do;
28393     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
28394     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
28395     +    %end;
28396     +    %else %do;
28397     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
28398     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
28399     +    %end;
28400     +      set tempclass;
28402     +      %if &validflag eq N %then %do;
28403     +        %if "&adjusted" eq "N" %then %do;
28404     +          if statname="N" then output tempn;
28405     +        %end;
28406     +        %else %do;
28407     +          if statname="NPRIORS" then output tempn;
28408     +        %end;
28409     +        else if statname="PREDICTION" then output temppredict;
28410     +        else if statname="PROBABILITY" then output tempprob;
28411     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
28412     +        else if statname="ALTERNATIVE LOSS" then output temploss;
28413     +      %end;
28414     +      %else %do;
28415     +        %if "&adjusted" eq "N" %then %do;
28416     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
28417     +        %end;
28418     +        %else %do;
28419     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
28420     +        %end;
28421     +        else if statname="PREDICTION" then output temppredict;
28422     +        else if statname="PROBABILITY" then output tempprob;
28423     +        else if statname="VALID: PROBABILITY" then output tempvprob;
28424     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
28425     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
28426     +      %end;
28427     +    run;
28430     +    /* determine if profit/loss exists in tempprofit */
28431     +    %let em_profitflag=0;
28432     +    %let em_lossflag=0;
28433     +    proc sql;
28434     +      reset noprint;
28435     +      select count(*) into :em_profitflag from tempprofit;
28436     +    quit;
28437     +    proc sql;
28438     +      reset noprint;
28439     +      select count(*) into :em_lossflag from temploss;
28440     +    quit;
28442     +    %if &validFlag eq Y %then %do;
28443     +      proc transpose data=tempn
28444     +        %if "&adjusted" eq "N" %then %do;
28445     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
28446     +        %end;
28447     +        %else %do;
28448     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
28449     +        %end;
28450     +        by node;
28451     +        id statname;
28452     +      run;
28453     +      %if &em_profitflag ne 0 %then %do;
28454     +        proc transpose data=tempprofit out=tempprofit;
28455     +          by node category;
28456     +          id statname ;
28457     +        run;
28458     +      %end;
28459     +      %if &em_lossflag ne 0 %then %do;
28460     +        proc transpose data=temploss out=temploss;
28461     +          by node category;
28462     +          id statname ;
28463     +        run;
28464     +      %end;
28465     +      data tempprob;
28466     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
28467     +        by node
28468     +        %if &multipleTar eq Y %then %do;
28469     +          target
28470     +        %end;
28471     +        category;
28472     +      run;
28473     +    %end;
28475     +    /* store percentcorrect value */
28476     +    data temppredict;
28477     +      merge tempprob temppredict(in=_a);
28478     +      by node category;
28479     +      if _a then do;
28480     +        percentCorrect = statvalue;
28481     +        %if &validFlag eq Y %then %do;
28482     +          vpercentCorrect= vstatvalue;
28483     +        %end;
28484     +      end;
28485     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
28486     +      %if &validFlag eq Y %then %do;
28487     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
28488     +      %end;
28489     +      ;
28490     +      if missing(percentCorrect) then delete;
28491     +      drop target;
28492     +    run;
28494     +    /* build profittext */
28495     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
28496     +      data tempprofittext(keep= node profittext profitloss);
28497     +        length profittext $800 profitloss 8.;
28498     +        retain profittext profitloss;
28500     +        merge tempprob
28501     +        %if &em_profitflag ne 0 %then %do;
28502     +          tempprofit
28503     +        %end;
28504     +        %else %if &em_lossflag ne 0 %then %do;
28505     +          temploss
28506     +        %end;
28507     +        ;
28508     +        by node category;
28510     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
28511     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
28512     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
28513     +          %let profittype = ALL;
28514     +        %end;
28516     +        /* create the profitloss variable for nodecolor if selected */
28517     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
28519     +        %if "&profittype" eq "ALL" %then %do;
28520     +          if strip(CATEGORY)="&targetEvent" then do;
28521     +            profitloss=statvalue;
28522     +          end;
28523     +          if first.node then do;
28524     +            %if &validFlag eq N %then %do;
28525     +             %if &em_profitflag ne 0 %then %do;
28526     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28527     +             %end;
28528     +             %if &em_lossflag ne 0 %then %do;
28529     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28530     +             %end;
28531     +            %end;
28532     +            %else %do;
28533     +             %if &em_profitflag ne 0 %then %do;
28534     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
28534    !+14.&EM_PROPERTY_SPLITPRECISION);
28535     +             %end;
28536     +             %if &em_lossflag ne 0 %then %do;
28537     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
28538     +             %end;
28539     +            %end;
28540     +          end;
28541     +          else if last.node then do;
28542     +            %if &validFlag eq N %then %do;
28543     +             %if &em_profitflag ne 0 %then %do;
28544     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28545     +             %end;
28546     +             %if &em_lossflag ne 0 %then %do;
28547     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28548     +             %end;
28549     +             /*if CATEGORY="&targetEvent" then do;
28550     +               profitloss=statvalue;
28551     +             end;*/
28552     +            %end;
28553     +            %else %do;
28554     +             %if &em_profitflag ne 0 %then %do;
28555     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
28555    !+14.&EM_PROPERTY_SPLITPRECISION);
28556     +                if CATEGORY="&targetEvent" then do;
28557     +                 profitloss=ALTERNATIVE_PROFIT;
28558     +                end;
28559     +             %end;
28560     +             %if &em_lossflag ne 0 %then %do;
28561     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
28561    !+14.&EM_PROPERTY_SPLITPRECISION);
28562     +                if CATEGORY="&targetEvent" then do;
28563     +                  profitloss=ALTERNATIVE_LOSS;
28564     +                end;
28565     +             %end;
28566     +            %end;
28567     +            output;
28568     +          end;
28569     +          else do;
28570     +            %if &validFlag eq N %then %do;
28571     +             %if &em_profitflag ne 0 %then %do;
28572     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28573     +             %end;
28574     +             %if &em_lossflag ne 0 %then %do;
28575     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28576     +             %end;
28577     +            %end;
28578     +            %else %do;
28579     +             %if &em_profitflag ne 0 %then %do;
28580     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
28580    !+14.&EM_PROPERTY_SPLITPRECISION);
28581     +             %end;
28582     +             %if &em_lossflag ne 0 %then %do;
28583     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
28583    !+14.&EM_PROPERTY_SPLITPRECISION);
28584     +             %end;
28585     +            %end;
28586     +          end;
28587     +        %end;
28588     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
28589     +          if strip(CATEGORY) = "&targetevent" then do;
28590     +            %if &validFlag eq N %then %do;
28591     +             %if &em_profitflag ne 0 %then %do;
28592     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28593     +             %end;
28594     +             %if &em_lossflag ne 0 %then %do;
28595     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
28596     +             %end;
28597     +             profitloss=statvalue;
28598     +            %end;
28599     +            %else %do;
28600     +             %if &em_profitflag ne 0 %then %do;
28601     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
28601    !+14.&EM_PROPERTY_SPLITPRECISION);
28602     +                profitloss=ALTERNATIVE_PROFIT;
28603     +             %end;
28604     +             %if &em_lossflag ne 0 %then %do;
28605     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
28606     +                profitloss=ALTERNATIVE_LOSS;
28607     +             %end;
28608     +            %end;
28609     +            output;
28610     +          end;
28611     +        %end;
28612     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
28613     +          if strip(CATEGORY) = "&targetevent" then do;
28614     +            %if &validFlag eq N %then %do;
28615     +             profitloss=statvalue;
28616     +            %end;
28617     +            %else %do;
28618     +             %if &em_profitflag ne 0 %then %do;
28619     +                profitloss=ALTERNATIVE_PROFIT;
28620     +             %end;
28621     +             %if &em_lossflag ne 0 %then %do;
28622     +                profitloss=ALTERNATIVE_LOSS;
28623     +             %end;
28624     +            %end;
28625     +            output;
28626     +          end;
28627     +        %end;
28628     +      run;
28629     +    %end;
28631     +    data tempprob(keep= node probtext);
28632     +      length probtext $800;
28633     +      retain probtext;
28634     +      set tempprob ;
28635     +      by node;
28637     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
28638     +      %let probtype = &EM_PROPERTY_TARGET;
28639     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
28640     +        %let probtype = ALL;
28641     +      %end;
28643     +      %if "&probtype" eq "ALL" %then %do;
28644     +        if first.node then do;
28645     +          %if &validFlag eq N %then %do;
28646     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
28647     +          %end;
28648     +          %else %do;
28649     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
28650     +          %end;
28651     +        end;
28652     +        else if last.node then do;
28653     +          %if &validFlag eq N %then %do;
28654     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
28655     +          %end;
28656     +          %else %do;
28657     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
28658     +          %end;
28659     +          output;
28660     +        end;
28661     +        else do;
28662     +          %if &validFlag eq N %then %do;
28663     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
28664     +          %end;
28665     +          %else %do;
28666     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
28667     +          %end;
28668     +        end;
28669     +      %end;
28670     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
28671     +        if strip(CATEGORY) = "&targetevent" then do;
28672     +          %if &validFlag eq N %then %do;
28673     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
28674     +          %end;
28675     +          %else %do;
28676     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
28677     +          %end;
28678     +          output;
28679     +        end;
28680     +      %end;
28681     +      %else %if "&probtype" eq "NONE" %then %do;
28682     +        if last.node then do;
28683     +          output;
28684     +        end;
28685     +      %end;
28686     +    run;
28687     +  %end;
28689     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
28691     +  %let oldexists=0;
28692     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
28693     +     data old_tree_plot;
28694     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
28695     +        rename nodecolor=oldnodecolor;
28696     +     run;
28698     +     proc sort data=old_tree_plot;
28699     +        by node;
28700     +     run;
28702     +     %let oldexists=1;
28703     +  %end;
28705     +  data &EM_USER_TREE_PLOT;
28706     +    length textall $800;
28707     +    merge tempoutnodes temptargetused
28709     +    %if &em_intTarget eq Y %then %do;
28710     +      tempinterval
28711     +    %end;
28713     +    %if &em_classTarget eq Y %then %do;
28715     +      %if &validFlag eq N %then %do;
28716     +        tempn(rename=(statvalue=N))
28717     +      %end;
28718     +      %else %do;
28719     +        tempn
28720     +      %end;
28722     +      temppredict tempprob
28724     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
28725     +        tempprofittext
28726     +      %end;
28727     +    %end;
28728     +    ;
28729     +    by node;
28731     +    /* build nodetext based on user selection */
28732     +    textall="";
28734     +    %if &em_intTarget eq Y %then %do;
28735     +    if tarlevel="INTERVAL" then do;
28736     +      /* Nodeid */
28737     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
28738     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
28739     +      %end;
28741     +      /* Target identifier if multiple targets are used */
28742     +      %if "&multipleTar" eq "Y" %then %do;
28743     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
28744     +      %end;
28746     +      %if &validFlag eq Y %then %do;
28747     +         /* Column labels displayed in validflag eq Y only */
28748     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
28749     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
28749    !+ noquote ))";
28750     +         %end;
28752     +         /* Average values */
28753     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
28754     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
28755     +         %end;
28757     +         /* RASE */
28758     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
28759     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
28760     +         %end;
28762     +         /* Count */
28763     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
28764     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
28765     +         %end;
28766     +      %end;
28767     +      %else %do;
28768     +         /* Average values */
28769     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
28770     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
28771     +         %end;
28773     +         /* RASE */
28774     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
28775     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
28776     +         %end;
28778     +         /* Count */
28779     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
28780     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
28781     +         %end;
28782     +      %end;
28784     +      /* nodecolor */
28785     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
28786     +        nodecolor=PREDICTION;
28787     +      %end;
28788     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
28789     +        nodecolor=RASE;
28790     +      %end;
28791     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
28792     +        nodecolor=1;
28793     +      %end;
28795     +    end;
28796     +    %end;
28797     +    %if &em_classTarget eq Y %then %do;
28798     +    if tarlevel^="INTERVAL" then  do;
28800     +      /* Nodeid */
28801     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
28802     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
28803     +      %end;
28804     +      /* Target identifier if multiple targets are used */
28805     +      %if "&multipleTar" eq "Y" %then %do;
28806     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
28807     +      %end;
28809     +      /* Predicted values */
28810     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
28811     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
28812     +      %end;
28814     +      /* Column labels displayed in validflag eq Y only */
28815     +      %if "&ValidFlag" eq "Y" %then %do;
28816     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
28817     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
28817    !+ noquote ))";
28818     +        %end;
28819     +      %end;
28821     +      /* Target Values */
28822     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
28823     +        textall=strip(textall)||"0A"x||strip(probtext);
28824     +      %end;
28826     +      /* include profit or loss for all target levels */
28827     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
28828     +        textall=strip(textall)||"0A"x||strip(profittext);
28829     +      %end;
28831     +      %if &validFlag eq N %then %do;
28832     +        /* Percent Correct */
28833     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
28834     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
28835     +        %end;
28837     +         /* Count */
28838     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
28839     +          %if "&adjusted" eq "N" %then %do;
28840     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
28841     +          %end;
28842     +          %else %do;
28843     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
28844     +          %end;
28845     +         %end;
28846     +      %end;
28847     +      %else %do;
28848     +        /* Percent Correct */
28849     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
28850     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
28851     +        %end;
28853     +         /* Count */
28854     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
28855     +          %if "&adjusted" eq "N" %then %do;
28856     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
28857     +          %end;
28858     +          %else %do;
28859     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
28860     +          %end;
28861     +         %end;
28862     +      %end;
28864     +      /* nodecolor */
28865     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
28866     +       %if &multipleTar ne Y %then %do;
28867     +        nodecolor=&predTarget;
28868     +       %end;
28869     +       %else %do;
28870     +         nodecolor=percentcorrect;
28871     +       %end;
28872     +      %end;
28873     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
28874     +        nodecolor=percentcorrect;
28875     +      %end;
28876     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
28877     +        nodecolor=1;
28878     +      %end;
28879     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
28880     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
28881     +          nodecolor=percentcorrect;
28882     +        %end;
28883     +        %else %do;
28884     +          nodecolor=profitloss;
28885     +        %end;
28886     +      %end;
28888     +    end;
28889     +    %end;
28890     +    %if &em_intTarget eq Y %then %do;
28891     +     drop  PREDICTION  TARGET TARLEVEL
28892     +     %if &ValidFlag eq Y %then %do;
28893     +         VPREDICTION
28894     +     %end;
28895     +     ;
28896     +    %end;
28897     +    %if &em_classTarget eq Y %then %do;
28898     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
28899     +     %if &ValidFlag eq Y %then %do;
28900     +         VSTATVALUE
28901     +     %end;
28902     +     ;
28903     +    %end;
28905     +  run;
28907     +  /* add leaf index information to plotds - based on primary target only*/
28908     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
28909     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
28910     +      set &EM_USER_OUTSTATS;
28911     +      if ((statname="PROBABILITY"
28912     +      %if &validexist %then %do;
28913     +       or statname="VALID: PROBABILITY"
28914     +      %end;
28915     +      ) AND (CATEGORY="&TARGETEVENT")
28916     +      %if "&multipleTar" eq "Y" %then %do;
28917     +        AND (Target="%EM_TARGET")
28918     +      %end;
28919     +      );
28920     +    run;
28922     +    %if &validexist %then %do;
28923     +      proc sort data=tempprob; by node; run;
28924     +      %let vpredTarget = V%substr(&predTarget, 2);
28925     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
28926     +         by node;
28927     +         id statname;
28928     +      run;
28929     +    %end;
28930     +  %end;
28931     +  %else %do;
28932     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
28933     +      set &EM_USER_OUTSTATS;
28934     +      if ((statname="PREDICTION"
28935     +      %if &validexist %then %do;
28936     +       or statname="VALID: PREDICTION"
28937     +      %end;
28938     +      )
28939     +      %if "&multipleTar" eq "Y" %then %do;
28940     +        AND (Target="%EM_TARGET")
28941     +      %end;
28942     +      );
28943     +    run;
28944     +    %if &validexist %then %do;
28945     +      proc sort data=tempprob; by node; run;
28946     +      %let vpredTarget = V%substr(&predTarget, 2);
28947     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
28948     +         by node;
28949     +         id statname;
28950     +      run;
28951     +    %end;
28952     +  %end;
28954     +  proc sort data=tempprob; by node; run;
28955     +  data tempoutnodes;
28956     +    merge tempoutnodes tempprob;
28957     +    by node;
28958     +  run;
28960     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
28961     +  data tempnodes;
28962     +    retain traintotal validtotal;
28963     +    set tempnodes(where=(leaf ne . ));
28964     +    tprob=round(&predTarget, .01);
28965     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
28966     +      percevent_train=round(tprob*100, .01);
28967     +    %end;
28968     +    %else %do;
28969     +      percevent_train=tprob;
28970     +    %end;
28972     +    perc_train=round((n/traintotal)*100, 0.01);
28973     +    /* leafwidth already has a *10 multiplier */
28974     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
28976     +    %if &validexist %then %do;
28977     +      %let vpredTarget = V%substr(&predTarget,2);
28978     +      vprob=round(&vpredTarget, .01);
28979     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
28980     +        percevent_valid=round(vprob*100, .01);
28981     +      %end;
28982     +      %else %do;
28983     +        percevent_valid=vprob;
28984     +      %end;
28985     +      perc_valid=round((vn/validtotal)*100, .01);
28986     +    %end;
28988     +    index=_N_;
28989     +    keep node index tprob perc_train percevent_train
28990     +    %if &validexist %then %do;
28991     +        vprob percevent_valid perc_valid
28992     +    %end;
28993     +    ;
28994     +  run;
28995     +  proc sort data=tempnodes; by node; run;
28996     +  data &EM_USER_TREE_PLOT;
28997     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
28998     +    by node;
28999     +    if missing(node) then delete;
29000     +    %if &oldexists %then %do;
29001     +      if missing(nodecolor) then nodecolor=oldnodecolor;
29002     +      drop oldnodecolor;
29003     +    %end;
29004     +    abovetext = compbl(abovetext);
29006     +    /* add variable labels */
29007     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
29008     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
29009     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
29010     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
29011     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
29012     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
29014     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29015     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
29016     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
29017     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
29018     +          %end;
29019     +          %else %do;
29020     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
29021     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
29022     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
29023     +          %end;
29024     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
29026     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
29027     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
29028     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29029     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
29030     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
29031     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
29032     +          %end;
29033     +          %else %do;
29034     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
29035     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
29036     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
29037     +          %end;
29038     +    ;
29039     +  run;
29041     +  /* delete temporary tables */
29042     +  proc datasets lib=work nolist;
29043     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
29044     +  run;
29046     +%mend em_tree_makePlotDs;
29050     +%macro em_tree_report;
29052     +   /* report properties */
29053     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
29054     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
29055     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
29056     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
29057     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
29058     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
29059     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
29060     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
29061     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
29062     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
29063     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
29064     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
29065     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
29067     +   %let validexist=0;
29068     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
29069     +     %let validexist=1;
29070     +   %end;
29072     +   /* determine if multiple targets will be processed */
29073     +   %let em_tree_multipleTargets=N;
29074     +   %let em_tree_numTarget=1;
29075     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
29076     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
29077     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
29078     +         %let em_tree_multipleTargets=N;
29079     +      %end;
29080     +      %else %do;
29081     +        data _null_;
29082     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
29083     +          if eof then
29084     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
29085     +        run;
29087     +        %if &em_tree_numTarget gt 1 %then %do;
29088     +           %let em_tree_multipleTargets=Y;
29089     +        %end;
29090     +     %end;
29091     +   %end;
29093     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
29095     +   /* variable importance */
29096     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
29097     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
29099     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
29100     +     /* and the columns may not be generated                                                                                 */
29101     +     %let em_tree_cvexists=;
29102     +     %let em_tree_surrexists=.;
29103     +     data _null_;
29104     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
29105     +       if eof then do ;
29106     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
29107     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
29108     +       end;
The SAS System
 
29109     +     run;
29111     +     data &EM_USER_OUTIMPORT;
29112     +         set &EM_USER_OUTIMPORT;
29113     +         /* format columns based on Precison value specified */
29114     +         format importance 15.&EM_PROPERTY_PRECISION
29115     +              %if &validexist %then %do;
29116     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
29117     +              %end;
29118     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
29119     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
29120     +              %end;
29121     +         ;
29122     +     run;
29124     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
29125     +     proc print data=&EM_USER_OUTIMPORT
29126     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
29127     +          (where=((nrules>0) OR (nsurrogates>0)))
29128     +        %end;
29129     +        %else %do;
29130     +           (where=(nrules>0))
29131     +        %end;
29132     +        label noobs
29133     +        ;
29134     +     run;
29135     +     title10;
29137     +   %end;
29139     +   /* Sequence */
29140     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
29141     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
29142     +   data _null_ ;
29143     +      set &EM_USER_outseq (obs=2) end=eof ;
29144     +      if eof then do ;
29145     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
29146     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
29147     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
29148     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
29149     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
29150     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
29151     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
29152     +      end;
29153     +    run;
29155     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
29156     +      data &EM_USER_OUTSEQ;
29157     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
29158     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
29159     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29160     +           _XMISC_=_VMISC_
29161     +        %end;
29162     +        %if "&em_tree_aprof" ne "."  %then %do;
29163     +           _XAPROF_=_VAPROF_
29164     +           _XPROF_ = _VPROF_
29165     +        %end;
29166     +        %if "&em_tree_aloss" ne "."  %then %do;
29167     +           _XALOSS_=_VALOSS_
29168     +        %end;
29169     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
29170     +           _XPASE_ = _VPASE_
29171     +           _XPMISC_ = _VPMISC_
29172     +        %end;
29174     +        ));
29175     +     %end;
29176     +     %else %do;
29177     +        set &EM_USER_OUTSEQ;
29178     +     %end;
29180     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
29181     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29182     +            _MISC_   15.&EM_PROPERTY_PRECISION
29183     +         %end;
29184     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
29185     +            _PASE_  15.&EM_PROPERTY_PRECISION
29186     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
29187     +         %end;
29188     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
29189     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
29190     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29191     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
29192     +            %end;
29193     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
29194     +              _VPASE_  15.&EM_PROPERTY_PRECISION
29195     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
29196     +            %end;
29197     +         %end;
29198     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
29199     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
29200     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29201     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
29202     +            %end;
29203     +         %end;
29204     +         %if "&em_tree_seq" ne "." %then %do;
29205     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
29206     +         %end;
29207     +         %if "&em_tree_vseq" ne "." %then %do;
29208     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
29209     +         %end;
29210     +         %if "&em_tree_aprof" ne "." %then %do;
29211     +           _APROF_ 15.&EM_PROPERTY_PRECISION
29212     +           _PROF_ 15.&EM_PROPERTY_PRECISION
29213     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
29214     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
29215     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
29216     +           %end;
29217     +         %end;
29218     +         %else %if "&em_tree_aloss" ne "." %then %do;
29219     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
29220     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
29221     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
29222     +           %end;
29223     +         %end;
29224     +      ;
29225     +    run;
29226     +   %end;
29228     +   /* Observation Based Importance */
29229     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
29231     +      /* need to check for 0 obs */
29232     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
29233     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
29234     +      %let rc=%sysfunc(close(&dsid));
29236     +      %if &onobs %then %do;
29237     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
29238     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
29240     +         data &EM_USER_OUTOBSIMP;
29241     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
29242     +           if _a;
29243     +           by _INPUT1_;
29244     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
29245     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
29246     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
29247     +                   %end;
29248     +                   ;
29249     +         run;
29250     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
29251     +      %end;
29252     +   %end;
29254     +  %end;
29256     +  /* create dataset to support tree diagram and icicle plot */
29257     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
29258     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
29260     +  /* display tree diagram */
29261     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
29262     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
29264     +  /* display icicle diagram */
29265     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
29266     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
29268     +  /* Leaf Statistics Plot */
29269     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
29271     +  /* print leaf information to output window */
29272     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
29274     +     proc sort data=&EM_USER_TREE_PLOT out=t;
29275     +       by descending N;
29276     +     run;
29278     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
29279     +     %local vn;
29280     +     data _null_;
29281     +       set t (obs=2) end=eof;
29282     +       if eof then do;
29283     +         call symput("vn", strip(put(vn, best.)));
29284     +       end;
29285     +     run;
29287     +     data t;
29288     +       set t;
29289     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
29290     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
29291     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
29292     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
29293     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
29294     +       %end;
29295     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
29296     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
29297     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
29298     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
29299     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
29300     +          %end;
29301     +       %end;
29302     +       ;
29303     +     run;
29305     +     /* determine if rase is found in t */
29306     +    %let dsid=%sysfunc(open(t,i));
29307     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
29308     +    %let rc=%sysfunc(close(&dsid));
29310     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
29311     +     proc print data=t noobs label;
29312     +       where tprob ne .;
29313     +       var node depth N tprob
29314     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
29315     +         %if "&vn" ne "." %then %do;
29316     +           VN
29317     +         %end;
29318     +         vprob
29319     +       %end;
29320     +       %if &raseexists %then %do;
29321     +            RASE
29322     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
29323     +              VRASE
29324     +            %end;
29325     +       %end;
29326     +       ;
29327     +     run;
29328     +     title10;
29329     +  %end;
29331     +  /* create plots that are done during training of node */
29332     +  /* display iterative plot, including reference line */
29333     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
29334     +   /* %if &nleaves eq  %then %do; */
29335     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
29336     +      data _null_;
29337     +        set &EM_USER_OUTTOPOLOGY end=eof;
29338     +        if eof then do;
29339     +          call symput('nleaves', LEAF);
29340     +        end;
29341     +      run;
29342     +   /* %end; */
29344     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
29345     +    /*%EM_REPORT(view=1, Y=_ASE_); */
29346     +  %end;
29348     +  /* display leaf statistics */
29349     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
29351     +  /* stats by node if multiple targets = Y */
29352     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
29353     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
29354     +    data &EM_USER_OUTSTATS;
29355     +      set &EM_USER_OUTSTATS;
29357     +     * if STATNAME="TARGET" then delete;
29358     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
29359     +      drop leaf;
29360     +    run;
29361     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
29363     +  %end;
29364     +  %else %do;
29365     +    /* add outstats and outdescribe to spk but not results */
29366     +    %EM_REPORT(viewtype=, key=OUTSTATS);
29367     +  %end;
29369     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS4.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS4.Tree_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   set EMWS4.Tree_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_OUTIMPORT.
NOTE: The data set EMWS4.TREE_OUTIMPORT has 8 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Variable Importance";
MPRINT(EM_TREE_REPORT):   proc print data=EMWS4.Tree_OUTIMPORT (where=(nrules>0)) label noobs ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 4 observations read from the data set EMWS4.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_ ;
MPRINT(EM_TREE_REPORT):   set EMWS4.Tree_OUTSEQ (obs=2) end=eof ;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vase" , strip(put(_VASE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_seq" , strip(put(_SEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vseq" , strip(put(_VSEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_prior" , strip(put(_PASE_, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS4.Tree_OUTSEQ;
MPRINT(EM_TREE_REPORT):   set EMWS4.Tree_OUTSEQ;
MPRINT(EM_TREE_REPORT):   format _ASE_ _ASSESS_ _MAX_ _SSE_ _RASE_ 15.4
MPRINT(EM_TREE_REPORT):   _MISC_ 15.4 _VASE_ _VASSESS_ _VMAX_ _VSSE_ _VRASE_ 15.4
MPRINT(EM_TREE_REPORT):   _VMISC_ 15.4 _ALOSS_ 15.4 _VALOSS_ 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 16 observations read from the data set EMWS4.TREE_OUTSEQ.
NOTE: The data set EMWS4.TREE_OUTSEQ has 16 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="PREDICTED" AND LEVEL="1"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predTarget', strip(VARIABLE));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predLvl', strip(LEVEL));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   merge belowtext belowtext2(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then belowtext=belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set EMWS4.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 26 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set abovetext(rename=(node=parent));
MPRINT(EM_TREE_MAKEPLOTDS):   by parent numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   retain abovetext tempstring flag branch origval origchar ;
MPRINT(EM_TREE_MAKEPLOTDS):   length abovetext $256;
MPRINT(EM_TREE_MAKEPLOTDS):   length tempstring origchar $64;
MPRINT(EM_TREE_MAKEPLOTDS):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent AND last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 0;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag=1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   keep parent branch abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 10 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTRULES;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_TREE_MAKEPLOTDS):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 338 observations read from the data set EMWS4.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 5 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 10 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 5 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS4.Tree_OUTNODES out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   length traintotal validtotal 8;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ^MISSING(abovetext) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= strip(abovetext)||" Or Missing";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = " Missing Values Only";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if MISSING(abovetext) then abovetext="Non-Missing Values";
MPRINT(EM_TREE_MAKEPLOTDS):   if node=1 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   traintotal = N;
MPRINT(EM_TREE_MAKEPLOTDS):   validtotal=VN;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop role rank stat misschar belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 5 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 5 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 5 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_ ;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTSTATS(where=(STATNAME="NPRIORS")) end=eof ;
MPRINT(EM_TREE_MAKEPLOTDS):   if eof then do ;
MPRINT(EM_TREE_MAKEPLOTDS):   call symput("npriors" , strip(put(_N_,best.))) ;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS4.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptarmeta;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_VariableSet(where=(ROLE='TARGET' AND LEVEL^='ORDINAL' AND USE in ('D', 'Y') ));
MPRINT(EM_TREE_MAKEPLOTDS):   length TARGET $32;
MPRINT(EM_TREE_MAKEPLOTDS):   Target=name;
MPRINT(EM_TREE_MAKEPLOTDS):   keep target level;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   length target $32 tarlevel $10;
MPRINT(EM_TREE_MAKEPLOTDS):   target=
MPRINT(EM_TREE_MAKEPLOTDS):  "BAD";
MPRINT(EM_TREE_MAKEPLOTDS):   tarlevel=
MPRINT(EM_TREE_MAKEPLOTDS):  "BINARY";
MPRINT(EM_TREE_MAKEPLOTDS):   keep node target tarlevel;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 121 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 121 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused nodupkey;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 121 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 110 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS4.Tree_OUTSTATS out=tempoutstats;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 121 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 121 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempinterval tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutstats temptargetused( rename=(target=targetused));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel="INTERVAL" then output tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   else output tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 121 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 11 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 121 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_intNobs from tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_classNobs from tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 121 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 121 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET ) tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY )
temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
MPRINT(EM_TREE_MAKEPLOTDS):   set tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="N") OR (statname="VALID: N")) then output tempn;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PREDICTION" then output temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PROBABILITY" then output tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="VALID: PROBABILITY" then output tempvprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 121 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 22 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 11 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 22 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 22 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 44 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_profitflag from tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_lossflag from temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempn out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 11 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=temploss out=temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 44 observations read from the data set WORK.TEMPLOSS.
NOTE: The data set WORK.TEMPLOSS has 22 observations and 6 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob tempvprob(rename=(statvalue=vstatvalue));
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: There were 22 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 22 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temppredict(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   percentCorrect = statvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   vpercentCorrect= vstatvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   label percentCorrect= "Percent Correct" vpercentCorrect= "Valid Percent Correct" ;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(percentCorrect) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   drop target;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: There were 11 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 11 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprofittext(keep= node profittext profitloss);
MPRINT(EM_TREE_MAKEPLOTDS):   length profittext $800 profitloss 8.;
MPRINT(EM_TREE_MAKEPLOTDS):   retain profittext profitloss;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temploss ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   label profitloss= "Profit/Loss";
MPRINT(EM_TREE_MAKEPLOTDS):   if strip(CATEGORY) = "1" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   profitloss=ALTERNATIVE_LOSS;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Variable profittext is uninitialized.
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: There were 22 observations read from the data set WORK.TEMPLOSS.
NOTE: The data set WORK.TEMPPROFITTEXT has 11 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep= node probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   length probtext $800;
MPRINT(EM_TREE_MAKEPLOTDS):   retain probtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS4.Tree_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   length textall $800;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes temptargetused tempn temppredict tempprob tempprofittext ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   textall="";
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel^="INTERVAL" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Node Id: "||"09"x||strip(Node);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Statistic "||"09"x||"Train" ||"09"x|| "Validation";
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||strip(probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||" Count: "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
MPRINT(EM_TREE_MAKEPLOTDS):   nodecolor=percentcorrect;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop CATEGORY PROBTEXT TARGET TARLEVEL STATVALUE VSTATVALUE ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1213:196
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 11 observations read from the data set WORK.TEMPN.
NOTE: There were 11 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 11 observations read from the data set WORK.TEMPPROB.
NOTE: There were 11 observations read from the data set WORK.TEMPPROFITTEXT.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 11 observations and 32 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep=node statname statvalue rename=(statvalue=P_BAD1));
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS4.Tree_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="PROBABILITY" or statname="VALID: PROBABILITY" ) AND (CATEGORY="1") );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 121 observations read from the data set EMWS4.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 22 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 22 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=P_BAD1 VALID__PROBABILITY=V_BAD1));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   id statname;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 22 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 11 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 11 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 11 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 11 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by descending P_BAD1;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 26 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempnodes(where=(leaf ne . ));
MPRINT(EM_TREE_MAKEPLOTDS):   tprob=round(P_BAD1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_train=round(tprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_train=round((n/traintotal)*100, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   vprob=round(V_BAD1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_valid=round(vprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_valid=round((vn/validtotal)*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   index=_N_;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node index tprob perc_train percevent_train vprob percevent_valid perc_valid ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 6 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 6 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 6 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS4.Tree_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   merge EMWS4.Tree_TREE_PLOT tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(node) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = compbl(abovetext);
MPRINT(EM_TREE_MAKEPLOTDS):   label textall = "All Text" parent = "Parent Id" node = "Node Id" abovetext = "Above Text" traintotal = "Train Total" nodecolor =
MPRINT(EM_TREE_MAKEPLOTDS):   "Node Color" tprob = "Training Percent 1" percevent_train = "Event Percentage" perc_train = "Percent Cases" index = "Index" validtotal = "Valid Total" VN =
MPRINT(EM_TREE_MAKEPLOTDS):   "Valid: Number of Observations" vprob = "Validation Percent 1" perc_valid = "Valid: Percent Cases" percevent_valid = "Valid: Event Percentage" ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: There were 6 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS4.TREE_TREE_PLOT has 11 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEPLOTDS):   delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
MPRINT(EM_TREE_REPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DTree";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TREE";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "ABOVETEXT";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "BELOWTEXT";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "LINKWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1481647203435;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Icicle";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ICICLE";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.50680430862438;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "AREABAR";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "VARWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "PERCEVENT_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "PERC_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.24244377773368;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   proc sort data=EMWS4.Tree_TREE_PLOT out=t;
MPRINT(EM_TREE_REPORT):   by descending N;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 11 observations read from the data set EMWS4.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 11 observations and 39 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set t (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput("vn", strip(put(vn, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data t;
MPRINT(EM_TREE_REPORT):   set t;
MPRINT(EM_TREE_REPORT):   label N= "Training Observations" DEPTH=
MPRINT(EM_TREE_REPORT):   "Depth" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 11 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 11 observations and 39 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Tree Leaf Report";
MPRINT(EM_TREE_REPORT):   proc print data=t noobs label;
MPRINT(EM_TREE_REPORT):   where tprob ne .;
MPRINT(EM_TREE_REPORT):   var node depth N tprob ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 6 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS4.Tree_OUTTOPOLOGY end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput('nleaves', LEAF);
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      305:141
NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSEQ";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "ITERATIONPLOT";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBTREE";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "6";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.08064734054759;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "RESPONSEBAR";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "INDEX ne .";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LEAFSTATS";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "INDEX";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "tprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "vprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSTATS";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.83571688264408;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29370
29371      *------------------------------------------------------------*;
29372      * End REPORT: Tree;
29373      *------------------------------------------------------------*;
 
29374      /* Reset EM Options */
29375      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
29376      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
29377      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
29378      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
29379      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
29380      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
29381      proc sort data=EMWS4.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Impt_CMeta_TRAIN out=WORK.SUBSETINMETA;
29382      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
29383      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.IMPT_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 10 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
29384      proc sort data=EMWS4.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS4.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
29385      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
29386      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
29387      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
29388      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
29389      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
29390      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 10 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 10 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 10 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
29391      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
29392      set EMWS4.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_CMeta_TRAIN;
29393      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
29394      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
29395      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
29396      set EMWS4.Tree_TRAIN(keep=
29397      BL_BAD
29398      CL_BAD
29399      D_BAD
29400      EL_BAD
29401      F_BAD
29402      I_BAD
29403      P_BAD0
29404      P_BAD1
29405      Q_BAD0
29406      Q_BAD1
29407      R_BAD0
29408      R_BAD1
29409      U_BAD
29410      V_BAD0
29411      V_BAD1
29412      _WARN_
29413      BAD
29414      );
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_TRAIN(keep= BL_BAD CL_BAD D_BAD EL_BAD F_BAD I_BAD P_BAD0 P_BAD1 Q_BAD0 Q_BAD1 R_BAD0 R_BAD1 U_BAD V_BAD0 V_BAD1 _WARN_ BAD );
29415      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2979 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Tree_0MEP7Z2 nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_BAD*F_BAD / out = WORK.Tree_116_TME nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_0MEP7Z2;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_0MEP7Z2(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree_0MEP7Z2;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree_0MEP7Z2;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_116_TME;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_116_TME(rename=(F_BAD=FROM D_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "TRAIN" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMCLASSIFICATION WORK.Tree_116_TME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD D_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_BAD" > " " AND UPCASE(NAME) = UPCASE("D_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 EL_BAD CL_BAD BL_BAD _tmpfreqvar_ D_BAD );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 D_BAD NTARGET _tmpfreqvar_ EL_BAD CL_BAD BL_BAD WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 D_BAD ;
MPRINT(EM_ASSESS):   VAR NTARGET EL_BAD CL_BAD BL_BAD ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANELTARGET _MEANCLTARGET _MEANBLTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEL_TARGET MINEL_TARGET MAXEL_TARGET TOTALEL_TARGET CUMULATIVEEL CUMULATIVETOTALEL MNCL_TARGET MINCL_TARGET MAXCL_TARGET TOTALCL_TARGET CUMULATIVECL CUMULATIVETOTALCL BASECL
BASECUMTOTALCL BASECUMULATIVECL BASETOTALCL BESTTOTALBL BESTCUMULATIVEBL BESTCUMTOTALBL BESTBL ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP
SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_ELMEAN SCR_ELMIN SCR_ELMAX SCR_CLMEAN SCR_CLMIN SCR_CLMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMLOSS1 - CUMLOSS20 0 CUMBLOSS1 - CUMBLOSS20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 -
FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 - EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1993957704 _NEVENTS 594 _NNONEVENTS 2385 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN ELTARGET1 - ELTARGET20 0 MINELTARGET1 - MINELTARGET20 0 MAXELTARGET1 - MAXELTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY ELTARGET (20) ELTARGET1 - ELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINELTARGET (20) MINELTARGET1 - MINELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXELTARGET (20) MAXELTARGET1 - MAXELTARGET20;
MPRINT(EM_ASSESS):   DROP ELTARGET1 - ELTARGET20 _MEANELTARGET MINELTARGET1 - MINELTARGET20 MAXELTARGET1 - MAXELTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CLTARGET1 - CLTARGET20 0 MINCLTARGET1 - MINCLTARGET20 0 MAXCLTARGET1 - MAXCLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CLTARGET (20) CLTARGET1 - CLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCLTARGET (20) MINCLTARGET1 - MINCLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCLTARGET (20) MAXCLTARGET1 - MAXCLTARGET20;
MPRINT(EM_ASSESS):   DROP CLTARGET1 - CLTARGET20 _MEANCLTARGET MINCLTARGET1 - MINCLTARGET20 MAXCLTARGET1 - MAXCLTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BLTARGET1 - BLTARGET20 0 MINBLTARGET1 - MINBLTARGET20 0 MAXBLTARGET1 - MAXBLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BLTARGET (20) BLTARGET1 - BLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBLTARGET (20) MINBLTARGET1 - MINBLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBLTARGET (20) MAXBLTARGET1 - MAXBLTARGET20;
MPRINT(EM_ASSESS):   DROP BLTARGET1 - BLTARGET20 _MEANBLTARGET MINBLTARGET1 - MINBLTARGET20 MAXBLTARGET1 - MAXBLTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_ELMEAN1- SCR_ELMEAN1000 0 SCR_ELMIN1 - SCR_ELMIN1000 1 SCR_ELMAX1 - SCR_ELMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMEANS (1000) SCR_ELMEAN1 - SCR_ELMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMINS (1000) SCR_ELMIN1 - SCR_ELMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMAXS (1000) SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_ELMEAN1 - SCR_ELMEAN1000 SCR_ELMIN1 - SCR_ELMIN1000 SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_CLMEAN1- SCR_CLMEAN1000 0 SCR_CLMIN1 - SCR_CLMIN1000 1 SCR_CLMAX1 - SCR_CLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMEANS (1000) SCR_CLMEAN1 - SCR_CLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMINS (1000) SCR_CLMIN1 - SCR_CLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMAXS (1000) SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_CLMEAN1 - SCR_CLMEAN1000 SCR_CLMIN1 - SCR_CLMIN1000 SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_BLMEAN1- SCR_BLMEAN1000 0 SCR_BLMIN1 - SCR_BLMIN1000 1 SCR_BLMAX1 - SCR_BLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMEANS (1000) SCR_BLMEAN1 - SCR_BLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMINS (1000) SCR_BLMIN1 - SCR_BLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMAXS (1000) SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_BLMEAN1 - SCR_BLMEAN1000 SCR_BLMIN1 - SCR_BLMIN1000 SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2979));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   ELTARGET (DECILE) = SUM ( ELTARGET (DECILE) , _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINELTARGET (DECILE) = MIN (MINELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXELTARGET (DECILE) = MAX (MAXELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CLTARGET (DECILE) = SUM ( CLTARGET (DECILE) , _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCLTARGET (DECILE) = MIN (MINCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCLTARGET (DECILE) = MAX (MAXCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BLTARGET (DECILE) = SUM ( BLTARGET (DECILE) , _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBLTARGET (DECILE) = MIN (MINBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBLTARGET (DECILE) = MAX (MAXBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_BAD = TRANSLATE (D_BAD, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_BAD = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_BAD = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_ELMEANS ( SLOT ) = MEAN (SCR_ELMEANS (SLOT), _MEANELTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_ELMINS ( SLOT ) = MIN (SCR_ELMINS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_ELMAXS ( SLOT ) = MAX (SCR_ELMAXS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_CLMEANS ( SLOT ) = MEAN (SCR_CLMEANS (SLOT), _MEANCLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CLMINS ( SLOT ) = MIN (SCR_CLMINS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_CLMAXS ( SLOT ) = MAX (SCR_CLMAXS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMEANS ( SLOT ) = MEAN (SCR_BLMEANS (SLOT), _MEANBLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BLMINS ( SLOT ) = MIN (SCR_BLMINS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMAXS ( SLOT ) = MAX (SCR_BLMAXS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.1017621145 OVLMAX 0.7297297297 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEL = SUM (OF ELTARGET1 - ELTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEL ;
MPRINT(EM_ASSESS):   SUMCL = SUM (OF CLTARGET1 - CLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCL ;
MPRINT(EM_ASSESS):   SUMBL = SUM (OF BLTARGET1 - BLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBL ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2979 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (2979/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2979)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 2979/20) ) / ( AVGNUMRESP / (2979/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2979 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 2979/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 2979/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEL_TARGET = ELTARGET (GROUP);
MPRINT(EM_ASSESS):   EL_TARGET = TOTALEL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEL + ELTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEL = CUMULATIVETOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEL_TARGET = MINELTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEL_TARGET = MAXELTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEL_TARGET = EL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEL_TARGET + MAXEL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEL >= C_MAXEL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEL = MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEL = MIN (MAXEL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEL < 0 THEN BESTEL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEL + BESTTOTALEL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEL - C_MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEL = BESTCUMTOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEL = SUMEL / 2979;
MPRINT(EM_ASSESS):   BASECUMULATIVEEL + BASEEL;
MPRINT(EM_ASSESS):   BASETOTALEL = SUMEL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEL + BASETOTALEL;
MPRINT(EM_ASSESS):   TOTALCL_TARGET = CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CL_TARGET = TOTALCL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCL + CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECL = CUMULATIVETOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCL_TARGET = MINCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCL_TARGET = MAXCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCL_TARGET = CL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCL_TARGET + MAXCL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCL >= C_MAXCL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCL = MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCL = MIN (MAXCL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCL < 0 THEN BESTCL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCL + BESTTOTALCL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCL - C_MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECL = BESTCUMTOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECL = SUMCL / 2979;
MPRINT(EM_ASSESS):   BASECUMULATIVECL + BASECL;
MPRINT(EM_ASSESS):   BASETOTALCL = SUMCL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCL + BASETOTALCL;
MPRINT(EM_ASSESS):   TOTALBL_TARGET = BLTARGET (GROUP);
MPRINT(EM_ASSESS):   BL_TARGET = TOTALBL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBL_TARGET = MINBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBL_TARGET = MAXBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBL_TARGET = BL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBL_TARGET + MAXBL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBL >= C_MAXBL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBL = MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBL = MIN (MAXBL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBL < 0 THEN BESTBL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBL + BESTTOTALBL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBL - C_MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBL = BESTCUMTOTALBL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBL = SUMBL / 2979;
MPRINT(EM_ASSESS):   BASECUMULATIVEBL + BASEBL;
MPRINT(EM_ASSESS):   BASETOTALBL = SUMBL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBL + BASETOTALBL;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN96 - SCR_ELMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN96 - SCR_ELMIN100);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX96 - SCR_ELMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN96 - SCR_CLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN96 - SCR_CLMIN100);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX96 - SCR_CLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN96 - SCR_BLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN96 - SCR_BLMIN100);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX96 - SCR_BLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN91 - SCR_ELMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN91 - SCR_ELMIN95);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX91 - SCR_ELMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN91 - SCR_CLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN91 - SCR_CLMIN95);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX91 - SCR_CLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN91 - SCR_BLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN91 - SCR_BLMIN95);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX91 - SCR_BLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN86 - SCR_ELMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN86 - SCR_ELMIN90);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX86 - SCR_ELMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN86 - SCR_CLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN86 - SCR_CLMIN90);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX86 - SCR_CLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN86 - SCR_BLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN86 - SCR_BLMIN90);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX86 - SCR_BLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN81 - SCR_ELMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN81 - SCR_ELMIN85);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX81 - SCR_ELMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN81 - SCR_CLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN81 - SCR_CLMIN85);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX81 - SCR_CLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN81 - SCR_BLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN81 - SCR_BLMIN85);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX81 - SCR_BLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN76 - SCR_ELMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN76 - SCR_ELMIN80);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX76 - SCR_ELMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN76 - SCR_CLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN76 - SCR_CLMIN80);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX76 - SCR_CLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN76 - SCR_BLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN76 - SCR_BLMIN80);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX76 - SCR_BLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN71 - SCR_ELMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN71 - SCR_ELMIN75);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX71 - SCR_ELMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN71 - SCR_CLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN71 - SCR_CLMIN75);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX71 - SCR_CLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN71 - SCR_BLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN71 - SCR_BLMIN75);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX71 - SCR_BLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN66 - SCR_ELMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN66 - SCR_ELMIN70);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX66 - SCR_ELMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN66 - SCR_CLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN66 - SCR_CLMIN70);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX66 - SCR_CLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN66 - SCR_BLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN66 - SCR_BLMIN70);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX66 - SCR_BLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN61 - SCR_ELMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN61 - SCR_ELMIN65);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX61 - SCR_ELMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN61 - SCR_CLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN61 - SCR_CLMIN65);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX61 - SCR_CLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN61 - SCR_BLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN61 - SCR_BLMIN65);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX61 - SCR_BLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN56 - SCR_ELMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN56 - SCR_ELMIN60);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX56 - SCR_ELMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN56 - SCR_CLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN56 - SCR_CLMIN60);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX56 - SCR_CLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN56 - SCR_BLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN56 - SCR_BLMIN60);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX56 - SCR_BLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN51 - SCR_ELMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN51 - SCR_ELMIN55);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX51 - SCR_ELMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN51 - SCR_CLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN51 - SCR_CLMIN55);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX51 - SCR_CLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN51 - SCR_BLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN51 - SCR_BLMIN55);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX51 - SCR_BLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN46 - SCR_ELMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN46 - SCR_ELMIN50);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX46 - SCR_ELMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN46 - SCR_CLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN46 - SCR_CLMIN50);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX46 - SCR_CLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN46 - SCR_BLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN46 - SCR_BLMIN50);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX46 - SCR_BLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN41 - SCR_ELMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN41 - SCR_ELMIN45);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX41 - SCR_ELMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN41 - SCR_CLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN41 - SCR_CLMIN45);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX41 - SCR_CLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN41 - SCR_BLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN41 - SCR_BLMIN45);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX41 - SCR_BLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN36 - SCR_ELMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN36 - SCR_ELMIN40);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX36 - SCR_ELMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN36 - SCR_CLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN36 - SCR_CLMIN40);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX36 - SCR_CLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN36 - SCR_BLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN36 - SCR_BLMIN40);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX36 - SCR_BLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN31 - SCR_ELMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN31 - SCR_ELMIN35);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX31 - SCR_ELMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN31 - SCR_CLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN31 - SCR_CLMIN35);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX31 - SCR_CLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN31 - SCR_BLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN31 - SCR_BLMIN35);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX31 - SCR_BLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN26 - SCR_ELMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN26 - SCR_ELMIN30);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX26 - SCR_ELMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN26 - SCR_CLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN26 - SCR_CLMIN30);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX26 - SCR_CLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN26 - SCR_BLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN26 - SCR_BLMIN30);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX26 - SCR_BLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN21 - SCR_ELMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN21 - SCR_ELMIN25);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX21 - SCR_ELMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN21 - SCR_CLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN21 - SCR_CLMIN25);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX21 - SCR_CLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN21 - SCR_BLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN21 - SCR_BLMIN25);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX21 - SCR_BLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN16 - SCR_ELMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN16 - SCR_ELMIN20);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX16 - SCR_ELMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN16 - SCR_CLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN16 - SCR_CLMIN20);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX16 - SCR_CLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN16 - SCR_BLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN16 - SCR_BLMIN20);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX16 - SCR_BLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN11 - SCR_ELMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN11 - SCR_ELMIN15);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX11 - SCR_ELMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN11 - SCR_CLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN11 - SCR_CLMIN15);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX11 - SCR_CLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN11 - SCR_BLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN11 - SCR_BLMIN15);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX11 - SCR_BLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN6 - SCR_ELMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN6 - SCR_ELMIN10);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX6 - SCR_ELMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN6 - SCR_CLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN6 - SCR_CLMIN10);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX6 - SCR_CLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN6 - SCR_BLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN6 - SCR_BLMIN10);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX6 - SCR_BLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN1 - SCR_ELMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN1 - SCR_ELMIN5);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX1 - SCR_ELMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN1 - SCR_CLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN1 - SCR_CLMIN5);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX1 - SCR_CLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN1 - SCR_BLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN1 - SCR_BLMIN5);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX1 - SCR_BLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2979;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS SCR_ELMEAN = _MEANEL_ SCR_ELMAX = _MAXEL_ SCR_ELMIN = _MINEL_ SCR_CLMEAN = _MEANCL_ SCR_CLMAX = _MAXCL_ SCR_CLMIN = _MINCL_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" _MEANCL_ = "Mean Computed Loss" _MAXCL_ = "Max Computed Loss" _MINCL_ = "Min Computed Loss" _MAXEL_ = "Max Expected Loss" _MINEL_ = "Min Expected Loss" _MEANEL_ = "Mean Expected Loss" DECISION1= "Report: Number of Decisions = 1"
DECISION2= "Report: Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC BESTBL = BESTLOSS BESTCUMTOTALBL = BESTCUMULATIVETOTALLOSS BESTCUMULATIVEBL = BESTCUMULATIVELOSS BESTTOTALBL = BESTTOTALLOSS MAXEL_TARGET =
_MAXEL_ MINEL_TARGET = _MINEL_ MNEL_TARGET = _MEANEL_ CUMULATIVEEL = CUMULATIVEEXPECTEDLOSS CUMULATIVETOTALEL= CUMULATIVETOTALEXPECTEDLOSS TOTALEL_TARGET = TOTALEXPECTEDLOSS BASECL = BASELOSS BASETOTALCL = BASETOTALLOSS MAXCL_TARGET = _MAXCL_ MINCL_TARGET
= _MINCL_ MNCL_TARGET = _MEANCL_ BASECUMTOTALCL = BASECUMULATIVETOTALLOSS BASECUMULATIVECL = BASECUMULATIVELOSS TOTALCL_TARGET = TOTALLOSS CUMULATIVECL = CUMULATIVELOSS CUMULATIVETOTALCL= CUMULATIVETOTALLOSS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCL_ = "Mean Computed Loss" _MINCL_ = "Min Computed Loss" _MAXCL_ = "Max Computed Loss" BASELOSS = "Baseline Loss" TOTALLOSS = "Total Computed Loss" CUMULATIVELOSS = "Cumulative Computed Loss" CUMULATIVETOTALLOSS =
"Cumulative Total Computed Loss" BASETOTALLOSS = "Baseline Total Loss" BASECUMULATIVETOTALLOSS = "Baseline Cumulative Total Loss" BASECUMULATIVELOSS = "Baseline Cumulative Loss" BASELOSS = "Baseline Loss" BESTLOSS = "Best Loss" BESTTOTALLOSS = "Best Total
Loss" BESTCUMULATIVETOTALLOSS = "Best Cumulative Total Loss" BESTCUMULATIVELOSS = "Best Cumulative Loss" _MEANEL_ = "Mean Expected Loss" _MINEL_ = "Min Expected Loss" _MAXEL_ = "Max Expected Loss" CUMULATIVETOTALEXPECTEDLOSS = "Cumulative Expected Total
Loss" CUMULATIVEEXPECTEDLOSS = "Cumulative Expected Loss" TOTALEXPECTEDLOSS = "Total Expected Loss" _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline
Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT =
"Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of
Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
33724      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
33725      set EMWS4.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_CMeta_TRAIN;
33726      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
33727      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS4.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
33728      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
33729      set EMWS4.Tree_VALIDATE(keep=
33730      BL_BAD
33731      CL_BAD
33732      D_BAD
33733      EL_BAD
33734      F_BAD
33735      I_BAD
33736      P_BAD0
33737      P_BAD1
33738      Q_BAD0
33739      Q_BAD1
33740      R_BAD0
33741      R_BAD1
33742      U_BAD
33743      V_BAD0
33744      V_BAD1
33745      _WARN_
33746      BAD
33747      );
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_VALIDATE(keep= BL_BAD CL_BAD D_BAD EL_BAD F_BAD I_BAD P_BAD0 P_BAD1 Q_BAD0 Q_BAD1 R_BAD0 R_BAD1 U_BAD V_BAD0 V_BAD1 _WARN_ BAD );
33748      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
NOTE: View EMWS4.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1788 observations read from the data set EMWS4.IMPT_VALIDATE.
NOTE: There were 1788 observations read from the data set EMWS4.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1788 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_BAD*F_BAD / out = WORK.Tree_26QRKE8 nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_BAD*F_BAD / out = WORK.Tree_2UBPFK7 nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_26QRKE8;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_26QRKE8(rename=(F_BAD=FROM I_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMCLASSIFICATION WORK.Tree_26QRKE8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree_26QRKE8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree_2UBPFK7;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree_2UBPFK7(rename=(F_BAD=FROM D_BAD=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "VALIDATE" TARGET "BAD";
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMCLASSIFICATION WORK.Tree_2UBPFK7;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS4.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_BAD_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_BAD D_BAD ;
 
MPRINT(EM_ASSESS):   VAR P_BAD1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_BAD") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_BAD" > " " AND UPCASE(NAME) = UPCASE("D_BAD") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_BAD1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_BAD P_BAD1 EL_BAD CL_BAD BL_BAD _tmpfreqvar_ D_BAD );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_BAD ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_BAD1 D_BAD NTARGET _tmpfreqvar_ EL_BAD CL_BAD BL_BAD WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_BAD1 D_BAD ;
MPRINT(EM_ASSESS):   VAR NTARGET EL_BAD CL_BAD BL_BAD ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANELTARGET _MEANCLTARGET _MEANBLTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEL_TARGET MINEL_TARGET MAXEL_TARGET TOTALEL_TARGET CUMULATIVEEL CUMULATIVETOTALEL MNCL_TARGET MINCL_TARGET MAXCL_TARGET TOTALCL_TARGET CUMULATIVECL CUMULATIVETOTALCL BASECL
BASECUMTOTALCL BASECUMULATIVECL BASETOTALCL BESTTOTALBL BESTCUMULATIVEBL BESTCUMTOTALBL BESTBL ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP
SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_ELMEAN SCR_ELMIN SCR_ELMAX SCR_CLMEAN SCR_CLMIN SCR_CLMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMLOSS1 - CUMLOSS20 0 CUMBLOSS1 - CUMBLOSS20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 -
FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 - EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.1996644295 _NEVENTS 357 _NNONEVENTS 1431 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN ELTARGET1 - ELTARGET20 0 MINELTARGET1 - MINELTARGET20 0 MAXELTARGET1 - MAXELTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY ELTARGET (20) ELTARGET1 - ELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINELTARGET (20) MINELTARGET1 - MINELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXELTARGET (20) MAXELTARGET1 - MAXELTARGET20;
MPRINT(EM_ASSESS):   DROP ELTARGET1 - ELTARGET20 _MEANELTARGET MINELTARGET1 - MINELTARGET20 MAXELTARGET1 - MAXELTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CLTARGET1 - CLTARGET20 0 MINCLTARGET1 - MINCLTARGET20 0 MAXCLTARGET1 - MAXCLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CLTARGET (20) CLTARGET1 - CLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCLTARGET (20) MINCLTARGET1 - MINCLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCLTARGET (20) MAXCLTARGET1 - MAXCLTARGET20;
MPRINT(EM_ASSESS):   DROP CLTARGET1 - CLTARGET20 _MEANCLTARGET MINCLTARGET1 - MINCLTARGET20 MAXCLTARGET1 - MAXCLTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BLTARGET1 - BLTARGET20 0 MINBLTARGET1 - MINBLTARGET20 0 MAXBLTARGET1 - MAXBLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BLTARGET (20) BLTARGET1 - BLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBLTARGET (20) MINBLTARGET1 - MINBLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBLTARGET (20) MAXBLTARGET1 - MAXBLTARGET20;
MPRINT(EM_ASSESS):   DROP BLTARGET1 - BLTARGET20 _MEANBLTARGET MINBLTARGET1 - MINBLTARGET20 MAXBLTARGET1 - MAXBLTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_ELMEAN1- SCR_ELMEAN1000 0 SCR_ELMIN1 - SCR_ELMIN1000 1 SCR_ELMAX1 - SCR_ELMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMEANS (1000) SCR_ELMEAN1 - SCR_ELMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMINS (1000) SCR_ELMIN1 - SCR_ELMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMAXS (1000) SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_ELMEAN1 - SCR_ELMEAN1000 SCR_ELMIN1 - SCR_ELMIN1000 SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_CLMEAN1- SCR_CLMEAN1000 0 SCR_CLMIN1 - SCR_CLMIN1000 1 SCR_CLMAX1 - SCR_CLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMEANS (1000) SCR_CLMEAN1 - SCR_CLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMINS (1000) SCR_CLMIN1 - SCR_CLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMAXS (1000) SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_CLMEAN1 - SCR_CLMEAN1000 SCR_CLMIN1 - SCR_CLMIN1000 SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_BLMEAN1- SCR_BLMEAN1000 0 SCR_BLMIN1 - SCR_BLMIN1000 1 SCR_BLMAX1 - SCR_BLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMEANS (1000) SCR_BLMEAN1 - SCR_BLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMINS (1000) SCR_BLMIN1 - SCR_BLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMAXS (1000) SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_BLMEAN1 - SCR_BLMEAN1000 SCR_BLMIN1 - SCR_BLMIN1000 SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1788));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_BAD1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_BAD1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   ELTARGET (DECILE) = SUM ( ELTARGET (DECILE) , _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINELTARGET (DECILE) = MIN (MINELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXELTARGET (DECILE) = MAX (MAXELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CLTARGET (DECILE) = SUM ( CLTARGET (DECILE) , _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCLTARGET (DECILE) = MIN (MINCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCLTARGET (DECILE) = MAX (MAXCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BLTARGET (DECILE) = SUM ( BLTARGET (DECILE) , _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBLTARGET (DECILE) = MIN (MINBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBLTARGET (DECILE) = MAX (MAXBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_BAD1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_BAD1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_BAD1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_BAD = TRANSLATE (D_BAD, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_BAD = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_BAD = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_BAD1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_BAD1 );
MPRINT(EM_ASSESS):   SCR_ELMEANS ( SLOT ) = MEAN (SCR_ELMEANS (SLOT), _MEANELTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_ELMINS ( SLOT ) = MIN (SCR_ELMINS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_ELMAXS ( SLOT ) = MAX (SCR_ELMAXS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_CLMEANS ( SLOT ) = MEAN (SCR_CLMEANS (SLOT), _MEANCLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CLMINS ( SLOT ) = MIN (SCR_CLMINS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_CLMAXS ( SLOT ) = MAX (SCR_CLMAXS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMEANS ( SLOT ) = MEAN (SCR_BLMEANS (SLOT), _MEANBLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BLMINS ( SLOT ) = MIN (SCR_BLMINS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMAXS ( SLOT ) = MAX (SCR_BLMAXS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.1017621145 OVLMAX 0.7297297297 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEL = SUM (OF ELTARGET1 - ELTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEL ;
MPRINT(EM_ASSESS):   SUMCL = SUM (OF CLTARGET1 - CLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCL ;
MPRINT(EM_ASSESS):   SUMBL = SUM (OF BLTARGET1 - BLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBL ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1788 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (1788/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1788)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 1788/20) ) / ( AVGNUMRESP / (1788/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1788 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 1788/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 1788/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEL_TARGET = ELTARGET (GROUP);
MPRINT(EM_ASSESS):   EL_TARGET = TOTALEL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEL + ELTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEL = CUMULATIVETOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEL_TARGET = MINELTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEL_TARGET = MAXELTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEL_TARGET = EL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEL_TARGET + MAXEL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEL >= C_MAXEL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEL = MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEL = MIN (MAXEL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEL < 0 THEN BESTEL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEL + BESTTOTALEL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEL - C_MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEL = BESTCUMTOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEL = SUMEL / 1788;
MPRINT(EM_ASSESS):   BASECUMULATIVEEL + BASEEL;
MPRINT(EM_ASSESS):   BASETOTALEL = SUMEL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEL + BASETOTALEL;
MPRINT(EM_ASSESS):   TOTALCL_TARGET = CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CL_TARGET = TOTALCL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCL + CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECL = CUMULATIVETOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCL_TARGET = MINCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCL_TARGET = MAXCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCL_TARGET = CL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCL_TARGET + MAXCL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCL >= C_MAXCL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCL = MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCL = MIN (MAXCL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCL < 0 THEN BESTCL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCL + BESTTOTALCL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCL - C_MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECL = BESTCUMTOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECL = SUMCL / 1788;
MPRINT(EM_ASSESS):   BASECUMULATIVECL + BASECL;
MPRINT(EM_ASSESS):   BASETOTALCL = SUMCL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCL + BASETOTALCL;
MPRINT(EM_ASSESS):   TOTALBL_TARGET = BLTARGET (GROUP);
MPRINT(EM_ASSESS):   BL_TARGET = TOTALBL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBL_TARGET = MINBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBL_TARGET = MAXBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBL_TARGET = BL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBL_TARGET + MAXBL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBL >= C_MAXBL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBL = MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBL = MIN (MAXBL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBL < 0 THEN BESTBL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBL + BESTTOTALBL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBL - C_MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBL = BESTCUMTOTALBL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBL = SUMBL / 1788;
MPRINT(EM_ASSESS):   BASECUMULATIVEBL + BASEBL;
MPRINT(EM_ASSESS):   BASETOTALBL = SUMBL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBL + BASETOTALBL;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN96 - SCR_ELMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN96 - SCR_ELMIN100);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX96 - SCR_ELMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN96 - SCR_CLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN96 - SCR_CLMIN100);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX96 - SCR_CLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN96 - SCR_BLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN96 - SCR_BLMIN100);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX96 - SCR_BLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN91 - SCR_ELMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN91 - SCR_ELMIN95);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX91 - SCR_ELMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN91 - SCR_CLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN91 - SCR_CLMIN95);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX91 - SCR_CLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN91 - SCR_BLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN91 - SCR_BLMIN95);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX91 - SCR_BLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN86 - SCR_ELMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN86 - SCR_ELMIN90);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX86 - SCR_ELMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN86 - SCR_CLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN86 - SCR_CLMIN90);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX86 - SCR_CLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN86 - SCR_BLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN86 - SCR_BLMIN90);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX86 - SCR_BLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN81 - SCR_ELMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN81 - SCR_ELMIN85);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX81 - SCR_ELMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN81 - SCR_CLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN81 - SCR_CLMIN85);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX81 - SCR_CLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN81 - SCR_BLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN81 - SCR_BLMIN85);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX81 - SCR_BLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN76 - SCR_ELMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN76 - SCR_ELMIN80);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX76 - SCR_ELMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN76 - SCR_CLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN76 - SCR_CLMIN80);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX76 - SCR_CLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN76 - SCR_BLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN76 - SCR_BLMIN80);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX76 - SCR_BLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN71 - SCR_ELMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN71 - SCR_ELMIN75);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX71 - SCR_ELMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN71 - SCR_CLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN71 - SCR_CLMIN75);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX71 - SCR_CLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN71 - SCR_BLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN71 - SCR_BLMIN75);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX71 - SCR_BLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN66 - SCR_ELMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN66 - SCR_ELMIN70);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX66 - SCR_ELMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN66 - SCR_CLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN66 - SCR_CLMIN70);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX66 - SCR_CLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN66 - SCR_BLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN66 - SCR_BLMIN70);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX66 - SCR_BLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN61 - SCR_ELMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN61 - SCR_ELMIN65);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX61 - SCR_ELMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN61 - SCR_CLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN61 - SCR_CLMIN65);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX61 - SCR_CLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN61 - SCR_BLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN61 - SCR_BLMIN65);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX61 - SCR_BLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN56 - SCR_ELMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN56 - SCR_ELMIN60);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX56 - SCR_ELMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN56 - SCR_CLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN56 - SCR_CLMIN60);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX56 - SCR_CLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN56 - SCR_BLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN56 - SCR_BLMIN60);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX56 - SCR_BLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN51 - SCR_ELMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN51 - SCR_ELMIN55);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX51 - SCR_ELMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN51 - SCR_CLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN51 - SCR_CLMIN55);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX51 - SCR_CLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN51 - SCR_BLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN51 - SCR_BLMIN55);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX51 - SCR_BLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN46 - SCR_ELMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN46 - SCR_ELMIN50);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX46 - SCR_ELMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN46 - SCR_CLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN46 - SCR_CLMIN50);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX46 - SCR_CLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN46 - SCR_BLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN46 - SCR_BLMIN50);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX46 - SCR_BLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN41 - SCR_ELMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN41 - SCR_ELMIN45);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX41 - SCR_ELMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN41 - SCR_CLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN41 - SCR_CLMIN45);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX41 - SCR_CLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN41 - SCR_BLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN41 - SCR_BLMIN45);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX41 - SCR_BLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN36 - SCR_ELMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN36 - SCR_ELMIN40);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX36 - SCR_ELMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN36 - SCR_CLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN36 - SCR_CLMIN40);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX36 - SCR_CLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN36 - SCR_BLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN36 - SCR_BLMIN40);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX36 - SCR_BLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN31 - SCR_ELMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN31 - SCR_ELMIN35);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX31 - SCR_ELMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN31 - SCR_CLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN31 - SCR_CLMIN35);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX31 - SCR_CLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN31 - SCR_BLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN31 - SCR_BLMIN35);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX31 - SCR_BLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN26 - SCR_ELMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN26 - SCR_ELMIN30);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX26 - SCR_ELMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN26 - SCR_CLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN26 - SCR_CLMIN30);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX26 - SCR_CLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN26 - SCR_BLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN26 - SCR_BLMIN30);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX26 - SCR_BLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN21 - SCR_ELMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN21 - SCR_ELMIN25);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX21 - SCR_ELMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN21 - SCR_CLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN21 - SCR_CLMIN25);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX21 - SCR_CLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN21 - SCR_BLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN21 - SCR_BLMIN25);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX21 - SCR_BLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN16 - SCR_ELMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN16 - SCR_ELMIN20);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX16 - SCR_ELMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN16 - SCR_CLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN16 - SCR_CLMIN20);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX16 - SCR_CLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN16 - SCR_BLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN16 - SCR_BLMIN20);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX16 - SCR_BLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN11 - SCR_ELMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN11 - SCR_ELMIN15);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX11 - SCR_ELMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN11 - SCR_CLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN11 - SCR_CLMIN15);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX11 - SCR_CLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN11 - SCR_BLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN11 - SCR_BLMIN15);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX11 - SCR_BLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN6 - SCR_ELMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN6 - SCR_ELMIN10);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX6 - SCR_ELMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN6 - SCR_CLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN6 - SCR_CLMIN10);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX6 - SCR_CLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN6 - SCR_BLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN6 - SCR_BLMIN10);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX6 - SCR_BLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN1 - SCR_ELMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN1 - SCR_ELMIN5);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX1 - SCR_ELMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN1 - SCR_CLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN1 - SCR_CLMIN5);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX1 - SCR_CLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN1 - SCR_BLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN1 - SCR_BLMIN5);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX1 - SCR_BLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1788;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS SCR_ELMEAN = _MEANEL_ SCR_ELMAX = _MAXEL_ SCR_ELMIN = _MINEL_ SCR_CLMEAN = _MEANCL_ SCR_CLMAX = _MAXCL_ SCR_CLMIN = _MINCL_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" _MEANCL_ = "Mean Computed Loss" _MAXCL_ = "Max Computed Loss" _MINCL_ = "Min Computed Loss" _MAXEL_ = "Max Expected Loss" _MINEL_ = "Min Expected Loss" _MEANEL_ = "Mean Expected Loss" DECISION1= "Report: Number of Decisions = 1"
DECISION2= "Report: Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC BESTBL = BESTLOSS BESTCUMTOTALBL = BESTCUMULATIVETOTALLOSS BESTCUMULATIVEBL = BESTCUMULATIVELOSS BESTTOTALBL = BESTTOTALLOSS MAXEL_TARGET =
_MAXEL_ MINEL_TARGET = _MINEL_ MNEL_TARGET = _MEANEL_ CUMULATIVEEL = CUMULATIVEEXPECTEDLOSS CUMULATIVETOTALEL= CUMULATIVETOTALEXPECTEDLOSS TOTALEL_TARGET = TOTALEXPECTEDLOSS BASECL = BASELOSS BASETOTALCL = BASETOTALLOSS MAXCL_TARGET = _MAXCL_ MINCL_TARGET
= _MINCL_ MNCL_TARGET = _MEANCL_ BASECUMTOTALCL = BASECUMULATIVETOTALLOSS BASECUMULATIVECL = BASECUMULATIVELOSS TOTALCL_TARGET = TOTALLOSS CUMULATIVECL = CUMULATIVELOSS CUMULATIVETOTALCL= CUMULATIVETOTALLOSS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCL_ = "Mean Computed Loss" _MINCL_ = "Min Computed Loss" _MAXCL_ = "Max Computed Loss" BASELOSS = "Baseline Loss" TOTALLOSS = "Total Computed Loss" CUMULATIVELOSS = "Cumulative Computed Loss" CUMULATIVETOTALLOSS =
"Cumulative Total Computed Loss" BASETOTALLOSS = "Baseline Total Loss" BASECUMULATIVETOTALLOSS = "Baseline Cumulative Total Loss" BASECUMULATIVELOSS = "Baseline Cumulative Loss" BASELOSS = "Baseline Loss" BESTLOSS = "Best Loss" BESTTOTALLOSS = "Best Total
Loss" BESTCUMULATIVETOTALLOSS = "Best Cumulative Total Loss" BESTCUMULATIVELOSS = "Best Cumulative Loss" _MEANEL_ = "Mean Expected Loss" _MINEL_ = "Min Expected Loss" _MAXEL_ = "Max Expected Loss" CUMULATIVETOTALEXPECTEDLOSS = "Cumulative Expected Total
Loss" CUMULATIVEEXPECTEDLOSS = "Cumulative Expected Loss" TOTALEXPECTEDLOSS = "Total Expected Loss" _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline
Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT =
"Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of
Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "BAD";
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
38066      %let _cn = %sysfunc(getoption(CENTER));
38067      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
38068      proc print data=EMWS4.Tree_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Tree_EMREPORTFIT noobs label;
38069      var STAT LABEL TRAIN
38070      VALIDATE
38071      TEST
38072      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE TEST ;
38073      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
38074      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38075      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
38076      run;
 
NOTE: There were 10 observations read from the data set EMWS4.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
38077      title10;
MPRINT(EM_DIAGRAM):   title10;
38078      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
38079      proc sort data=EMWS4.Tree_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Tree_EMCLASSIFICATION nothreads;
38080      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
38081      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 16 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
NOTE: The data set EMWS4.TREE_EMCLASSIFICATION has 16 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
38082      %let _cn = %sysfunc(getoption(CENTER));
38083      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
38084      proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
38085      var from into pct_row pct_col count percent
38086      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
38087      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
38088      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
38089      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
38090      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
38091      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
38092      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
38093      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
38094      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
38095      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38096      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
38097      run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
38098      proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Tree_EMCLASSIFICATION noobs label;
38099      var from into pct_row pct_col count percent
38100      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
38101      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
38102      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
38103      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
38104      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
38105      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
38106      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
38107      where _TYPE_='DECISION';
MPRINT(EM_DIAGRAM):   where _TYPE_='DECISION';
38108      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
38109      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38110      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Decision Table";
MPRINT(EM_DIAGRAM):   run;
38111      run;
 
NOTE: There were 8 observations read from the data set EMWS4.TREE_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
38112      title9;
MPRINT(EM_DIAGRAM):   title9;
38113      title10;
MPRINT(EM_DIAGRAM):   title10;
38114      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
38115      %let _cn = %sysfunc(getoption(CENTER));
38116      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
38117      data EMWS4.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS4.Tree_EMEVENTREPORT;
38118      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
38119      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
38119    ! FALSEEVENT
38120      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
38121         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True Positive" TRUENEVENT = "True Negative";
38122      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
38123      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
38124      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
38125      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
38126      set EMWS4.Tree_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS4.Tree_EMEVENTREPORT;
38127      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The data set EMWS4.TREE_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
38128      proc print data=EMWS4.Tree_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Tree_EMEVENTREPORT noobs label;
38129      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38130      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
38131      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
38132      run;
 
NOTE: There were 2 observations read from the data set EMWS4.TREE_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
38133      title10;
MPRINT(EM_DIAGRAM):   title10;
38134      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
38135      proc datasets library=EMWS4 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS4 nolist;
38136      modify Tree_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
38137      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
38138      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
38139      run;
 
NOTE: MODIFY was successful for EMWS4.TREE_EMRANK.DATA.
38140      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
38141      %let _cn = %sysfunc(getoption(CENTER));
38142      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
38143      proc print data=EMWS4.Tree_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Tree_EMRANK label noobs;
38144      var
38145      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
38146      by
38147      notsorted DATAROLE
38148      notsorted TARGET
38149      notsorted TARGETLABEL
38150      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
38151      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
38152      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
38153      run;
 
NOTE: There were 40 observations read from the data set EMWS4.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
38154      title10;
MPRINT(EM_DIAGRAM):   title10;
38155      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
38156      proc datasets library=EMWS4 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS4 nolist;
38157      modify Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
38158      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
38159      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
38160      run;
 
NOTE: MODIFY was successful for EMWS4.TREE_EMSCOREDIST.DATA.
38161      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS4.Tree_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "BAD" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
