MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:54" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                16 March 2021
Time:                00:10:54
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0INHM3Y "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0INHM3Y new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:54" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "16 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "00:10:54" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS4\Tree\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
24611      proc freq data=EMWS4.Tree_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS4.Tree_VariableSet noprint;
24612      table ROLE*LEVEL/out=WORK.TreeMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.TreeMETA;
24613      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS4.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

24614      proc print data=WORK.TreeMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.TreeMETA label noobs;
24615      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
24616      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
24617      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24618      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
24619      run;

NOTE: There were 5 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

24620      title10;
MPRINT(EM_DIAGRAM):   title10;
24621      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):   
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN 
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN EMWS4 Impt_TRAIN 
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN 
EMWS4.Impt_TRAIN EMWS4.Impt_TRAIN EMWS4 Impt_TRAIN 
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS4.Impt_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class BAD(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=BAD));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="BAD";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS4.Ids_BAD_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by BAD;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
24650      data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
24651      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
24652      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
24653         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
24654      set EMWS4.IDS_BAD_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS4.IDS_BAD_DM( where=(_TYPE_="TARGET"));
24655      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
24656      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
24657      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
24658      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
24659      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
24660      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
24661      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
24662      end;
MPRINT(EM_DIAGRAM):   end;
24663      output;
MPRINT(EM_DIAGRAM):   output;
24664      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

24665      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24666      proc print data=WORK.Tree_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree_EVENT noobs label;
24667      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
24668      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24669      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
24670      run;

NOTE: There were 1 observations read from the data set WORK.TREE_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24671      title10;
MPRINT(EM_DIAGRAM):   title10;
24672      proc print data = EMWS4.Ids_BAD_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS4.Ids_BAD_DD noobs label;
24673      var BAD
24674      TRAINPRIOR
24675      DECISION1
24676      DECISION2
24677      ;
MPRINT(EM_DIAGRAM):   var BAD TRAINPRIOR DECISION1 DECISION2 ;
24678      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24679      title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   run;
24680      run;

NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DD.
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24681      title10;
MPRINT(EM_DIAGRAM):   title10;
24682      proc print data = EMWS4.Ids_BAD_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS4.Ids_BAD_DM noobs label;
24683      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
24684      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
24685      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
24686      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
24687      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
24688      run;

NOTE: There were 11 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

24689      title10;
MPRINT(EM_DIAGRAM):   title10;
24690      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Regression';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.BAD;
MPRINT(EM_DECDATA):   length BAD $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   format COUNT 10. ;
MPRINT(EM_DECDATA):   BAD="1";
MPRINT(EM_DECDATA):   COUNT=1189;
MPRINT(EM_DECDATA):   DATAPRIOR=0.1994966442953;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.1994966442953;
MPRINT(EM_DECDATA):   DECPRIOR=0;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=5;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   BAD="0";
MPRINT(EM_DECDATA):   COUNT=4771;
MPRINT(EM_DECDATA):   DATAPRIOR=0.80050335570469;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.80050335570469;
MPRINT(EM_DECDATA):   DECPRIOR=0;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify BAD(type=LOSS label= BAD);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS4.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="BAD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS4.Ids_BAD_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS4.Ids_BAD_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="BAD";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS4.Ids_BAD_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS4.Ids_BAD_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
25198      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25199      * Tree: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree: Generation of macros and macro variables;
25200      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
25201      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

25202      %let EMEXCEPTIONSTRING=;
25203      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
25204      * TRAIN: Tree;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree;
25205      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
25206      %let EM_ACTION = TRAIN;
25207      %let syscc = 0;
25208      %macro main;
25209      
25210        %if %upcase(&EM_ACTION) = CREATE %then %do;
25211          filename temp catalog 'sashelp.emmodl.tree_create.source';
25212          %include temp;
25213          filename temp;
25214      
25215          %em_tree_create;
25216        %end;
25217      
25218         %else
25219         %if %upcase(&EM_ACTION) = TRAIN %then %do;
25220      
25221             filename temp catalog 'sashelp.emmodl.tree_train.source';
25222             %include temp;
25223             filename temp;
25224             %em_tree_train;
25225         %end;
25226      
25227        %else
25228        %if %upcase(&EM_ACTION) = SCORE %then %do;
25229          filename temp catalog 'sashelp.emmodl.tree_score.source';
25230          %include temp;
25231          filename temp;
25232      
25233          %em_tree_score;
25234      
25235        %end;
25236      
25237        %else
25238        %if %upcase(&EM_ACTION) = REPORT %then %do;
25239      
25240             filename temp catalog 'sashelp.emmodl.tree_report.source';
25241             %include temp;
25242             filename temp;
25243      
25244             %em_tree_report;
25245         %end;
25246      
25247        %else
25248        %if %upcase(&EM_ACTION) = OPENINT %then %do;
25249      
25250             filename temp catalog 'sashelp.emmodl.tree_actions.source';
25251             %include temp;
25252             filename temp;
25253             %EM_TREE_OPENTREEVIEWER;
25254      
25255         %end;
25256      
25257        %else
25258        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
25259      
25260             filename temp catalog 'sashelp.emmodl.tree_actions.source';
25261             %include temp;
25262             filename temp;
25263             %EM_TREE_CLOSETREEVIEWER;
25264      
25265         %end;
25266      
25267      
25268         %doendm:
25269      %mend main;
25270      
25271      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
25273     +%macro em_tree_train;
25275     +   %if &EM_IMPORT_DATA eq %then %do;
25276     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
25277     +       %put &em_codebar;
25278     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
25279     +       %put &errormsg;
25280     +       %put &em_codebar;
25281     +       %goto doendm;
25282     +   %end;
25283     +   %else
25284     +       %let EMEXCEPTIONSTRING =;
25286     +   %if  &EM_NUM_TARGET lt 1 %then %do;
25287     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
25288     +        %put &em_codebar;
25289     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
25290     +        %put &errormsg;
25291     +        %put &em_codebar;
25292     +        %goto doendm;
25293     +   %end;
25295     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
25296     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
25297     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
25298     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
25299     +        %put &em_codebar;
25300     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
25301     +        %put &errormsg;
25302     +        %put &em_codebar;
25303     +        %goto doendm;
25304     +   %end;
25306     +   /* Initialize property macro variables */
25307     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
25308     +   %include temp;
25309     +   filename temp;
25311     +   %EM_SetProperties;
25313     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
25314     +   %EM_GETNAME(key=EMTREE, type=DATA);
25315     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
25316     +     /* if import eq Y and no importtable defined, throw an exception */
25317     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
25318     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
25319     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
25320     +         %put &em_codebar;
25321     +         %put &errmsg;
25322     +         %put &em_codebar;
25323     +         %goto doendm;
25324     +      %end;
25325     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
25326     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
25327     +         %put &em_codebar;
25328     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
25329     +         %put &errormsg;
25330     +         %put &em_codebar;
25331     +         %goto doendm;
25332     +      %end;
25333     +      %else %do;
25334     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
25335     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
25336     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
25337     +         %let varnumX = %sysfunc(varnum(&dsid,X));
25338     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
25339     +         %let dsid = %sysfunc(close(&dsid));
25340     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
25341     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
25342     +            %put &em_codebar;
25343     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
25344     +            %put &errormsg;
25345     +            %put &em_codebar;
25346     +            %goto doendm;
25347     +         %end;
25348     +      %end;
25349     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
25350     +         proc delete data=&EM_USER_EMTREE;
25351     +         run;
25352     +      %end;
25353     +   %end;
25354     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
25355     +      proc delete data=&EM_USER_EMTREE;
25356     +      run;
25357     +   %end;
25359     +   /* load tree macros */
25360     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
25361     +   %include temp;
25362     +   filename temp;
25364     +   /* data sets */
25365     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
25366     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
25367     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
25369     +   /* files */
25370     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
25372     +   /* check actual num of target levels */
25373     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
25374     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
25375     +                              nLevel=_nTargetLevel );
25376     +      %if &_nTargetLevel  > 2 %then %do;
25377     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
25378     +        %put &em_codebar;
25379     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
25380     +        %put &errormsg;
25381     +        %put &em_codebar;
25382     +        %goto doendm;
25383     +      %end;
25384     +   %end;
25386     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
25387     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
25388     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
25389     +        %let costflag=0;
25390     +        data _null_;
25391     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
25392     +          if eof then call symput("costflag", _N_);
25393     +        run;
25394     +        %if &costflag gt 0 %then %do;
25395     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
25396     +          %put &em_codebar;
25397     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
25398     +          %put &errormsg;
25399     +          %put &em_codebar;
25400     +          %goto doendm;
25401     +       %end;
25402     +     %end;
25403     +   %end;
25405     +   /* determine if multiple targets will be processed */
25406     +   %let em_tree_multipleTargets=N;
25407     +   %let em_tree_numTarget = 1;
25408     +   %let em_tree_targetVars=;
25410     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
25411     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
25412     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
25413     +         %let em_tree_multipleTargets=N;
25414     +      %end;
25415     +      %else %do;
25416     +         /* create macro array of targets  */
25417     +         data _null_;
25418     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
25419     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
25420     +           if eof then
25421     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
25422     +        run;
25424     +        %if &em_tree_numTarget gt 1 %then %do;
25425     +           %let em_tree_multipleTargets=Y;
25426     +        %end;
25427     +      %end;
25428     +   %end;
25430     +   /* create view of only necessary variable for performance reasons */
25431     +   %let tempData = &EM_LIB..em_&EM_NODEID;
25432     +   data &tempData / view=&tempData;
25433     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
25434     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
25435     +       %EM_TARGET
25436     +     %end;
25437     +     %else %do;
25438     +       %if &em_tree_numTarget ne 0 %then %do;
25439     +         %do i=1 %to &em_tree_numTarget;
25440     +            &&em_tree_targetVars&i
25441     +         %end;
25442     +       %end;
25443     +     %end;
25444     +     );
25445     +   run;
25447     +   /* run Tree procedure */
25448     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
25450     +   /* Check return code and throw exception if error is detected */
25451     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
25452     +   %if &syserr %then %do;
25453     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
25454     +     %goto doendm;
25455     +   %end;
25457     +   /* add decision score code if multiple targets are processed */
25458     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
25459     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
25460     +   %end;
25462     +   /* create outfit dataset if multiple score statements have been executed */
25463     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
25465     +   /* create English Rules */
25466     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
25467     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
25468     +       %em_tree_makeEnglishRules;
25470     +       /* English Rules */
25471     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
25473     +     %end;
25474     +   filename x;
25476     +   %doendm:
25477     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
25478     +%macro EM_SetProperties;
25480     +   /* train properties */
25481     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
25482     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
25483     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
25484     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
25485     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
25486     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
25487     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
25488     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
25489     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
25490     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
25491     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
25492     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
25493     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
25494     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
25495     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
25496     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
25497     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
25498     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
25499     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
25500     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
25501     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
25502     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
25503     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
25504     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
25505     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
25506     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
25507     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
25508     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
25509     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
25510     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
25511     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
25512     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
25513     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
25514     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
25515     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
25516     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
25517     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
25518     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
25519     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
25520     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
25521     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
25523     +   /* properties for interactive sample */
25524     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
25525     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
25526     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
25527     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
25529     +   /* report properties */
25530     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
25531     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
25532     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
25533     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
25534     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
25535     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
25536     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
25537     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
25538     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
25539     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
25540     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
25541     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
25542     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
25544     +   /* score properties */
25545     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
25546     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
25548     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
25550     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
25551     +  %global &nLevel;
25552     +  proc dmdb batch data=&indata
25553     +    classout=_tmp_dmdbout;
25554     +    class &target;
25555     +  run;
25556     +  data _tmp_dmdbout;
25557     +    set _tmp_dmdbout;
25558     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
25559     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
25560     +  run;
25561     +  data _null_;
25562     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
25563     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
25564     +    %let dsid = %sysfunc(close(&dsid));
25565     +     call symput("&nLevel", put(&_obs, Best12.));
25566     +  run;
25568     +  proc datasets lib=work nolist;
25569     +     delete _tmp_dmdbout;
25570     +  run;
25571     +  quit;
25572     +%Mend EM_CheckBinaryTargetLevel;
25575     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
25577     +  /* determine the number of obs in training data */
25578     +  proc sql;
25579     +    reset noprint;
25580     +    select count(*) into :em_nobs from &indata;
25581     +  quit;
25583     +  /* determine the number of input variables */
25584     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
25585     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
25587     +  /* retrieve targetEvent from decmeta */
25588     +  %let targetEvent=;
25589     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
25590     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
25591     +      data _null_;
25592     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
25593     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
25594     +      run;
25595     +    %end;
25596     +  %end;
25598     +  /* create targetTable if multipleTar eq Y */
25599     +  data temptarget;
25600     +    set &EM_DATA_VARIABLESET;
25601     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
25602     +  run;
25604     + /* data sets */
25605     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
25606     + %EM_GETNAME(key=EMTREE,        type=DATA);
25607     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
25608     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
25609     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
25610     + %EM_GETNAME(key=OUTNODES,      type=DATA);
25611     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
25612     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
25613     + %EM_GETNAME(key=OUTPATH,       type=DATA);
25614     + %EM_GETNAME(key=OUTRULES,      type=DATA);
25616     + /* files */
25617     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
25618     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
25620     + /* turn on pmml if requested */
25621     + %let nnpmml=0;
25622     + %if %symexist(EM_PMML) %then %do;
25623     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
25624     +       %let nnpmml=1;
25626     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
25627     +   %end;
25628     +%end;
25630     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
25632     +%if &nnpmml or &numClassTarget %then %do;
25634     +    /* create dmdb needed for pmml generation */
25635     +    %let tree_maxlevel = 512;
25636     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
25637     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
25638     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
25639     +      %end;
25640     +    %end;
25641     +    %if &tree_maxlevel gt 0 %then %do;
25642     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
25643     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
25644     +    %end;
25646     +    %let targetOrderString =;
25647     +    %let targetString = ;
25648     +    data _null_;
25649     +       length orderString nameString $10000;
25650     +       retain orderString nameString;
25651     +       set &em_data_variableset end=eof;
25652     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
25653     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
25654     +       %end;
25655     +       %else %do;
25656     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
25657     +       %end;          select(order);
25658     +         when('')        order ='DESC';
25659     +         when('FMTASC')  order='ASCFMT';
25660     +         when('FMTDESC') order='DESFMT';
25661     +         otherwise;
25662     +       end;
25663     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
25664     +       nameString = trim(nameString)!!' '!!trim(NAME);
25666     +       if eof then do;
25667     +          call symput('targetOrderString', trim(orderString));
25668     +          call symput('targetString', trim(nameString));
25669     +       end;
25670     +    run;
25672     +    %let arborkluge= "work._treeDMDB";
25674     +    proc dmdb batch data=&indata
25675     +    %if &nnpmml %then %do;
25676     +        PMML
25677     +    %end;
25678     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
25680     +      %if &nnpmml %then %do;
25681     +           %if "%EM_ID" ne "" %then %do;
25682     +             id %EM_ID;
25683     +           %end;
25684     +           %if &EM_NUM_CLASS gt 0 %then %do;
25685     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
25686     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
25687     +                  &targetOrderString;
25688     +           %end;
25689     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
25690     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
25691     +           %end;
25692     +           target &targetString %EM_INTERVAL_TARGET;
25693     +           %if "%EM_FREQ" ne "" %then %do;
25694     +             freq %EM_FREQ;
25695     +           %end;
25696     +      %end;
25697     +      %else %do;
25698     +         class  &targetOrderString;
25699     +         target &targetString %EM_INTERVAL_TARGET;
25700     +      %end;
25701     +    run;
25702     +    quit;
25704     +    proc datasets lib=work nolist;
25705     +       delete classout varout;
25706     +    run;
25707     +    quit;
25709     + %end;
25712     + /* run Arbor procedure */
25713     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
25714     +  proc arbor data=&INDATA
25716     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
25717     +    Leafsize = &EM_PROPERTY_LEAFSIZE
25718     +  %end;
25720     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
25721     +    Splitsize = &EM_PROPERTY_SPLITSIZE
25722     +  %end;
25724     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
25725     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
25726     +  %end;
25728     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
25729     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
25730     +  %end;
25732     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
25733     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
25734     +  %end;
25736     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
25737     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
25738     +  %end;
25739     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
25740     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
25741     +  %end;
25742     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
25743     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
25744     +  %end;
25746     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
25747     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
25748     +      alpha = &EM_PROPERTY_SIGLEVEL
25749     +    %end;
25750     +  %end;
25752     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
25753     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
25754     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
25755     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
25756     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
25758     +        padjust =
25759     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
25760     +          &chaid
25761     +        %end;
25762     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
25763     +          DEPTH
25764     +        %end;
25765     +      %end;
25766     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
25767     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
25768     +         pvars = &num_inputs
25769     +      %end;
25770     +    %end;
25771     +  %end;
25772     +  %else %do;
25773     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
25774     +         padjust = NONE
25775     +      %end;
25776     +  %end;
25778     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
25779     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
25780     +    Maxrules = &num_nrules
25781     +  %end;
25783     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
25784     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
25785     +    Maxsurrs = &num_nsurrs
25786     +  %end;
25788     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
25789     +     Missing=&EM_PROPERTY_MISSINGVALUE
25790     +  %end;
25792     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
25793     +     USEVARONCE
25794     +  %end;
25796     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
25797     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
25798     +  %end;
25801     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
25802     +    event = "&targetEvent"
25803     +  %end;
25805     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
25806     +     DECSEARCH
25807     +  %end;
25809     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
25810     +     PRIORSSEARCH
25811     +  %end;
25813     +  %if &arbor_1 ne %then %do;
25814     +    &arbor_1
25815     +  %end;
25817     +  %if &em_arbor ne %then %do;
25818     +     &em_arbor
25819     +  %end;
25820     +  ;
25821     + %end;
25822     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
25823     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
25824     +       Performance &EM_PROPERTY_PERFORMANCE
25825     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25826     +         nodesize=&EM_PROPERTY_NODESAMPLE
25827     +       %end;
25828     +       ;
25829     +       interact;
25830     + %end;
25831     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
25832     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
25833     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
25834     +    %put &em_codebar;
25835     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
25836     +    %put &errormsg;
25837     +    %put &em_codebar;
25838     +    %goto doendm;
25839     +   %end;
25840     +   %else %do;
25841     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
25842     +       Performance &EM_PROPERTY_PERFORMANCE
25843     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25844     +         nodesize=&EM_PROPERTY_NODESAMPLE
25845     +       %end;
25846     +       ;
25847     +       interact;
25848     +   %end;
25849     + %end;
25851     + %else %do;
25852     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
25853     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
25854     +    %put &em_codebar;
25855     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
25856     +    %put &errormsg;
25857     +    %put &em_codebar;
25858     +    %goto doendm;
25859     +   %end;
25860     +   %else %do;
25861     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
25862     +       Performance &EM_PROPERTY_PERFORMANCE
25863     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25864     +         nodesize=&EM_PROPERTY_NODESAMPLE
25865     +       %end;
25866     +       ;
25867     +        interact;
25868     +   %end;
25869     + %end;
25871     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
25872     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
25873     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
25874     +    %end;
25876     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
25877     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
25878     +    %end;
25880     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
25881     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
25882     +    %end;
25884     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
25885     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
25886     +    %end;
25888     +    %if "%EM_FREQ" ne "" %then %do;
25889     +       freq %EM_FREQ;
25890     +    %end;
25892     +    %if "&multipleTar" eq "Y" %then %do;
25893     +       /* cycle through all target vars in variableset */
25894     +       %let tdsid = %sysfunc(open(temptarget));
25895     +       %if &tdsid %then %do;
25896     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
25897     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
25898     +          %do %while(^ %sysfunc(fetch(&tdsid)));
25899     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
25900     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
25901     +             target &var / level = &lvl
25902     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
25903     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
25904     +             %end;
25905     +             %else %if "&lvl" eq "INTERVAL" %then %do;
25906     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
25907     +             %end;
25908     +             %else %if "&lvl" eq "ORDINAL" %then %do;
25909     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
25910     +             %end;
25911     +          %end;
25912     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
25913     +       %end;
25914     +       useTarget variable = %EM_TARGET;
25915     +    %end;
25916     +    %else %do;
25917     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
25918     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
25919     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
25920     +      %end;
25921     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
25922     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
25923     +      %end;
25924     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
25925     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
25926     +      %end;
25927     +    %end;
25929     +    %if "&multipleTar" eq "N" %then %do;
25930     +      &EM_DEC_STATEMENT;
25931     +    %end;
25933     +    Performance &EM_PROPERTY_PERFORMANCE
25934     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
25935     +      nodesize=&EM_PROPERTY_NODESAMPLE
25936     +    %end;
25937     +    ;
25939     +    %if "&intFlag" eq "Y" %then %do;
25940     +       INTERACT Largest;
25941     +       Train maxnewdepth=0;
25942     +    %end;
25944     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
25945     +         Assess
25946     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
25947     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
25948     +              %put &em_codebar;
25949     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
25950     +              %put &errormsg;
25951     +              %put &em_codebar;
25952     +            %end;
25953     +            %else %do;
25954     +               Validata=&EM_IMPORT_VALIDATE
25955     +            %end;
25956     +         %end;
25957     +         %else %do;
25958     +           NoValidata
25959     +         %end;
25960     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
25961     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
25962     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
25963     +               %if &dsid %then %do;
25964     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
25965     +                 %do %while(^ %sysfunc(fetch(&dsid)));
25966     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
25967     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
25968     +                   %else %do;
25969     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
25970     +                      %else %let measure= MISC;
25971     +                   %end;
25972     +                 %end;
25973     +               %end;
25974     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25975     +            %end;
25976     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
25977     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
25978     +                 %let measure=ASE;
25979     +              %end;
25980     +              %else %do;
25981     +                 %let measure=MISC;
25982     +              %end;
25983     +            %end;
25984     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
25985     +              %let measure=ASE;
25986     +            %end;
25987     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
25988     +               %let measure = LIFT;
25989     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
25990     +               %if &dsid %then %do;
25991     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
25992     +                 %do %while(^ %sysfunc(fetch(&dsid)));
25993     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
25994     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
25995     +                 %end;
25996     +               %end;
25997     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
25998     +            %end;
25999     +            measure=&measure
26000     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
26001     +               event = "&targetEvent"
26002     +            %end;
26003     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
26004     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
26005     +            %end;
26006     +         %end;
26007     +         %if "&multipleTar" eq "N" %then %do;
26008     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
26009     +               CV
26010     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
26011     +                 CVNITer = &EM_PROPERTY_CVNITER
26012     +               %end;
26013     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
26014     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
26015     +               %end;
26016     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
26017     +                 CVSeed = &EM_PROPERTY_CVSEED
26018     +               %end;
26019     +            %end;
26020     +         %end;
26021     +       %end;
26022     +      ;
26024     +      %if "&intFlag" ne "Y" %then %do;
26025     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
26026     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
26027     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
26028     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
26030     +          SUBTREE &subtree
26031     +          %if "&subtree" eq "NLEAVES" %then %do;
26032     +            =&EM_PROPERTY_NSUBTREE
26033     +          %end;
26034     +          ;
26035     +        %end;
26037     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
26038     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
26039     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
26040     +          %end;
26041     +       %end;
26042     +      %end;
26043     + %end;
26046     + MakeMacro nleaves = nleaves;
26047     + save
26048     + %if "&EM_USER_EMTREE" ne "" %then %do;
26049     +   MODEL=&EM_USER_EMTREE
26050     + %end;
26051     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
26052     +   SEQUENCE=&EM_USER_OUTSEQ
26053     + %end;
26054     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
26055     +   IMPORTANCE=&EM_USER_OUTIMPORT
26056     + %end;
26057     + %if "&EM_USER_OUTNODES" ne "" %then %do;
26058     +   NODESTAT=&EM_USER_OUTNODES
26059     + %end;
26060     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
26061     +   SUMMARY=&EM_USER_OUTSUMMARY
26062     + %end;
26063     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
26064     +   STATSBYNODE=&EM_USER_OUTSTATS
26065     + %end;
26066     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
26067     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
26068     + %end;
26069     + %if "&EM_USER_OUTPATH" ne "" %then %do;
26070     +   Pathlistnonmissing=&EM_USER_OUTPATH
26071     + %end;
26072     + %if "&EM_USER_OUTRULES" ne "" %then %do;
26073     +   RULES = &EM_USER_OUTRULES
26074     + %end;
26075     + ;
26077     + %if "&intFlag" ne "Y" %then %do;
26079     +   %let lookupString = ;
26080     +   %if ^%symexist(EM_OPTION) %then
26081     +      %let EM_OPTION=;
26083     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
26084     +      %let lookupString = LOOKUP=SELECT;
26085     +   %end;
26087     +   %let codetext=;
26088     +   %let norescodetxt=;
26090     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
26091     +     %let codetext=&codetext DUMMY;
26092     +     %let norescodetxt=&norescodetxt DUMMY;
26093     +   %end;
26094     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
26095     +     %let codetext=&codetext NOLEAFID;
26096     +     %let norescodetxt=&norescodetxt NOLEAFID;
26097     +   %end;
26098     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
26099     +     %let norescodetxt=&norescodetxt NOPRED;
26100     +   %end;
26102     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
26103     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
26105     +   %if &nnpmml %then %do;
26106     +     code pmml;
26107     +   %end;
26109     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
26110     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26111     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
26112     +   %end;
26113     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
26114     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
26115     +   %end;
26116     + %end;
26118     + run;
26119     + quit;
26121     + /*%em_checkerror(); */
26122     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
26123     +   /* Delete DMDB catalog */
26124     +   proc datasets lib=work nolist;
26125     +       delete _treeDMDB / mt=cat;
26126     +  run;
26127     +  %end;
26129     + %if &nnpmml %then %do;
26130     +    ods pmml close;
26131     + %end;
26133     +  %doendm:
26135     +%mend em_tree_runTreeProcedure;
26137     +%macro em_tree_createFitStats( multipleTar= );
26140     +  /* create targetTable is multipleTar eq Y */
26141     +  data temptarget;
26142     +    set &EM_DATA_VARIABLESET;
26143     +    where ROLE="TARGET";
26144     +  run;
26146     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
26147     +   data &EM_USER_EMOUTFIT;
26148     +     length target $32;
26149     +     merge work.fit_train
26150     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26151     +       work.fit_valid
26152     +     %end;
26153     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
26154     +       work.fit_test
26155     +     %end;
26156     +     ;
26157     +     %if "&multipleTar" eq "N" %then %do;
26158     +       target="%EM_TARGET";
26159     +     %end;
26160     +     %else %do;
26161     +       target = _TARGET_;
26162     +     %end;
26163     +     drop _NW_ _SUMW_
26164     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26165     +        _VSUMW_
26166     +     %end;
26167     +     ;
26168     +   run;
26170     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
26171     +     proc datasets library=work nolist;
26172     +       delete fit_valid;
26173     +     run;
26174     +   %end;
26175     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
26176     +     proc datasets library=work nolist;
26177     +       delete fit_test;
26178     +     run;
26179     +   %end;
26181     +%mend em_tree_createFitStats;
26184     +%macro em_tree_makeEnglishRules;
26186     +  %EM_GETNAME(key=OUTNODES, type=DATA);
26187     +  %EM_GETNAME(key=OUTPATH, type=DATA);
26189     +  /* verify that necessary tables exist and if not, skip processing */
26190     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
26191     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
26192     +    %goto doendm;
26193     +  %end;
26194     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
26195     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
26196     +    %goto doendm;
26197     +  %end;
26199     +  /* determine length of variable in outpath dataset */
26200     +  %let vlength= ;
26201     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
26202     +  %if &dsid ne %then %do;
26203     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
26204     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
26205     +  %end;
26206     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
26208     +  data tempoutpath;
26209     +    length varname $&vlength;
26210     +    retain varname;
26211     +    set &EM_USER_OUTPATH;
26213     +    if ^missing(variable) then varname=variable;
26214     +    else if ^missing(var_name) then varname=var_name;
26215     +    output;
26216     +  run;
26218     +  /* create an array of generated predicted variable names */
26219     +  %let tree_pred_vars = ;
26220     +  %let tree_pred_label = ;
26221     +  %let numpred= 0;
26222     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
26224     +    data _null_;
26225     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
26226     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
26227     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
26228     +     if eof then
26229     +       call symput('numpred', strip(put(_N_, BEST.)));
26230     +    run;
26231     +  %end;
26233     +  /* determine if NPRIORS exists in outnodes  */
26234     +  %local nprior_flag;
26235     +  data _null_;
26236     +    set &EM_USER_OUTNODES(obs=2) end=eof;
26237     +    if eof then do;
26238     +      call symput('nprior_flag', strip(put(npriors, best.)));
26239     +    end;
26240     +  run;
26242     +  proc sort data=tempoutpath; by node; run;
26243     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
26245     +  data tempoutpath;
26246     +    merge tempoutpath(in=_a) outnodes(keep= node
26247     +    %if "&nprior_flag" ne "." %then %do;
26248     +      NPRIORS
26249     +    %end;
26250     +    %else %do;
26251     +      N
26252     +    %end;
26253     +    %if &numpred gt 0 %then %do;
26254     +      %do i=1 %to &numpred;
26255     +        &&tree_pred_vars&i
26256     +      %end;
26257     +    %end;
26258     +    );
26259     +    by node;
26260     +    if _a;
26261     +  run;
26263     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
26265     +  data _null_;
26266     +    file x;
26267     +    set tempoutpath;
26268     +    by node descending varname;
26269     +    retain origvar oldnode string;
26270     +    length origvar $32 oldnode 8 string $5000;
26272     +    if _N_ = 1 then do;
26273     +      origvar = varname;
26274     +      oldnode = node;
26275     +    end;
26277     +    if first.node then do;
26278     +       put "&EM_CODEBAR";
26279     +       put " Node = " node;
26280     +       put "&EM_CODEBAR";
26281     +    end;
26283     +      if first.varname then do;
26284     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
26285     +            if MISSING(CHARACTER_VALUE) then do;
26286     +             if NUMERIC_VALUE ne .  then do;
26287     +              if ^first.node then do;
26288     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26289     +              end;
26290     +              else do;
26291     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26292     +              end;
26293     +             end;
26294     +            end;
26295     +            else do;
26296     +              if ^first.node then do;
26297     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26298     +              end;
26299     +              else do;
26300     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26301     +              end;
26302     +             end;
26303     +         end;
26304     +         else if RELATION in ("=") then do;
26305     +            if ^first.node then do;
26306     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
26307     +            end;
26308     +            else do;
26309     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
26310     +            end;
26311     +         end;
26312     +         else if RELATION in ("ISMISSING") then do;
26313     +            if ^first.node then do;
26314     +              string = " AND "|| strip(varname) || " equals Missing";
26315     +            end;
26316     +            else do;
26317     +              string = "if "|| strip(varname) ||" equals Missing";
26318     +            end;
26319     +         end;
26320     +         else if RELATION in ("ISNOTMISSING") then do;
26321     +            if ^first.node then do;
26322     +              string = " AND "|| strip(varname) || " equals All Values";
26323     +            end;
26324     +            else do;
26325     +              string = "if "|| strip(varname) ||" equals All Values";
26326     +            end;
26327     +         end;
26328     +         if ^missing(varname) then origvar = varname;
26329     +         oldnode=node;
26331     +      end;
26332     +      else do;
26333     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
26334     +          if MISSING(CHARACTER_VALUE) then do;
26335     +           if  NUMERIC_VALUE ne .  then do;
26336     +            if ^MISSING(string) then
26337     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26338     +            else
26339     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
26340     +           end;
26341     +          end;
26342     +          else do;
26343     +            if ^MISSING(string) then
26344     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26345     +            else
26346     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
26347     +          end;
26349     +         end;
26350     +         else if RELATION in ("=") then do;
26351     +           string = strip(string)||", "||strip(character_value);
26352     +         end;
26353     +         else if RELATION in ("ISMISSING") then do;
26355     +         end;
26356     +         if ^missing(varname) then origvar = varname;
26357     +         oldnode=node;
26358     +      end;
26359     +      if last.varname then do;
26360     +         if RELATION in ("ISMISSING") then do;
26361     +           if ^first.varname then do;
26362     +             string = strip(string) || " or MISSING";
26363     +           end;
26364     +         end;
26365     +         put string;
26366     +         if ^missing(varname) then origvar = varname;
26367     +         oldnode=node;
26368     +      end;
26370     +      if last.node then do;
26371     +         put "then ";
26372     +         put " Tree Node Identifier   = " node;
26374     +         %if "&nprior_flag" ne "." %then %do;
26375     +           put " Number of Observations = " NPRIORS;
26376     +         %end;
26377     +         %else %do;
26378     +           put " Number of Observations = " N;
26379     +         %end;
26381     +         %if &numpred gt 0 %then %do;
26382     +           %do i=1 %to &numpred;
26383     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
26384     +           %end;
26385     +         %end;
26387     +         put " ";
26388     +         if ^missing(varname) then origvar = varname;
26389     +         oldnode=node;
26390     +      end;
26392     +  run;
26394     +  proc datasets lib=work nolist;
26395     +    delete tempoutpath outnodes;
26396     +  run;
26398     +  %doendm:
26399     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc dmdb batch data=EMWS4.Impt_TRAIN classout=_tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   class BAD;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39   
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   set _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'N' and strip(LEVEL) = '.' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   if strip(TYPE) = 'C' and strip(LEVEL) = '' then delete;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: There were 2 observations read from the data set WORK._TMP_DMDBOUT.
NOTE: The data set WORK._TMP_DMDBOUT has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   data _null_;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   call symput("_nTargetLevel", put(2, Best12.));
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_CHECKBINARYTARGETLEVEL):   proc datasets lib=work nolist;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   delete _tmp_dmdbout;
MPRINT(EM_CHECKBINARYTARGETLEVEL):   run;

NOTE: Deleting WORK._TMP_DMDBOUT (memtype=DATA).
MPRINT(EM_CHECKBINARYTARGETLEVEL):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS4.em_Tree / view=EMWS4.em_Tree;
MPRINT(EM_TREE_TRAIN):   set EMWS4.Impt_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =IMP_DEBTINC IMP_DELINQ IMP_DEROG IMP_JOB IMP_MORTDUE IMP_NINQ IMP_REASON IMP_YOJ BAD BAD );
MPRINT(EM_TREE_TRAIN):   run;

NOTE: DATA STEP view saved on file EMWS4.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS4.IMPT_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS4.em_Tree;
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39   
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS4.Tree_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS4.Tree_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS4.em_Tree dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class BAD(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target BAD
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Records processed = 2979   Memory used = 511K.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39   
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.08 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS4.em_Tree Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_INTERVAL_INPUT):   IMP_DEBTINC IMP_MORTDUE IMP_YOJ
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = interval;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_NOMINAL_INPUT):   IMP_DELINQ IMP_DEROG IMP_JOB IMP_NINQ
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_BINARY_INPUT):   IMP_REASON
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level = nominal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   BAD
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   BINARY
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   decision decdata=WORK.BAD decvars= DECISION1 DECISION2;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess Validata=EMWS4.Impt_VALIDATE measure=PROFIT
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1377711 kilobytes of physical memory.
NOTE: Will use 2979 out of 2979 training cases.
NOTE: Using memory pool with 87539712 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 702272 bytes of work memory.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39   
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: View EMWS4.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.12 seconds
      
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
NOTE: The subtree sequence contains 16 subtrees. The largest has 31 nodes and 16 leaves.
NOTE: Using subtree with 11 nodes and 6 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 11 nodes and 6 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 6.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS4.Tree_EMTREE SEQUENCE=EMWS4.Tree_OUTSEQ IMPORTANCE=EMWS4.Tree_OUTIMPORT NODESTAT=EMWS4.Tree_OUTNODES SUMMARY=EMWS4.Tree_OUTSUMMARY STATSBYNODE=EMWS4.Tree_OUTSTATS TOPOLOGY=EMWS4.Tree_OUTTOPOLOGY 
Pathlistnonmissing=EMWS4.Tree_OUTPATH RULES = EMWS4.Tree_OUTRULES ;
NOTE: The data set EMWS4.TREE_OUTIMPORT has 8 observations and 6 variables.
NOTE: The data set EMWS4.TREE_EMTREE has 1141 observations and 4 variables.
NOTE: The data set EMWS4.TREE_OUTNODES has 11 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTPATH has 58 observations and 7 variables.
NOTE: The data set EMWS4.TREE_OUTRULES has 338 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTSEQ has 16 observations and 24 variables.
NOTE: The data set EMWS4.TREE_OUTSTATS has 121 observations and 5 variables.
NOTE: The data set EMWS4.TREE_OUTSUMMARY has 24 observations and 6 variables.
NOTE: The data set EMWS4.TREE_OUTTOPOLOGY has 11 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEFLOW.sas" res group=Tree ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEPUBLISH.sas" nores group=Tree ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS4\Tree\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS4.em_Tree out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 12 variables.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39   
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.09 seconds
      
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS4.Impt_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
NOTE: The data set WORK.FIT_VALID has 1 observations and 10 variables.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      91 at 107353:41    62 at 107354:39    401 at 107355:43   401 at 107356:14   39 at 107357:14    160 at 107357:43   195 at 107358:14   32 at 107358:40    48 at 107359:14    165 at 107359:39   
NOTE: There were 1788 observations read from the data set EMWS4.PART_VALIDATE.
NOTE: View EMWS4.IMPT_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      
NOTE: There were 1788 observations read from the data set EMWS4.VARCLUS_VALIDATE.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS4.Impt_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 10 variables.
NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      58 at 107384:41    43 at 107385:39    251 at 107386:43   251 at 107387:14   25 at 107388:14    106 at 107388:43   121 at 107389:14   26 at 107389:40    33 at 107390:14    100 at 107390:39   
NOTE: There were 1193 observations read from the data set EMWS4.PART_TEST.
NOTE: View EMWS4.IMPT_TEST.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
      
NOTE: There were 1193 observations read from the data set EMWS4.VARCLUS_TEST.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;

NOTE: Missing values were generated as a result of performing an operation on missing values.
      Each place is given by: (Number of times) at (Line):(Column).
      159 at 107322:41   117 at 107323:39   615 at 107324:43   615 at 107325:14   77 at 107326:14    252 at 107326:43   310 at 107327:14   54 at 107327:40    93 at 107328:14    250 at 107328:39   
NOTE: There were 2979 observations read from the data set EMWS4.PART_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.VARCLUS_TRAIN.
NOTE: View EMWS4.EM_TREE.VIEW used (Total process time):
      real time           0.59 seconds
      cpu time            0.48 seconds
      
NOTE: There were 2979 observations read from the data set EMWS4.IMPT_TRAIN.
NOTE: There were 2979 observations read from the data set EMWS4.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.62 seconds
      cpu time            0.48 seconds
      

MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;

NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS4.Tree_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set EMWS4.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS4.Tree_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_valid work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "BAD";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ _VSUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS4.TREE_EMOUTFIT has 1 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_valid;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;

NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Jose\DM_ang\Workspaces\EMWS4\Tree\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $15;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS4.Tree_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 58 observations read from the data set EMWS4.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS4.Ids_BAD_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS4.IDS_BAD_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS4.Tree_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 2 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS4.Tree_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 11 observations read from the data set EMWS4.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 11 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS P_BAD1 P_BAD0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 11 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 58 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $5000;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: BAD=1 = " P_BAD1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: BAD=0 = " P_BAD0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195   
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS4\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=16 March 2021 00:10:56,
      Create Time=16 March 2021 00:10:56

NOTE: 72 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 71.
NOTE: There were 58 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;

NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.38210010499791;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26401      
26402      *------------------------------------------------------------*;
26403      * End TRAIN: Tree;
26404      *------------------------------------------------------------*;

26405      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26406      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
26407      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26408      ;
MPRINT(EM_DIAGRAM):   ;
26409      ;
MPRINT(EM_DIAGRAM):   ;
26410      ;
MPRINT(EM_DIAGRAM):   ;
26411      ;
MPRINT(EM_DIAGRAM):   ;
26412      quit;
MPRINT(EM_DIAGRAM):   quit;
26413      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26414      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
26415      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26416      /*; *"; *'; */
26417      ;
MPRINT(EM_DIAGRAM):   ;
26418      run;
MPRINT(EM_DIAGRAM):   run;
26419      quit;
MPRINT(EM_DIAGRAM):   quit;
26420      /* Reset EM Options */
26421      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
26422      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
26423      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
26424      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
26425      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
26426      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
