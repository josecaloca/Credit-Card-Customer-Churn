MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:02" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28 March 2021
Time:                18:36:02
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1D9EXK8 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1D9EXK8 new;
MPRINT(EM_DIAGRAM):   run;
40690      %let EMEXCEPTIONSTRING=;
40691      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40692      * REPORT: BINNING;
MPRINT(EM_DIAGRAM):   * REPORT: BINNING;
40693      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40694      %let EM_ACTION = REPORT;
40695      %let syscc = 0;
40696      %macro main;
40697      
40698        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
40699        %include temp;
40700        filename temp;
40701      
40702        %setProperties;
40703      
40704        %if %upcase(&EM_ACTION) = CREATE %then %do;
40705          filename temp catalog 'sashelp.emmdfy.binning_create.source';
40706          %include temp;
40707          filename temp;
40708      
40709          %create;
40710        %end;
40711      
40712         %else
40713         %if %upcase(&EM_ACTION) = TRAIN %then %do;
40714      
40715             filename temp catalog 'sashelp.emmdfy.binning_train.source';
40716             %include temp;
40717             filename temp;
40718             %train;
40719         %end;
40720      
40721        %else
40722        %if %upcase(&EM_ACTION) = SCORE %then %do;
40723          filename temp catalog 'sashelp.emmdfy.binning_score.source';
40724          %include temp;
40725          filename temp;
40726      
40727          %score;
40728      
40729        %end;
40730      
40731        %else
40732        %if %upcase(&EM_ACTION) = REPORT %then %do;
40733      
40734             filename temp catalog 'sashelp.emmdfy.binning_report.source';
40735             %include temp;
40736             filename temp;
40737      
40738             %report;
40739         %end;
40740      
40741         %doendm:
40742      %mend main;
40743      
40744      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
40746     +%macro SetProperties;
40748     +     /* IGN options */
40749     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
40750     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
40751     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
40753     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
40754     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
40755     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
40756     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
40757     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
40758     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
40759     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
40760     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
40761     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
40762     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
40763     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
40764     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
40765     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
40766     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
40768     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
40769     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
40770     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
40773     +%mend SetProperties;
40774     +%macro appendfiles(fileref1, fileref2);
40775     +     data _null_;
40776     +       length c $256;
40777     +       fid1=fopen("&fileref1",'A');
40778     +       fid2=fopen("&fileref2",'I');
40779     +       cval = finfo(fid2,'lrecl');
40780     +       put cval= fid1= fid2=;
40781     +       if (fid2 > 0) then
40782     +         do while(fread(fid2)=0);
40783     +           rc = fget(fid2,c,256);
40784     +           _msg_=sysmsg();
40785     +           /* put rc= c= _msg_=; */
40786     +           rc = fput(fid1,strip(c));
40787     +           rc = fwrite(fid1);
40788     +         end;
40789     +         _msg_=sysmsg();
40790     +         put _msg_=;
40791     +       rc = fclose(fid1);
40792     +       rc = fclose(fid2);
40793     +     run;
40794     +%mend appendfiles;
40796     +%macro buildOptScoreCode;
40798     +    %em_register(key=BINCODE, type=FOLDER);
40800     +    filename x catalog 'sashelp.emutil.em_deldir.source';
40801     +    %inc x;
40802     +    filename x;
40803     +    %delDir(folder=%nrbquote(&em_user_bincode));
40805     +    data _null_; length rc $200;
40806     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
40807     +    run;
40809     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
40811     +    %let dsid = %sysfunc(open(class_nosv));
40812     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
40813     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
40815     +    %let oldname=;
40816     +    %do %while(^%sysfunc(fetch(&dsid)));
40817     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
40818     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
40820     +        %if &name ne &oldname %then %do;
40821     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
40822     +             data _null_;
40823     +                length string $1024 flag endflag 8;
40824     +                retain string flag endflag;
40825     +                set class_nosv end=eof;
40826     +                where DISPLAY_VAR ="&name";
40827     +                by _variable_ _group_;
40828     +                file _F1;
40829     +                index = kindex(_variable_, "BIN_");
40830     +                if index gt 0 then do;
40831     +                   if first._variable_ then do;
40832     +                      put ' ';
40833     +                      put "&EM_CODEBAR;";
40834     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
40835     +                      put string;
40836     +                      put "&EM_CODEBAR;";
40838     +                      if origLabel ne "" then do;
40839     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
40840     +                            put string;
40841     +                            string = tranwrd(origLabel,"'","''");
40842     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
40843     +                            put string;
40844     +                      end;
40845     +                      else do;
40846     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
40847     +                             put string;
40848     +                      end;
40850     +                      put ' ';
40852     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
40853     +                      put string;
40854     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
40855     +                      put string;
40856     +                      put "end;";
40857     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
40858     +                      put string;
40859     +                   end;
40860     +                   if first._group_ then do;
40861     +                      flag = 0;
40862     +                      endflag = 1;
40863     +                      if ^first._variable_ then do;
40864     +                         put "else";
40865     +                      end;
40866     +                      if LB ne . then do;
40867     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
40868     +                      end;
40869     +                      else do;
40870     +                         flag = 1;
40871     +                         string = "if";
40872     +                      end;
40873     +                   end;
40874     +                   if last._Group_ then do;
40875     +                      if UB ne . then do;
40876     +                        if flag ne 1 then do;
40877     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
40878     +                        end;
40879     +                        else do;
40880     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
40881     +                        end;
40882     +                      end;
40883     +                      else do;
40884     +                         if flag=1 then do;
40885     +                            string = strip(DISPLAY_VAR) ;
40886     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
40887     +                            endflag=0;
40888     +                            string="";
40889     +                         end;
40890     +                         else do;
40891     +                            string = strip(string)!!" then do;";
40892     +                         end;
40893     +                      end;
40894     +                      put string;
40895     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
40896     +                      put string;
40897     +                      if endflag eq 1 then do;
40898     +                        put "end;";
40899     +                      end;
40900     +                   end;
40901     +                   if last._variable_ then do;
40902     +                     string = "end;";
40903     +                     put string;
40904     +                   end;
40906     +                end;
40907     +                else do;
40908     +                   _split_value_ = tranwrd(_split_value_,"'","''");
40909     +                   if first._group_ then do;
40910     +                      flag=0;
40911     +                      if ^first._variable_ then
40912     +                         put 'else';
40913     +                      else do;
40914     +                         put ' ';
40915     +                         put "&EM_CODEBAR;";
40916     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
40917     +                         put string;
40918     +                         put "&EM_CODEBAR;";
40920     +                         if origLabel ne "" then do;
40921     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
40922     +                               put string;
40923     +                               string = tranwrd(origLabel,"'","''");
40924     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
40925     +                               put string;
40926     +                         end;
40927     +                         else do;
40928     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
40929     +                               put string;
40930     +                         end;
40932     +                         put ' ';
40934     +                         if format ne '' then do;
40935     +                            if first._variable_ then do;
40936     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
40937     +                               put string;
40938     +                               string = '%dmnormip(_UFormat200);';
40939     +                               put string;
40941     +                               string ="if MISSING(_UFormat200) then do;";
40942     +                               put string;
40943     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
40944     +                               put string;
40945     +                               put "end;";
40947     +                               string="else if NOT MISSING(_UFormat200) then do;";
40948     +                               put string;
40950     +                            end;
40951     +                         end;
40952     +                         else do;
40953     +                            if type = 'N' then do;
40954     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
40955     +                              put string;
40956     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
40957     +                              put string;
40958     +                              put "end;";
40960     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
40961     +                              put string;
40962     +                            end;
40963     +                            else if type='C' then do;
40964     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
40965     +                              put string;
40966     +                              string = '%dmnormip(_UFormat200);';
40967     +                              put string;
40969     +                              string ="if MISSING(_UFormat200) then do;";
40970     +                              put string;
40971     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
40972     +                              put string;
40973     +                              put "end;";
40975     +                              string="else if NOT MISSING(_UFormat200) then do;";
40976     +                              put string;
40977     +                              string = '%dmnormip(_UFormat200);';
40978     +                              put string;
40979     +                           end;
40980     +                         end;
40981     +                      end;
40982     +                      if format ne '' OR type='C' then do;
40983     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
40984     +                      end;
40985     +                      else do;
40986     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
40987     +                      end;
40988     +                   end;
40989     +                   else do;
40990     +                      if flag ne 1 then do;
40991     +                       if format ne '' OR type='C' then do;
40992     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
40993     +                       end;
40994     +                       else do;
40995     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
40996     +                       end;
40997     +                         length = length(tempstring);
40999     +                         if length < 195 then do;
41000     +                            string = tempstring;
41001     +                         end;
41002     +                         else do;
41004     +                            string = strip(string);
41005     +                            put string;
41006     +                            string = ") then do;";
41007     +                            put string;
41009     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41010     +                            put string;
41011     +                            put "end;";
41013     +                            put 'else';
41014     +                            if format ne '' OR type='C' then do;
41015     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41016     +                            end;
41017     +                            else do;
41018     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41019     +                            end;
41020     +                         end;
41021     +                      end;
41022     +                   end;
41024     +                   if last._group_ then do;
41025     +                      string = strip(string);
41026     +                      put string;
41028     +                      string = ") then do;";
41029     +                      put string;
41031     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41032     +                      put string;
41033     +                      put "end;";
41034     +                   end;
41036     +                   if last._variable_ then do;
41037     +                     put "else do;";
41039     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41040     +                     put string;
41042     +                     put "end;";
41043     +                     put "end;";
41044     +                   end;
41045     +                end;
41046     +             run;
41048     +             %let oldname = &name;
41049     +        %end;
41050     +    %end;
41051     +    %let dsid = %sysfunc(close(&dsid));
41053     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
41054     +    data _null_;
41055     +       file _F1;
41056     +       put "length _UFormat200 $200;";
41057     +       put "drop _UFormat200;";
41058     +       put "_UFormat200='';";
41059     +    run;
41060     +    filename _F1;
41062     +   %em_register(key=EMSCOREVAR, type=DATA);
41063     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
41064     +   proc datasets lib=&em_lib nolist;
41065     +      delete &scorevarDs;
41066     +   run;
41067     +   quit;
41069     +   %let filrf=mydir;
41070     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
41071     +   %let did=%sysfunc(dopen(&filrf));
41073     +   %if &did %then %do;  %PUT  did= &did;
41074     +       %let memcount=%sysfunc(dnum(&did));
41075     +       %if &memcount > 0 %then %do;
41076     +           data &em_user_emscorevar;
41077     +              length Name $32 formula $70 file $200;
41078     +              keep NAME Formula file;
41079     +              formula  = '';
41080     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
41081     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
41082     +               output;
41083     +           %end;
41084     +           %do i=1 %to &memcount;
41085     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
41086     +               %let newvar = %scan(&name, 1, .);
41087     +               %if "&newvar" ne "_ALL_" %then %do;
41088     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
41089     +                   output;
41090     +               %end;
41091     +           %end;
41093     +           run;
41094     +       %end;
41095     +       %let did = %sysfunc(dclose(&did));
41096     +  %end;
41098     +   %doendu:
41099     +%mend buildOptScoreCode;
41102     +%macro buildScoreCode(flowCode, publishCode);
41105     +  filename x "&flowCode";
41107     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
41108     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
41109     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
41111     +  data temp;
41112     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
41113     +    by display_var _Split_value_;
41114     +     if upcase(_Split_value_) ne 'MISSING';
41115     +   run;
41117     +   data temp_missing;
41118     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
41119     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
41120     +     by display_var _Split_value_;
41121     +     if upcase(_Split_value_) eq 'MISSING';
41122     +     keep _variable_ display_var missgrp;
41123     +   run;
41125     +   proc sort data=temp_missing; by display_var missgrp; run;
41127     +   data temp_missing;
41128     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
41129     +     by display_var missgrp;
41130     +     if ^_a then delete;
41131     +     keep _variable_ display_var missgrp ;
41132     +   run;
41134     +   data temp;
41135     +     merge temp temp_missing;
41136     +     by display_var;
41137     +     if display_Var eq '' then delete;
41138     +    run;
41140     +    /* pull in wtev values */
41141     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
41142     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
41143     +    proc sort data=temp;  by display_var _group_; run;
41145     +   data temp;
41146     +      merge temp tempcoarse(keep=display_var _group_  role) ;
41147     +      by display_var _group_;
41148     +    run;
41150     +    data temp;
41151     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
41152     +      by display_var;
41154     +      if _group_ = . then delete;
41155     +      if _variable_ = '' then delete;
41156     +    run;
41158     +    proc sort data=temp out=class;
41159     +       by _variable_ _group_ LB;
41160     +    run;
41162     +    data _null_;
41163     +      file X;
41165     +      put "length _UFormat200 $200;";
41166     +      put "drop _UFormat200;";
41167     +      put "_UFormat200='';";
41168     +    run;
41170     +    data class_nosv;
41171     +      set class;
41172     +      if upcase(role)="INPUT";
41173     +    run;
41175     +    data _null_;
41176     +       file X MOD;
41177     +       length string $1024 flag endflag 8;
41178     +       retain string flag endflag;
41179     +       set class_nosv end=eof;
41180     +       by _variable_ _group_;
41182     +       index = kindex(_variable_, "BIN_");
41183     +       if index gt 0 then do;
41185     +         if first._variable_ then do;
41186     +            put ' ';
41187     +            put "&EM_CODEBAR;";
41188     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
41189     +            put string;
41190     +            put "&EM_CODEBAR;";
41193     +            if origLabel ne "" then do;
41194     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
41195     +              put string;
41196     +              string = tranwrd(origLabel,"'","''");
41197     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
41198     +              put string;
41199     +            end;
41200     +            else do;
41201     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
41202     +             put string;
41203     +            end;
41205     +            put ' ';
41207     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41208     +            put string;
41209     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41210     +            put string;
41211     +            put "end;";
41212     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41213     +            put string;
41214     +          end;
41215     +           if first._group_ then do;
41216     +              flag = 0;
41217     +              endflag = 1;
41218     +              if ^first._variable_ then do;
41219     +                put "else";
41220     +              end;
41221     +              if LB ne . then do;
41222     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
41223     +              end;
41224     +              else do;
41225     +                 flag = 1;
41226     +                 string = "if";
41227     +              end;
41229     +           end;
41230     +           if last._Group_ then do;
41231     +              if UB ne . then do;
41232     +                if flag ne 1 then do;
41233     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
41234     +                end;
41235     +                else do;
41236     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
41237     +                end;
41238     +              end;
41239     +              else do;
41240     +                 if flag=1 then do;
41241     +                   string = strip(DISPLAY_VAR) ;
41242     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
41243     +                   endflag = 0;
41244     +                   string="";
41245     +                 end;
41246     +                 else do;
41247     +                   string = strip(string)!!" then do;";
41248     +                 end;
41249     +              end;
41250     +              put string;
41252     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41253     +              put string;
41254     +              if endflag eq 1 then do;
41255     +                put "end;";
41256     +              end;
41257     +           end;
41258     +           if last._variable_ then do;
41259     +             string = "end;";
41260     +             put string;
41261     +           end;
41262     +       end;
41263     +       else do;
41264     +           _split_value_ = tranwrd(_split_value_,"'","''");
41265     +           if first._group_ then do;
41266     +              flag=0;
41267     +              if ^first._variable_ then
41268     +                 put 'else';
41269     +              else do;
41270     +                 put ' ';
41271     +                 put "&EM_CODEBAR;";
41272     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
41273     +                 put string;
41274     +                 put "&EM_CODEBAR;";
41276     +                 if origLabel ne "" then do;
41277     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
41278     +                   put string;
41279     +                   string = tranwrd(origLabel,"'","''");
41280     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
41281     +                   put string;
41282     +                 end;
41283     +                 else do;
41284     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
41285     +                   put string;
41286     +                 end;
41288     +                 put ' ';
41290     +                if format ne '' then do;
41291     +                  if first._variable_ then do;
41292     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
41293     +                    put string;
41294     +                    string = '%dmnormip(_UFormat200);';
41295     +                    put string;
41297     +                     string ="if MISSING(_UFormat200) then do;";
41298     +                     put string;
41299     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41300     +                     put string;
41301     +                     put "end;";
41303     +                     string="else if NOT MISSING(_UFormat200) then do;";
41304     +                     put string;
41306     +                  end;
41307     +                end;
41308     +                else do;
41309     +                     if type = 'N' then do;
41310     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41311     +                       put string;
41312     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41313     +                       put string;
41314     +                       put "end;";
41316     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
41317     +                       put string;
41319     +                     end;
41320     +                     else if type='C' then do;
41321     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
41322     +                        put string;
41323     +                        string = '%dmnormip(_UFormat200);';
41324     +                        put string;
41326     +                        string ="if MISSING(_UFormat200) then do;";
41327     +                        put string;
41328     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41329     +                        put string;
41330     +                        put "end;";
41332     +                        string="else if NOT MISSING(_UFormat200) then do;";
41333     +                        put string;
41334     +                        string = '%dmnormip(_UFormat200);';
41335     +                        put string;
41336     +                    end;
41337     +                end;
41338     +              end;
41339     +              if format ne '' OR type='C' then do;
41340     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41341     +              end;
41342     +              else do;
41343     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41344     +              end;
41345     +           end;
41346     +           else do;
41347     +              if flag ne 1 then do;
41348     +                if format ne '' OR type='C' then do;
41349     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
41350     +                end;
41351     +                else do;
41352     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41353     +                end;
41354     +                length = klength(tempstring);
41356     +                if length < 195 then do;
41357     +                   string = tempstring;
41358     +                end;
41359     +                else do;
41361     +                   string = strip(string);
41362     +                   put string;
41363     +                   string = ") then do;";
41364     +                   put string;
41366     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41367     +                   put string;
41368     +                   put "end;";
41370     +                 /*  string = strip(string)||",'...';"; */
41372     +                   put 'else';
41373     +                   if format ne '' OR type='C' then do;
41374     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
41375     +                   end;
41376     +                   else do;
41377     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
41378     +                   end;
41381     +                end;
41382     +              end;
41383     +           end;
41385     +           if last._group_ then do;
41386     +              string = strip(string);
41387     +              put string;
41388     +              string = ") then do;";
41389     +              put string;
41391     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
41392     +              put string;
41393     +              put "end;";
41394     +           end;
41396     +           if last._variable_ then do;
41397     +             put "else do;";
41399     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
41400     +             put string;
41402     +             put "end;";
41403     +             put "end;";
41404     +           end;
41405     +         *end;
41406     +       end;
41407     +    run;
41409     +    /* generate PublishCode the same as flowscorecode */
41410     +    filename Y "&publishCode";
41412     +    /* if publishCode already exists, wipe it out first */
41413     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
41414     +      %let rc = %sysfunc(fdelete(Y));
41415     +    %end;
41417     +    %appendfiles(Y, X);
41419     +    %if %EM_BINARY_TARGET= %then %do;
41420     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
41421     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
41422     +      %end;
41423     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
41424     +      %let ibn_inttarget_orig = &ibn_inttarget;
41426     +      %if %symexist(IGNBinTarget)=0 %then %do;
41427     +         %global ignbintarget ignfreqvar;
41428     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
41429     +         %include temp;
41430     +         filename temp;
41431     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
41433     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
41434     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
41435     +         %end;
41436     +      %end;
41437     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
41438     +         proc sql noprint;
41439     +            %if %EM_FREQ ne %then %do;
41440     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
41441     +            %end;
41442     +            %else %do;
41443     +               select mean(&ibn_inttarget)
41444     +            %end;
41445     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
41446     +         quit;
41447     +      %end;
41449     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
41450     +      %if &dsid %then %do;
41451     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
41452     +         %let rc=%sysfunc(close(&dsid));
41453     +      %end;
41454     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
41456     +      data _null_;
41457     +         file x mod;
41458     +         put ' ';
41460     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
41461     +             put "&EM_CODEBAR;";
41462     +             %let note = Mean Cutoff Binary Transformation for Target;
41463     +             put "* &note;";
41464     +             put "&EM_CODEBAR;";
41465     +         %end;
41466     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
41467     +             put "&EM_CODEBAR;";
41468     +             %let note = User-Specified Cutoff Binary Transformation for Target;
41469     +             put "* &note;";
41470     +             put "&EM_CODEBAR;";
41471     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
41472     +         %end;
41473     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
41474     +         put "else do;";
41475     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
41476     +         put "   else &IGNBinTarget=0;";
41477     +         put "end;";
41479     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
41480     +      run;
41482     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
41484     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
41486     +         data _null_;
41487     +            file deltaref;
41488     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
41489     +            put "if name='&IGNBinTarget' then do;";
41490     +            put "   role='TARGET';";
41491     +            put "   level='BINARY';";
41492     +            put "end;";
41493     +         run;
41495     +      %end;
41496     +      %else %do;
41498     +         data _null_;
41499     +            file deltaref;
41500     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
41501     +            put "if name='&IGNBinTarget' then do;";
41502     +            put "   role='REJECTED';";
41503     +            put "   level='BINARY';";
41504     +            put "end;";
41505     +         run;
41506     +      %end;
41508     +      filename deltaref;
41510     +   %end;
41512     +    filename X;
41513     +    filename Y;
41515     +    %buildOptScoreCode;
41517     +    proc datasets library=work nolist;
41518     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
41519     +    run;
41520     +    quit;
41522     +%mend buildScoreCode;
41524     +%macro buildMetaCode(DeltaCodeFile=);
41526     +   /* set variable roles based on New Role column in the Results table */
41527     +   data _null_;
41528     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
41529     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
41530     +      %if &dsid %then %do;
41531     +        %let obs = %sysfunc(fetch(&dsid));
41532     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
41533     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
41534     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
41536     +        %do %while(&obs=0);
41537     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
41538     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
41539     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
41541     +          /* retrieve grp and woe names from varmappings dataset */
41542     +          %let choice = _VARIABLE_ = "&inputname";
41543     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
41544     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
41545     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
41546     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
41547     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
41549     +          put "if name = '&inputname' then role='REJECTED';";
41550     +          %if "&role" ne "DEFAULT" %then %do;
41551     +            put "if name = '&grpname' then role='&role';";
41552     +          %end;
41553     +          %else %do;
41554     +            put "if name = '&grpname' then role='&oldrole';";
41555     +          %end;
41556     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
41558     +          %let obs = %sysfunc(fetch(&dsid));
41559     +        %end;
41560     +      %end;
41561     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
41562     +   run;
41564     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
41565     +   data _null_;
41566     +      file &DeltaCodeFile MOD;
41568     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
41569     +      %if &sdsid %then %do;
41570     +        %let sobs = %sysfunc(fetch(&sdsid));
41571     +        %do %while(&sobs=0);
41572     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
41573     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
41574     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
41575     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
41577     +          %let checkgrp = GRP_&checkname;
41578     +          %let lenname = %length(&checkgrp);
41579     +          %if %eval(&lenname-32) > 0 %then %do;
41580     +            %let checkgrp = %substr(&checkgrp, 1, 32);
41581     +          %end;
41583     +          %let choice = _VARIABLE_ ="&checkname";
41584     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
41586     +          /* if var not found in varmappings, delete variables; */
41587     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
41588     +          %if &vdsid eq 0 %then %do;
41589     +            put 'if name="&displayvar" then delete;';
41590     +            %let dispgrp = GRP_&displayvar;
41591     +            put 'if name="&dispgrp" then delete;';
41592     +          %end;
41594     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
41595     +          %let sobs = %sysfunc(fetch(&sdsid));
41596     +        %end;
41597     +      %end;
41598     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
41599     +   run;
41601     +%mend buildMetaCode;
41603     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
41605     +   proc sort data=&coarse out=sortedcoarse nodupkey;
41606     +     by display_var;
41607     +   run;
41608     +   proc sort data=&varmappings nodupkey;
41609     +     by _variable_;
41610     +   run;
41611     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
41612     +     proc sort data=&resultstable; by display_var; run;
41614     +     /* check that _new_role exists - did not exist in earlier releases */
41615     +     %let rds=%sysfunc(open(&resultstable));
41616     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
41617     +     %let rds=%sysfunc(close(&rds));
41618     +   %end;
41620     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
41621     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
41622     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
41623     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
41624     +     %end;
41625     +     ;
41626     +     by display_var;
41627     +     length _role_ _new_role_ $10;
41628     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
41629     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
41630     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
41631     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
41632     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
41633     +           ;
41635     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
41636     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
41637     +                _role_ = "Rejected";
41638     +             else _role_ = "Input";
41639     +           %end;
41640     +           %else %do;
41641     +             _role_ = "Input";
41642     +           %end;
41643     +           if _new_role_ eq "" then _new_role_="Default";
41644     +      if ^_a then do;
41645     +        _gini_ = 0;
41646     +        _role_ = 'Rejected';
41647     +        if _new_role_ eq "" then _new_role_="Default";
41648     +      end;
41649     +   run;
41650     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
41651     +     by NAME;
41652     +   run;
41653     +   data outlabel;
41654     +     set outlabel;
41655     +     if _label_ = '' then _label_ = _variable_;
41656     +   run;
41657     +   data &resultstable;
41658     +     merge &resultstable(in=_a_) outlabel;
41659     +     by display_Var;
41660     +     if _a_ then output;
41661     +   run;
41662     +   proc datasets library=work nolist;
41663     +     delete sortedcoarse outlabel;
41664     +   run;
41665     +   quit;
41666     +   proc sort data=&resultstable nodupkey;
41667     +      by DESCENDING
41668     +        _gini_ display_Var;
41669     +   run;
41670     +   data &resultstable;
41671     +     set &resultstable;
41673     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
41674     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
41675     +     giniOrder = _N_;
41676     +     _gini_ = round(_GINI_, .001);
41677     +     drop _variable_;
41678     +   run;
41680     +   proc print data=&resultstable label;
41681     +   run;
41683     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
41684     +   data &coarse;
41685     +     set &coarse;
41686     +     length role $10;
41687     +     %let dsid = %sysfunc(open(&resultstable));
41688     +     %if &dsid %then %do;
41689     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
41690     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
41691     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
41693     +       %let obs = %sysfunc(fetch(&dsid));
41694     +       %do %while(&obs=0);
41695     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
41696     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
41697     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
41699     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
41700     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
41701     +            giniOrder = &order;
41702     +            role = "&role";
41703     +          end;
41705     +          %let obs = %sysfunc(fetch(&dsid));
41706     +       %end;
41707     +     %end;
41708     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
41709     +   run;
41712     +%mend EM_GENERATE_RESULTSTABLE;
41714     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
41716     +    /* instantiate the zchar macro to be used in adding bin definition */
41717     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
41718     +    %inc _temp;
41719     +    filename _temp;
41721     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
41722     +      by _variable_ binFlag _group_ LB;
41723     +    run;
41725     +    data tempExport;
41726     +      set sortedFine;
41727     +      by _variable_ binFlag _group_;
41728     +      length _split_value_ $200;
41730     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
41731     +      if binFlag = 0 then do;
41732     +        index = kindex(_variable_, "BIN_");
41733     +        if index gt 0 then do;
41734     +          _LEVEL_ = "INTERVAL";
41735     +        end;
41736     +        _Split_value_ = _split_value_;
41737     +        output;
41738     +      end;
41739     +      else do;
41740     +         * if last._group_ then do;
41741     +          index = kindex(_variable_, "BIN_");
41742     +          if index gt 0 then do;
41743     +            _LEVEL_ = "INTERVAL";
41744     +          end;
41745     +          _Split_value_ = %zchar(UB);
41746     +          output;
41747     +         * end;
41748     +      end;
41750     +      rename display_Var = _variable_;
41751     +      keep display_var _level_ _group_ _split_value_ binFlag;
41752     +    run;
41754     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
41755     +       data &EXPORTGROUPING;
41756     +         set tempexport;
41757     +       run;
41758     +    %end;
41759     +    %else %do;
41760     +       /* determine if EXPORTGROUPING already exists */
41761     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
41762     +         data &EXPORTGROUPING;
41763     +            set &EXPORTGROUPING tempexport;
41764     +         run;
41765     +       %end;
41766     +       %else %do;
41767     +         data &EXPORTGROUPING;
41768     +            set tempexport;
41769     +         run;
41770     +       %end;
41771     +    %end;
41773     +    proc datasets lib=work nolist;
41774     +      delete sortedFine tempexport;
41775     +    run;
41776     +    quit;
41778     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_REPORT.SOURCE.
41782     +
41783     +%macro report;
41784     +
41785     +   /* if createGrouping then create a dataset for export */
41786     +   %EM_GETNAME(key=EXPORTGROUP, type=DATA);
41787     +   %EM_GETNAME(key=FINEDETAILDATA, type=DATA);
41788     +   %if &EM_PROPERTY_CREATEGROUPING eq Y %then %do;
41789     +     %EM_GENERATE_EXPORTGROUP(&EM_USER_EXPORTGROUP, &EM_PROPERTY_CREATEMETHOD);
41790     +   %end;
41791     +   %else %do;
41792     +     proc datasets library=&EM_LIB nolist;
41793     +       delete &EM_NODEID._EXPORTGROUP;
41794     +     run;
41795     +     quit;
41796     +   %end;
41797     +
41798     +
41799     +   /* set where clause dependent on EM_PROPERTY_MAXVAR value */
41800     +   %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
41801     +     %let whereclause = ((_GINI_ >= &EM_PROPERTY_GINICUTOFF) & (GINIORDER <= &EM_PROPERTY_MAXVAR));
41802     +   %end;
41803     +   %else %do;
41804     +     %let whereclause = GINIORDER <= &EM_PROPERTY_MAXVAR;
41805     +   %end;
41806     +
41807     +   %EM_REPORT(KEY=COARSE, VIEWTYPE=LATTICE, LATTICETYPE=BAR, X=_GROUP_, Y=EVENTRATE,
41808     +              BLOCK=MODEL, TIPTEXT=_LABEL_, LATTICEX=DISPLAY_VAR, DESCRIPTION=EVENTRATE, autodisplay=Y, where=%nrbquote(&whereclause));
41809     +
41810     +
41811     +%mend report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   proc datasets library=EMWS5 nolist;
MPRINT(REPORT):   delete BINNING_EXPORTGROUP;
MPRINT(REPORT):   run;

NOTE: The file EMWS5.BINNING_EXPORTGROUP (memtype=DATA) was not found, but appears on a DELETE statement.
MPRINT(REPORT):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "COARSE";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "LATTICE";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "((_GINI_ >= 20.0) & (GINIORDER <= 10))";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_GROUP_";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "EVENTRATE";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_LABEL_";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.78889363668341;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
41812      *------------------------------------------------------------*;
41813      * End REPORT: BINNING;
41814      *------------------------------------------------------------*;
41815      

41816      /* Reset EM Options */
41817      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
41818      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
41819      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
41820      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
41821      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
41822      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 134 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 134 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
