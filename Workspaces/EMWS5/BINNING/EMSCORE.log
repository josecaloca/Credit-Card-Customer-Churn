MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:35:59" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28 March 2021
Time:                18:35:59
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2RPC9V7 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2RPC9V7 new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'NN';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
38609      %let EMEXCEPTIONSTRING=;
38610      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
38611      * SCORE: BINNING;
MPRINT(EM_DIAGRAM):   * SCORE: BINNING;
38612      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
38613      %let EM_ACTION = SCORE;
38614      %let syscc = 0;
38615      %macro main;
38616      
38617        filename temp catalog 'sashelp.emmdfy.binning_macros.source';
38618        %include temp;
38619        filename temp;
38620      
38621        %setProperties;
38622      
38623        %if %upcase(&EM_ACTION) = CREATE %then %do;
38624          filename temp catalog 'sashelp.emmdfy.binning_create.source';
38625          %include temp;
38626          filename temp;
38627      
38628          %create;
38629        %end;
38630      
38631         %else
38632         %if %upcase(&EM_ACTION) = TRAIN %then %do;
38633      
38634             filename temp catalog 'sashelp.emmdfy.binning_train.source';
38635             %include temp;
38636             filename temp;
38637             %train;
38638         %end;
38639      
38640        %else
38641        %if %upcase(&EM_ACTION) = SCORE %then %do;
38642          filename temp catalog 'sashelp.emmdfy.binning_score.source';
38643          %include temp;
38644          filename temp;
38645      
38646          %score;
38647      
38648        %end;
38649      
38650        %else
38651        %if %upcase(&EM_ACTION) = REPORT %then %do;
38652      
38653             filename temp catalog 'sashelp.emmdfy.binning_report.source';
38654             %include temp;
38655             filename temp;
38656      
38657             %report;
38658         %end;
38659      
38660         %doendm:
38661      %mend main;
38662      
38663      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_MACROS.SOURCE.
38665     +%macro SetProperties;
38667     +     /* IGN options */
38668     +     %em_checkmacro(name=EM_PROPERTY_APPLYLEVELRULE, value=N, global=Y);
38669     +     %em_checkmacro(name=EM_PROPERTY_BINMETHOD,  value=QUANTILE, global=Y);
38670     +     %em_checkmacro(name=EM_PROPERTY_NUMBINS,    value=4, global=Y);
38672     +     %em_checkmacro(name=EM_PROPERTY_MISSINGASLEVEL, value=Y, global=Y);
38673     +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=2, global=Y);
38674     +     %em_checkmacro(name=EM_PROPERTY_CREATEGROUPING, value=N, global=Y);
38675     +     %em_checkmacro(name=EM_PROPERTY_CREATEMETHOD, value=OVERWRITE, global=Y);
38676     +     %em_checkmacro(name=EM_PROPERTY_IMPORTGROUPING, value=N, global=Y);
38677     +     %em_checkmacro(name=EM_PROPERTY_IMPORTDATA, value=, global=Y);
38678     +     %em_checkmacro(name=EM_PROPERTY_FREEZE, value=N, global=Y);
38679     +     %em_checkmacro(name=EM_PROPERTY_VARSELMETHOD, value=GINI, global=Y);
38680     +     %em_checkmacro(name=EM_PROPERTY_GINICUTOFF,   value=20.0, global=Y);
38681     +     %em_checkmacro(name=EM_PROPERTY_GRPMSMNT,     value=ORDINAL, global=Y);
38682     +     %em_checkmacro(name=EM_PROPERTY_MAXVAR,       value=10, global=Y);
38683     +     %em_checkmacro(name=EM_PROPERTY_CLASSGROUPRARE, value=Y, global=Y);
38684     +     %em_checkmacro(name=EM_PROPERTY_GROUPCUTOFF,    value=0.5, global=Y);
38685     +     %em_checkmacro(name=EM_PROPERTY_GROUPMISSING,   value=N, global=Y);
38687     +     %em_checkmacro(name=EM_PROPERTY_INTTARGETMETHOD, value=CUTMEAN, global=Y);
38688     +     %em_checkmacro(name=EM_PROPERTY_USERCUTVALUE, value=0.2, global=Y);
38689     +     %em_checkmacro(name=EM_PROPERTY_RejectIntTarget, value=N, global=Y);
38692     +%mend SetProperties;
38693     +%macro appendfiles(fileref1, fileref2);
38694     +     data _null_;
38695     +       length c $256;
38696     +       fid1=fopen("&fileref1",'A');
38697     +       fid2=fopen("&fileref2",'I');
38698     +       cval = finfo(fid2,'lrecl');
38699     +       put cval= fid1= fid2=;
38700     +       if (fid2 > 0) then
38701     +         do while(fread(fid2)=0);
38702     +           rc = fget(fid2,c,256);
38703     +           _msg_=sysmsg();
38704     +           /* put rc= c= _msg_=; */
38705     +           rc = fput(fid1,strip(c));
38706     +           rc = fwrite(fid1);
38707     +         end;
38708     +         _msg_=sysmsg();
38709     +         put _msg_=;
38710     +       rc = fclose(fid1);
38711     +       rc = fclose(fid2);
38712     +     run;
38713     +%mend appendfiles;
38715     +%macro buildOptScoreCode;
38717     +    %em_register(key=BINCODE, type=FOLDER);
38719     +    filename x catalog 'sashelp.emutil.em_deldir.source';
38720     +    %inc x;
38721     +    filename x;
38722     +    %delDir(folder=%nrbquote(&em_user_bincode));
38724     +    data _null_; length rc $200;
38725     +       rc = dcreate('BINCODE', "&EM_NODEDIR");
38726     +    run;
38728     +    %if ^%sysfunc(exist(class_nosv)) %then %goto doendu;
38730     +    %let dsid = %sysfunc(open(class_nosv));
38731     +    %let nameNum    = %sysfunc(varnum(&dsid, DISPLAY_VAR));
38732     +    %let grpnameNum = %sysfunc(varnum(&dsid, _grp_variable_));
38734     +    %let oldname=;
38735     +    %do %while(^%sysfunc(fetch(&dsid)));
38736     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
38737     +        %let grpname = %sysfunc(getvarc(&dsid, &grpnameNum));
38739     +        %if &name ne &oldname %then %do;
38740     +             filename _F1 "&em_user_bincode&em_dsep.&grpname..sas" MOD;
38741     +             data _null_;
38742     +                length string $1024 flag endflag 8;
38743     +                retain string flag endflag;
38744     +                set class_nosv end=eof;
38745     +                where DISPLAY_VAR ="&name";
38746     +                by _variable_ _group_;
38747     +                file _F1;
38748     +                index = kindex(_variable_, "BIN_");
38749     +                if index gt 0 then do;
38750     +                   if first._variable_ then do;
38751     +                      put ' ';
38752     +                      put "&EM_CODEBAR;";
38753     +                      string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
38754     +                      put string;
38755     +                      put "&EM_CODEBAR;";
38757     +                      if origLabel ne "" then do;
38758     +                            string = 'LABEL '!!strip(_grp_variable_)!!' = ';
38759     +                            put string;
38760     +                            string = tranwrd(origLabel,"'","''");
38761     +                            string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
38762     +                            put string;
38763     +                      end;
38764     +                      else do;
38765     +                             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
38766     +                             put string;
38767     +                      end;
38769     +                      put ' ';
38771     +                      string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38772     +                      put string;
38773     +                      string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38774     +                      put string;
38775     +                      put "end;";
38776     +                      string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38777     +                      put string;
38778     +                   end;
38779     +                   if first._group_ then do;
38780     +                      flag = 0;
38781     +                      endflag = 1;
38782     +                      if ^first._variable_ then do;
38783     +                         put "else";
38784     +                      end;
38785     +                      if LB ne . then do;
38786     +                         string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
38787     +                      end;
38788     +                      else do;
38789     +                         flag = 1;
38790     +                         string = "if";
38791     +                      end;
38792     +                   end;
38793     +                   if last._Group_ then do;
38794     +                      if UB ne . then do;
38795     +                        if flag ne 1 then do;
38796     +                          string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
38797     +                        end;
38798     +                        else do;
38799     +                          string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
38800     +                        end;
38801     +                      end;
38802     +                      else do;
38803     +                         if flag=1 then do;
38804     +                            string = strip(DISPLAY_VAR) ;
38805     +                            string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
38806     +                            endflag=0;
38807     +                            string="";
38808     +                         end;
38809     +                         else do;
38810     +                            string = strip(string)!!" then do;";
38811     +                         end;
38812     +                      end;
38813     +                      put string;
38814     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38815     +                      put string;
38816     +                      if endflag eq 1 then do;
38817     +                        put "end;";
38818     +                      end;
38819     +                   end;
38820     +                   if last._variable_ then do;
38821     +                     string = "end;";
38822     +                     put string;
38823     +                   end;
38825     +                end;
38826     +                else do;
38827     +                   _split_value_ = tranwrd(_split_value_,"'","''");
38828     +                   if first._group_ then do;
38829     +                      flag=0;
38830     +                      if ^first._variable_ then
38831     +                         put 'else';
38832     +                      else do;
38833     +                         put ' ';
38834     +                         put "&EM_CODEBAR;";
38835     +                         string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
38836     +                         put string;
38837     +                         put "&EM_CODEBAR;";
38839     +                         if origLabel ne "" then do;
38840     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = ';
38841     +                               put string;
38842     +                               string = tranwrd(origLabel,"'","''");
38843     +                               string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
38844     +                               put string;
38845     +                         end;
38846     +                         else do;
38847     +                               string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
38848     +                               put string;
38849     +                         end;
38851     +                         put ' ';
38853     +                         if format ne '' then do;
38854     +                            if first._variable_ then do;
38855     +                               string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
38856     +                               put string;
38857     +                               string = '%dmnormip(_UFormat200);';
38858     +                               put string;
38860     +                               string ="if MISSING(_UFormat200) then do;";
38861     +                               put string;
38862     +                               string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38863     +                               put string;
38864     +                               put "end;";
38866     +                               string="else if NOT MISSING(_UFormat200) then do;";
38867     +                               put string;
38869     +                            end;
38870     +                         end;
38871     +                         else do;
38872     +                            if type = 'N' then do;
38873     +                              string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38874     +                              put string;
38875     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38876     +                              put string;
38877     +                              put "end;";
38879     +                              string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
38880     +                              put string;
38881     +                            end;
38882     +                            else if type='C' then do;
38883     +                              string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
38884     +                              put string;
38885     +                              string = '%dmnormip(_UFormat200);';
38886     +                              put string;
38888     +                              string ="if MISSING(_UFormat200) then do;";
38889     +                              put string;
38890     +                              string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38891     +                              put string;
38892     +                              put "end;";
38894     +                              string="else if NOT MISSING(_UFormat200) then do;";
38895     +                              put string;
38896     +                              string = '%dmnormip(_UFormat200);';
38897     +                              put string;
38898     +                           end;
38899     +                         end;
38900     +                      end;
38901     +                      if format ne '' OR type='C' then do;
38902     +                        string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
38903     +                      end;
38904     +                      else do;
38905     +                        string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38906     +                      end;
38907     +                   end;
38908     +                   else do;
38909     +                      if flag ne 1 then do;
38910     +                       if format ne '' OR type='C' then do;
38911     +                         tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
38912     +                       end;
38913     +                       else do;
38914     +                         tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38915     +                       end;
38916     +                         length = length(tempstring);
38918     +                         if length < 195 then do;
38919     +                            string = tempstring;
38920     +                         end;
38921     +                         else do;
38923     +                            string = strip(string);
38924     +                            put string;
38925     +                            string = ") then do;";
38926     +                            put string;
38928     +                            string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38929     +                            put string;
38930     +                            put "end;";
38932     +                            put 'else';
38933     +                            if format ne '' OR type='C' then do;
38934     +                              string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
38935     +                            end;
38936     +                            else do;
38937     +                              string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
38938     +                            end;
38939     +                         end;
38940     +                      end;
38941     +                   end;
38943     +                   if last._group_ then do;
38944     +                      string = strip(string);
38945     +                      put string;
38947     +                      string = ") then do;";
38948     +                      put string;
38950     +                      string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
38951     +                      put string;
38952     +                      put "end;";
38953     +                   end;
38955     +                   if last._variable_ then do;
38956     +                     put "else do;";
38958     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
38959     +                     put string;
38961     +                     put "end;";
38962     +                     put "end;";
38963     +                   end;
38964     +                end;
38965     +             run;
38967     +             %let oldname = &name;
38968     +        %end;
38969     +    %end;
38970     +    %let dsid = %sysfunc(close(&dsid));
38972     +    filename _F1 "&em_user_bincode&em_dsep._ALL_.sas";
38973     +    data _null_;
38974     +       file _F1;
38975     +       put "length _UFormat200 $200;";
38976     +       put "drop _UFormat200;";
38977     +       put "_UFormat200='';";
38978     +    run;
38979     +    filename _F1;
38981     +   %em_register(key=EMSCOREVAR, type=DATA);
38982     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
38983     +   proc datasets lib=&em_lib nolist;
38984     +      delete &scorevarDs;
38985     +   run;
38986     +   quit;
38988     +   %let filrf=mydir;
38989     +   %let rc=%sysfunc(filename(filrf,&em_user_bincode));
38990     +   %let did=%sysfunc(dopen(&filrf));
38992     +   %if &did %then %do;  %PUT  did= &did;
38993     +       %let memcount=%sysfunc(dnum(&did));
38994     +       %if &memcount > 0 %then %do;
38995     +           data &em_user_emscorevar;
38996     +              length Name $32 formula $70 file $200;
38997     +              keep NAME Formula file;
38998     +              formula  = '';
38999     +           %if %sysfunc(fileexist(&em_user_bincode&em_dsep._ALL_.sas)) %then %do;
39000     +               name=''; file="BINCODE&em_dsep._ALL_.sas";
39001     +               output;
39002     +           %end;
39003     +           %do i=1 %to &memcount;
39004     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
39005     +               %let newvar = %scan(&name, 1, .);
39006     +               %if "&newvar" ne "_ALL_" %then %do;
39007     +                   name = "&newvar"; file="BINCODE&em_dsep&name";
39008     +                   output;
39009     +               %end;
39010     +           %end;
39012     +           run;
39013     +       %end;
39014     +       %let did = %sysfunc(dclose(&did));
39015     +  %end;
39017     +   %doendu:
39018     +%mend buildOptScoreCode;
39021     +%macro buildScoreCode(flowCode, publishCode);
39024     +  filename x "&flowCode";
39026     +  proc sort data=&EM_USER_SPLITVALS; by display_var _split_Value_; run;
39027     +  proc sort data=&EM_USER_BINMAPPINGS; by display_var bin; run;
39028     +  proc sort data=&EM_USER_coarse out=tempcoarse; by display_var _group_; run;
39030     +  data temp;
39031     +    merge &EM_USER_SPLITVALS &EM_USER_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
39032     +    by display_var _Split_value_;
39033     +     if upcase(_Split_value_) ne 'MISSING';
39034     +   run;
39036     +   data temp_missing;
39037     +     merge &EM_USER_SPLITVALS(rename=(_GROUP_=MISSGRP)) &EM_USER_BINMAPPINGS(rename=(
39038     +          BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
39039     +     by display_var _Split_value_;
39040     +     if upcase(_Split_value_) eq 'MISSING';
39041     +     keep _variable_ display_var missgrp;
39042     +   run;
39044     +   proc sort data=temp_missing; by display_var missgrp; run;
39046     +   data temp_missing;
39047     +     merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
39048     +     by display_var missgrp;
39049     +     if ^_a then delete;
39050     +     keep _variable_ display_var missgrp ;
39051     +   run;
39053     +   data temp;
39054     +     merge temp temp_missing;
39055     +     by display_var;
39056     +     if display_Var eq '' then delete;
39057     +    run;
39059     +    /* pull in wtev values */
39060     +    proc sort data=&EM_USER_varmappings out=tempmappings; by _variable_; run;
39061     +    proc sort data=&EM_IMPORT_DATA_CMETA out=tempcmeta; by NAME; run;
39062     +    proc sort data=temp;  by display_var _group_; run;
39064     +   data temp;
39065     +      merge temp tempcoarse(keep=display_var _group_  role) ;
39066     +      by display_var _group_;
39067     +    run;
39069     +    data temp;
39070     +      merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
39071     +      by display_var;
39073     +      if _group_ = . then delete;
39074     +      if _variable_ = '' then delete;
39075     +    run;
39077     +    proc sort data=temp out=class;
39078     +       by _variable_ _group_ LB;
39079     +    run;
39081     +    data _null_;
39082     +      file X;
39084     +      put "length _UFormat200 $200;";
39085     +      put "drop _UFormat200;";
39086     +      put "_UFormat200='';";
39087     +    run;
39089     +    data class_nosv;
39090     +      set class;
39091     +      if upcase(role)="INPUT";
39092     +    run;
39094     +    data _null_;
39095     +       file X MOD;
39096     +       length string $1024 flag endflag 8;
39097     +       retain string flag endflag;
39098     +       set class_nosv end=eof;
39099     +       by _variable_ _group_;
39101     +       index = kindex(_variable_, "BIN_");
39102     +       if index gt 0 then do;
39104     +         if first._variable_ then do;
39105     +            put ' ';
39106     +            put "&EM_CODEBAR;";
39107     +            string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
39108     +            put string;
39109     +            put "&EM_CODEBAR;";
39112     +            if origLabel ne "" then do;
39113     +              string = 'LABEL '!!strip(_grp_variable_)!!' = ';
39114     +              put string;
39115     +              string = tranwrd(origLabel,"'","''");
39116     +              string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
39117     +              put string;
39118     +            end;
39119     +            else do;
39120     +             string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
39121     +             put string;
39122     +            end;
39124     +            put ' ';
39126     +            string =  "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
39127     +            put string;
39128     +            string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
39129     +            put string;
39130     +            put "end;";
39131     +            string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
39132     +            put string;
39133     +          end;
39134     +           if first._group_ then do;
39135     +              flag = 0;
39136     +              endflag = 1;
39137     +              if ^first._variable_ then do;
39138     +                put "else";
39139     +              end;
39140     +              if LB ne . then do;
39141     +                 string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
39142     +              end;
39143     +              else do;
39144     +                 flag = 1;
39145     +                 string = "if";
39146     +              end;
39148     +           end;
39149     +           if last._Group_ then do;
39150     +              if UB ne . then do;
39151     +                if flag ne 1 then do;
39152     +                  string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
39153     +                end;
39154     +                else do;
39155     +                  string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
39156     +                end;
39157     +              end;
39158     +              else do;
39159     +                 if flag=1 then do;
39160     +                   string = strip(DISPLAY_VAR) ;
39161     +                   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
39162     +                   endflag = 0;
39163     +                   string="";
39164     +                 end;
39165     +                 else do;
39166     +                   string = strip(string)!!" then do;";
39167     +                 end;
39168     +              end;
39169     +              put string;
39171     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
39172     +              put string;
39173     +              if endflag eq 1 then do;
39174     +                put "end;";
39175     +              end;
39176     +           end;
39177     +           if last._variable_ then do;
39178     +             string = "end;";
39179     +             put string;
39180     +           end;
39181     +       end;
39182     +       else do;
39183     +           _split_value_ = tranwrd(_split_value_,"'","''");
39184     +           if first._group_ then do;
39185     +              flag=0;
39186     +              if ^first._variable_ then
39187     +                 put 'else';
39188     +              else do;
39189     +                 put ' ';
39190     +                 put "&EM_CODEBAR;";
39191     +                 string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
39192     +                 put string;
39193     +                 put "&EM_CODEBAR;";
39195     +                 if origLabel ne "" then do;
39196     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
39197     +                   put string;
39198     +                   string = tranwrd(origLabel,"'","''");
39199     +                   string = "'Grouped: "!!%nrbquote(strip(substr(string, 1,188)))!!"';";
39200     +                   put string;
39201     +                 end;
39202     +                 else do;
39203     +                   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!%nrbquote(strip(DISPLAY_VAR))!!'";';
39204     +                   put string;
39205     +                 end;
39207     +                 put ' ';
39209     +                if format ne '' then do;
39210     +                  if first._variable_ then do;
39211     +                    string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
39212     +                    put string;
39213     +                    string = '%dmnormip(_UFormat200);';
39214     +                    put string;
39216     +                     string ="if MISSING(_UFormat200) then do;";
39217     +                     put string;
39218     +                     string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
39219     +                     put string;
39220     +                     put "end;";
39222     +                     string="else if NOT MISSING(_UFormat200) then do;";
39223     +                     put string;
39225     +                  end;
39226     +                end;
39227     +                else do;
39228     +                     if type = 'N' then do;
39229     +                       string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
39230     +                       put string;
39231     +                       string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
39232     +                       put string;
39233     +                       put "end;";
39235     +                       string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
39236     +                       put string;
39238     +                     end;
39239     +                     else if type='C' then do;
39240     +                        string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
39241     +                        put string;
39242     +                        string = '%dmnormip(_UFormat200);';
39243     +                        put string;
39245     +                        string ="if MISSING(_UFormat200) then do;";
39246     +                        put string;
39247     +                        string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
39248     +                        put string;
39249     +                        put "end;";
39251     +                        string="else if NOT MISSING(_UFormat200) then do;";
39252     +                        put string;
39253     +                        string = '%dmnormip(_UFormat200);';
39254     +                        put string;
39255     +                    end;
39256     +                end;
39257     +              end;
39258     +              if format ne '' OR type='C' then do;
39259     +                string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
39260     +              end;
39261     +              else do;
39262     +                string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
39263     +              end;
39264     +           end;
39265     +           else do;
39266     +              if flag ne 1 then do;
39267     +                if format ne '' OR type='C' then do;
39268     +                  tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
39269     +                end;
39270     +                else do;
39271     +                  tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
39272     +                end;
39273     +                length = klength(tempstring);
39275     +                if length < 195 then do;
39276     +                   string = tempstring;
39277     +                end;
39278     +                else do;
39280     +                   string = strip(string);
39281     +                   put string;
39282     +                   string = ") then do;";
39283     +                   put string;
39285     +                   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
39286     +                   put string;
39287     +                   put "end;";
39289     +                 /*  string = strip(string)||",'...';"; */
39291     +                   put 'else';
39292     +                   if format ne '' OR type='C' then do;
39293     +                     string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
39294     +                   end;
39295     +                   else do;
39296     +                     string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
39297     +                   end;
39300     +                end;
39301     +              end;
39302     +           end;
39304     +           if last._group_ then do;
39305     +              string = strip(string);
39306     +              put string;
39307     +              string = ") then do;";
39308     +              put string;
39310     +              string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
39311     +              put string;
39312     +              put "end;";
39313     +           end;
39315     +           if last._variable_ then do;
39316     +             put "else do;";
39318     +             string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
39319     +             put string;
39321     +             put "end;";
39322     +             put "end;";
39323     +           end;
39324     +         *end;
39325     +       end;
39326     +    run;
39328     +    /* generate PublishCode the same as flowscorecode */
39329     +    filename Y "&publishCode";
39331     +    /* if publishCode already exists, wipe it out first */
39332     +    %if %sysfunc(fexist(Y)) eq 1 %then %do;
39333     +      %let rc = %sysfunc(fdelete(Y));
39334     +    %end;
39336     +    %appendfiles(Y, X);
39338     +    %if %EM_BINARY_TARGET= %then %do;
39339     +      %if %symexist(EM_NUM_INTERVAL_TARGET)=0 %then %do;
39340     +         %em_varMacro(name=EM_INTERVAL_TARGET, metadata=&EM_DATA_variableSet, where=%nrbquote(ROLE="TARGET" and LEVEL="INTERVAL" and (USE="Y" or USE="D")), nummacro=em_num_interval_Target);
39341     +      %end;
39342     +      %let ibn_inttarget=%EM_INTERVAL_TARGET;
39343     +      %let ibn_inttarget_orig = &ibn_inttarget;
39345     +      %if %symexist(IGNBinTarget)=0 %then %do;
39346     +         %global ignbintarget ignfreqvar;
39347     +         filename temp catalog 'sashelp.emutil.em_getvarname.source';
39348     +         %include temp;
39349     +         filename temp;
39350     +         %getVarName(&EM_IMPORT_DATA, BIN_%substr(&ibn_inttarget,1,%sysfunc(min(%length(&ibn_inttarget),28))), IGNBinTarget);
39352     +         %if &EM_PROPERTY_INTTARGETMETHOD = DUPFREQ %then %do;
39353     +            %getVarName(&EM_IMPORT_DATA, _FREQ_, ignfreqvar);
39354     +         %end;
39355     +      %end;
39356     +      %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
39357     +         proc sql noprint;
39358     +            %if %EM_FREQ ne %then %do;
39359     +               select sum(&ibn_inttarget * %EM_FREQ) / sum(%EM_FREQ)
39360     +            %end;
39361     +            %else %do;
39362     +               select mean(&ibn_inttarget)
39363     +            %end;
39364     +            into :ignbincut trimmed from &EM_IMPORT_DATA;
39365     +         quit;
39366     +      %end;
39368     +      %let dsid=%sysfunc(open(&EM_IMPORT_DATA,i));
39369     +      %if &dsid %then %do;
39370     +         %let tarlabel=%trim(%sysfunc(varlabel(&dsid,%sysfunc(varnum(&dsid,&ibn_inttarget)))));
39371     +         %let rc=%sysfunc(close(&dsid));
39372     +      %end;
39373     +      %if %length(&tarlabel)=0 %then %let tarlabel = &ibn_inttarget;
39375     +      data _null_;
39376     +         file x mod;
39377     +         put ' ';
39379     +         %if &EM_PROPERTY_INTTARGETMETHOD = CUTMEAN %then %do;
39380     +             put "&EM_CODEBAR;";
39381     +             %let note = Mean Cutoff Binary Transformation for Target;
39382     +             put "* &note;";
39383     +             put "&EM_CODEBAR;";
39384     +         %end;
39385     +         %else %if &EM_PROPERTY_INTTARGETMETHOD = CUTUSER %then %do;
39386     +             put "&EM_CODEBAR;";
39387     +             %let note = User-Specified Cutoff Binary Transformation for Target;
39388     +             put "* &note;";
39389     +             put "&EM_CODEBAR;";
39390     +             %let ignbincut = &EM_PROPERTY_USERCUTVALUE;
39391     +         %end;
39392     +         put "if &ibn_inttarget = . then &IGNBinTarget = .;";
39393     +         put "else do;";
39394     +         put "   if &ibn_inttarget > &ignbincut then &IGNBinTarget=1;";
39395     +         put "   else &IGNBinTarget=0;";
39396     +         put "end;";
39398     +         put "label &IGNBinTarget = 'Binary: %nrbquote(%substr(&tarlabel,1,192))';";
39399     +      run;
39401     +      filename deltaref "&EM_FILE_CDELTA_TRAIN";
39403     +      %if &EM_PROPERTY_RejectIntTarget = Y %then %do;
39405     +         data _null_;
39406     +            file deltaref;
39407     +            put "if name='&ibn_inttarget_orig' then role='REJECTED';";
39408     +            put "if name='&IGNBinTarget' then do;";
39409     +            put "   role='TARGET';";
39410     +            put "   level='BINARY';";
39411     +            put "end;";
39412     +         run;
39414     +      %end;
39415     +      %else %do;
39417     +         data _null_;
39418     +            file deltaref;
39419     +            put "if name='&ibn_inttarget_orig' then role='TARGET';";
39420     +            put "if name='&IGNBinTarget' then do;";
39421     +            put "   role='REJECTED';";
39422     +            put "   level='BINARY';";
39423     +            put "end;";
39424     +         run;
39425     +      %end;
39427     +      filename deltaref;
39429     +   %end;
39431     +    filename X;
39432     +    filename Y;
39434     +    %buildOptScoreCode;
39436     +    proc datasets library=work nolist;
39437     +      delete class class_nosv temp temp_missing tempmappings tempcmeta;
39438     +    run;
39439     +    quit;
39441     +%mend buildScoreCode;
39443     +%macro buildMetaCode(DeltaCodeFile=);
39445     +   /* set variable roles based on New Role column in the Results table */
39446     +   data _null_;
39447     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
39448     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
39449     +      %if &dsid %then %do;
39450     +        %let obs = %sysfunc(fetch(&dsid));
39451     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
39452     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
39453     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
39455     +        %do %while(&obs=0);
39456     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
39457     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
39458     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
39460     +          /* retrieve grp and woe names from varmappings dataset */
39461     +          %let choice = _VARIABLE_ = "&inputname";
39462     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
39463     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
39464     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
39465     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
39466     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
39468     +          put "if name = '&inputname' then role='REJECTED';";
39469     +          %if "&role" ne "DEFAULT" %then %do;
39470     +            put "if name = '&grpname' then role='&role';";
39471     +          %end;
39472     +          %else %do;
39473     +            put "if name = '&grpname' then role='&oldrole';";
39474     +          %end;
39475     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
39477     +          %let obs = %sysfunc(fetch(&dsid));
39478     +        %end;
39479     +      %end;
39480     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
39481     +   run;
39483     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
39484     +   data _null_;
39485     +      file &DeltaCodeFile MOD;
39487     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
39488     +      %if &sdsid %then %do;
39489     +        %let sobs = %sysfunc(fetch(&sdsid));
39490     +        %do %while(&sobs=0);
39491     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
39492     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
39493     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
39494     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
39496     +          %let checkgrp = GRP_&checkname;
39497     +          %let lenname = %length(&checkgrp);
39498     +          %if %eval(&lenname-32) > 0 %then %do;
39499     +            %let checkgrp = %substr(&checkgrp, 1, 32);
39500     +          %end;
39502     +          %let choice = _VARIABLE_ ="&checkname";
39503     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
39505     +          /* if var not found in varmappings, delete variables; */
39506     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
39507     +          %if &vdsid eq 0 %then %do;
39508     +            put 'if name="&displayvar" then delete;';
39509     +            %let dispgrp = GRP_&displayvar;
39510     +            put 'if name="&dispgrp" then delete;';
39511     +          %end;
39513     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
39514     +          %let sobs = %sysfunc(fetch(&sdsid));
39515     +        %end;
39516     +      %end;
39517     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
39518     +   run;
39520     +%mend buildMetaCode;
39522     +%macro EM_GENERATE_RESULTSTABLE(coarse, resultstable, varmappings);
39524     +   proc sort data=&coarse out=sortedcoarse nodupkey;
39525     +     by display_var;
39526     +   run;
39527     +   proc sort data=&varmappings nodupkey;
39528     +     by _variable_;
39529     +   run;
39530     +   %if %sysfunc(exist(&resultstable, data)) %then %do;
39531     +     proc sort data=&resultstable; by display_var; run;
39533     +     /* check that _new_role exists - did not exist in earlier releases */
39534     +     %let rds=%sysfunc(open(&resultstable));
39535     +     %let _newrolenum = %sysfunc(VARNUM(&rds, _new_role_));
39536     +     %let rds=%sysfunc(close(&rds));
39537     +   %end;
39539     +   data &resultstable (Keep = display_var _gini_  _role_ _new_role_ procLevel);
39540     +     merge sortedcoarse(in=_a) &varmappings(rename=(_Variable_ = DISPLAY_VAR))
39541     +     %if %sysfunc(exist(&resultstable, data)) %then %do;
39542     +        &resultstable (keep = display_var %if &_newrolenum %then _new_role_; )
39543     +     %end;
39544     +     ;
39545     +     by display_var;
39546     +     length _role_ _new_role_ $10;
39547     +     label display_var = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel , NOQUOTE))"
39548     +           _gini_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_ginistatistic_vlabel , NOQUOTE))"
39549     +           _role_     = "%sysfunc(sasmsg(sashelp.dmine, rpt_calcrole_vlabel, NOQUOTE))"
39550     +           _new_role_ = "%sysfunc(sasmsg(sashelp.dmine, meta_NEWROLE_vlabel, NOQUOTE))"
39551     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))"
39552     +           ;
39554     +           %if &EM_PROPERTY_VARSELMETHOD eq GINI %then %do;
39555     +             if _gini_ < &EM_PROPERTY_GINICUTOFF then
39556     +                _role_ = "Rejected";
39557     +             else _role_ = "Input";
39558     +           %end;
39559     +           %else %do;
39560     +             _role_ = "Input";
39561     +           %end;
39562     +           if _new_role_ eq "" then _new_role_="Default";
39563     +      if ^_a then do;
39564     +        _gini_ = 0;
39565     +        _role_ = 'Rejected';
39566     +        if _new_role_ eq "" then _new_role_="Default";
39567     +      end;
39568     +   run;
39569     +   proc sort data=&EM_DATA_VARIABLESET out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
39570     +     by NAME;
39571     +   run;
39572     +   data outlabel;
39573     +     set outlabel;
39574     +     if _label_ = '' then _label_ = _variable_;
39575     +   run;
39576     +   data &resultstable;
39577     +     merge &resultstable(in=_a_) outlabel;
39578     +     by display_Var;
39579     +     if _a_ then output;
39580     +   run;
39581     +   proc datasets library=work nolist;
39582     +     delete sortedcoarse outlabel;
39583     +   run;
39584     +   quit;
39585     +   proc sort data=&resultstable nodupkey;
39586     +      by DESCENDING
39587     +        _gini_ display_Var;
39588     +   run;
39589     +   data &resultstable;
39590     +     set &resultstable;
39592     +     label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))"
39593     +           LEVEL      = "%sysfunc(sasmsg(sashelp.dmine, rpt_level_vlabel , NOQUOTE))";
39594     +     giniOrder = _N_;
39595     +     _gini_ = round(_GINI_, .001);
39596     +     drop _variable_;
39597     +   run;
39599     +   proc print data=&resultstable label;
39600     +   run;
39602     +   /* merge role, infovalOrder or giniOrder back into Coarse table as well */
39603     +   data &coarse;
39604     +     set &coarse;
39605     +     length role $10;
39606     +     %let dsid = %sysfunc(open(&resultstable));
39607     +     %if &dsid %then %do;
39608     +       %let disnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
39609     +       %let rolenum = %sysfunc(VARNUM(&dsid, _ROLE_));
39610     +       %let orderNum = %sysfunc(VARNUM(&dsid, giniOrder));
39612     +       %let obs = %sysfunc(fetch(&dsid));
39613     +       %do %while(&obs=0);
39614     +          %let displayvar = %sysfunc(getvarc(&dsid, &disnum));
39615     +          %let role       = %sysfunc(getvarc(&dsid, &rolenum));
39616     +          %let order = %sysfunc(getvarn(&dsid, &ordernum));
39618     +                                                                                               if DISPLAY_VAR = "&displayVar" then do;
39619     +            label giniOrder = "%sysfunc(sasmsg(sashelp.dmine, rpt_giniorder_vlabel , NOQUOTE))";
39620     +            giniOrder = &order;
39621     +            role = "&role";
39622     +          end;
39624     +          %let obs = %sysfunc(fetch(&dsid));
39625     +       %end;
39626     +     %end;
39627     +     %if &dsid %then %let dsid = %sysfunc(close(&dsid));
39628     +   run;
39631     +%mend EM_GENERATE_RESULTSTABLE;
39633     +%macro EM_GENERATE_EXPORTGROUP(exportGrouping, createMethod);
39635     +    /* instantiate the zchar macro to be used in adding bin definition */
39636     +    filename _temp catalog 'sashelp.emmacs.zchar.source';
39637     +    %inc _temp;
39638     +    filename _temp;
39640     +    proc sort data=&EM_USER_FINEDETAILDATA out=sortedfine;
39641     +      by _variable_ binFlag _group_ LB;
39642     +    run;
39644     +    data tempExport;
39645     +      set sortedFine;
39646     +      by _variable_ binFlag _group_;
39647     +      length _split_value_ $200;
39649     +      /* for all binned variables, need to modify the split value to original cutoff as well as change level to interval */
39650     +      if binFlag = 0 then do;
39651     +        index = kindex(_variable_, "BIN_");
39652     +        if index gt 0 then do;
39653     +          _LEVEL_ = "INTERVAL";
39654     +        end;
39655     +        _Split_value_ = _split_value_;
39656     +        output;
39657     +      end;
39658     +      else do;
39659     +         * if last._group_ then do;
39660     +          index = kindex(_variable_, "BIN_");
39661     +          if index gt 0 then do;
39662     +            _LEVEL_ = "INTERVAL";
39663     +          end;
39664     +          _Split_value_ = %zchar(UB);
39665     +          output;
39666     +         * end;
39667     +      end;
39669     +      rename display_Var = _variable_;
39670     +      keep display_var _level_ _group_ _split_value_ binFlag;
39671     +    run;
39673     +    %if &CREATEMETHOD eq OVERWRITE %then %do;
39674     +       data &EXPORTGROUPING;
39675     +         set tempexport;
39676     +       run;
39677     +    %end;
39678     +    %else %do;
39679     +       /* determine if EXPORTGROUPING already exists */
39680     +       %if %sysfunc(exist(&EXPORTGROUPING, DATA)) %then %do;
39681     +         data &EXPORTGROUPING;
39682     +            set &EXPORTGROUPING tempexport;
39683     +         run;
39684     +       %end;
39685     +       %else %do;
39686     +         data &EXPORTGROUPING;
39687     +            set tempexport;
39688     +         run;
39689     +       %end;
39690     +    %end;
39692     +    proc datasets lib=work nolist;
39693     +      delete sortedFine tempexport;
39694     +    run;
39695     +    quit;
39697     +%mend EM_GENERATE_EXPORTGROUP;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.binning_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.BINNING_SCORE.SOURCE.
39703     +%macro buildMetaCode(DeltaCodeFile=);
39705     +   /* set variable roles based on New Role column in the Results table */
39706     +   data _null_;
39707     +      file &DeltaCodeFile %if %length(%EM_BINARY_TARGET)=0 %then mod;;
39708     +      %let dsid = %sysfunc(open(&EM_USER_RESULTSTABLE));
39709     +      %if &dsid %then %do;
39710     +        %let obs = %sysfunc(fetch(&dsid));
39711     +        %let vnum = %sysfunc(VARNUM(&dsid, DISPLAY_VAR));
39712     +        %let rnum = %sysfunc(VARNUM(&dsid, _new_role_));
39713     +        %let ornum = %sysfunc(VARNUM(&dsid, _role_));
39715     +        %do %while(&obs=0);
39716     +          %let inputname = %sysfunc(getvarc(&dsid, &vnum));
39717     +          %let role      = %upcase(%sysfunc(getvarc(&dsid, &rnum)));
39718     +          %let oldrole   = %upcase(%sysfunc(getvarc(&dsid, &ornum)));
39720     +          /* retrieve grp and woe names from varmappings dataset */
39721     +          %let choice = _VARIABLE_ = "&inputname";
39722     +          %let cdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
39723     +          %let cobs = %sysfunc(fetchobs(&cdsid, 1));
39724     +          %let grpnum = %sysfunc(VARNUM(&cdsid, _GRP_VARIABLE_));
39725     +          %let grpname = %sysfunc(getvarc(&cdsid, &grpnum));
39726     +          %if &cdsid %then %let cdsid = %sysfunc(close(&cdsid));
39728     +          put "if name = '&inputname' then role='REJECTED';";
39729     +          %if "&role" ne "DEFAULT" %then %do;
39730     +            put "if name = '&grpname' then role='&role';";
39731     +          %end;
39732     +          %else %do;
39733     +            put "if name = '&grpname' then role='&oldrole';";
39734     +          %end;
39735     +          put "if name = '&grpname' then level='&EM_PROPERTY_GRPMSMNT';";
39737     +          %let obs = %sysfunc(fetch(&dsid));
39738     +        %end;
39739     +      %end;
39740     +      %if &dsid %then %let dsid = %sysfunc(close(&dsid));
39741     +   run;
39743     +   /* drop all vars in the splitvals dataset that aren't present in the varmappings dataset */
39744     +   data _null_;
39745     +      file &DeltaCodeFile MOD;
39747     +      %let sdsid = %sysfunc(open(&EM_USER_SPLITVALS));
39748     +      %if &sdsid %then %do;
39749     +        %let sobs = %sysfunc(fetch(&sdsid));
39750     +        %do %while(&sobs=0);
39751     +          %let varnum = %sysfunc(VARNUM(&sdsid, _VARIABLE_));
39752     +          %let checkname = %sysfunc(getvarc(&sdsid, &varnum));
39753     +          %let dispvarnum = %sysfunc(VARNUM(&sdsid, DISPLAY_VAR));
39754     +          %let displayvar = %sysfunc(getvarc(&sdsid, &dispvarnum));
39756     +          %let checkgrp = GRP_&checkname;
39757     +          %let lenname = %length(&checkgrp);
39758     +          %if %eval(&lenname-32) > 0 %then %do;
39759     +            %let checkgrp = %substr(&checkgrp, 1, 32);
39760     +          %end;
39762     +          %let choice = _VARIABLE_ ="&checkname";
39763     +          %let vdsid = %sysfunc(open(&EM_USER_VARMAPPINGS(where=(&choice))));
39765     +          /* if var not found in varmappings, delete variables; */
39766     +          /* this could happen when freeze=Y and vars in the frozen dataset aren't in the incoming training data */
39767     +          %if &vdsid eq 0 %then %do;
39768     +            put 'if name="&displayvar" then delete;';
39769     +            %let dispgrp = GRP_&displayvar;
39770     +            put 'if name="&dispgrp" then delete;';
39771     +          %end;
39773     +          %if &vdsid > 0 %then %let vdsid = %sysfunc(close(&vdsid));
39774     +          %let sobs = %sysfunc(fetch(&sdsid));
39775     +        %end;
39776     +      %end;
39777     +      %if &sdsid > 0 %then %let sdsid= %sysfunc(close(&sdsid));
39778     +   run;
39780     +%mend buildMetaCode;
39782     +%macro score;
39784     +   /* generate results table */
39785     +   %EM_GETNAME(key=COARSE, type=DATA);
39786     +   %EM_GETNAME(key=RESULTSTABLE, type=DATA);
39787     +   %EM_GETNAME(key=VARMAPPINGS, type=DATA);
39788     +   %EM_GETNAME(key=SPLITVALS, type=DATA);
39790     +   %EM_GENERATE_RESULTSTABLE(&EM_USER_COARSE, &EM_USER_RESULTSTABLE, &EM_USER_VARMAPPINGS);
39792     +   /* Generate Publish score code; same as flowscorecode */
39793     +   %EM_GETNAME(key=BINMAPPINGS, type=DATA);
39794     +   %buildScoreCode(&EM_FILE_EMFLOWSCORECODE, &EM_FILE_EMPUBLISHSCORECODE);
39796     +   filename deltaref "&EM_FILE_CDELTA_TRAIN";
39797     +   %buildMetaCode(DeltaCodeFile=deltaref);
39798     +   filename deltaref;
39800     +   /* generate results tables */
39801     +   %EM_REPORT(key=RESULTSTABLE, viewtype=DATA, block=MODEL, description=OUTPUTTABLE, autodisplay=Y);
39802     +   %EM_REPORT(key=RESULTSTABLE, viewtype=BAR, X=DISPLAY_VAR, Freq=_GINI_, TIPTEXT=_ROLE_, block=MODEL, description=STATPLOT, autodisplay=Y);
39804     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS5.BINNING_COARSE out=sortedcoarse nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 68 observations read from the data set EMWS5.BINNING_COARSE.
NOTE: 56 observations with duplicate key values were deleted.
NOTE: The data set WORK.SORTEDCOARSE has 12 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS5.BINNING_VARMAPPINGS nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS5.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS5.BINNING_RESULTSTABLE.
NOTE: The data set EMWS5.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS5.BINNING_RESULTSTABLE (Keep = display_var _gini_ _role_ _new_role_ procLevel);
MPRINT(EM_GENERATE_RESULTSTABLE):   merge sortedcoarse(in=_a) EMWS5.BINNING_VARMAPPINGS(rename=(_Variable_ = DISPLAY_VAR)) EMWS5.BINNING_RESULTSTABLE (keep = display_var _new_role_ ) ;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_var;
MPRINT(EM_GENERATE_RESULTSTABLE):   length _role_ _new_role_ $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   label display_var = "Variable" _gini_ = "Gini Statistic" _role_ = "Calculated Role" _new_role_ = "New Role" LEVEL = "Level" ;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _gini_ < 20.0 then _role_ = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   else _role_ = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   if ^_a then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = 0;
MPRINT(EM_GENERATE_RESULTSTABLE):   _role_ = 'Rejected';
MPRINT(EM_GENERATE_RESULTSTABLE):   if _new_role_ eq "" then _new_role_="Default";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable LEVEL is uninitialized.
NOTE: There were 12 observations read from the data set WORK.SORTEDCOARSE.
NOTE: There were 12 observations read from the data set EMWS5.BINNING_VARMAPPINGS.
NOTE: There were 12 observations read from the data set EMWS5.BINNING_RESULTSTABLE.
NOTE: The data set EMWS5.BINNING_RESULTSTABLE has 12 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS5.BINNING_VariableSet out=outlabel(keep=NAME LABEL LEVEL rename=(NAME=display_var LABEL=_label_));
MPRINT(EM_GENERATE_RESULTSTABLE):   by NAME;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 14 observations read from the data set EMWS5.BINNING_VARIABLESET.
NOTE: The data set WORK.OUTLABEL has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   set outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _label_ = '' then _label_ = _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Variable _variable_ is uninitialized.
NOTE: There were 14 observations read from the data set WORK.OUTLABEL.
NOTE: The data set WORK.OUTLABEL has 14 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS5.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   merge EMWS5.BINNING_RESULTSTABLE(in=_a_) outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   by display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   if _a_ then output;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

WARNING: Multiple lengths were specified for the BY variable display_Var by input data sets. This might cause unexpected results.
NOTE: There were 12 observations read from the data set EMWS5.BINNING_RESULTSTABLE.
NOTE: There were 14 observations read from the data set WORK.OUTLABEL.
NOTE: The data set EMWS5.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc datasets library=work nolist;
MPRINT(EM_GENERATE_RESULTSTABLE):   delete sortedcoarse outlabel;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: Deleting WORK.SORTEDCOARSE (memtype=DATA).
NOTE: Deleting WORK.OUTLABEL (memtype=DATA).
MPRINT(EM_GENERATE_RESULTSTABLE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc sort data=EMWS5.BINNING_RESULTSTABLE nodupkey;
MPRINT(EM_GENERATE_RESULTSTABLE):   by DESCENDING _gini_ display_Var;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS5.BINNING_RESULTSTABLE.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS5.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS5.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS5.BINNING_RESULTSTABLE;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering" LEVEL = "Level";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = _N_;
MPRINT(EM_GENERATE_RESULTSTABLE):   _gini_ = round(_GINI_, .001);
MPRINT(EM_GENERATE_RESULTSTABLE):   drop _variable_;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS5.BINNING_RESULTSTABLE.
NOTE: The data set EMWS5.BINNING_RESULTSTABLE has 12 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   proc print data=EMWS5.BINNING_RESULTSTABLE label;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 12 observations read from the data set EMWS5.BINNING_RESULTSTABLE.
NOTE: The PROCEDURE PRINT printed page 15.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_GENERATE_RESULTSTABLE):   data EMWS5.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   set EMWS5.BINNING_COARSE;
MPRINT(EM_GENERATE_RESULTSTABLE):   length role $10;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "acc_status" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 1;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "credit_history" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 2;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "savings" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 3;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "pourpose" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 4;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "duration" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 5;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Input";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "employment" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 6;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "age" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 7;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "other_instalments" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 8;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "personal_status" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 9;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "instalment" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 10;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "residence" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 11;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   if DISPLAY_VAR = "job" then do;
MPRINT(EM_GENERATE_RESULTSTABLE):   label giniOrder = "Gini Ordering";
MPRINT(EM_GENERATE_RESULTSTABLE):   giniOrder = 12;
MPRINT(EM_GENERATE_RESULTSTABLE):   role = "Rejected";
MPRINT(EM_GENERATE_RESULTSTABLE):   end;
MPRINT(EM_GENERATE_RESULTSTABLE):   run;

NOTE: There were 68 observations read from the data set EMWS5.BINNING_COARSE.
NOTE: The data set EMWS5.BINNING_COARSE has 68 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(BUILDSCORECODE):   filename x "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas";
MPRINT(BUILDSCORECODE):   proc sort data=EMWS5.BINNING_SPLITVALS;
MPRINT(BUILDSCORECODE):   by display_var _split_Value_;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS5.BINNING_BINMAPPINGS;
MPRINT(BUILDSCORECODE):   by display_var bin;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS5.BINNING_COARSE out=tempcoarse;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 68 observations read from the data set EMWS5.BINNING_COARSE.
NOTE: The data set WORK.TEMPCOARSE has 68 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge EMWS5.BINNING_SPLITVALS EMWS5.BINNING_BINMAPPINGS(rename=(BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) ne 'MISSING';
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 68 observations read from the data set EMWS5.BINNING_SPLITVALS.
NOTE: There were 8 observations read from the data set EMWS5.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP has 56 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge EMWS5.BINNING_SPLITVALS(rename=(_GROUP_=MISSGRP)) EMWS5.BINNING_BINMAPPINGS(rename=( BIN=_SPLIT_VALUE_ BIN_NAME=_VARIABLE_));
MPRINT(BUILDSCORECODE):   by display_var _Split_value_;
MPRINT(BUILDSCORECODE):   if upcase(_Split_value_) eq 'MISSING';
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 68 observations read from the data set EMWS5.BINNING_SPLITVALS.
NOTE: There were 8 observations read from the data set EMWS5.BINNING_BINMAPPINGS.
NOTE: The data set WORK.TEMP_MISSING has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp_missing;
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 12 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP_MISSING has 12 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp_missing;
MPRINT(BUILDSCORECODE):   merge temp_missing(in=_a) tempcoarse(rename=(_GROUP_=MISSGRP));
MPRINT(BUILDSCORECODE):   by display_var missgrp;
MPRINT(BUILDSCORECODE):   if ^_a then delete;
MPRINT(BUILDSCORECODE):   keep _variable_ display_var missgrp ;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 12 observations read from the data set WORK.TEMP_MISSING.
NOTE: There were 68 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP_MISSING has 12 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp temp_missing;
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if display_Var eq '' then delete;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 56 observations read from the data set WORK.TEMP.
NOTE: There were 12 observations read from the data set WORK.TEMP_MISSING.
NOTE: The data set WORK.TEMP has 56 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS5.BINNING_VARMAPPINGS out=tempmappings;
MPRINT(BUILDSCORECODE):   by _variable_;
MPRINT(BUILDSCORECODE):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 12 observations read from the data set EMWS5.BINNING_VARMAPPINGS.
NOTE: The data set WORK.TEMPMAPPINGS has 12 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=EMWS5.VarClus_CMeta_TRAIN out=tempcmeta;
MPRINT(BUILDSCORECODE):   by NAME;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 14 observations read from the data set EMWS5.VARCLUS_CMETA_TRAIN.
NOTE: The data set WORK.TEMPCMETA has 14 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 56 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 56 observations and 13 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempcoarse(keep=display_var _group_ role) ;
MPRINT(BUILDSCORECODE):   by display_var _group_;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 56 observations read from the data set WORK.TEMP.
NOTE: There were 68 observations read from the data set WORK.TEMPCOARSE.
NOTE: The data set WORK.TEMP has 68 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   data temp;
MPRINT(BUILDSCORECODE):   merge temp tempmappings(rename=(_variable_ = display_var)) tempcmeta(keep=NAME FORMAT TYPE LABEL rename=(NAME=display_var LABEL=origLabel));
MPRINT(BUILDSCORECODE):   by display_var;
MPRINT(BUILDSCORECODE):   if _group_ = . then delete;
MPRINT(BUILDSCORECODE):   if _variable_ = '' then delete;
MPRINT(BUILDSCORECODE):   run;

WARNING: Multiple lengths were specified for the BY variable DISPLAY_VAR by input data sets. This might cause unexpected results.
NOTE: There were 68 observations read from the data set WORK.TEMP.
NOTE: There were 12 observations read from the data set WORK.TEMPMAPPINGS.
NOTE: There were 14 observations read from the data set WORK.TEMPCMETA.
NOTE: The data set WORK.TEMP has 56 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   proc sort data=temp out=class;
MPRINT(BUILDSCORECODE):   by _variable_ _group_ LB;
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 56 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.CLASS has 56 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X;
MPRINT(BUILDSCORECODE):   put "length _UFormat200 $200;";
MPRINT(BUILDSCORECODE):   put "drop _UFormat200;";
MPRINT(BUILDSCORECODE):   put "_UFormat200='';";
MPRINT(BUILDSCORECODE):   run;

NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:35:59,
      Create Time=28 March 2021 17:59:02

NOTE: 3 records were written to the file X.
      The minimum record length was 15.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data class_nosv;
MPRINT(BUILDSCORECODE):   set class;
MPRINT(BUILDSCORECODE):   if upcase(role)="INPUT";
MPRINT(BUILDSCORECODE):   run;

NOTE: There were 56 observations read from the data set WORK.CLASS.
NOTE: The data set WORK.CLASS_NOSV has 28 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):   data _null_;
MPRINT(BUILDSCORECODE):   file X MOD;
MPRINT(BUILDSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDSCORECODE):   retain string flag endflag;
MPRINT(BUILDSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDSCORECODE):   by _variable_ _group_;
MPRINT(BUILDSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDSCORECODE):   if index gt 0 then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag = 0;
MPRINT(BUILDSCORECODE):   endflag = 1;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if LB ne . then do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   flag = 1;
MPRINT(BUILDSCORECODE):   string = "if";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._Group_ then do;
MPRINT(BUILDSCORECODE):   if UB ne . then do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag=1 then do;
MPRINT(BUILDSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDSCORECODE):   endflag = 0;
MPRINT(BUILDSCORECODE):   string="";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "end;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDSCORECODE):   if first._group_ then do;
MPRINT(BUILDSCORECODE):   flag=0;
MPRINT(BUILDSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   put ' ';
MPRINT(BUILDSCORECODE):   if format ne '' then do;
MPRINT(BUILDSCORECODE):   if first._variable_ then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if type = 'N' then do;
MPRINT(BUILDSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else if type='C' then do;
MPRINT(BUILDSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   length = klength(tempstring);
MPRINT(BUILDSCORECODE):   if length < 195 then do;
MPRINT(BUILDSCORECODE):   string = tempstring;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put 'else';
MPRINT(BUILDSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   else do;
MPRINT(BUILDSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._group_ then do;
MPRINT(BUILDSCORECODE):   string = strip(string);
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = ") then do;";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   if last._variable_ then do;
MPRINT(BUILDSCORECODE):   put "else do;";
MPRINT(BUILDSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDSCORECODE):   put string;
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   put "end;";
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   *end;
MPRINT(BUILDSCORECODE):   end;
MPRINT(BUILDSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      338:165   379:137   414:178   424:174   474:40    622:165   663:165   714:165   835:40    913:40    939:38    
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=62,
      Last Modified=28 March 2021 18:35:59,
      Create Time=28 March 2021 17:59:02

NOTE: 211 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 28 observations read from the data set WORK.CLASS_NOSV.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDSCORECODE):   filename Y "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMPUBLISHSCORE.sas";
MPRINT(APPENDFILES):   data _null_;
MPRINT(APPENDFILES):   length c $256;
MPRINT(APPENDFILES):   fid1=fopen("Y",'A');
MPRINT(APPENDFILES):   fid2=fopen("X",'I');
MPRINT(APPENDFILES):   cval = finfo(fid2,'lrecl');
MPRINT(APPENDFILES):   put cval= fid1= fid2=;
MPRINT(APPENDFILES):   if (fid2 > 0) then do while(fread(fid2)=0);
MPRINT(APPENDFILES):   rc = fget(fid2,c,256);
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   rc = fput(fid1,strip(c));
MPRINT(APPENDFILES):   rc = fwrite(fid1);
MPRINT(APPENDFILES):   end;
MPRINT(APPENDFILES):   _msg_=sysmsg();
MPRINT(APPENDFILES):   put _msg_=;
MPRINT(APPENDFILES):   rc = fclose(fid1);
MPRINT(APPENDFILES):   rc = fclose(fid2);
MPRINT(APPENDFILES):   run;

cval=32767 fid1=1 fid2=2
_msg_=WARNING: End of file.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(BUILDSCORECODE):   filename Y;
NOTE: Fileref Y has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("BINCODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "BINCODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
39805     +%macro delDir(folder=);
39806     +   %let filrf=mydir;
39807     +   %let rc=%sysfunc(filename(filrf,&folder));
39808     +   %let did=%sysfunc(dopen(&filrf));
39809     +
39810     +   %if &did %then %do;
39811     +       %let memcount=%sysfunc(dnum(&did));
39812     +       %if &memcount > 0 %then %do;
39813     +           %do i=1 %to &memcount;
39814     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
39815     +               data _null_;
39816     +                  fname="_temp&i";
39817     +                  rc=filename(fname,"&folder&em_dsep.&name");
39818     +                  if rc = 0 and fexist(fname) then
39819     +                     rc=fdelete(fname);
39820     +                  rc=filename(fname);
39821     +               run;
39822     +           %end;
39823     +       %end;
39824     +       %let rc=%sysfunc(dclose(&did));
39825     +   %end;
39826     +   %let rc = %sysfunc(fdelete(&filrf));
39827     +   %let rc=%sysfunc(filename(filrf));
39828     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(BUILDOPTSCORECODE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_acc_status.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp2";
MPRINT(DELDIR):   rc=filename(fname,"C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_credit_history.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp3";
MPRINT(DELDIR):   rc=filename(fname,"C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_duration.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp4";
MPRINT(DELDIR):   rc=filename(fname,"C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_pourpose.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp5";
MPRINT(DELDIR):   rc=filename(fname,"C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_savings.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp6";
MPRINT(DELDIR):   rc=filename(fname,"C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\_ALL_.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length rc $200;
MPRINT(BUILDOPTSCORECODE):   rc = dcreate('BINCODE', "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING");
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_duration.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="duration";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      176:165   228:137   268:178   280:174   340:165   532:165   582:165   642:165   794:40    882:40    914:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_duration.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 18:36:00

NOTE: 27 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='duration';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_acc_status.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="acc_status";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1078:165   1130:137   1170:178   1182:174   1242:165   1434:165   1484:165   1544:165   1696:40    1784:40    1816:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_acc_status.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 18:36:00

NOTE: 36 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 4 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='acc_status';
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_credit_history.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="credit_history";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1980:165   2032:137   2072:178   2084:174   2144:165   2336:165   2386:165   2446:165   2598:40    2686:40    2718:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_credit_history.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 18:36:00

NOTE: 41 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 5 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='credit_history';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_pourpose.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="pourpose";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2882:165   2934:137   2974:178   2986:174   3046:165   3238:165   3288:165   3348:165   3500:40    3588:40    3620:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_pourpose.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 18:36:00

NOTE: 66 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 10 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='pourpose';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_savings.sas" MOD;
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   length string $1024 flag endflag 8;
MPRINT(BUILDOPTSCORECODE):   retain string flag endflag;
MPRINT(BUILDOPTSCORECODE):   set class_nosv end=eof;
MPRINT(BUILDOPTSCORECODE):   where DISPLAY_VAR ="savings";
MPRINT(BUILDOPTSCORECODE):   by _variable_ _group_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   index = kindex(_variable_, "BIN_");
MPRINT(BUILDOPTSCORECODE):   if index gt 0 then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   string = "if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string = "else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag = 0;
MPRINT(BUILDOPTSCORECODE):   endflag = 1;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if LB ne . then do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(LB)!!" <= "!!strip(DISPLAY_VAR);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   flag = 1;
MPRINT(BUILDOPTSCORECODE):   string = "if";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._Group_ then do;
MPRINT(BUILDOPTSCORECODE):   if UB ne . then do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" AND "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if "!!strip(DISPLAY_VAR)!!" < "!!strip(UB)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag=1 then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(DISPLAY_VAR) ;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!'='!!strip(_split_Value_)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   endflag=0;
MPRINT(BUILDOPTSCORECODE):   string="";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string)!!" then do;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   if endflag eq 1 then do;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "end;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   _split_value_ = tranwrd(_split_value_,"'","''");
MPRINT(BUILDOPTSCORECODE):   if first._group_ then do;
MPRINT(BUILDOPTSCORECODE):   flag=0;
MPRINT(BUILDOPTSCORECODE):   if ^first._variable_ then put 'else';
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   string= "* Variable: "!!strip(DISPLAY_VAR)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "*------------------------------------------------------------*;";
MPRINT(BUILDOPTSCORECODE):   if origLabel ne "" then do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = ';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = tranwrd(origLabel,"'","''");
MPRINT(BUILDOPTSCORECODE):   string = "'Grouped: "!!strip(substr(string, 1,188))!!"';";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = 'LABEL '!!strip(_grp_variable_)!!' = "Grouped: '!!strip(DISPLAY_VAR)!!'";';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   put ' ';
MPRINT(BUILDOPTSCORECODE):   if format ne '' then do;
MPRINT(BUILDOPTSCORECODE):   if first._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = put("!!strip(DISPLAY_VAR)!!","!!strip(format)!!");";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if type = 'N' then do;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING("!!strip(DISPLAY_VAR)!!") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else if type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "_UFormat200 = "||strip(DISPLAY_VAR)||";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string ="if MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   string="else if NOT MISSING(_UFormat200) then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = '%dmnormip(_UFormat200);';
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   if flag ne 1 then do;
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR _UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   tempstring = strip(string)!!" OR "!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   length = length(tempstring);
MPRINT(BUILDOPTSCORECODE):   if length < 195 then do;
MPRINT(BUILDOPTSCORECODE):   string = tempstring;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put 'else';
MPRINT(BUILDOPTSCORECODE):   if format ne '' OR type='C' then do;
MPRINT(BUILDOPTSCORECODE):   string = "if (_UFormat200 eq '"!!strip(_split_value_)!!"'";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   else do;
MPRINT(BUILDOPTSCORECODE):   string = "if ("!!strip(DISPLAY_VAR)!!" eq "!!strip(_split_value_);
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._group_ then do;
MPRINT(BUILDOPTSCORECODE):   string = strip(string);
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = ") then do;";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(_GROUP_)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   if last._variable_ then do;
MPRINT(BUILDOPTSCORECODE):   put "else do;";
MPRINT(BUILDOPTSCORECODE):   string = strip(_grp_variable_)!!" = "!!strip(MISSGRP)!!";";
MPRINT(BUILDOPTSCORECODE):   put string;
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   put "end;";
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   end;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3784:165   3836:137   3876:178   3888:174   3948:165   4140:165   4190:165   4250:165   4402:40    4490:40    4522:38    
NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\GRP_savings.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 18:36:00

NOTE: 41 records were written to the file _F1.
      The minimum record length was 1.
      The maximum record length was 63.
NOTE: There were 5 observations read from the data set WORK.CLASS_NOSV.
      WHERE DISPLAY_VAR='savings';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1 "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   data _null_;
MPRINT(BUILDOPTSCORECODE):   file _F1;
MPRINT(BUILDOPTSCORECODE):   put "length _UFormat200 $200;";
MPRINT(BUILDOPTSCORECODE):   put "drop _UFormat200;";
MPRINT(BUILDOPTSCORECODE):   put "_UFormat200='';";
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\BINCODE\_ALL_.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 18:36:00

NOTE: 3 records were written to the file _F1.
      The minimum record length was 15.
      The maximum record length was 24.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "BINNING_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDOPTSCORECODE):  ;
MPRINT(BUILDOPTSCORECODE):   proc datasets lib=EMWS5 nolist;
MPRINT(BUILDOPTSCORECODE):   delete BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: Deleting EMWS5.BINNING_EMSCOREVAR (memtype=DATA).
MPRINT(BUILDOPTSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

did= 1
MPRINT(BUILDOPTSCORECODE):   data EMWS5.BINNING_EMSCOREVAR;
MPRINT(BUILDOPTSCORECODE):   length Name $32 formula $70 file $200;
MPRINT(BUILDOPTSCORECODE):   keep NAME Formula file;
MPRINT(BUILDOPTSCORECODE):   formula = '';
MPRINT(BUILDOPTSCORECODE):   name='';
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\_ALL_.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_acc_status";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_acc_status.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_credit_history";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_credit_history.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_duration";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_duration.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_pourpose";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_pourpose.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   name = "GRP_savings";
MPRINT(BUILDOPTSCORECODE):   file="BINCODE\GRP_savings.sas";
MPRINT(BUILDOPTSCORECODE):   output;
MPRINT(BUILDOPTSCORECODE):   run;

NOTE: The data set EMWS5.BINNING_EMSCOREVAR has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(BUILDSCORECODE):  ;
MPRINT(BUILDSCORECODE):   proc datasets library=work nolist;
MPRINT(BUILDSCORECODE):   delete class class_nosv temp temp_missing tempmappings tempcmeta;
MPRINT(BUILDSCORECODE):   run;

NOTE: Deleting WORK.CLASS (memtype=DATA).
NOTE: Deleting WORK.CLASS_NOSV (memtype=DATA).
NOTE: Deleting WORK.TEMP (memtype=DATA).
NOTE: Deleting WORK.TEMP_MISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPMAPPINGS (memtype=DATA).
NOTE: Deleting WORK.TEMPCMETA (memtype=DATA).
MPRINT(BUILDSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\CDELTA_TRAIN.sas";
MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file
MPRINT(BUILDMETACODE):   deltaref;
MPRINT(BUILDMETACODE):   put "if name = 'acc_status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_acc_status' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_acc_status' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'credit_history' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_credit_history' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_credit_history' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'savings' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_savings' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_savings' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'pourpose' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_pourpose' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_pourpose' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'duration' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_duration' then role='INPUT';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_duration' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'employment' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_employment' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_employment' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'age' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_age' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_age' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'other_instalments' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_other_instalments' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_other_instalments' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'personal_status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_personal_status' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_personal_status' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'instalment' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_instalment' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_instalment' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'residence' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_residence' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_residence' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   put "if name = 'job' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_job' then role='REJECTED';";
MPRINT(BUILDMETACODE):   put "if name = 'GRP_job' then level='ORDINAL';";
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 17:55:15

NOTE: 36 records were written to the file DELTAREF.
      The minimum record length was 37.
      The maximum record length was 55.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

MPRINT(BUILDMETACODE):   data _null_;
MPRINT(BUILDMETACODE):   file deltaref MOD;
MPRINT(BUILDMETACODE):   run;

NOTE: The file DELTAREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1719,
      Last Modified=28 March 2021 18:36:00,
      Create Time=28 March 2021 17:55:15

NOTE: 0 records were written to the file DELTAREF.
NOTE: DATA statement used (Total process time):
      real time           0.66 seconds
      cpu time            0.20 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename deltaref;
NOTE: Fileref DELTAREF has been deassigned.
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "OUTPUTTABLE";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.09559289137627;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "RESULTSTABLE";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "STATPLOT";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "DISPLAY_VAR";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_GINI_";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "_ROLE_";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.81195411542987;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: BINNING;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39829      *------------------------------------------------------------*;
39830      * End SCORE: BINNING;
39831      *------------------------------------------------------------*;
39832      

39833      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39834      *------------------------------------------------------------*;
39835      * BINNING: Scoring DATA data;
39836      *------------------------------------------------------------*;
39837      data EMWS5.BINNING_TRAIN
39838      / view=EMWS5.BINNING_TRAIN
39839      ;
MPRINT(EM_DIAGRAM):   data EMWS5.BINNING_TRAIN / view=EMWS5.BINNING_TRAIN ;
39840      set EMWS5.VarClus_TRAIN
39841      ;
MPRINT(EM_DIAGRAM):   set EMWS5.VarClus_TRAIN ;
39842      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas.
39843     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
39844     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
39845     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
39846     +
39847     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39848     +* Variable: duration;
MPRINT(EM_DIAGRAM):   * Variable: duration;
39849     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39850     +LABEL GRP_duration =
39851     +'Grouped: duration';
MPRINT(EM_DIAGRAM):   LABEL GRP_duration = 'Grouped: duration';
39852     +
39853     +if MISSING(duration) then do;
MPRINT(EM_DIAGRAM):   if MISSING(duration) then do;
39854     +GRP_duration = 1;
MPRINT(EM_DIAGRAM):   GRP_duration = 1;
39855     +end;
MPRINT(EM_DIAGRAM):   end;
39856     +else if NOT MISSING(duration) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(duration) then do;
39857     +if duration < 12 then do;
MPRINT(EM_DIAGRAM):   if duration < 12 then do;
39858     +GRP_duration = 2;
MPRINT(EM_DIAGRAM):   GRP_duration = 2;
39859     +end;
MPRINT(EM_DIAGRAM):   end;
39860     +else
39861     +if 12 <= duration AND duration < 18 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= duration AND duration < 18 then do;
39862     +GRP_duration = 3;
MPRINT(EM_DIAGRAM):   GRP_duration = 3;
39863     +end;
MPRINT(EM_DIAGRAM):   end;
39864     +else
39865     +if 18 <= duration AND duration < 24 then do;
MPRINT(EM_DIAGRAM):   else if 18 <= duration AND duration < 24 then do;
39866     +GRP_duration = 4;
MPRINT(EM_DIAGRAM):   GRP_duration = 4;
39867     +end;
MPRINT(EM_DIAGRAM):   end;
39868     +else
39869     +if 24 <= duration then do;
MPRINT(EM_DIAGRAM):   else if 24 <= duration then do;
39870     +GRP_duration = 5;
MPRINT(EM_DIAGRAM):   GRP_duration = 5;
39871     +end;
MPRINT(EM_DIAGRAM):   end;
39872     +end;
MPRINT(EM_DIAGRAM):   end;
39873     +
39874     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39875     +* Variable: acc_status;
MPRINT(EM_DIAGRAM):   * Variable: acc_status;
39876     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39877     +LABEL GRP_acc_status =
39878     +'Grouped: acc_status';
MPRINT(EM_DIAGRAM):   LABEL GRP_acc_status = 'Grouped: acc_status';
39879     +
39880     +_UFormat200 = put(acc_status,$3.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(acc_status,$3.);
39881     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
39882     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
39883     +GRP_acc_status = 1;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 1;
39884     +end;
MPRINT(EM_DIAGRAM):   end;
39885     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
39886     +if (_UFormat200 eq 'A14'
39887     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A14' ) then do;
39888     +GRP_acc_status = 2;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 2;
39889     +end;
MPRINT(EM_DIAGRAM):   end;
39890     +else
39891     +if (_UFormat200 eq 'A12'
39892     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A12' ) then do;
39893     +GRP_acc_status = 3;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 3;
39894     +end;
MPRINT(EM_DIAGRAM):   end;
39895     +else
39896     +if (_UFormat200 eq 'A11'
39897     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A11' ) then do;
39898     +GRP_acc_status = 4;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 4;
39899     +end;
MPRINT(EM_DIAGRAM):   end;
39900     +else
39901     +if (_UFormat200 eq 'A13'
39902     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A13' ) then do;
39903     +GRP_acc_status = 5;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 5;
39904     +end;
MPRINT(EM_DIAGRAM):   end;
39905     +else do;
MPRINT(EM_DIAGRAM):   else do;
39906     +GRP_acc_status = 1;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 1;
39907     +end;
MPRINT(EM_DIAGRAM):   end;
39908     +end;
MPRINT(EM_DIAGRAM):   end;
39909     +
39910     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39911     +* Variable: credit_history;
MPRINT(EM_DIAGRAM):   * Variable: credit_history;
39912     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39913     +LABEL GRP_credit_history =
39914     +'Grouped: credit_history';
MPRINT(EM_DIAGRAM):   LABEL GRP_credit_history = 'Grouped: credit_history';
39915     +
39916     +_UFormat200 = put(credit_history,$3.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(credit_history,$3.);
39917     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
39918     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
39919     +GRP_credit_history = 1;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 1;
39920     +end;
MPRINT(EM_DIAGRAM):   end;
39921     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
39922     +if (_UFormat200 eq 'A32'
39923     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A32' ) then do;
39924     +GRP_credit_history = 2;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 2;
39925     +end;
MPRINT(EM_DIAGRAM):   end;
39926     +else
39927     +if (_UFormat200 eq 'A34'
39928     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A34' ) then do;
39929     +GRP_credit_history = 3;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 3;
39930     +end;
MPRINT(EM_DIAGRAM):   end;
39931     +else
39932     +if (_UFormat200 eq 'A33'
39933     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A33' ) then do;
39934     +GRP_credit_history = 4;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 4;
39935     +end;
MPRINT(EM_DIAGRAM):   end;
39936     +else
39937     +if (_UFormat200 eq 'A31'
39938     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A31' ) then do;
39939     +GRP_credit_history = 5;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 5;
39940     +end;
MPRINT(EM_DIAGRAM):   end;
39941     +else
39942     +if (_UFormat200 eq 'A30'
39943     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A30' ) then do;
39944     +GRP_credit_history = 6;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 6;
39945     +end;
MPRINT(EM_DIAGRAM):   end;
39946     +else do;
MPRINT(EM_DIAGRAM):   else do;
39947     +GRP_credit_history = 1;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 1;
39948     +end;
MPRINT(EM_DIAGRAM):   end;
39949     +end;
MPRINT(EM_DIAGRAM):   end;
39950     +
39951     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39952     +* Variable: pourpose;
MPRINT(EM_DIAGRAM):   * Variable: pourpose;
39953     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
39954     +LABEL GRP_pourpose =
39955     +'Grouped: pourpose';
MPRINT(EM_DIAGRAM):   LABEL GRP_pourpose = 'Grouped: pourpose';
39956     +
39957     +_UFormat200 = put(pourpose,$4.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(pourpose,$4.);
39958     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
39959     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
39960     +GRP_pourpose = 1;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 1;
39961     +end;
MPRINT(EM_DIAGRAM):   end;
39962     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
39963     +if (_UFormat200 eq 'A43'
39964     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A43' ) then do;
39965     +GRP_pourpose = 2;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 2;
39966     +end;
MPRINT(EM_DIAGRAM):   end;
39967     +else
39968     +if (_UFormat200 eq 'A40'
39969     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A40' ) then do;
39970     +GRP_pourpose = 3;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 3;
39971     +end;
MPRINT(EM_DIAGRAM):   end;
39972     +else
39973     +if (_UFormat200 eq 'A42'
39974     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A42' ) then do;
39975     +GRP_pourpose = 4;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 4;
39976     +end;
MPRINT(EM_DIAGRAM):   end;
39977     +else
39978     +if (_UFormat200 eq 'A49'
39979     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A49' ) then do;
39980     +GRP_pourpose = 5;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 5;
39981     +end;
MPRINT(EM_DIAGRAM):   end;
39982     +else
39983     +if (_UFormat200 eq 'A41'
39984     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A41' ) then do;
39985     +GRP_pourpose = 6;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 6;
39986     +end;
MPRINT(EM_DIAGRAM):   end;
39987     +else
39988     +if (_UFormat200 eq 'A46'
39989     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A46' ) then do;
39990     +GRP_pourpose = 7;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 7;
39991     +end;
MPRINT(EM_DIAGRAM):   end;
39992     +else
39993     +if (_UFormat200 eq 'A45'
39994     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A45' ) then do;
39995     +GRP_pourpose = 8;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 8;
39996     +end;
MPRINT(EM_DIAGRAM):   end;
39997     +else
39998     +if (_UFormat200 eq 'A44'
39999     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A44' ) then do;
40000     +GRP_pourpose = 9;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 9;
40001     +end;
MPRINT(EM_DIAGRAM):   end;
40002     +else
40003     +if (_UFormat200 eq 'A410'
40004     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A410' ) then do;
40005     +GRP_pourpose = 10;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 10;
40006     +end;
MPRINT(EM_DIAGRAM):   end;
40007     +else
40008     +if (_UFormat200 eq 'A48'
40009     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A48' ) then do;
40010     +GRP_pourpose = 11;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 11;
40011     +end;
MPRINT(EM_DIAGRAM):   end;
40012     +else do;
MPRINT(EM_DIAGRAM):   else do;
40013     +GRP_pourpose = 1;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 1;
40014     +end;
MPRINT(EM_DIAGRAM):   end;
40015     +end;
MPRINT(EM_DIAGRAM):   end;
40016     +
40017     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40018     +* Variable: savings;
MPRINT(EM_DIAGRAM):   * Variable: savings;
40019     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40020     +LABEL GRP_savings =
40021     +'Grouped: savings';
MPRINT(EM_DIAGRAM):   LABEL GRP_savings = 'Grouped: savings';
40022     +
40023     +_UFormat200 = put(savings,$3.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(savings,$3.);
40024     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
40025     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
40026     +GRP_savings = 1;
MPRINT(EM_DIAGRAM):   GRP_savings = 1;
40027     +end;
MPRINT(EM_DIAGRAM):   end;
40028     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
40029     +if (_UFormat200 eq 'A61'
40030     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A61' ) then do;
40031     +GRP_savings = 2;
MPRINT(EM_DIAGRAM):   GRP_savings = 2;
40032     +end;
MPRINT(EM_DIAGRAM):   end;
40033     +else
40034     +if (_UFormat200 eq 'A65'
40035     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A65' ) then do;
40036     +GRP_savings = 3;
MPRINT(EM_DIAGRAM):   GRP_savings = 3;
40037     +end;
MPRINT(EM_DIAGRAM):   end;
40038     +else
40039     +if (_UFormat200 eq 'A62'
40040     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A62' ) then do;
40041     +GRP_savings = 4;
MPRINT(EM_DIAGRAM):   GRP_savings = 4;
40042     +end;
MPRINT(EM_DIAGRAM):   end;
40043     +else
40044     +if (_UFormat200 eq 'A63'
40045     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A63' ) then do;
40046     +GRP_savings = 5;
MPRINT(EM_DIAGRAM):   GRP_savings = 5;
40047     +end;
MPRINT(EM_DIAGRAM):   end;
40048     +else
40049     +if (_UFormat200 eq 'A64'
40050     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A64' ) then do;
40051     +GRP_savings = 6;
MPRINT(EM_DIAGRAM):   GRP_savings = 6;
40052     +end;
MPRINT(EM_DIAGRAM):   end;
40053     +else do;
MPRINT(EM_DIAGRAM):   else do;
40054     +GRP_savings = 1;
MPRINT(EM_DIAGRAM):   GRP_savings = 1;
40055     +end;
MPRINT(EM_DIAGRAM):   end;
40056     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
40057      run;

NOTE: DATA STEP view saved on file EMWS5.BINNING_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
40058      quit;
40059      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
40060      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40061      *------------------------------------------------------------*;
40062      * BINNING: Scoring TEST data;
40063      *------------------------------------------------------------*;
40064      data EMWS5.BINNING_TEST
40065      / view=EMWS5.BINNING_TEST
40066      ;
MPRINT(EM_DIAGRAM):   data EMWS5.BINNING_TEST / view=EMWS5.BINNING_TEST ;
40067      set EMWS5.VarClus_TEST
40068      ;
MPRINT(EM_DIAGRAM):   set EMWS5.VarClus_TEST ;
40069      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\EMFLOWSCORE.sas.
40070     +length _UFormat200 $200;
MPRINT(EM_DIAGRAM):   length _UFormat200 $200;
40071     +drop _UFormat200;
MPRINT(EM_DIAGRAM):   drop _UFormat200;
40072     +_UFormat200='';
MPRINT(EM_DIAGRAM):   _UFormat200='';
40073     +
40074     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40075     +* Variable: duration;
MPRINT(EM_DIAGRAM):   * Variable: duration;
40076     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40077     +LABEL GRP_duration =
40078     +'Grouped: duration';
MPRINT(EM_DIAGRAM):   LABEL GRP_duration = 'Grouped: duration';
40079     +
40080     +if MISSING(duration) then do;
MPRINT(EM_DIAGRAM):   if MISSING(duration) then do;
40081     +GRP_duration = 1;
MPRINT(EM_DIAGRAM):   GRP_duration = 1;
40082     +end;
MPRINT(EM_DIAGRAM):   end;
40083     +else if NOT MISSING(duration) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(duration) then do;
40084     +if duration < 12 then do;
MPRINT(EM_DIAGRAM):   if duration < 12 then do;
40085     +GRP_duration = 2;
MPRINT(EM_DIAGRAM):   GRP_duration = 2;
40086     +end;
MPRINT(EM_DIAGRAM):   end;
40087     +else
40088     +if 12 <= duration AND duration < 18 then do;
MPRINT(EM_DIAGRAM):   else if 12 <= duration AND duration < 18 then do;
40089     +GRP_duration = 3;
MPRINT(EM_DIAGRAM):   GRP_duration = 3;
40090     +end;
MPRINT(EM_DIAGRAM):   end;
40091     +else
40092     +if 18 <= duration AND duration < 24 then do;
MPRINT(EM_DIAGRAM):   else if 18 <= duration AND duration < 24 then do;
40093     +GRP_duration = 4;
MPRINT(EM_DIAGRAM):   GRP_duration = 4;
40094     +end;
MPRINT(EM_DIAGRAM):   end;
40095     +else
40096     +if 24 <= duration then do;
MPRINT(EM_DIAGRAM):   else if 24 <= duration then do;
40097     +GRP_duration = 5;
MPRINT(EM_DIAGRAM):   GRP_duration = 5;
40098     +end;
MPRINT(EM_DIAGRAM):   end;
40099     +end;
MPRINT(EM_DIAGRAM):   end;
40100     +
40101     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40102     +* Variable: acc_status;
MPRINT(EM_DIAGRAM):   * Variable: acc_status;
40103     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40104     +LABEL GRP_acc_status =
40105     +'Grouped: acc_status';
MPRINT(EM_DIAGRAM):   LABEL GRP_acc_status = 'Grouped: acc_status';
40106     +
40107     +_UFormat200 = put(acc_status,$3.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(acc_status,$3.);
40108     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
40109     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
40110     +GRP_acc_status = 1;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 1;
40111     +end;
MPRINT(EM_DIAGRAM):   end;
40112     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
40113     +if (_UFormat200 eq 'A14'
40114     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A14' ) then do;
40115     +GRP_acc_status = 2;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 2;
40116     +end;
MPRINT(EM_DIAGRAM):   end;
40117     +else
40118     +if (_UFormat200 eq 'A12'
40119     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A12' ) then do;
40120     +GRP_acc_status = 3;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 3;
40121     +end;
MPRINT(EM_DIAGRAM):   end;
40122     +else
40123     +if (_UFormat200 eq 'A11'
40124     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A11' ) then do;
40125     +GRP_acc_status = 4;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 4;
40126     +end;
MPRINT(EM_DIAGRAM):   end;
40127     +else
40128     +if (_UFormat200 eq 'A13'
40129     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A13' ) then do;
40130     +GRP_acc_status = 5;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 5;
40131     +end;
MPRINT(EM_DIAGRAM):   end;
40132     +else do;
MPRINT(EM_DIAGRAM):   else do;
40133     +GRP_acc_status = 1;
MPRINT(EM_DIAGRAM):   GRP_acc_status = 1;
40134     +end;
MPRINT(EM_DIAGRAM):   end;
40135     +end;
MPRINT(EM_DIAGRAM):   end;
40136     +
40137     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40138     +* Variable: credit_history;
MPRINT(EM_DIAGRAM):   * Variable: credit_history;
40139     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40140     +LABEL GRP_credit_history =
40141     +'Grouped: credit_history';
MPRINT(EM_DIAGRAM):   LABEL GRP_credit_history = 'Grouped: credit_history';
40142     +
40143     +_UFormat200 = put(credit_history,$3.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(credit_history,$3.);
40144     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
40145     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
40146     +GRP_credit_history = 1;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 1;
40147     +end;
MPRINT(EM_DIAGRAM):   end;
40148     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
40149     +if (_UFormat200 eq 'A32'
40150     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A32' ) then do;
40151     +GRP_credit_history = 2;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 2;
40152     +end;
MPRINT(EM_DIAGRAM):   end;
40153     +else
40154     +if (_UFormat200 eq 'A34'
40155     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A34' ) then do;
40156     +GRP_credit_history = 3;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 3;
40157     +end;
MPRINT(EM_DIAGRAM):   end;
40158     +else
40159     +if (_UFormat200 eq 'A33'
40160     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A33' ) then do;
40161     +GRP_credit_history = 4;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 4;
40162     +end;
MPRINT(EM_DIAGRAM):   end;
40163     +else
40164     +if (_UFormat200 eq 'A31'
40165     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A31' ) then do;
40166     +GRP_credit_history = 5;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 5;
40167     +end;
MPRINT(EM_DIAGRAM):   end;
40168     +else
40169     +if (_UFormat200 eq 'A30'
40170     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A30' ) then do;
40171     +GRP_credit_history = 6;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 6;
40172     +end;
MPRINT(EM_DIAGRAM):   end;
40173     +else do;
MPRINT(EM_DIAGRAM):   else do;
40174     +GRP_credit_history = 1;
MPRINT(EM_DIAGRAM):   GRP_credit_history = 1;
40175     +end;
MPRINT(EM_DIAGRAM):   end;
40176     +end;
MPRINT(EM_DIAGRAM):   end;
40177     +
40178     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40179     +* Variable: pourpose;
MPRINT(EM_DIAGRAM):   * Variable: pourpose;
40180     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40181     +LABEL GRP_pourpose =
40182     +'Grouped: pourpose';
MPRINT(EM_DIAGRAM):   LABEL GRP_pourpose = 'Grouped: pourpose';
40183     +
40184     +_UFormat200 = put(pourpose,$4.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(pourpose,$4.);
40185     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
40186     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
40187     +GRP_pourpose = 1;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 1;
40188     +end;
MPRINT(EM_DIAGRAM):   end;
40189     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
40190     +if (_UFormat200 eq 'A43'
40191     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A43' ) then do;
40192     +GRP_pourpose = 2;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 2;
40193     +end;
MPRINT(EM_DIAGRAM):   end;
40194     +else
40195     +if (_UFormat200 eq 'A40'
40196     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A40' ) then do;
40197     +GRP_pourpose = 3;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 3;
40198     +end;
MPRINT(EM_DIAGRAM):   end;
40199     +else
40200     +if (_UFormat200 eq 'A42'
40201     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A42' ) then do;
40202     +GRP_pourpose = 4;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 4;
40203     +end;
MPRINT(EM_DIAGRAM):   end;
40204     +else
40205     +if (_UFormat200 eq 'A49'
40206     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A49' ) then do;
40207     +GRP_pourpose = 5;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 5;
40208     +end;
MPRINT(EM_DIAGRAM):   end;
40209     +else
40210     +if (_UFormat200 eq 'A41'
40211     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A41' ) then do;
40212     +GRP_pourpose = 6;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 6;
40213     +end;
MPRINT(EM_DIAGRAM):   end;
40214     +else
40215     +if (_UFormat200 eq 'A46'
40216     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A46' ) then do;
40217     +GRP_pourpose = 7;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 7;
40218     +end;
MPRINT(EM_DIAGRAM):   end;
40219     +else
40220     +if (_UFormat200 eq 'A45'
40221     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A45' ) then do;
40222     +GRP_pourpose = 8;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 8;
40223     +end;
MPRINT(EM_DIAGRAM):   end;
40224     +else
40225     +if (_UFormat200 eq 'A44'
40226     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A44' ) then do;
40227     +GRP_pourpose = 9;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 9;
40228     +end;
MPRINT(EM_DIAGRAM):   end;
40229     +else
40230     +if (_UFormat200 eq 'A410'
40231     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A410' ) then do;
40232     +GRP_pourpose = 10;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 10;
40233     +end;
MPRINT(EM_DIAGRAM):   end;
40234     +else
40235     +if (_UFormat200 eq 'A48'
40236     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A48' ) then do;
40237     +GRP_pourpose = 11;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 11;
40238     +end;
MPRINT(EM_DIAGRAM):   end;
40239     +else do;
MPRINT(EM_DIAGRAM):   else do;
40240     +GRP_pourpose = 1;
MPRINT(EM_DIAGRAM):   GRP_pourpose = 1;
40241     +end;
MPRINT(EM_DIAGRAM):   end;
40242     +end;
MPRINT(EM_DIAGRAM):   end;
40243     +
40244     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40245     +* Variable: savings;
MPRINT(EM_DIAGRAM):   * Variable: savings;
40246     +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
40247     +LABEL GRP_savings =
40248     +'Grouped: savings';
MPRINT(EM_DIAGRAM):   LABEL GRP_savings = 'Grouped: savings';
40249     +
40250     +_UFormat200 = put(savings,$3.);
MPRINT(EM_DIAGRAM):   _UFormat200 = put(savings,$3.);
40251     +%dmnormip(_UFormat200);
MPRINT(DMNORMIP):   call dmnorm(_UFormat200,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
40252     +if MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   if MISSING(_UFormat200) then do;
40253     +GRP_savings = 1;
MPRINT(EM_DIAGRAM):   GRP_savings = 1;
40254     +end;
MPRINT(EM_DIAGRAM):   end;
40255     +else if NOT MISSING(_UFormat200) then do;
MPRINT(EM_DIAGRAM):   else if NOT MISSING(_UFormat200) then do;
40256     +if (_UFormat200 eq 'A61'
40257     +) then do;
MPRINT(EM_DIAGRAM):   if (_UFormat200 eq 'A61' ) then do;
40258     +GRP_savings = 2;
MPRINT(EM_DIAGRAM):   GRP_savings = 2;
40259     +end;
MPRINT(EM_DIAGRAM):   end;
40260     +else
40261     +if (_UFormat200 eq 'A65'
40262     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A65' ) then do;
40263     +GRP_savings = 3;
MPRINT(EM_DIAGRAM):   GRP_savings = 3;
40264     +end;
MPRINT(EM_DIAGRAM):   end;
40265     +else
40266     +if (_UFormat200 eq 'A62'
40267     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A62' ) then do;
40268     +GRP_savings = 4;
MPRINT(EM_DIAGRAM):   GRP_savings = 4;
40269     +end;
MPRINT(EM_DIAGRAM):   end;
40270     +else
40271     +if (_UFormat200 eq 'A63'
40272     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A63' ) then do;
40273     +GRP_savings = 5;
MPRINT(EM_DIAGRAM):   GRP_savings = 5;
40274     +end;
MPRINT(EM_DIAGRAM):   end;
40275     +else
40276     +if (_UFormat200 eq 'A64'
40277     +) then do;
MPRINT(EM_DIAGRAM):   else if (_UFormat200 eq 'A64' ) then do;
40278     +GRP_savings = 6;
MPRINT(EM_DIAGRAM):   GRP_savings = 6;
40279     +end;
MPRINT(EM_DIAGRAM):   end;
40280     +else do;
MPRINT(EM_DIAGRAM):   else do;
40281     +GRP_savings = 1;
MPRINT(EM_DIAGRAM):   GRP_savings = 1;
40282     +end;
MPRINT(EM_DIAGRAM):   end;
40283     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
40284      run;

NOTE: DATA STEP view saved on file EMWS5.BINNING_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
40285      quit;
40286      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
40288      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
40289      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
40290      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

40291      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
40292      * BINNING: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * BINNING: Computing metadata for TRAIN data;
40293      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS5.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS5\BINNING\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.BINNING_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.BINNING_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.BINNING_TRAIN out=WORK.M1CSV480 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1CSV480;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1CSV480(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1CSV480;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1CSV480;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1KBS6EU NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M09KVO33(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   set WORK.M1KBS6EU;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.VarClus_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.VarClus_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.BINNING_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "BINNING";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * BINNING: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = 'acc_status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_acc_status' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_acc_status' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'credit_history' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_credit_history' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_credit_history' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'savings' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_savings' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_savings' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'pourpose' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_pourpose' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_pourpose' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'duration' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_duration' then role='INPUT';
MPRINT(EM_DIAGRAM):   if name = 'GRP_duration' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'employment' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_employment' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_employment' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'age' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_age' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_age' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'other_instalments' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_other_instalments' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_other_instalments' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'personal_status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_personal_status' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_personal_status' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'instalment' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_instalment' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_instalment' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'residence' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_residence' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_residence' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   if name = 'job' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_job' then role='REJECTED';
MPRINT(EM_DIAGRAM):   if name = 'GRP_job' then level='ORDINAL';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS5.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS5.BINNING_TEST.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.11 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
