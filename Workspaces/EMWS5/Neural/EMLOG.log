*------------------------------------------------------------*
User:                Jose Caloca
Date:                28 March 2021
Time:                18:36:09
Site:                70115216
Platform:            X64_10PRO
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:04" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28 March 2021
Time:                18:36:04
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O17WAW4P "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O17WAW4P new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:04" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
The SAS System
 
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:04" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
47198      proc freq data=EMWS5.Neural_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS5.Neural_VariableSet noprint;
47199      table ROLE*LEVEL/out=WORK.NeuralMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.NeuralMETA;
47200      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS5.NEURAL_VARIABLESET.
NOTE: The data set WORK.NEURALMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.06 seconds
      cpu time            0.00 seconds
 
 
47201      proc print data=WORK.NeuralMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.NeuralMETA label noobs;
47202      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
47203      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
47204      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47205      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
47206      run;
 
NOTE: There were 4 observations read from the data set WORK.NEURALMETA.
NOTE: The PROCEDURE PRINT printed page 16.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47207      title10;
MPRINT(EM_DIAGRAM):   title10;
47208      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS5.BINNING_TRAIN EMWS5.BINNING_TRAIN
EMWS5.BINNING_TRAIN EMWS5.BINNING_TRAIN EMWS5 BINNING_TRAIN
EMWS5.BINNING_TRAIN EMWS5.BINNING_TRAIN
EMWS5.BINNING_TRAIN EMWS5.BINNING_TRAIN EMWS5 BINNING_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS5.BINNING_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class default(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="default";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=default));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="default";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Ids_default_DD out=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by default;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by default;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
47237      data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Neural_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
47238      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
47239      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
47240         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
47241      set EMWS5.IDS_DEFAULT_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS5.IDS_DEFAULT_DM( where=(_TYPE_="TARGET"));
47242      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
47243      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
47244      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
47245      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
47246      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
47247      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
47248      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
47249      end;
MPRINT(EM_DIAGRAM):   end;
47250      output;
MPRINT(EM_DIAGRAM):   output;
47251      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.IDS_DEFAULT_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.NEURAL_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47252      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47253      proc print data=WORK.Neural_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Neural_EVENT noobs label;
47254      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
47255      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47256      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
47257      run;
 
NOTE: There were 1 observations read from the data set WORK.NEURAL_EVENT.
NOTE: The PROCEDURE PRINT printed page 17.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47258      title10;
MPRINT(EM_DIAGRAM):   title10;
47259      proc print data = EMWS5.Ids_default_DD noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS5.Ids_default_DD noobs label;
47260      var default
47261      TRAINPRIOR
47262      DECISION1
47263      DECISION2
47264      ;
MPRINT(EM_DIAGRAM):   var default TRAINPRIOR DECISION1 DECISION2 ;
47265      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47266      title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   title10 "Decision Matrix";
MPRINT(EM_DIAGRAM):   run;
47267      run;
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_DEFAULT_DD.
NOTE: The PROCEDURE PRINT printed page 18.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47268      title10;
MPRINT(EM_DIAGRAM):   title10;
47269      proc print data = EMWS5.Ids_default_DM noobs label;
MPRINT(EM_DIAGRAM):   proc print data = EMWS5.Ids_default_DM noobs label;
47270      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
47271      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
47272      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
47273      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
47274      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
47275      run;
 
NOTE: There were 11 observations read from the data set EMWS5.IDS_DEFAULT_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 19.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
47276      title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Preparing metadata for training;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.M1VU79AD;
MPRINT(EM_DIAGRAM):   set WORK.M1VU79AD;
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   if (role = 'REJECTED') then role = 'INPUT';
MPRINT(EM_DIAGRAM):   run;
47286      data WORK.M1VU79AD;
MPRINT(EM_DIAGRAM):    data WORK.M1VU79AD;
47287      set WORK.M1VU79AD end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M1VU79AD end=eof;
47288      output;
MPRINT(EM_DIAGRAM):   output;
47289      if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
47290      NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
47291      ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
47292      LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
47293      TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
47294      output;
MPRINT(EM_DIAGRAM):   output;
47295      end;
MPRINT(EM_DIAGRAM):   end;
47296      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 6 observations read from the data set WORK.M1VU79AD.
NOTE: The data set WORK.M1VU79AD has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS5.IDS_DEFAULT_DD.
NOTE: The data set WORK.DEFAULT has 2 observations and 7 variables.
NOTE: There were 2 observations read from the data set EMWS5.IDS_DEFAULT_DD.
NOTE: The data set WORK.DEFAULT has 2 observations and 7 variables.
47297      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47298      * Neural: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Neural: Create decision matrix;
47299      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47300      data WORK.default;
MPRINT(EM_DIAGRAM):   data WORK.default;
47301        length   default                          $  32
47302                 COUNT                                8
47303                 DATAPRIOR                            8
47304                 TRAINPRIOR                           8
47305                 DECPRIOR                             8
47306                 DECISION1                            8
47307                 DECISION2                            8
47308                 ;
MPRINT(EM_DIAGRAM):   length default $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
47309
47310        label    COUNT="Level Counts"
47311                 DATAPRIOR="Data Proportions"
47312                 TRAINPRIOR="Training Proportions"
47313                 DECPRIOR="Decision Priors"
47314                 DECISION1="1"
47315                 DECISION2="0"
47316                 ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
47317        format   COUNT 10.
47318                 ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
47319      default="1"; COUNT=300; DATAPRIOR=0.3; TRAINPRIOR=0.3; DECPRIOR=0; DECISION1=0; DECISION2=5;
MPRINT(EM_DIAGRAM):   default="1";
MPRINT(EM_DIAGRAM):   COUNT=300;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.3;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.3;
MPRINT(EM_DIAGRAM):   DECPRIOR=0;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=5;
47320      output;
MPRINT(EM_DIAGRAM):   output;
47321      default="0"; COUNT=700; DATAPRIOR=0.7; TRAINPRIOR=0.7; DECPRIOR=0; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   default="0";
MPRINT(EM_DIAGRAM):   COUNT=700;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.7;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.7;
MPRINT(EM_DIAGRAM):   DECPRIOR=0;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
47322      output;
MPRINT(EM_DIAGRAM):   output;
47323      ;
MPRINT(EM_DIAGRAM):   ;
47324      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEFAULT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47325      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
47326      modify default(type=LOSS label=default);
MPRINT(EM_DIAGRAM):   modify default(type=LOSS label= default);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
47327      label DECISION1= '1';
47328      label DECISION2= '0';
47329      run;
 
NOTE: MODIFY was successful for WORK.DEFAULT.DATA.
47330      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
47331      data EM_Neural;
MPRINT(EM_DIAGRAM):   data EM_Neural;
47332      set EMWS5.BINNING_TRAIN(keep=
47333      GRP_acc_status GRP_credit_history GRP_duration GRP_pourpose GRP_savings
47334      default );
MPRINT(EM_DIAGRAM):   set EMWS5.BINNING_TRAIN(keep= GRP_acc_status GRP_credit_history GRP_duration GRP_pourpose GRP_savings default );
47335      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: View EMWS5.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: The data set WORK.EM_NEURAL has 700 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47336      *------------------------------------------------------------* ;
47337      * Neural: DMDBClass Macro ;
47338      *------------------------------------------------------------* ;
47339      %macro DMDBClass;
47340          GRP_acc_status(ASC) GRP_credit_history(ASC) GRP_duration(ASC)
47341         GRP_pourpose(ASC) GRP_savings(ASC) default(DESC)
47342      %mend DMDBClass;
47343      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47344      * Neural: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Neural: DMDBVar Macro ;
47345      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47346      %macro DMDBVar;
47347
47348      %mend DMDBVar;
47349      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47350      * Neural: Create DMDB;
MPRINT(EM_DIAGRAM):   * Neural: Create DMDB;
47351      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47352      proc dmdb batch data=WORK.EM_Neural
47353      dmdbcat=WORK.Neural_DMDB
47354      maxlevel = 513
47355      ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Neural dmdbcat=WORK.Neural_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
47356      class %DMDBClass;
MPRINT(DMDBCLASS):   GRP_acc_status(ASC) GRP_credit_history(ASC) GRP_duration(ASC) GRP_pourpose(ASC) GRP_savings(ASC) default(DESC)
MPRINT(EM_DIAGRAM):  ;
47357      var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(EM_DIAGRAM):  ;
47358      target
47359      default
47360      ;
MPRINT(EM_DIAGRAM):   target default ;
47361      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 700   Memory used = 511K.
NOTE: There were 700 observations read from the data set WORK.EM_NEURAL.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
47362      quit;
47363      *--- end code ---*;
 
47364      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
47365      * Neural: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Interval Input Variables Macro ;
47366      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47367      %macro INTINPUTS;
47368
47369      %mend INTINPUTS;
47370      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47371      * Neural: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Binary Inputs Macro ;
47372      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47373      %macro BININPUTS;
47374
47375      %mend BININPUTS;
47376      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47377      * Neural: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Nominal Inputs Macro ;
47378      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47379      %macro NOMINPUTS;
47380
47381      %mend NOMINPUTS;
47382      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47383      * Neural: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Neural: Ordinal Inputs Macro ;
47384      *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
47385      %macro ORDINPUTS;
47386          GRP_acc_status GRP_credit_history GRP_duration GRP_pourpose GRP_savings
47387      %mend ORDINPUTS;
47388      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47389      * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
47390      ;
MPRINT(EM_DIAGRAM):   ;
47391      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47392      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
47393      random=12345
47394      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB random=12345 ;
47395      nloptions
47396      ;
MPRINT(EM_DIAGRAM):   nloptions ;
47397      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
47398      decision decdata=WORK.default
47399      decvars=
47400      DECISION1
47401      DECISION2
47402      ;
MPRINT(EM_DIAGRAM):   decision decdata=WORK.default decvars= DECISION1 DECISION2 ;
47403      netopts
47404      decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
MPRINT(EM_DIAGRAM):   input
47405      input %ORDINPUTS / level=ordinal id=ord
MPRINT(ORDINPUTS):   GRP_acc_status GRP_credit_history GRP_duration GRP_pourpose GRP_savings
47406      ;
MPRINT(EM_DIAGRAM):   / level=ordinal id=ord ;
47407      target default / level=NOMINAL id=default
47408      bias
47409      ;
MPRINT(EM_DIAGRAM):   target default / level=NOMINAL id=default bias ;
47410      arch MLP
47411      Hidden=3
47412      ;
MPRINT(EM_DIAGRAM):   arch MLP Hidden=3 ;
47413      Prelim 5 preiter=10
47414      pretime=3600
47415      Outest=EMWS5.Neural_PRELIM_OUTEST
47416      ;
MPRINT(EM_DIAGRAM):   Prelim 5 preiter=10 pretime=3600 Outest=EMWS5.Neural_PRELIM_OUTEST ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: The data set EMWS5.NEURAL_PRELIM_OUTEST has 11 observations and 87 variables.
47417      save network=EMWS5.Neural_NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=EMWS5.Neural_NETWORK.dm_neural;
NOTE: Entry EMWS5.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS5.NEURAL_NETWORK.DM_NEURAL has been closed.
47418      train Maxiter=50
47419      maxtime=14400
47420      Outest=EMWS5.Neural_outest estiter=1
47421      Outfit=EMWS5.Neural_OUTFIT
47422      ;
MPRINT(EM_DIAGRAM):   train Maxiter=50 maxtime=14400 Outest=EMWS5.Neural_outest estiter=1 Outfit=EMWS5.Neural_OUTFIT ;
WARNING: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 50 iterations or 2147483647 function calls.
NOTE: Some of the active constraints have significant Lagrange Multipliers.
NOTE: The data set EMWS5.NEURAL_OUTEST has 129 observations and 87 variables.
NOTE: The data set EMWS5.NEURAL_OUTFIT has 104 observations and 25 variables.
47423      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 700 observations and 6 variables.
NOTE: The data set WORK.DEFAULT has 2 observations and 7 variables.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed pages 20-23.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.90 seconds
      cpu time            0.85 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47424      quit;
 
47425      proc sort data=EMWS5.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Neural_OUTFIT(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Neural;
47426      by _ALOSS_;
MPRINT(EM_DIAGRAM):   by _ALOSS_;
47427      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS5.NEURAL_OUTFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_NEURAL has 52 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47428      %GLOBAL ITER;
47429      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
47430      set fit_Neural(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Neural(obs=1);
47431      call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
47432      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_NEURAL.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47433      data EMWS5.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_INITIAL;
47434      set EMWS5.Neural_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_outest(where=(_ITER_ eq 20 and _OBJ_ ne .));
47435      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_OUTEST.
      WHERE (_ITER_=20) and (_OBJ_ not = .);
NOTE: The data set EMWS5.NEURAL_INITIAL has 1 observations and 87 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47436      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47437      * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
47438      ;
MPRINT(EM_DIAGRAM):   ;
47439      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47440      proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB
47441      network = EMWS5.Neural_NETWORK.dm_neural
47442      random=12345
47443      ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Neural dmdbcat=WORK.Neural_DMDB network = EMWS5.Neural_NETWORK.dm_neural random=12345 ;
NOTE: Entry EMWS5.NEURAL_NETWORK.DM_NEURAL has been opened.
NOTE: Entry EMWS5.NEURAL_NETWORK.DM_NEURAL has been closed.
47444      nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
47445      performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
47446      decision decdata=WORK.default
47447      decvars=
47448      DECISION1
47449      DECISION2
47450      ;
MPRINT(EM_DIAGRAM):   decision decdata=WORK.default decvars= DECISION1 DECISION2 ;
47451      initial inest=EMWS5.Neural_INITIAL;
MPRINT(EM_DIAGRAM):   initial inest=EMWS5.Neural_INITIAL;
NOTE: The data set EMWS5.NEURAL_INITIAL has 1 observations and 87 variables.
47452      train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
47453      code file="C:\Jose\DM_ang\Workspaces\EMWS5\Neural\SCORECODE.sas"
47454      group=Neural
47455      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS5\Neural\SCORECODE.sas" group=Neural ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS5\Neural\SCORECODE.sas opened.
47456      ;
MPRINT(EM_DIAGRAM):   ;
47457      code file="C:\Jose\DM_ang\Workspaces\EMWS5\Neural\RESIDUALSCORECODE.sas"
47458      group=Neural
47459      residual
47460      ;
MPRINT(EM_DIAGRAM):   code file="C:\Jose\DM_ang\Workspaces\EMWS5\Neural\RESIDUALSCORECODE.sas" group=Neural residual ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS5\Neural\RESIDUALSCORECODE.sas opened.
47461      ;
MPRINT(EM_DIAGRAM):   ;
47462      score data=EMWS5.BINNING_TRAIN out=_NULL_
NOTE: View EMWS5.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
47463      outfit=WORK.FIT1
47464      role=TRAIN
47465      outkey=EMWS5.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS5.BINNING_TRAIN out=_NULL_ outfit=WORK.FIT1 role=TRAIN outkey=EMWS5.Neural_OUTKEY;
NOTE: The data set EMWS5.NEURAL_OUTKEY has 42 observations and 8 variables.
NOTE: The data set EMWS5.BINNING_TRAIN has . observations and 29 variables.
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: The data set WORK.FIT1 has 2 observations and 25 variables.
47466      score data=EMWS5.BINNING_TEST out=_NULL_
NOTE: View EMWS5.BINNING_TEST.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
47467      outfit=WORK.FIT2
47468      role=TEST
47469      outkey=EMWS5.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   score data=EMWS5.BINNING_TEST out=_NULL_ outfit=WORK.FIT2 role=TEST outkey=EMWS5.Neural_OUTKEY;
NOTE: The data set EMWS5.NEURAL_OUTKEY has 42 observations and 8 variables.
NOTE: The data set EMWS5.BINNING_TEST has . observations and 29 variables.
NOTE: There were 300 observations read from the data set EMWS5.PART_TEST.
NOTE: There were 300 observations read from the data set EMWS5.VARSEL_TEST.
NOTE: There were 300 observations read from the data set EMWS5.VARCLUS_TEST.
NOTE: The data set WORK.FIT2 has 2 observations and 19 variables.
47470      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_NEURAL has 700 observations and 6 variables.
NOTE: The data set WORK.DEFAULT has 2 observations and 7 variables.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.24 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47471      quit;
47472      data EMWS5.Neural_OUTFIT;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_OUTFIT;
47473      merge WORK.FIT1 WORK.FIT2;
MPRINT(EM_DIAGRAM):   merge WORK.FIT1 WORK.FIT2;
47474      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.FIT1.
NOTE: There were 2 observations read from the data set WORK.FIT2.
NOTE: The data set EMWS5.NEURAL_OUTFIT has 2 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
47475      data EMWS5.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_EMESTIMATE;
47476      set EMWS5.Neural_outest;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_outest;
47477      if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
47478      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 129 observations read from the data set EMWS5.NEURAL_OUTEST.
NOTE: The data set EMWS5.NEURAL_EMESTIMATE has 52 observations and 87 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
47479      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
47480      delete EM_Neural;
MPRINT(EM_DIAGRAM):   delete EM_Neural;
47481      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_NEURAL (memtype=DATA).
47482      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47483      data EMWS5.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_PLOTDS(where=(_iter_ ne . and _NAME_="OVERALL"));
47484      set fit_Neural;
MPRINT(EM_DIAGRAM):   set fit_Neural;
47485      attrib _ITER_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_trainiterations_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _ITER_ label="Training Iterations";
47486      attrib _NAME_ label="%sysfunc(sasmsg(sashelp.dmine, rpt_varsel_label_name  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   attrib _NAME_ label="Name";
47487      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set WORK.FIT_NEURAL.
NOTE: The data set EMWS5.NEURAL_PLOTDS has 52 observations and 25 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47488      proc sort data=EMWS5.Neural_PLOTDS;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Neural_PLOTDS;
47489      by _ITER_;
MPRINT(EM_DIAGRAM):   by _ITER_;
47490      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS5.NEURAL_PLOTDS.
NOTE: The data set EMWS5.NEURAL_PLOTDS has 52 observations and 25 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47491      data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 20) );
MPRINT(EM_DIAGRAM):    data tempweight (drop= _tech_ _decay_ _seed_ _nobj_ _obj_ _objerr_ _averr_ _p_num_ where=(_type_ eq "PARMS" and _iter_ eq 20) );
47492      set EMWS5.Neural_EMESTIMATE;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMESTIMATE;
47493      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 52 observations read from the data set EMWS5.NEURAL_EMESTIMATE.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 79 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47494      proc sort;
MPRINT(EM_DIAGRAM):   proc sort;
47495      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
47496      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set WORK.TEMPWEIGHT has 1 observations and 79 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
47497      proc transpose data=tempweight out=EMWS5.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   proc transpose data=tempweight out=EMWS5.Neural_WEIGHTDS;
47498      by _name_;
MPRINT(EM_DIAGRAM):   by _name_;
47499      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.TEMPWEIGHT.
NOTE: The data set EMWS5.NEURAL_WEIGHTDS has 77 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
47500      data EMWS5.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_WEIGHTDS;
47501      set EMWS5.Neural_WEIGHTDS;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_WEIGHTDS;
47502      FROM = trim(left(scan(_LABEL_, 1, '->')));
MPRINT(EM_DIAGRAM):   FROM = trim(left(scan(_LABEL_, 1, '->')));
47503      TO = trim(left(scan(_LABEL_, 2, '>')));
MPRINT(EM_DIAGRAM):   TO = trim(left(scan(_LABEL_, 2, '>')));
47504      WEIGHT = COL1;
MPRINT(EM_DIAGRAM):   WEIGHT = COL1;
47505      if (TO eq '') or (FROM eq '') then delete;
MPRINT(EM_DIAGRAM):   if (TO eq '') or (FROM eq '') then delete;
47506      label _LABEL_ ="%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel  , NOQUOTE))" FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel  , NOQUOTE))" TO = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel  , NOQUOTE))" WEIGHT =
47507         "%sysfunc(sasmsg(sashelp.dmine, rpt_weight_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _LABEL_ = "Label" FROM = "From" TO = "Into" WEIGHT = "Weight";
47508      keep FROM TO WEIGHT _LABEL_;
MPRINT(EM_DIAGRAM):   keep FROM TO WEIGHT _LABEL_;
47509      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 77 observations read from the data set EMWS5.NEURAL_WEIGHTDS.
NOTE: The data set EMWS5.NEURAL_WEIGHTDS has 76 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47510      proc sort data=EMWS5.Neural_WEIGHTDS nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Neural_WEIGHTDS nodupkey;
47511      by _LABEL_;
MPRINT(EM_DIAGRAM):   by _LABEL_;
47512      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 76 observations read from the data set EMWS5.NEURAL_WEIGHTDS.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS5.NEURAL_WEIGHTDS has 76 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:06" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28 March 2021
Time:                18:36:06
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O02JXNHM "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O02JXNHM new;
MPRINT(EM_DIAGRAM):   run;
47614      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
47615      set EMWS5.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_OUTKEY;
47616      if upcase(ROLE) in('HIDDEN', 'STANDARD');
MPRINT(EM_DIAGRAM):   if upcase(ROLE) in('HIDDEN', 'STANDARD');
47617      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 42 observations read from the data set EMWS5.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
47618      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47619      *------------------------------------------------------------*;
47620      * Neural: Scoring DATA data;
47621      *------------------------------------------------------------*;
47622      data EMWS5.Neural_TRAIN
47623      / view=EMWS5.Neural_TRAIN
47624      ;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_TRAIN / view=EMWS5.Neural_TRAIN ;
47625      set EMWS5.BINNING_TRAIN
47626      ;
MPRINT(EM_DIAGRAM):   set EMWS5.BINNING_TRAIN ;
47627      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMFLOWSCORE.sas.
47628     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
47629     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
47630     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
47631     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
47632     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
47633     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
47634     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
47635     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
47636     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
47637     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
47638     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
47639     +LENGTH _WARN_ $4
47640     +      F_default  $ 12
47641     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_default $ 12 ;
47642     +      label GRP_acc_status2 = 'Dummy: GRP_acc_status=2' ;
MPRINT(EM_DIAGRAM):   label GRP_acc_status2 = 'Dummy: GRP_acc_status=2' ;
47643     +
47644     +      label GRP_acc_status3 = 'Dummy: GRP_acc_status=3' ;
MPRINT(EM_DIAGRAM):   label GRP_acc_status3 = 'Dummy: GRP_acc_status=3' ;
47645     +
47646     +      label GRP_acc_status4 = 'Dummy: GRP_acc_status=4' ;
MPRINT(EM_DIAGRAM):   label GRP_acc_status4 = 'Dummy: GRP_acc_status=4' ;
47647     +
47648     +      label GRP_credit_history2 = 'Dummy: GRP_credit_history=2' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history2 = 'Dummy: GRP_credit_history=2' ;
47649     +
47650     +      label GRP_credit_history3 = 'Dummy: GRP_credit_history=3' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history3 = 'Dummy: GRP_credit_history=3' ;
47651     +
47652     +      label GRP_credit_history4 = 'Dummy: GRP_credit_history=4' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history4 = 'Dummy: GRP_credit_history=4' ;
47653     +
47654     +      label GRP_credit_history5 = 'Dummy: GRP_credit_history=5' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history5 = 'Dummy: GRP_credit_history=5' ;
47655     +
47656     +      label GRP_duration2 = 'Dummy: GRP_duration=2' ;
MPRINT(EM_DIAGRAM):   label GRP_duration2 = 'Dummy: GRP_duration=2' ;
47657     +
47658     +      label GRP_duration3 = 'Dummy: GRP_duration=3' ;
MPRINT(EM_DIAGRAM):   label GRP_duration3 = 'Dummy: GRP_duration=3' ;
47659     +
47660     +      label GRP_duration4 = 'Dummy: GRP_duration=4' ;
MPRINT(EM_DIAGRAM):   label GRP_duration4 = 'Dummy: GRP_duration=4' ;
47661     +
47662     +      label GRP_pourpose2 = 'Dummy: GRP_pourpose=2' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose2 = 'Dummy: GRP_pourpose=2' ;
47663     +
47664     +      label GRP_pourpose3 = 'Dummy: GRP_pourpose=3' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose3 = 'Dummy: GRP_pourpose=3' ;
47665     +
47666     +      label GRP_pourpose4 = 'Dummy: GRP_pourpose=4' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose4 = 'Dummy: GRP_pourpose=4' ;
47667     +
47668     +      label GRP_pourpose5 = 'Dummy: GRP_pourpose=5' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose5 = 'Dummy: GRP_pourpose=5' ;
47669     +
47670     +      label GRP_pourpose6 = 'Dummy: GRP_pourpose=6' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose6 = 'Dummy: GRP_pourpose=6' ;
47671     +
47672     +      label GRP_pourpose7 = 'Dummy: GRP_pourpose=7' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose7 = 'Dummy: GRP_pourpose=7' ;
47673     +
47674     +      label GRP_pourpose8 = 'Dummy: GRP_pourpose=8' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose8 = 'Dummy: GRP_pourpose=8' ;
47675     +
47676     +      label GRP_pourpose9 = 'Dummy: GRP_pourpose=9' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose9 = 'Dummy: GRP_pourpose=9' ;
47677     +
47678     +      label GRP_pourpose10 = 'Dummy: GRP_pourpose=10' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose10 = 'Dummy: GRP_pourpose=10' ;
47679     +
47680     +      label GRP_savings2 = 'Dummy: GRP_savings=2' ;
MPRINT(EM_DIAGRAM):   label GRP_savings2 = 'Dummy: GRP_savings=2' ;
47681     +
47682     +      label GRP_savings3 = 'Dummy: GRP_savings=3' ;
MPRINT(EM_DIAGRAM):   label GRP_savings3 = 'Dummy: GRP_savings=3' ;
47683     +
47684     +      label GRP_savings4 = 'Dummy: GRP_savings=4' ;
MPRINT(EM_DIAGRAM):   label GRP_savings4 = 'Dummy: GRP_savings=4' ;
47685     +
47686     +      label GRP_savings5 = 'Dummy: GRP_savings=5' ;
MPRINT(EM_DIAGRAM):   label GRP_savings5 = 'Dummy: GRP_savings=5' ;
47687     +
47688     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
47689     +
47690     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
47691     +
47692     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
47693     +
47694     +      label I_default = 'Into: default' ;
MPRINT(EM_DIAGRAM):   label I_default = 'Into: default' ;
47695     +
47696     +      label F_default = 'From: default' ;
MPRINT(EM_DIAGRAM):   label F_default = 'From: default' ;
47697     +
47698     +      label U_default = 'Unnormalized Into: default' ;
MPRINT(EM_DIAGRAM):   label U_default = 'Unnormalized Into: default' ;
47699     +
47700     +      label P_default1 = 'Predicted: default=1' ;
MPRINT(EM_DIAGRAM):   label P_default1 = 'Predicted: default=1' ;
47701     +
47702     +      label R_default1 = 'Residual: default=1' ;
MPRINT(EM_DIAGRAM):   label R_default1 = 'Residual: default=1' ;
47703     +
47704     +      label P_default0 = 'Predicted: default=0' ;
MPRINT(EM_DIAGRAM):   label P_default0 = 'Predicted: default=0' ;
47705     +
47706     +      label R_default0 = 'Residual: default=0' ;
MPRINT(EM_DIAGRAM):   label R_default0 = 'Residual: default=0' ;
47707     +
47708     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
47709     +
47710     +*** Generate dummy variables for GRP_acc_status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_acc_status ;
47711     +drop GRP_acc_status2 GRP_acc_status3 GRP_acc_status4 ;
MPRINT(EM_DIAGRAM):   drop GRP_acc_status2 GRP_acc_status3 GRP_acc_status4 ;
47712     +if missing( GRP_acc_status ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_acc_status ) then do;
47713     +   GRP_acc_status2 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = .;
47714     +   GRP_acc_status3 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = .;
47715     +   GRP_acc_status4 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = .;
47716     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
47717     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47718     +end;
MPRINT(EM_DIAGRAM):   end;
47719     +else do;
MPRINT(EM_DIAGRAM):   else do;
47720     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
47721     +   _dm12 = put( GRP_acc_status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_acc_status , BEST12. );
47722     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
47723     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
47724     +      GRP_acc_status2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = -0.63245553203367;
47725     +      GRP_acc_status3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = -0.63245553203367;
47726     +      GRP_acc_status4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = -0.63245553203367;
47727     +   end;
MPRINT(EM_DIAGRAM):   end;
47728     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
47729     +      GRP_acc_status2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = 0.63245553203367;
47730     +      GRP_acc_status3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = -0.63245553203367;
47731     +      GRP_acc_status4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = -0.63245553203367;
47732     +   end;
MPRINT(EM_DIAGRAM):   end;
47733     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
47734     +      GRP_acc_status2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = 0.63245553203367;
47735     +      GRP_acc_status3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = 0.63245553203367;
47736     +      GRP_acc_status4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = -0.63245553203367;
47737     +   end;
MPRINT(EM_DIAGRAM):   end;
47738     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
47739     +      GRP_acc_status2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = 0.63245553203367;
47740     +      GRP_acc_status3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = 0.63245553203367;
47741     +      GRP_acc_status4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = 0.63245553203367;
47742     +   end;
MPRINT(EM_DIAGRAM):   end;
47743     +   else do;
MPRINT(EM_DIAGRAM):   else do;
47744     +      GRP_acc_status2 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = .;
47745     +      GRP_acc_status3 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = .;
47746     +      GRP_acc_status4 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = .;
47747     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
47748     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47749     +   end;
MPRINT(EM_DIAGRAM):   end;
47750     +end;
MPRINT(EM_DIAGRAM):   end;
47751     +
47752     +*** Generate dummy variables for GRP_credit_history ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_credit_history ;
47753     +drop GRP_credit_history2 GRP_credit_history3 GRP_credit_history4
47754     +        GRP_credit_history5 ;
MPRINT(EM_DIAGRAM):   drop GRP_credit_history2 GRP_credit_history3 GRP_credit_history4 GRP_credit_history5 ;
47755     +if missing( GRP_credit_history ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_credit_history ) then do;
47756     +   GRP_credit_history2 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = .;
47757     +   GRP_credit_history3 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = .;
47758     +   GRP_credit_history4 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = .;
47759     +   GRP_credit_history5 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = .;
47760     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
47761     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47762     +end;
MPRINT(EM_DIAGRAM):   end;
47763     +else do;
MPRINT(EM_DIAGRAM):   else do;
47764     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
47765     +   _dm12 = put( GRP_credit_history , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_credit_history , BEST12. );
47766     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
47767     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
47768     +      GRP_credit_history2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = -0.55901699437494;
47769     +      GRP_credit_history3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = -0.55901699437494;
47770     +      GRP_credit_history4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = -0.55901699437494;
47771     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
47772     +   end;
MPRINT(EM_DIAGRAM):   end;
47773     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
47774     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
47775     +      GRP_credit_history3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = -0.55901699437494;
47776     +      GRP_credit_history4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = -0.55901699437494;
47777     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
47778     +   end;
MPRINT(EM_DIAGRAM):   end;
47779     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
47780     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
47781     +      GRP_credit_history3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = 0.55901699437494;
47782     +      GRP_credit_history4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = -0.55901699437494;
47783     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
47784     +   end;
MPRINT(EM_DIAGRAM):   end;
47785     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
47786     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
47787     +      GRP_credit_history3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = 0.55901699437494;
47788     +      GRP_credit_history4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = 0.55901699437494;
47789     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
47790     +   end;
MPRINT(EM_DIAGRAM):   end;
47791     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
47792     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
47793     +      GRP_credit_history3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = 0.55901699437494;
47794     +      GRP_credit_history4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = 0.55901699437494;
47795     +      GRP_credit_history5 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = 0.55901699437494;
47796     +   end;
MPRINT(EM_DIAGRAM):   end;
47797     +   else do;
MPRINT(EM_DIAGRAM):   else do;
47798     +      GRP_credit_history2 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = .;
47799     +      GRP_credit_history3 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = .;
47800     +      GRP_credit_history4 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = .;
47801     +      GRP_credit_history5 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = .;
47802     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
47803     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47804     +   end;
MPRINT(EM_DIAGRAM):   end;
47805     +end;
MPRINT(EM_DIAGRAM):   end;
47806     +
47807     +*** Generate dummy variables for GRP_duration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_duration ;
47808     +drop GRP_duration2 GRP_duration3 GRP_duration4 ;
MPRINT(EM_DIAGRAM):   drop GRP_duration2 GRP_duration3 GRP_duration4 ;
47809     +if missing( GRP_duration ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_duration ) then do;
47810     +   GRP_duration2 = .;
MPRINT(EM_DIAGRAM):   GRP_duration2 = .;
47811     +   GRP_duration3 = .;
MPRINT(EM_DIAGRAM):   GRP_duration3 = .;
47812     +   GRP_duration4 = .;
MPRINT(EM_DIAGRAM):   GRP_duration4 = .;
47813     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
47814     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47815     +end;
MPRINT(EM_DIAGRAM):   end;
47816     +else do;
MPRINT(EM_DIAGRAM):   else do;
47817     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
47818     +   _dm12 = put( GRP_duration , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_duration , BEST12. );
47819     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
47820     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
47821     +      GRP_duration2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = 0.63245553203367;
47822     +      GRP_duration3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = 0.63245553203367;
47823     +      GRP_duration4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = 0.63245553203367;
47824     +   end;
MPRINT(EM_DIAGRAM):   end;
47825     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
47826     +      GRP_duration2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = 0.63245553203367;
47827     +      GRP_duration3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = -0.63245553203367;
47828     +      GRP_duration4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = -0.63245553203367;
47829     +   end;
MPRINT(EM_DIAGRAM):   end;
47830     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
47831     +      GRP_duration2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = -0.63245553203367;
47832     +      GRP_duration3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = -0.63245553203367;
47833     +      GRP_duration4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = -0.63245553203367;
47834     +   end;
MPRINT(EM_DIAGRAM):   end;
47835     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
47836     +      GRP_duration2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = 0.63245553203367;
47837     +      GRP_duration3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = 0.63245553203367;
47838     +      GRP_duration4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = -0.63245553203367;
47839     +   end;
MPRINT(EM_DIAGRAM):   end;
47840     +   else do;
MPRINT(EM_DIAGRAM):   else do;
47841     +      GRP_duration2 = .;
MPRINT(EM_DIAGRAM):   GRP_duration2 = .;
47842     +      GRP_duration3 = .;
MPRINT(EM_DIAGRAM):   GRP_duration3 = .;
47843     +      GRP_duration4 = .;
MPRINT(EM_DIAGRAM):   GRP_duration4 = .;
47844     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
47845     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47846     +   end;
MPRINT(EM_DIAGRAM):   end;
47847     +end;
MPRINT(EM_DIAGRAM):   end;
47848     +
47849     +*** Generate dummy variables for GRP_pourpose ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_pourpose ;
47850     +drop GRP_pourpose2 GRP_pourpose3 GRP_pourpose4 GRP_pourpose5 GRP_pourpose6
47851     +        GRP_pourpose7 GRP_pourpose8 GRP_pourpose9 GRP_pourpose10 ;
MPRINT(EM_DIAGRAM):   drop GRP_pourpose2 GRP_pourpose3 GRP_pourpose4 GRP_pourpose5 GRP_pourpose6 GRP_pourpose7 GRP_pourpose8 GRP_pourpose9 GRP_pourpose10 ;
47852     +if missing( GRP_pourpose ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_pourpose ) then do;
47853     +   GRP_pourpose2 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = .;
47854     +   GRP_pourpose3 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = .;
47855     +   GRP_pourpose4 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = .;
47856     +   GRP_pourpose5 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = .;
47857     +   GRP_pourpose6 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = .;
47858     +   GRP_pourpose7 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = .;
47859     +   GRP_pourpose8 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = .;
47860     +   GRP_pourpose9 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = .;
47861     +   GRP_pourpose10 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = .;
47862     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
47863     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
47864     +end;
MPRINT(EM_DIAGRAM):   end;
47865     +else do;
MPRINT(EM_DIAGRAM):   else do;
47866     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
47867     +   _dm12 = put( GRP_pourpose , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_pourpose , BEST12. );
47868     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
47869     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
47870     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
47871     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
47872     +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
47873     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
47874     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47875     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47876     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
47877     +               GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
47878     +               GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
47879     +               GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
47880     +               GRP_pourpose8 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = 0.38924947208076;
47881     +               GRP_pourpose9 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = 0.38924947208076;
47882     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47883     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47884     +            end;
MPRINT(EM_DIAGRAM):   end;
47885     +            else do;
MPRINT(EM_DIAGRAM):   else do;
47886     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
47887     +                  GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47888     +                  GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47889     +                  GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
47890     +                  GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
47891     +                  GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
47892     +                  GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
47893     +                  GRP_pourpose8 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = 0.38924947208076;
47894     +                  GRP_pourpose9 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = 0.38924947208076;
47895     +                  GRP_pourpose10 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = 0.38924947208076;
47896     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47897     +               end;
MPRINT(EM_DIAGRAM):   end;
47898     +            end;
MPRINT(EM_DIAGRAM):   end;
47899     +         end;
MPRINT(EM_DIAGRAM):   end;
47900     +         else do;
MPRINT(EM_DIAGRAM):   else do;
47901     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
47902     +               GRP_pourpose2 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = -0.38924947208076;
47903     +               GRP_pourpose3 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = -0.38924947208076;
47904     +               GRP_pourpose4 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = -0.38924947208076;
47905     +               GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
47906     +               GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
47907     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
47908     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47909     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47910     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47911     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47912     +            end;
MPRINT(EM_DIAGRAM):   end;
47913     +         end;
MPRINT(EM_DIAGRAM):   end;
47914     +      end;
MPRINT(EM_DIAGRAM):   end;
47915     +      else do;
MPRINT(EM_DIAGRAM):   else do;
47916     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
47917     +            GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47918     +            GRP_pourpose3 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = -0.38924947208076;
47919     +            GRP_pourpose4 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = -0.38924947208076;
47920     +            GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
47921     +            GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
47922     +            GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
47923     +            GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47924     +            GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47925     +            GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47926     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47927     +         end;
MPRINT(EM_DIAGRAM):   end;
47928     +         else do;
MPRINT(EM_DIAGRAM):   else do;
47929     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
47930     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47931     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47932     +               GRP_pourpose4 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = -0.38924947208076;
47933     +               GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
47934     +               GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
47935     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
47936     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47937     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47938     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47939     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47940     +            end;
MPRINT(EM_DIAGRAM):   end;
47941     +         end;
MPRINT(EM_DIAGRAM):   end;
47942     +      end;
MPRINT(EM_DIAGRAM):   end;
47943     +   end;
MPRINT(EM_DIAGRAM):   end;
47944     +   else do;
MPRINT(EM_DIAGRAM):   else do;
47945     +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
47946     +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
47947     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
47948     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47949     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47950     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
47951     +               GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
47952     +               GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
47953     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
47954     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47955     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47956     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47957     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47958     +            end;
MPRINT(EM_DIAGRAM):   end;
47959     +            else do;
MPRINT(EM_DIAGRAM):   else do;
47960     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
47961     +                  GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47962     +                  GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47963     +                  GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
47964     +                  GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
47965     +                  GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
47966     +                  GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
47967     +                  GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47968     +                  GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47969     +                  GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47970     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47971     +               end;
MPRINT(EM_DIAGRAM):   end;
47972     +            end;
MPRINT(EM_DIAGRAM):   end;
47973     +         end;
MPRINT(EM_DIAGRAM):   end;
47974     +         else do;
MPRINT(EM_DIAGRAM):   else do;
47975     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
47976     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47977     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47978     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
47979     +               GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
47980     +               GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
47981     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
47982     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47983     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47984     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
47985     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
47986     +            end;
MPRINT(EM_DIAGRAM):   end;
47987     +         end;
MPRINT(EM_DIAGRAM):   end;
47988     +      end;
MPRINT(EM_DIAGRAM):   end;
47989     +      else do;
MPRINT(EM_DIAGRAM):   else do;
47990     +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
47991     +            GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
47992     +            GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
47993     +            GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
47994     +            GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
47995     +            GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
47996     +            GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
47997     +            GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
47998     +            GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
47999     +            GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48000     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48001     +         end;
MPRINT(EM_DIAGRAM):   end;
48002     +         else do;
MPRINT(EM_DIAGRAM):   else do;
48003     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
48004     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48005     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48006     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48007     +               GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48008     +               GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
48009     +               GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
48010     +               GRP_pourpose8 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = 0.38924947208076;
48011     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48012     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48013     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48014     +            end;
MPRINT(EM_DIAGRAM):   end;
48015     +         end;
MPRINT(EM_DIAGRAM):   end;
48016     +      end;
MPRINT(EM_DIAGRAM):   end;
48017     +   end;
MPRINT(EM_DIAGRAM):   end;
48018     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
48019     +      GRP_pourpose2 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = .;
48020     +      GRP_pourpose3 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = .;
48021     +      GRP_pourpose4 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = .;
48022     +      GRP_pourpose5 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = .;
48023     +      GRP_pourpose6 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = .;
48024     +      GRP_pourpose7 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = .;
48025     +      GRP_pourpose8 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = .;
48026     +      GRP_pourpose9 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = .;
48027     +      GRP_pourpose10 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = .;
48028     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48029     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48030     +   end;
MPRINT(EM_DIAGRAM):   end;
48031     +end;
MPRINT(EM_DIAGRAM):   end;
48032     +
48033     +*** Generate dummy variables for GRP_savings ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_savings ;
48034     +drop GRP_savings2 GRP_savings3 GRP_savings4 GRP_savings5 ;
MPRINT(EM_DIAGRAM):   drop GRP_savings2 GRP_savings3 GRP_savings4 GRP_savings5 ;
48035     +if missing( GRP_savings ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_savings ) then do;
48036     +   GRP_savings2 = .;
MPRINT(EM_DIAGRAM):   GRP_savings2 = .;
48037     +   GRP_savings3 = .;
MPRINT(EM_DIAGRAM):   GRP_savings3 = .;
48038     +   GRP_savings4 = .;
MPRINT(EM_DIAGRAM):   GRP_savings4 = .;
48039     +   GRP_savings5 = .;
MPRINT(EM_DIAGRAM):   GRP_savings5 = .;
48040     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
48041     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48042     +end;
MPRINT(EM_DIAGRAM):   end;
48043     +else do;
MPRINT(EM_DIAGRAM):   else do;
48044     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
48045     +   _dm12 = put( GRP_savings , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_savings , BEST12. );
48046     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48047     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
48048     +      GRP_savings2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = -0.55901699437494;
48049     +      GRP_savings3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = -0.55901699437494;
48050     +      GRP_savings4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = -0.55901699437494;
48051     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48052     +   end;
MPRINT(EM_DIAGRAM):   end;
48053     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
48054     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48055     +      GRP_savings3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = -0.55901699437494;
48056     +      GRP_savings4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = -0.55901699437494;
48057     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48058     +   end;
MPRINT(EM_DIAGRAM):   end;
48059     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
48060     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48061     +      GRP_savings3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = 0.55901699437494;
48062     +      GRP_savings4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = -0.55901699437494;
48063     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48064     +   end;
MPRINT(EM_DIAGRAM):   end;
48065     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
48066     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48067     +      GRP_savings3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = 0.55901699437494;
48068     +      GRP_savings4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = 0.55901699437494;
48069     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48070     +   end;
MPRINT(EM_DIAGRAM):   end;
48071     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
48072     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48073     +      GRP_savings3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = 0.55901699437494;
48074     +      GRP_savings4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = 0.55901699437494;
48075     +      GRP_savings5 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = 0.55901699437494;
48076     +   end;
MPRINT(EM_DIAGRAM):   end;
48077     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48078     +      GRP_savings2 = .;
MPRINT(EM_DIAGRAM):   GRP_savings2 = .;
48079     +      GRP_savings3 = .;
MPRINT(EM_DIAGRAM):   GRP_savings3 = .;
48080     +      GRP_savings4 = .;
MPRINT(EM_DIAGRAM):   GRP_savings4 = .;
48081     +      GRP_savings5 = .;
MPRINT(EM_DIAGRAM):   GRP_savings5 = .;
48082     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48083     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48084     +   end;
MPRINT(EM_DIAGRAM):   end;
48085     +end;
MPRINT(EM_DIAGRAM):   end;
48086     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48087     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
48088     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48089     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48090     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
48091     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48092     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
48093     +   H11  =     1.06324242829785 * GRP_acc_status2  +      1.4388737573454 *
48094     +        GRP_acc_status3  +     0.79135504267205 * GRP_acc_status4
48095     +          +     0.87138310300778 * GRP_credit_history2
48096     +          +                1E-10 * GRP_credit_history3
48097     +          +     0.07395399861491 * GRP_credit_history4
48098     +          +     0.12695069063371 * GRP_credit_history5
48099     +          +  1.0000000827403E-10 * GRP_duration2  +  9.9999994396249E-11 *
48100     +        GRP_duration3  +  1.0000000133514E-10 * GRP_duration4
48101     +          +     1.46958184817951 * GRP_pourpose2  +     0.54768516394763 *
48102     +        GRP_pourpose3  +  1.0000000133514E-10 * GRP_pourpose4
48103     +          +     2.45876398075337 * GRP_pourpose5  +     0.37391410595514 *
48104     +        GRP_pourpose6  +  9.9999999600419E-11 * GRP_pourpose7
48105     +          +  9.9999994396249E-11 * GRP_pourpose8  +  1.0000000827403E-10 *
48106     +        GRP_pourpose9  +      2.2139363947525 * GRP_pourpose10
48107     +          +     0.94520474783645 * GRP_savings2  +  1.0000000827403E-10 *
48108     +        GRP_savings3  +     0.49964207697826 * GRP_savings4
48109     +          +     0.41085297802019 * GRP_savings5 ;
MPRINT(EM_DIAGRAM):   H11 = 1.06324242829785 * GRP_acc_status2 + 1.4388737573454 * GRP_acc_status3 + 0.79135504267205 * GRP_acc_status4 + 0.87138310300778 * GRP_credit_history2 + 1E-10 * GRP_credit_history3 + 0.07395399861491 * GRP_credit_history4 +
0.12695069063371 * GRP_credit_history5 + 1.0000000827403E-10 * GRP_duration2 + 9.9999994396249E-11 * GRP_duration3 + 1.0000000133514E-10 * GRP_duration4 + 1.46958184817951 * GRP_pourpose2 + 0.54768516394763 * GRP_pourpose3 + 1.0000000133514E-10 *
GRP_pourpose4 + 2.45876398075337 * GRP_pourpose5 + 0.37391410595514 * GRP_pourpose6 + 9.9999999600419E-11 * GRP_pourpose7 + 9.9999994396249E-11 * GRP_pourpose8 + 1.0000000827403E-10 * GRP_pourpose9 + 2.2139363947525 * GRP_pourpose10 + 0.94520474783645 *
GRP_savings2 + 1.0000000827403E-10 * GRP_savings3 + 0.49964207697826 * GRP_savings4 + 0.41085297802019 * GRP_savings5 ;
48110     +   H12  =     2.15147291718301 * GRP_acc_status2  +     2.31437613536176 *
48111     +        GRP_acc_status3  +     0.63101710548318 * GRP_acc_status4
48112     +          +     0.74498541053998 * GRP_credit_history2
48113     +          +     0.41833197701319 * GRP_credit_history3
48114     +          +     0.62478626876624 * GRP_credit_history4
48115     +          +                1E-10 * GRP_credit_history5
48116     +          +     0.08154696075291 * GRP_duration2  +  9.9999994396249E-11 *
48117     +        GRP_duration3  +     0.14760600774393 * GRP_duration4
48118     +          +     1.74472674740342 * GRP_pourpose2  +  1.0000000133514E-10 *
48119     +        GRP_pourpose3  +  1.0000000827403E-10 * GRP_pourpose4
48120     +          +     4.35954675112891 * GRP_pourpose5  +  9.9999994396249E-11 *
48121     +        GRP_pourpose6  +  1.0000000827403E-10 * GRP_pourpose7
48122     +          +  1.0000000133514E-10 * GRP_pourpose8  +     1.13650719457767 *
48123     +        GRP_pourpose9  +  9.9999994396249E-11 * GRP_pourpose10
48124     +          +       0.829673301188 * GRP_savings2  +     0.45548712040032 *
48125     +        GRP_savings3  +  1.0000000133514E-10 * GRP_savings4
48126     +          +  1.0000000133514E-10 * GRP_savings5 ;
MPRINT(EM_DIAGRAM):   H12 = 2.15147291718301 * GRP_acc_status2 + 2.31437613536176 * GRP_acc_status3 + 0.63101710548318 * GRP_acc_status4 + 0.74498541053998 * GRP_credit_history2 + 0.41833197701319 * GRP_credit_history3 + 0.62478626876624 *
GRP_credit_history4 + 1E-10 * GRP_credit_history5 + 0.08154696075291 * GRP_duration2 + 9.9999994396249E-11 * GRP_duration3 + 0.14760600774393 * GRP_duration4 + 1.74472674740342 * GRP_pourpose2 + 1.0000000133514E-10 * GRP_pourpose3 + 1.0000000827403E-10 *
GRP_pourpose4 + 4.35954675112891 * GRP_pourpose5 + 9.9999994396249E-11 * GRP_pourpose6 + 1.0000000827403E-10 * GRP_pourpose7 + 1.0000000133514E-10 * GRP_pourpose8 + 1.13650719457767 * GRP_pourpose9 + 9.9999994396249E-11 * GRP_pourpose10 + 0.829673301188 *
GRP_savings2 + 0.45548712040032 * GRP_savings3 + 1.0000000133514E-10 * GRP_savings4 + 1.0000000133514E-10 * GRP_savings5 ;
48127     +   H13  =     0.42071690139704 * GRP_acc_status2  +     0.35055515047105 *
48128     +        GRP_acc_status3  +     0.05341878845655 * GRP_acc_status4
48129     +          +  1.0000000827403E-10 * GRP_credit_history2
48130     +          +     0.05728639764379 * GRP_credit_history3
48131     +          +                1E-10 * GRP_credit_history4
48132     +          +     0.34364816750091 * GRP_credit_history5
48133     +          +     0.00512180423758 * GRP_duration2  +     0.18700191186454 *
48134     +        GRP_duration3  +     0.02348966282822 * GRP_duration4
48135     +          +     0.52041249607525 * GRP_pourpose2  +     0.12833814958348 *
48136     +        GRP_pourpose3  +  1.0000000133514E-10 * GRP_pourpose4
48137     +          +  1.0000000827403E-10 * GRP_pourpose5  +     0.81521279073145 *
48138     +        GRP_pourpose6  +  9.9999994396249E-11 * GRP_pourpose7
48139     +          +  9.9999994396249E-11 * GRP_pourpose8  +  9.9999994396249E-11 *
48140     +        GRP_pourpose9  +  1.0000000827403E-10 * GRP_pourpose10
48141     +          +  1.0000000133514E-10 * GRP_savings2  +     0.09061525884904 *
48142     +        GRP_savings3  +     0.21726237197706 * GRP_savings4
48143     +          +  1.0000000827403E-10 * GRP_savings5 ;
MPRINT(EM_DIAGRAM):   H13 = 0.42071690139704 * GRP_acc_status2 + 0.35055515047105 * GRP_acc_status3 + 0.05341878845655 * GRP_acc_status4 + 1.0000000827403E-10 * GRP_credit_history2 + 0.05728639764379 * GRP_credit_history3 + 1E-10 * GRP_credit_history4 +
0.34364816750091 * GRP_credit_history5 + 0.00512180423758 * GRP_duration2 + 0.18700191186454 * GRP_duration3 + 0.02348966282822 * GRP_duration4 + 0.52041249607525 * GRP_pourpose2 + 0.12833814958348 * GRP_pourpose3 + 1.0000000133514E-10 * GRP_pourpose4 +
1.0000000827403E-10 * GRP_pourpose5 + 0.81521279073145 * GRP_pourpose6 + 9.9999994396249E-11 * GRP_pourpose7 + 9.9999994396249E-11 * GRP_pourpose8 + 9.9999994396249E-11 * GRP_pourpose9 + 1.0000000827403E-10 * GRP_pourpose10 + 1.0000000133514E-10 *
GRP_savings2 + 0.09061525884904 * GRP_savings3 + 0.21726237197706 * GRP_savings4 + 1.0000000827403E-10 * GRP_savings5 ;
48144     +   H11  =     1.55048474060545 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.55048474060545 + H11 ;
48145     +   H12  =     0.23894452863513 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.23894452863513 + H12 ;
48146     +   H13  =     0.69166436626921 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.69166436626921 + H13 ;
48147     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
48148     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
48149     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
48150     +END;
MPRINT(EM_DIAGRAM):   END;
48151     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
48152     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
48153     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
48154     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
48155     +END;
MPRINT(EM_DIAGRAM):   END;
48156     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48157     +*** Writing the Node default ;
MPRINT(EM_DIAGRAM):   *** Writing the Node default ;
48158     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48159     +
48160     +*** Generate dummy variables for default ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for default ;
48161     +drop default1 default0 ;
MPRINT(EM_DIAGRAM):   drop default1 default0 ;
48162     +label F_default = 'From: default' ;
MPRINT(EM_DIAGRAM):   label F_default = 'From: default' ;
48163     +length F_default $ 12;
MPRINT(EM_DIAGRAM):   length F_default $ 12;
48164     +F_default = put( default , BEST12. );
MPRINT(EM_DIAGRAM):   F_default = put( default , BEST12. );
48165     +%DMNORMIP( F_default )
MPRINT(DMNORMIP):   call dmnorm(F_default,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48166     +if missing( default ) then do;
MPRINT(EM_DIAGRAM):   if missing( default ) then do;
48167     +   default1 = .;
MPRINT(EM_DIAGRAM):   default1 = .;
48168     +   default0 = .;
MPRINT(EM_DIAGRAM):   default0 = .;
48169     +end;
MPRINT(EM_DIAGRAM):   end;
48170     +else do;
MPRINT(EM_DIAGRAM):   else do;
48171     +   if F_default = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_default = '0' then do;
48172     +      default1 = 0;
MPRINT(EM_DIAGRAM):   default1 = 0;
48173     +      default0 = 1;
MPRINT(EM_DIAGRAM):   default0 = 1;
48174     +   end;
MPRINT(EM_DIAGRAM):   end;
48175     +   else if F_default = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_default = '1' then do;
48176     +      default1 = 1;
MPRINT(EM_DIAGRAM):   default1 = 1;
48177     +      default0 = 0;
MPRINT(EM_DIAGRAM):   default0 = 0;
48178     +   end;
MPRINT(EM_DIAGRAM):   end;
48179     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48180     +      default1 = .;
MPRINT(EM_DIAGRAM):   default1 = .;
48181     +      default0 = .;
MPRINT(EM_DIAGRAM):   default0 = .;
48182     +   end;
MPRINT(EM_DIAGRAM):   end;
48183     +end;
MPRINT(EM_DIAGRAM):   end;
48184     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
48185     +   P_default1  =    -8.31614635264269 * H11  +      6.4637710841217 * H12
48186     +          +     4.56379532327133 * H13 ;
MPRINT(EM_DIAGRAM):   P_default1 = -8.31614635264269 * H11 + 6.4637710841217 * H12 + 4.56379532327133 * H13 ;
48187     +   P_default1  =    -1.96819761727551 + P_default1 ;
MPRINT(EM_DIAGRAM):   P_default1 = -1.96819761727551 + P_default1 ;
48188     +   P_default0  = 0;
MPRINT(EM_DIAGRAM):   P_default0 = 0;
48189     +   _MAX_ = MAX (P_default1 , P_default0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_default1 , P_default0 );
48190     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
48191     +   P_default1  = EXP(P_default1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_default1 = EXP(P_default1 - _MAX_);
48192     +   _SUM_ = _SUM_ + P_default1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_default1 ;
48193     +   P_default0  = EXP(P_default0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_default0 = EXP(P_default0 - _MAX_);
48194     +   _SUM_ = _SUM_ + P_default0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_default0 ;
48195     +   P_default1  = P_default1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_default1 = P_default1 / _SUM_;
48196     +   P_default0  = P_default0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_default0 = P_default0 / _SUM_;
48197     +END;
MPRINT(EM_DIAGRAM):   END;
48198     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
48199     +   P_default1  = .;
MPRINT(EM_DIAGRAM):   P_default1 = .;
48200     +   P_default0  = .;
MPRINT(EM_DIAGRAM):   P_default0 = .;
48201     +END;
MPRINT(EM_DIAGRAM):   END;
48202     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
48203     +   P_default1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_default1 = 0.3;
48204     +   P_default0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_default0 = 0.7;
48205     +END;
MPRINT(EM_DIAGRAM):   END;
48206     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
48207     +*** Writing the Residuals  of the Node default ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node default ;
48208     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
48209     +IF MISSING( default1 ) THEN R_default1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( default1 ) THEN R_default1 = . ;
48210     +ELSE R_default1  = default1  - P_default1 ;
MPRINT(EM_DIAGRAM):   ELSE R_default1 = default1 - P_default1 ;
48211     +IF MISSING( default0 ) THEN R_default0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( default0 ) THEN R_default0 = . ;
48212     +ELSE R_default0  = default0  - P_default0 ;
MPRINT(EM_DIAGRAM):   ELSE R_default0 = default0 - P_default0 ;
48213     +
48214     +
48215     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
48216     +label D_DEFAULT = 'Decision: default' ;
MPRINT(EM_DIAGRAM):   label D_DEFAULT = 'Decision: default' ;
48217     +label EL_DEFAULT = 'Expected Loss: default' ;
MPRINT(EM_DIAGRAM):   label EL_DEFAULT = 'Expected Loss: default' ;
48218     +label BL_DEFAULT = 'Best Loss: default' ;
MPRINT(EM_DIAGRAM):   label BL_DEFAULT = 'Best Loss: default' ;
48219     +label CL_DEFAULT = 'Computed Loss: default' ;
MPRINT(EM_DIAGRAM):   label CL_DEFAULT = 'Computed Loss: default' ;
48220     +
48221     +length D_DEFAULT $ 9;
MPRINT(EM_DIAGRAM):   length D_DEFAULT $ 9;
48222     +
48223     +D_DEFAULT = ' ';
MPRINT(EM_DIAGRAM):   D_DEFAULT = ' ';
48224     +EL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = .;
48225     +BL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   BL_DEFAULT = .;
48226     +CL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   CL_DEFAULT = .;
48227     +
48228     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
48229     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
48230     +
48231     +D_DEFAULT = '1' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '1' ;
48232     +EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
48233     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
48234     +_sum = P_default1 * 5 + P_default0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_default1 * 5 + P_default0 * 0;
48235     +if _sum < EL_DEFAULT + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_DEFAULT + -2.27374E-12 then do;
48236     +   EL_DEFAULT = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
48237     +   D_DEFAULT = '0' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '0' ;
48238     +end;
MPRINT(EM_DIAGRAM):   end;
48239     +
48240     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
48241     +array NEURALdema [2,2] _temporary_ (
48242     +/* row 1 */  0 5
48243     +/* row 2 */  1 0
48244     +);
MPRINT(EM_DIAGRAM):   array NEURALdema [2,2] _temporary_ ( 0 5 1 0 );
48245     +
48246     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
48247     +drop _tarnum; select( F_default );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_default );
48248     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
48249     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
48250     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
48251     +end;
MPRINT(EM_DIAGRAM):   end;
48252     +if _tarnum <= 0 then goto NEURALdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto NEURALdeex;
48253     +
48254     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
48255     +CL_DEFAULT = NEURALdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_DEFAULT = NEURALdema [_tarnum,_decnum];
48256     +
48257     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
48258     +array NEURALdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array NEURALdebe [2] _temporary_ ( 0 0);
48259     +BL_DEFAULT = NEURALdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_DEFAULT = NEURALdebe [_tarnum];
48260     +
48261     +
48262     +NEURALdeex:;
MPRINT(EM_DIAGRAM):   NEURALdeex:;
48263     +
48264     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
48265     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48266     +*** Writing the I_default  AND U_default ;
MPRINT(EM_DIAGRAM):   *** Writing the I_default AND U_default ;
48267     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48268     +_MAXP_ = P_default1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_default1 ;
48269     +I_default  = "1           " ;
MPRINT(EM_DIAGRAM):   I_default = "1           " ;
48270     +U_default  =                    1;
MPRINT(EM_DIAGRAM):   U_default = 1;
48271     +IF( _MAXP_ LT P_default0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_default0 ) THEN DO;
48272     +   _MAXP_ = P_default0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_default0 ;
48273     +   I_default  = "0           " ;
MPRINT(EM_DIAGRAM):   I_default = "0           " ;
48274     +   U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
48275     +END;
MPRINT(EM_DIAGRAM):   END;
48276     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
48277     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
48278     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
48279     +drop
48280     +H11
48281     +H12
48282     +H13
48283     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
48284      run;
 
NOTE: DATA STEP view saved on file EMWS5.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.BINNING_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48285      quit;
48286      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
48287      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
48288      *------------------------------------------------------------*;
48289      * Neural: Scoring TEST data;
48290      *------------------------------------------------------------*;
48291      data EMWS5.Neural_TEST
48292      / view=EMWS5.Neural_TEST
48293      ;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_TEST / view=EMWS5.Neural_TEST ;
48294      set EMWS5.BINNING_TEST
48295      ;
MPRINT(EM_DIAGRAM):   set EMWS5.BINNING_TEST ;
48296      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMFLOWSCORE.sas.
48297     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
48298     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
48299     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
48300     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
48301     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
48302     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
48303     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
48304     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
48305     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
48306     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
48307     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
48308     +LENGTH _WARN_ $4
48309     +      F_default  $ 12
48310     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_default $ 12 ;
48311     +      label GRP_acc_status2 = 'Dummy: GRP_acc_status=2' ;
MPRINT(EM_DIAGRAM):   label GRP_acc_status2 = 'Dummy: GRP_acc_status=2' ;
48312     +
48313     +      label GRP_acc_status3 = 'Dummy: GRP_acc_status=3' ;
MPRINT(EM_DIAGRAM):   label GRP_acc_status3 = 'Dummy: GRP_acc_status=3' ;
48314     +
48315     +      label GRP_acc_status4 = 'Dummy: GRP_acc_status=4' ;
MPRINT(EM_DIAGRAM):   label GRP_acc_status4 = 'Dummy: GRP_acc_status=4' ;
48316     +
48317     +      label GRP_credit_history2 = 'Dummy: GRP_credit_history=2' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history2 = 'Dummy: GRP_credit_history=2' ;
48318     +
48319     +      label GRP_credit_history3 = 'Dummy: GRP_credit_history=3' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history3 = 'Dummy: GRP_credit_history=3' ;
48320     +
48321     +      label GRP_credit_history4 = 'Dummy: GRP_credit_history=4' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history4 = 'Dummy: GRP_credit_history=4' ;
48322     +
48323     +      label GRP_credit_history5 = 'Dummy: GRP_credit_history=5' ;
MPRINT(EM_DIAGRAM):   label GRP_credit_history5 = 'Dummy: GRP_credit_history=5' ;
48324     +
48325     +      label GRP_duration2 = 'Dummy: GRP_duration=2' ;
MPRINT(EM_DIAGRAM):   label GRP_duration2 = 'Dummy: GRP_duration=2' ;
48326     +
48327     +      label GRP_duration3 = 'Dummy: GRP_duration=3' ;
MPRINT(EM_DIAGRAM):   label GRP_duration3 = 'Dummy: GRP_duration=3' ;
48328     +
48329     +      label GRP_duration4 = 'Dummy: GRP_duration=4' ;
MPRINT(EM_DIAGRAM):   label GRP_duration4 = 'Dummy: GRP_duration=4' ;
48330     +
48331     +      label GRP_pourpose2 = 'Dummy: GRP_pourpose=2' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose2 = 'Dummy: GRP_pourpose=2' ;
48332     +
48333     +      label GRP_pourpose3 = 'Dummy: GRP_pourpose=3' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose3 = 'Dummy: GRP_pourpose=3' ;
48334     +
48335     +      label GRP_pourpose4 = 'Dummy: GRP_pourpose=4' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose4 = 'Dummy: GRP_pourpose=4' ;
48336     +
48337     +      label GRP_pourpose5 = 'Dummy: GRP_pourpose=5' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose5 = 'Dummy: GRP_pourpose=5' ;
48338     +
48339     +      label GRP_pourpose6 = 'Dummy: GRP_pourpose=6' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose6 = 'Dummy: GRP_pourpose=6' ;
48340     +
48341     +      label GRP_pourpose7 = 'Dummy: GRP_pourpose=7' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose7 = 'Dummy: GRP_pourpose=7' ;
48342     +
48343     +      label GRP_pourpose8 = 'Dummy: GRP_pourpose=8' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose8 = 'Dummy: GRP_pourpose=8' ;
48344     +
48345     +      label GRP_pourpose9 = 'Dummy: GRP_pourpose=9' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose9 = 'Dummy: GRP_pourpose=9' ;
48346     +
48347     +      label GRP_pourpose10 = 'Dummy: GRP_pourpose=10' ;
MPRINT(EM_DIAGRAM):   label GRP_pourpose10 = 'Dummy: GRP_pourpose=10' ;
48348     +
48349     +      label GRP_savings2 = 'Dummy: GRP_savings=2' ;
MPRINT(EM_DIAGRAM):   label GRP_savings2 = 'Dummy: GRP_savings=2' ;
48350     +
48351     +      label GRP_savings3 = 'Dummy: GRP_savings=3' ;
MPRINT(EM_DIAGRAM):   label GRP_savings3 = 'Dummy: GRP_savings=3' ;
48352     +
48353     +      label GRP_savings4 = 'Dummy: GRP_savings=4' ;
MPRINT(EM_DIAGRAM):   label GRP_savings4 = 'Dummy: GRP_savings=4' ;
48354     +
48355     +      label GRP_savings5 = 'Dummy: GRP_savings=5' ;
MPRINT(EM_DIAGRAM):   label GRP_savings5 = 'Dummy: GRP_savings=5' ;
48356     +
48357     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
48358     +
48359     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
48360     +
48361     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
48362     +
48363     +      label I_default = 'Into: default' ;
MPRINT(EM_DIAGRAM):   label I_default = 'Into: default' ;
48364     +
48365     +      label F_default = 'From: default' ;
MPRINT(EM_DIAGRAM):   label F_default = 'From: default' ;
48366     +
48367     +      label U_default = 'Unnormalized Into: default' ;
MPRINT(EM_DIAGRAM):   label U_default = 'Unnormalized Into: default' ;
48368     +
48369     +      label P_default1 = 'Predicted: default=1' ;
MPRINT(EM_DIAGRAM):   label P_default1 = 'Predicted: default=1' ;
48370     +
48371     +      label R_default1 = 'Residual: default=1' ;
MPRINT(EM_DIAGRAM):   label R_default1 = 'Residual: default=1' ;
48372     +
48373     +      label P_default0 = 'Predicted: default=0' ;
MPRINT(EM_DIAGRAM):   label P_default0 = 'Predicted: default=0' ;
48374     +
48375     +      label R_default0 = 'Residual: default=0' ;
MPRINT(EM_DIAGRAM):   label R_default0 = 'Residual: default=0' ;
48376     +
48377     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
48378     +
48379     +*** Generate dummy variables for GRP_acc_status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_acc_status ;
48380     +drop GRP_acc_status2 GRP_acc_status3 GRP_acc_status4 ;
MPRINT(EM_DIAGRAM):   drop GRP_acc_status2 GRP_acc_status3 GRP_acc_status4 ;
48381     +if missing( GRP_acc_status ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_acc_status ) then do;
48382     +   GRP_acc_status2 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = .;
48383     +   GRP_acc_status3 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = .;
48384     +   GRP_acc_status4 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = .;
48385     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
48386     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48387     +end;
MPRINT(EM_DIAGRAM):   end;
48388     +else do;
MPRINT(EM_DIAGRAM):   else do;
48389     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
48390     +   _dm12 = put( GRP_acc_status , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_acc_status , BEST12. );
48391     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48392     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
48393     +      GRP_acc_status2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = -0.63245553203367;
48394     +      GRP_acc_status3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = -0.63245553203367;
48395     +      GRP_acc_status4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = -0.63245553203367;
48396     +   end;
MPRINT(EM_DIAGRAM):   end;
48397     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
48398     +      GRP_acc_status2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = 0.63245553203367;
48399     +      GRP_acc_status3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = -0.63245553203367;
48400     +      GRP_acc_status4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = -0.63245553203367;
48401     +   end;
MPRINT(EM_DIAGRAM):   end;
48402     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
48403     +      GRP_acc_status2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = 0.63245553203367;
48404     +      GRP_acc_status3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = 0.63245553203367;
48405     +      GRP_acc_status4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = -0.63245553203367;
48406     +   end;
MPRINT(EM_DIAGRAM):   end;
48407     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
48408     +      GRP_acc_status2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = 0.63245553203367;
48409     +      GRP_acc_status3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = 0.63245553203367;
48410     +      GRP_acc_status4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = 0.63245553203367;
48411     +   end;
MPRINT(EM_DIAGRAM):   end;
48412     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48413     +      GRP_acc_status2 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status2 = .;
48414     +      GRP_acc_status3 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status3 = .;
48415     +      GRP_acc_status4 = .;
MPRINT(EM_DIAGRAM):   GRP_acc_status4 = .;
48416     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48417     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48418     +   end;
MPRINT(EM_DIAGRAM):   end;
48419     +end;
MPRINT(EM_DIAGRAM):   end;
48420     +
48421     +*** Generate dummy variables for GRP_credit_history ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_credit_history ;
48422     +drop GRP_credit_history2 GRP_credit_history3 GRP_credit_history4
48423     +        GRP_credit_history5 ;
MPRINT(EM_DIAGRAM):   drop GRP_credit_history2 GRP_credit_history3 GRP_credit_history4 GRP_credit_history5 ;
48424     +if missing( GRP_credit_history ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_credit_history ) then do;
48425     +   GRP_credit_history2 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = .;
48426     +   GRP_credit_history3 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = .;
48427     +   GRP_credit_history4 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = .;
48428     +   GRP_credit_history5 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = .;
48429     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
48430     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48431     +end;
MPRINT(EM_DIAGRAM):   end;
48432     +else do;
MPRINT(EM_DIAGRAM):   else do;
48433     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
48434     +   _dm12 = put( GRP_credit_history , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_credit_history , BEST12. );
48435     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48436     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
48437     +      GRP_credit_history2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = -0.55901699437494;
48438     +      GRP_credit_history3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = -0.55901699437494;
48439     +      GRP_credit_history4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = -0.55901699437494;
48440     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
48441     +   end;
MPRINT(EM_DIAGRAM):   end;
48442     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
48443     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
48444     +      GRP_credit_history3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = -0.55901699437494;
48445     +      GRP_credit_history4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = -0.55901699437494;
48446     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
48447     +   end;
MPRINT(EM_DIAGRAM):   end;
48448     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
48449     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
48450     +      GRP_credit_history3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = 0.55901699437494;
48451     +      GRP_credit_history4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = -0.55901699437494;
48452     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
48453     +   end;
MPRINT(EM_DIAGRAM):   end;
48454     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
48455     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
48456     +      GRP_credit_history3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = 0.55901699437494;
48457     +      GRP_credit_history4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = 0.55901699437494;
48458     +      GRP_credit_history5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = -0.55901699437494;
48459     +   end;
MPRINT(EM_DIAGRAM):   end;
48460     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
48461     +      GRP_credit_history2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = 0.55901699437494;
48462     +      GRP_credit_history3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = 0.55901699437494;
48463     +      GRP_credit_history4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = 0.55901699437494;
48464     +      GRP_credit_history5 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = 0.55901699437494;
48465     +   end;
MPRINT(EM_DIAGRAM):   end;
48466     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48467     +      GRP_credit_history2 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history2 = .;
48468     +      GRP_credit_history3 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history3 = .;
48469     +      GRP_credit_history4 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history4 = .;
48470     +      GRP_credit_history5 = .;
MPRINT(EM_DIAGRAM):   GRP_credit_history5 = .;
48471     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48472     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48473     +   end;
MPRINT(EM_DIAGRAM):   end;
48474     +end;
MPRINT(EM_DIAGRAM):   end;
48475     +
48476     +*** Generate dummy variables for GRP_duration ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_duration ;
48477     +drop GRP_duration2 GRP_duration3 GRP_duration4 ;
MPRINT(EM_DIAGRAM):   drop GRP_duration2 GRP_duration3 GRP_duration4 ;
48478     +if missing( GRP_duration ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_duration ) then do;
48479     +   GRP_duration2 = .;
MPRINT(EM_DIAGRAM):   GRP_duration2 = .;
48480     +   GRP_duration3 = .;
MPRINT(EM_DIAGRAM):   GRP_duration3 = .;
48481     +   GRP_duration4 = .;
MPRINT(EM_DIAGRAM):   GRP_duration4 = .;
48482     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
48483     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48484     +end;
MPRINT(EM_DIAGRAM):   end;
48485     +else do;
MPRINT(EM_DIAGRAM):   else do;
48486     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
48487     +   _dm12 = put( GRP_duration , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_duration , BEST12. );
48488     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48489     +   if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
48490     +      GRP_duration2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = 0.63245553203367;
48491     +      GRP_duration3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = 0.63245553203367;
48492     +      GRP_duration4 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = 0.63245553203367;
48493     +   end;
MPRINT(EM_DIAGRAM):   end;
48494     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
48495     +      GRP_duration2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = 0.63245553203367;
48496     +      GRP_duration3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = -0.63245553203367;
48497     +      GRP_duration4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = -0.63245553203367;
48498     +   end;
MPRINT(EM_DIAGRAM):   end;
48499     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
48500     +      GRP_duration2 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = -0.63245553203367;
48501     +      GRP_duration3 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = -0.63245553203367;
48502     +      GRP_duration4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = -0.63245553203367;
48503     +   end;
MPRINT(EM_DIAGRAM):   end;
48504     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
48505     +      GRP_duration2 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration2 = 0.63245553203367;
48506     +      GRP_duration3 = 0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration3 = 0.63245553203367;
48507     +      GRP_duration4 = -0.63245553203367;
MPRINT(EM_DIAGRAM):   GRP_duration4 = -0.63245553203367;
48508     +   end;
MPRINT(EM_DIAGRAM):   end;
48509     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48510     +      GRP_duration2 = .;
MPRINT(EM_DIAGRAM):   GRP_duration2 = .;
48511     +      GRP_duration3 = .;
MPRINT(EM_DIAGRAM):   GRP_duration3 = .;
48512     +      GRP_duration4 = .;
MPRINT(EM_DIAGRAM):   GRP_duration4 = .;
48513     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48514     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48515     +   end;
MPRINT(EM_DIAGRAM):   end;
48516     +end;
MPRINT(EM_DIAGRAM):   end;
48517     +
48518     +*** Generate dummy variables for GRP_pourpose ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_pourpose ;
48519     +drop GRP_pourpose2 GRP_pourpose3 GRP_pourpose4 GRP_pourpose5 GRP_pourpose6
48520     +        GRP_pourpose7 GRP_pourpose8 GRP_pourpose9 GRP_pourpose10 ;
MPRINT(EM_DIAGRAM):   drop GRP_pourpose2 GRP_pourpose3 GRP_pourpose4 GRP_pourpose5 GRP_pourpose6 GRP_pourpose7 GRP_pourpose8 GRP_pourpose9 GRP_pourpose10 ;
48521     +if missing( GRP_pourpose ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_pourpose ) then do;
48522     +   GRP_pourpose2 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = .;
48523     +   GRP_pourpose3 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = .;
48524     +   GRP_pourpose4 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = .;
48525     +   GRP_pourpose5 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = .;
48526     +   GRP_pourpose6 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = .;
48527     +   GRP_pourpose7 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = .;
48528     +   GRP_pourpose8 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = .;
48529     +   GRP_pourpose9 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = .;
48530     +   GRP_pourpose10 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = .;
48531     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
48532     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48533     +end;
MPRINT(EM_DIAGRAM):   end;
48534     +else do;
MPRINT(EM_DIAGRAM):   else do;
48535     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
48536     +   _dm12 = put( GRP_pourpose , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_pourpose , BEST12. );
48537     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48538     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
48539     +   if _dm12 <= '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '4' then do;
48540     +      if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
48541     +         if _dm12 <= '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '11' then do;
48542     +            if _dm12 = '10'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '10' then do;
48543     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48544     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48545     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48546     +               GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48547     +               GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
48548     +               GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
48549     +               GRP_pourpose8 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = 0.38924947208076;
48550     +               GRP_pourpose9 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = 0.38924947208076;
48551     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48552     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48553     +            end;
MPRINT(EM_DIAGRAM):   end;
48554     +            else do;
MPRINT(EM_DIAGRAM):   else do;
48555     +               if _dm12 = '11'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '11' then do;
48556     +                  GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48557     +                  GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48558     +                  GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48559     +                  GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48560     +                  GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
48561     +                  GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
48562     +                  GRP_pourpose8 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = 0.38924947208076;
48563     +                  GRP_pourpose9 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = 0.38924947208076;
48564     +                  GRP_pourpose10 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = 0.38924947208076;
48565     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48566     +               end;
MPRINT(EM_DIAGRAM):   end;
48567     +            end;
MPRINT(EM_DIAGRAM):   end;
48568     +         end;
MPRINT(EM_DIAGRAM):   end;
48569     +         else do;
MPRINT(EM_DIAGRAM):   else do;
48570     +            if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
48571     +               GRP_pourpose2 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = -0.38924947208076;
48572     +               GRP_pourpose3 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = -0.38924947208076;
48573     +               GRP_pourpose4 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = -0.38924947208076;
48574     +               GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
48575     +               GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
48576     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
48577     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48578     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48579     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48580     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48581     +            end;
MPRINT(EM_DIAGRAM):   end;
48582     +         end;
MPRINT(EM_DIAGRAM):   end;
48583     +      end;
MPRINT(EM_DIAGRAM):   end;
48584     +      else do;
MPRINT(EM_DIAGRAM):   else do;
48585     +         if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
48586     +            GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48587     +            GRP_pourpose3 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = -0.38924947208076;
48588     +            GRP_pourpose4 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = -0.38924947208076;
48589     +            GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
48590     +            GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
48591     +            GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
48592     +            GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48593     +            GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48594     +            GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48595     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48596     +         end;
MPRINT(EM_DIAGRAM):   end;
48597     +         else do;
MPRINT(EM_DIAGRAM):   else do;
48598     +            if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
48599     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48600     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48601     +               GRP_pourpose4 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = -0.38924947208076;
48602     +               GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
48603     +               GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
48604     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
48605     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48606     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48607     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48608     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48609     +            end;
MPRINT(EM_DIAGRAM):   end;
48610     +         end;
MPRINT(EM_DIAGRAM):   end;
48611     +      end;
MPRINT(EM_DIAGRAM):   end;
48612     +   end;
MPRINT(EM_DIAGRAM):   end;
48613     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48614     +      if _dm12 <= '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '7' then do;
48615     +         if _dm12 <= '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '6' then do;
48616     +            if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '5' then do;
48617     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48618     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48619     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48620     +               GRP_pourpose5 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = -0.38924947208076;
48621     +               GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
48622     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
48623     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48624     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48625     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48626     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48627     +            end;
MPRINT(EM_DIAGRAM):   end;
48628     +            else do;
MPRINT(EM_DIAGRAM):   else do;
48629     +               if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '6' then do;
48630     +                  GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48631     +                  GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48632     +                  GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48633     +                  GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48634     +                  GRP_pourpose6 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = -0.38924947208076;
48635     +                  GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
48636     +                  GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48637     +                  GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48638     +                  GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48639     +                  _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48640     +               end;
MPRINT(EM_DIAGRAM):   end;
48641     +            end;
MPRINT(EM_DIAGRAM):   end;
48642     +         end;
MPRINT(EM_DIAGRAM):   end;
48643     +         else do;
MPRINT(EM_DIAGRAM):   else do;
48644     +            if _dm12 = '7'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '7' then do;
48645     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48646     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48647     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48648     +               GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48649     +               GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
48650     +               GRP_pourpose7 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = -0.38924947208076;
48651     +               GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48652     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48653     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48654     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48655     +            end;
MPRINT(EM_DIAGRAM):   end;
48656     +         end;
MPRINT(EM_DIAGRAM):   end;
48657     +      end;
MPRINT(EM_DIAGRAM):   end;
48658     +      else do;
MPRINT(EM_DIAGRAM):   else do;
48659     +         if _dm12 = '8'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '8' then do;
48660     +            GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48661     +            GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48662     +            GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48663     +            GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48664     +            GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
48665     +            GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
48666     +            GRP_pourpose8 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = -0.38924947208076;
48667     +            GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48668     +            GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48669     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48670     +         end;
MPRINT(EM_DIAGRAM):   end;
48671     +         else do;
MPRINT(EM_DIAGRAM):   else do;
48672     +            if _dm12 = '9'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '9' then do;
48673     +               GRP_pourpose2 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = 0.38924947208076;
48674     +               GRP_pourpose3 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = 0.38924947208076;
48675     +               GRP_pourpose4 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = 0.38924947208076;
48676     +               GRP_pourpose5 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = 0.38924947208076;
48677     +               GRP_pourpose6 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = 0.38924947208076;
48678     +               GRP_pourpose7 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = 0.38924947208076;
48679     +               GRP_pourpose8 = 0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = 0.38924947208076;
48680     +               GRP_pourpose9 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = -0.38924947208076;
48681     +               GRP_pourpose10 = -0.38924947208076;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = -0.38924947208076;
48682     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
48683     +            end;
MPRINT(EM_DIAGRAM):   end;
48684     +         end;
MPRINT(EM_DIAGRAM):   end;
48685     +      end;
MPRINT(EM_DIAGRAM):   end;
48686     +   end;
MPRINT(EM_DIAGRAM):   end;
48687     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
48688     +      GRP_pourpose2 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose2 = .;
48689     +      GRP_pourpose3 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose3 = .;
48690     +      GRP_pourpose4 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose4 = .;
48691     +      GRP_pourpose5 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose5 = .;
48692     +      GRP_pourpose6 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose6 = .;
48693     +      GRP_pourpose7 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose7 = .;
48694     +      GRP_pourpose8 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose8 = .;
48695     +      GRP_pourpose9 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose9 = .;
48696     +      GRP_pourpose10 = .;
MPRINT(EM_DIAGRAM):   GRP_pourpose10 = .;
48697     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48698     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48699     +   end;
MPRINT(EM_DIAGRAM):   end;
48700     +end;
MPRINT(EM_DIAGRAM):   end;
48701     +
48702     +*** Generate dummy variables for GRP_savings ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for GRP_savings ;
48703     +drop GRP_savings2 GRP_savings3 GRP_savings4 GRP_savings5 ;
MPRINT(EM_DIAGRAM):   drop GRP_savings2 GRP_savings3 GRP_savings4 GRP_savings5 ;
48704     +if missing( GRP_savings ) then do;
MPRINT(EM_DIAGRAM):   if missing( GRP_savings ) then do;
48705     +   GRP_savings2 = .;
MPRINT(EM_DIAGRAM):   GRP_savings2 = .;
48706     +   GRP_savings3 = .;
MPRINT(EM_DIAGRAM):   GRP_savings3 = .;
48707     +   GRP_savings4 = .;
MPRINT(EM_DIAGRAM):   GRP_savings4 = .;
48708     +   GRP_savings5 = .;
MPRINT(EM_DIAGRAM):   GRP_savings5 = .;
48709     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
48710     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48711     +end;
MPRINT(EM_DIAGRAM):   end;
48712     +else do;
MPRINT(EM_DIAGRAM):   else do;
48713     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
48714     +   _dm12 = put( GRP_savings , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( GRP_savings , BEST12. );
48715     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48716     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
48717     +      GRP_savings2 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = -0.55901699437494;
48718     +      GRP_savings3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = -0.55901699437494;
48719     +      GRP_savings4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = -0.55901699437494;
48720     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48721     +   end;
MPRINT(EM_DIAGRAM):   end;
48722     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
48723     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48724     +      GRP_savings3 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = -0.55901699437494;
48725     +      GRP_savings4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = -0.55901699437494;
48726     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48727     +   end;
MPRINT(EM_DIAGRAM):   end;
48728     +   else if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '4' then do;
48729     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48730     +      GRP_savings3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = 0.55901699437494;
48731     +      GRP_savings4 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = -0.55901699437494;
48732     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48733     +   end;
MPRINT(EM_DIAGRAM):   end;
48734     +   else if _dm12 = '5'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '5' then do;
48735     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48736     +      GRP_savings3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = 0.55901699437494;
48737     +      GRP_savings4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = 0.55901699437494;
48738     +      GRP_savings5 = -0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = -0.55901699437494;
48739     +   end;
MPRINT(EM_DIAGRAM):   end;
48740     +   else if _dm12 = '6'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '6' then do;
48741     +      GRP_savings2 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings2 = 0.55901699437494;
48742     +      GRP_savings3 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings3 = 0.55901699437494;
48743     +      GRP_savings4 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings4 = 0.55901699437494;
48744     +      GRP_savings5 = 0.55901699437494;
MPRINT(EM_DIAGRAM):   GRP_savings5 = 0.55901699437494;
48745     +   end;
MPRINT(EM_DIAGRAM):   end;
48746     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48747     +      GRP_savings2 = .;
MPRINT(EM_DIAGRAM):   GRP_savings2 = .;
48748     +      GRP_savings3 = .;
MPRINT(EM_DIAGRAM):   GRP_savings3 = .;
48749     +      GRP_savings4 = .;
MPRINT(EM_DIAGRAM):   GRP_savings4 = .;
48750     +      GRP_savings5 = .;
MPRINT(EM_DIAGRAM):   GRP_savings5 = .;
48751     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
48752     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
48753     +   end;
MPRINT(EM_DIAGRAM):   end;
48754     +end;
MPRINT(EM_DIAGRAM):   end;
48755     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48756     +*** Writing the Node ord ;
MPRINT(EM_DIAGRAM):   *** Writing the Node ord ;
48757     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48758     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48759     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
48760     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48761     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
48762     +   H11  =     1.06324242829785 * GRP_acc_status2  +      1.4388737573454 *
48763     +        GRP_acc_status3  +     0.79135504267205 * GRP_acc_status4
48764     +          +     0.87138310300778 * GRP_credit_history2
48765     +          +                1E-10 * GRP_credit_history3
48766     +          +     0.07395399861491 * GRP_credit_history4
48767     +          +     0.12695069063371 * GRP_credit_history5
48768     +          +  1.0000000827403E-10 * GRP_duration2  +  9.9999994396249E-11 *
48769     +        GRP_duration3  +  1.0000000133514E-10 * GRP_duration4
48770     +          +     1.46958184817951 * GRP_pourpose2  +     0.54768516394763 *
48771     +        GRP_pourpose3  +  1.0000000133514E-10 * GRP_pourpose4
48772     +          +     2.45876398075337 * GRP_pourpose5  +     0.37391410595514 *
48773     +        GRP_pourpose6  +  9.9999999600419E-11 * GRP_pourpose7
48774     +          +  9.9999994396249E-11 * GRP_pourpose8  +  1.0000000827403E-10 *
48775     +        GRP_pourpose9  +      2.2139363947525 * GRP_pourpose10
48776     +          +     0.94520474783645 * GRP_savings2  +  1.0000000827403E-10 *
48777     +        GRP_savings3  +     0.49964207697826 * GRP_savings4
48778     +          +     0.41085297802019 * GRP_savings5 ;
MPRINT(EM_DIAGRAM):   H11 = 1.06324242829785 * GRP_acc_status2 + 1.4388737573454 * GRP_acc_status3 + 0.79135504267205 * GRP_acc_status4 + 0.87138310300778 * GRP_credit_history2 + 1E-10 * GRP_credit_history3 + 0.07395399861491 * GRP_credit_history4 +
0.12695069063371 * GRP_credit_history5 + 1.0000000827403E-10 * GRP_duration2 + 9.9999994396249E-11 * GRP_duration3 + 1.0000000133514E-10 * GRP_duration4 + 1.46958184817951 * GRP_pourpose2 + 0.54768516394763 * GRP_pourpose3 + 1.0000000133514E-10 *
GRP_pourpose4 + 2.45876398075337 * GRP_pourpose5 + 0.37391410595514 * GRP_pourpose6 + 9.9999999600419E-11 * GRP_pourpose7 + 9.9999994396249E-11 * GRP_pourpose8 + 1.0000000827403E-10 * GRP_pourpose9 + 2.2139363947525 * GRP_pourpose10 + 0.94520474783645 *
GRP_savings2 + 1.0000000827403E-10 * GRP_savings3 + 0.49964207697826 * GRP_savings4 + 0.41085297802019 * GRP_savings5 ;
48779     +   H12  =     2.15147291718301 * GRP_acc_status2  +     2.31437613536176 *
48780     +        GRP_acc_status3  +     0.63101710548318 * GRP_acc_status4
48781     +          +     0.74498541053998 * GRP_credit_history2
48782     +          +     0.41833197701319 * GRP_credit_history3
48783     +          +     0.62478626876624 * GRP_credit_history4
48784     +          +                1E-10 * GRP_credit_history5
48785     +          +     0.08154696075291 * GRP_duration2  +  9.9999994396249E-11 *
48786     +        GRP_duration3  +     0.14760600774393 * GRP_duration4
48787     +          +     1.74472674740342 * GRP_pourpose2  +  1.0000000133514E-10 *
48788     +        GRP_pourpose3  +  1.0000000827403E-10 * GRP_pourpose4
48789     +          +     4.35954675112891 * GRP_pourpose5  +  9.9999994396249E-11 *
48790     +        GRP_pourpose6  +  1.0000000827403E-10 * GRP_pourpose7
48791     +          +  1.0000000133514E-10 * GRP_pourpose8  +     1.13650719457767 *
48792     +        GRP_pourpose9  +  9.9999994396249E-11 * GRP_pourpose10
48793     +          +       0.829673301188 * GRP_savings2  +     0.45548712040032 *
48794     +        GRP_savings3  +  1.0000000133514E-10 * GRP_savings4
48795     +          +  1.0000000133514E-10 * GRP_savings5 ;
MPRINT(EM_DIAGRAM):   H12 = 2.15147291718301 * GRP_acc_status2 + 2.31437613536176 * GRP_acc_status3 + 0.63101710548318 * GRP_acc_status4 + 0.74498541053998 * GRP_credit_history2 + 0.41833197701319 * GRP_credit_history3 + 0.62478626876624 *
GRP_credit_history4 + 1E-10 * GRP_credit_history5 + 0.08154696075291 * GRP_duration2 + 9.9999994396249E-11 * GRP_duration3 + 0.14760600774393 * GRP_duration4 + 1.74472674740342 * GRP_pourpose2 + 1.0000000133514E-10 * GRP_pourpose3 + 1.0000000827403E-10 *
GRP_pourpose4 + 4.35954675112891 * GRP_pourpose5 + 9.9999994396249E-11 * GRP_pourpose6 + 1.0000000827403E-10 * GRP_pourpose7 + 1.0000000133514E-10 * GRP_pourpose8 + 1.13650719457767 * GRP_pourpose9 + 9.9999994396249E-11 * GRP_pourpose10 + 0.829673301188 *
GRP_savings2 + 0.45548712040032 * GRP_savings3 + 1.0000000133514E-10 * GRP_savings4 + 1.0000000133514E-10 * GRP_savings5 ;
48796     +   H13  =     0.42071690139704 * GRP_acc_status2  +     0.35055515047105 *
48797     +        GRP_acc_status3  +     0.05341878845655 * GRP_acc_status4
48798     +          +  1.0000000827403E-10 * GRP_credit_history2
48799     +          +     0.05728639764379 * GRP_credit_history3
48800     +          +                1E-10 * GRP_credit_history4
48801     +          +     0.34364816750091 * GRP_credit_history5
48802     +          +     0.00512180423758 * GRP_duration2  +     0.18700191186454 *
48803     +        GRP_duration3  +     0.02348966282822 * GRP_duration4
48804     +          +     0.52041249607525 * GRP_pourpose2  +     0.12833814958348 *
48805     +        GRP_pourpose3  +  1.0000000133514E-10 * GRP_pourpose4
48806     +          +  1.0000000827403E-10 * GRP_pourpose5  +     0.81521279073145 *
48807     +        GRP_pourpose6  +  9.9999994396249E-11 * GRP_pourpose7
48808     +          +  9.9999994396249E-11 * GRP_pourpose8  +  9.9999994396249E-11 *
48809     +        GRP_pourpose9  +  1.0000000827403E-10 * GRP_pourpose10
48810     +          +  1.0000000133514E-10 * GRP_savings2  +     0.09061525884904 *
48811     +        GRP_savings3  +     0.21726237197706 * GRP_savings4
48812     +          +  1.0000000827403E-10 * GRP_savings5 ;
MPRINT(EM_DIAGRAM):   H13 = 0.42071690139704 * GRP_acc_status2 + 0.35055515047105 * GRP_acc_status3 + 0.05341878845655 * GRP_acc_status4 + 1.0000000827403E-10 * GRP_credit_history2 + 0.05728639764379 * GRP_credit_history3 + 1E-10 * GRP_credit_history4 +
0.34364816750091 * GRP_credit_history5 + 0.00512180423758 * GRP_duration2 + 0.18700191186454 * GRP_duration3 + 0.02348966282822 * GRP_duration4 + 0.52041249607525 * GRP_pourpose2 + 0.12833814958348 * GRP_pourpose3 + 1.0000000133514E-10 * GRP_pourpose4 +
1.0000000827403E-10 * GRP_pourpose5 + 0.81521279073145 * GRP_pourpose6 + 9.9999994396249E-11 * GRP_pourpose7 + 9.9999994396249E-11 * GRP_pourpose8 + 9.9999994396249E-11 * GRP_pourpose9 + 1.0000000827403E-10 * GRP_pourpose10 + 1.0000000133514E-10 *
GRP_savings2 + 0.09061525884904 * GRP_savings3 + 0.21726237197706 * GRP_savings4 + 1.0000000827403E-10 * GRP_savings5 ;
48813     +   H11  =     1.55048474060545 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = 1.55048474060545 + H11 ;
48814     +   H12  =     0.23894452863513 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.23894452863513 + H12 ;
48815     +   H13  =     0.69166436626921 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.69166436626921 + H13 ;
48816     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
48817     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
48818     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
48819     +END;
MPRINT(EM_DIAGRAM):   END;
48820     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
48821     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
48822     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
48823     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
48824     +END;
MPRINT(EM_DIAGRAM):   END;
48825     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48826     +*** Writing the Node default ;
MPRINT(EM_DIAGRAM):   *** Writing the Node default ;
48827     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48828     +
48829     +*** Generate dummy variables for default ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for default ;
48830     +drop default1 default0 ;
MPRINT(EM_DIAGRAM):   drop default1 default0 ;
48831     +label F_default = 'From: default' ;
MPRINT(EM_DIAGRAM):   label F_default = 'From: default' ;
48832     +length F_default $ 12;
MPRINT(EM_DIAGRAM):   length F_default $ 12;
48833     +F_default = put( default , BEST12. );
MPRINT(EM_DIAGRAM):   F_default = put( default , BEST12. );
48834     +%DMNORMIP( F_default )
MPRINT(DMNORMIP):   call dmnorm(F_default,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
48835     +if missing( default ) then do;
MPRINT(EM_DIAGRAM):   if missing( default ) then do;
48836     +   default1 = .;
MPRINT(EM_DIAGRAM):   default1 = .;
48837     +   default0 = .;
MPRINT(EM_DIAGRAM):   default0 = .;
48838     +end;
MPRINT(EM_DIAGRAM):   end;
48839     +else do;
MPRINT(EM_DIAGRAM):   else do;
48840     +   if F_default = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_default = '0' then do;
48841     +      default1 = 0;
MPRINT(EM_DIAGRAM):   default1 = 0;
48842     +      default0 = 1;
MPRINT(EM_DIAGRAM):   default0 = 1;
48843     +   end;
MPRINT(EM_DIAGRAM):   end;
48844     +   else if F_default = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_default = '1' then do;
48845     +      default1 = 1;
MPRINT(EM_DIAGRAM):   default1 = 1;
48846     +      default0 = 0;
MPRINT(EM_DIAGRAM):   default0 = 0;
48847     +   end;
MPRINT(EM_DIAGRAM):   end;
48848     +   else do;
MPRINT(EM_DIAGRAM):   else do;
48849     +      default1 = .;
MPRINT(EM_DIAGRAM):   default1 = .;
48850     +      default0 = .;
MPRINT(EM_DIAGRAM):   default0 = .;
48851     +   end;
MPRINT(EM_DIAGRAM):   end;
48852     +end;
MPRINT(EM_DIAGRAM):   end;
48853     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
48854     +   P_default1  =    -8.31614635264269 * H11  +      6.4637710841217 * H12
48855     +          +     4.56379532327133 * H13 ;
MPRINT(EM_DIAGRAM):   P_default1 = -8.31614635264269 * H11 + 6.4637710841217 * H12 + 4.56379532327133 * H13 ;
48856     +   P_default1  =    -1.96819761727551 + P_default1 ;
MPRINT(EM_DIAGRAM):   P_default1 = -1.96819761727551 + P_default1 ;
48857     +   P_default0  = 0;
MPRINT(EM_DIAGRAM):   P_default0 = 0;
48858     +   _MAX_ = MAX (P_default1 , P_default0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_default1 , P_default0 );
48859     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
48860     +   P_default1  = EXP(P_default1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_default1 = EXP(P_default1 - _MAX_);
48861     +   _SUM_ = _SUM_ + P_default1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_default1 ;
48862     +   P_default0  = EXP(P_default0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_default0 = EXP(P_default0 - _MAX_);
48863     +   _SUM_ = _SUM_ + P_default0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_default0 ;
48864     +   P_default1  = P_default1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_default1 = P_default1 / _SUM_;
48865     +   P_default0  = P_default0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_default0 = P_default0 / _SUM_;
48866     +END;
MPRINT(EM_DIAGRAM):   END;
48867     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
48868     +   P_default1  = .;
MPRINT(EM_DIAGRAM):   P_default1 = .;
48869     +   P_default0  = .;
MPRINT(EM_DIAGRAM):   P_default0 = .;
48870     +END;
MPRINT(EM_DIAGRAM):   END;
48871     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
48872     +   P_default1  =                  0.3;
MPRINT(EM_DIAGRAM):   P_default1 = 0.3;
48873     +   P_default0  =                  0.7;
MPRINT(EM_DIAGRAM):   P_default0 = 0.7;
48874     +END;
MPRINT(EM_DIAGRAM):   END;
48875     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
48876     +*** Writing the Residuals  of the Node default ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node default ;
48877     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
48878     +IF MISSING( default1 ) THEN R_default1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( default1 ) THEN R_default1 = . ;
48879     +ELSE R_default1  = default1  - P_default1 ;
MPRINT(EM_DIAGRAM):   ELSE R_default1 = default1 - P_default1 ;
48880     +IF MISSING( default0 ) THEN R_default0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( default0 ) THEN R_default0 = . ;
48881     +ELSE R_default0  = default0  - P_default0 ;
MPRINT(EM_DIAGRAM):   ELSE R_default0 = default0 - P_default0 ;
48882     +
48883     +
48884     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
48885     +label D_DEFAULT = 'Decision: default' ;
MPRINT(EM_DIAGRAM):   label D_DEFAULT = 'Decision: default' ;
48886     +label EL_DEFAULT = 'Expected Loss: default' ;
MPRINT(EM_DIAGRAM):   label EL_DEFAULT = 'Expected Loss: default' ;
48887     +label BL_DEFAULT = 'Best Loss: default' ;
MPRINT(EM_DIAGRAM):   label BL_DEFAULT = 'Best Loss: default' ;
48888     +label CL_DEFAULT = 'Computed Loss: default' ;
MPRINT(EM_DIAGRAM):   label CL_DEFAULT = 'Computed Loss: default' ;
48889     +
48890     +length D_DEFAULT $ 9;
MPRINT(EM_DIAGRAM):   length D_DEFAULT $ 9;
48891     +
48892     +D_DEFAULT = ' ';
MPRINT(EM_DIAGRAM):   D_DEFAULT = ' ';
48893     +EL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = .;
48894     +BL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   BL_DEFAULT = .;
48895     +CL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   CL_DEFAULT = .;
48896     +
48897     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
48898     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
48899     +
48900     +D_DEFAULT = '1' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '1' ;
48901     +EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
48902     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
48903     +_sum = P_default1 * 5 + P_default0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_default1 * 5 + P_default0 * 0;
48904     +if _sum < EL_DEFAULT + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_DEFAULT + -2.27374E-12 then do;
48905     +   EL_DEFAULT = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
48906     +   D_DEFAULT = '0' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '0' ;
48907     +end;
MPRINT(EM_DIAGRAM):   end;
48908     +
48909     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
48910     +array NEURALdema [2,2] _temporary_ (
48911     +/* row 1 */  0 5
48912     +/* row 2 */  1 0
48913     +);
MPRINT(EM_DIAGRAM):   array NEURALdema [2,2] _temporary_ ( 0 5 1 0 );
48914     +
48915     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
48916     +drop _tarnum; select( F_default );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_default );
48917     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
48918     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
48919     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
48920     +end;
MPRINT(EM_DIAGRAM):   end;
48921     +if _tarnum <= 0 then goto NEURALdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto NEURALdeex;
48922     +
48923     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
48924     +CL_DEFAULT = NEURALdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_DEFAULT = NEURALdema [_tarnum,_decnum];
48925     +
48926     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
48927     +array NEURALdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array NEURALdebe [2] _temporary_ ( 0 0);
48928     +BL_DEFAULT = NEURALdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_DEFAULT = NEURALdebe [_tarnum];
48929     +
48930     +
48931     +NEURALdeex:;
MPRINT(EM_DIAGRAM):   NEURALdeex:;
48932     +
48933     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
48934     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48935     +*** Writing the I_default  AND U_default ;
MPRINT(EM_DIAGRAM):   *** Writing the I_default AND U_default ;
48936     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
48937     +_MAXP_ = P_default1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_default1 ;
48938     +I_default  = "1           " ;
MPRINT(EM_DIAGRAM):   I_default = "1           " ;
48939     +U_default  =                    1;
MPRINT(EM_DIAGRAM):   U_default = 1;
48940     +IF( _MAXP_ LT P_default0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_default0 ) THEN DO;
48941     +   _MAXP_ = P_default0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_default0 ;
48942     +   I_default  = "0           " ;
MPRINT(EM_DIAGRAM):   I_default = "0           " ;
48943     +   U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
48944     +END;
MPRINT(EM_DIAGRAM):   END;
48945     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
48946     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
48947     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
48948     +drop
48949     +H11
48950     +H12
48951     +H13
48952     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
48953      run;
 
NOTE: DATA STEP view saved on file EMWS5.NEURAL_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.BINNING_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
48954      quit;
48955      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
48956      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
48957      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
48958      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS5.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.Neural_TRAIN out=WORK.M35N8DAC noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35N8DAC;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M35N8DAC(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M35N8DAC;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M35N8DAC;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2SF9I5D NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3AZHIPQ(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   set WORK.M2SF9I5D;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.BINNING_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.BINNING_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEFAULT1") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_DEFAULT1") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("P_DEFAULT0") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_DEFAULT0") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("F_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("I_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("U_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("D_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("EL_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("CL_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("BL_DEFAULT") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("DEFAULT") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
49315      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
49316      set EMWS5.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMINFO;
49317      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
49318      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS5.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49319      data EMWS5.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_EMINFO;
49320      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
49321      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
49322      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS5.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
49326      run;
49327      data EMWS5.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_EMINFO;
49328      set EMWS5.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMINFO WORK.MODELTEMP_INFO;
49329      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS5.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49330      proc sort data = EMWS5.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.Neural_EMINFO NOTHREADS;
49331      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49332      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS5.NEURAL_EMINFO.
NOTE: The data set EMWS5.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49333      proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
49334      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49335      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
49336      proc sort data = EMWS5.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.Neural_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
49337      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49338      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.NEURAL_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49339      data EMWS5.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_EMINFO;
49340      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
49341      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
49342      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.NEURAL_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49343      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
49344      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
49345      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
49346      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
NOTE: View EMWS5.NEURAL_TEST.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:08" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28 March 2021
Time:                18:36:08
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O140TKHX "C:\Jose\DM_ang\Workspaces\EMWS5\Neural\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O140TKHX new;
MPRINT(EM_DIAGRAM):   run;
49370      data EMWS5.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_EMOUTFIT(rename=(_NAME_=TARGET));
49371      set EMWS5.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_OUTFIT(where=(_NAME_ eq 'OVERALL'));
49372      label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _NAME_ = "Target";
49373      if _NAME_='OVERALL' then _NAME_='default';
MPRINT(EM_DIAGRAM):   if _NAME_='OVERALL' then _NAME_='default';
49374      drop _ITER_;
MPRINT(EM_DIAGRAM):   drop _ITER_;
49375      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_OUTFIT.
      WHERE _NAME_='OVERALL';
NOTE: The data set EMWS5.NEURAL_EMOUTFIT has 1 observations and 41 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
49376      proc sort data=EMWS5.Neural_EMOUTFIT nodupkey;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Neural_EMOUTFIT nodupkey;
49377      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
49378      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_EMOUTFIT.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set EMWS5.NEURAL_EMOUTFIT has 1 observations and 41 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49379      data EMWS5.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_EMOUTFIT;
49380      set EMWS5.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMOUTFIT;
49381      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
49382      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
49383      if upcase(TARGET) eq "DEFAULT" then TargetLabel = 'default';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEFAULT" then TargetLabel = 'default';
49384      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_EMOUTFIT.
NOTE: The data set EMWS5.NEURAL_EMOUTFIT has 1 observations and 42 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
49385      proc sort data=EMWS5.Neural_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Neural_EMREPORTFIT nothreads;
49386      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
49387      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 23 observations read from the data set EMWS5.NEURAL_EMREPORTFIT.
NOTE: The data set EMWS5.NEURAL_EMREPORTFIT has 23 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49388      %let _EMwarndup = 0;
49389      %let _EMtargetdup =;
49390      %let _EMASEtargetdup =;
49391      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
49392      set EMWS5.Neural_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMOUTFIT;
49393      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
49394      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
49395      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
49396      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
49397      end;
MPRINT(EM_DIAGRAM):   end;
49398      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49399      proc sort data=EMWS5.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.BINNING_CMeta_TRAIN out=WORK.SUBSETINMETA;
49400      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
49401      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set EMWS5.BINNING_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 19 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
49402      proc sort data=EMWS5.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Neural_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
49403      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
49404      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 18 observations read from the data set EMWS5.NEURAL_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 18 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
49405      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
49406      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
49407      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
49408      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 19 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 18 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 19 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49409      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
49410      set EMWS5.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_CMeta_TRAIN;
49411      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
49412      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 12 observations read from the data set EMWS5.NEURAL_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 12 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
49413      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
49414      set EMWS5.Neural_TRAIN(keep=
49415      BL_DEFAULT
49416      CL_DEFAULT
49417      D_DEFAULT
49418      EL_DEFAULT
49419      F_default
49420      I_default
49421      P_default0
49422      P_default1
49423      R_default0
49424      R_default1
49425      U_default
49426      _WARN_
49427      default
49428      );
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_TRAIN(keep= BL_DEFAULT CL_DEFAULT D_DEFAULT EL_DEFAULT F_default I_default P_default0 P_default1 R_default0 R_default1 U_default _WARN_ default );
49429      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: View EMWS5.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.NEURAL_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 700 observations and 13 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_default*F_default / out = WORK.Neural_2V33LM8 nocol norow outpct;
MPRINT(EM_DIAGRAM):   table D_default*F_default / out = WORK.Neural_2XE55R_ nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_2V33LM8;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_2V33LM8(rename=(F_default=FROM I_default=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "default";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEFAULT" then TARGETLABEL = 'default';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Neural_2V33LM8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Neural_2V33LM8;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Neural_2XE55R_;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 dataRole target $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $9;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Neural_2XE55R_(rename=(F_default=FROM D_default=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'DECISION' DATAROLE "TRAIN" TARGET "default";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEFAULT" then TARGETLABEL = 'default';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = .;
MPRINT(EM_DIAGRAM):   CORRECTTEXT='.';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMCLASSIFICATION WORK.Neural_2XE55R_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS5.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEFAULT" then TARGETLABEL = 'default';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.Ids_default_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_default") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_default") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_default D_default ;
 
MPRINT(EM_ASSESS):   VAR P_default1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_default") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "D_default" > " " AND UPCASE(NAME) = UPCASE("D_default") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_default1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_default P_default1 EL_DEFAULT CL_DEFAULT BL_DEFAULT _tmpfreqvar_ D_default );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_default ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_default1 D_default NTARGET _tmpfreqvar_ EL_DEFAULT CL_DEFAULT BL_DEFAULT WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_default1 D_default ;
MPRINT(EM_ASSESS):   VAR NTARGET EL_DEFAULT CL_DEFAULT BL_DEFAULT ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANELTARGET _MEANCLTARGET _MEANBLTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP MNEL_TARGET MINEL_TARGET MAXEL_TARGET TOTALEL_TARGET CUMULATIVEEL CUMULATIVETOTALEL MNCL_TARGET MINCL_TARGET MAXCL_TARGET TOTALCL_TARGET CUMULATIVECL CUMULATIVETOTALCL BASECL
BASECUMTOTALCL BASECUMULATIVECL BASETOTALCL BESTTOTALBL BESTCUMULATIVEBL BESTCUMTOTALBL BESTBL ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP
SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS NUMDECISION1 NUMDECISION2 SCR_MNPROB SCR_MINPROB SCR_MAXPROB SCR_ELMEAN SCR_ELMIN SCR_ELMAX SCR_CLMEAN SCR_CLMIN SCR_CLMAX ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 CUMLOSS1 - CUMLOSS20 0 CUMBLOSS1 - CUMBLOSS20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 -
FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 - EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.3 _NEVENTS 210 _NNONEVENTS 490 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   RETAIN ELTARGET1 - ELTARGET20 0 MINELTARGET1 - MINELTARGET20 0 MAXELTARGET1 - MAXELTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY ELTARGET (20) ELTARGET1 - ELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINELTARGET (20) MINELTARGET1 - MINELTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXELTARGET (20) MAXELTARGET1 - MAXELTARGET20;
MPRINT(EM_ASSESS):   DROP ELTARGET1 - ELTARGET20 _MEANELTARGET MINELTARGET1 - MINELTARGET20 MAXELTARGET1 - MAXELTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN CLTARGET1 - CLTARGET20 0 MINCLTARGET1 - MINCLTARGET20 0 MAXCLTARGET1 - MAXCLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY CLTARGET (20) CLTARGET1 - CLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINCLTARGET (20) MINCLTARGET1 - MINCLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXCLTARGET (20) MAXCLTARGET1 - MAXCLTARGET20;
MPRINT(EM_ASSESS):   DROP CLTARGET1 - CLTARGET20 _MEANCLTARGET MINCLTARGET1 - MINCLTARGET20 MAXCLTARGET1 - MAXCLTARGET20 ;
MPRINT(EM_ASSESS):   RETAIN BLTARGET1 - BLTARGET20 0 MINBLTARGET1 - MINBLTARGET20 0 MAXBLTARGET1 - MAXBLTARGET20 0 ;
MPRINT(EM_ASSESS):   ARRAY BLTARGET (20) BLTARGET1 - BLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MINBLTARGET (20) MINBLTARGET1 - MINBLTARGET20;
MPRINT(EM_ASSESS):   ARRAY MAXBLTARGET (20) MAXBLTARGET1 - MAXBLTARGET20;
MPRINT(EM_ASSESS):   DROP BLTARGET1 - BLTARGET20 _MEANBLTARGET MINBLTARGET1 - MINBLTARGET20 MAXBLTARGET1 - MAXBLTARGET20 ;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   RETAIN D_TARGET1_1 - D_TARGET1_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET1 (100) D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   DROP D_TARGET1_1 - D_TARGET1_100;
MPRINT(EM_ASSESS):   RETAIN D_TARGET2_1 - D_TARGET2_100 0 ;
MPRINT(EM_ASSESS):   ARRAY D_TARGET2 (100) D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   DROP D_TARGET2_1 - D_TARGET2_100;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RETAIN SCR_ELMEAN1- SCR_ELMEAN1000 0 SCR_ELMIN1 - SCR_ELMIN1000 1 SCR_ELMAX1 - SCR_ELMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMEANS (1000) SCR_ELMEAN1 - SCR_ELMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMINS (1000) SCR_ELMIN1 - SCR_ELMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_ELMAXS (1000) SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_ELMEAN1 - SCR_ELMEAN1000 SCR_ELMIN1 - SCR_ELMIN1000 SCR_ELMAX1 - SCR_ELMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_CLMEAN1- SCR_CLMEAN1000 0 SCR_CLMIN1 - SCR_CLMIN1000 1 SCR_CLMAX1 - SCR_CLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMEANS (1000) SCR_CLMEAN1 - SCR_CLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMINS (1000) SCR_CLMIN1 - SCR_CLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_CLMAXS (1000) SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_CLMEAN1 - SCR_CLMEAN1000 SCR_CLMIN1 - SCR_CLMIN1000 SCR_CLMAX1 - SCR_CLMAX1000;
MPRINT(EM_ASSESS):   RETAIN SCR_BLMEAN1- SCR_BLMEAN1000 0 SCR_BLMIN1 - SCR_BLMIN1000 1 SCR_BLMAX1 - SCR_BLMAX1000 0 ;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMEANS (1000) SCR_BLMEAN1 - SCR_BLMEAN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMINS (1000) SCR_BLMIN1 - SCR_BLMIN1000;
MPRINT(EM_ASSESS):   ARRAY SCR_BLMAXS (1000) SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   DROP SCR_BLMEAN1 - SCR_BLMEAN1000 SCR_BLMIN1 - SCR_BLMIN1000 SCR_BLMAX1 - SCR_BLMAX1000;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 700));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_default1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_default1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_default1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   ELTARGET (DECILE) = SUM ( ELTARGET (DECILE) , _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINELTARGET (DECILE) = MIN (MINELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXELTARGET (DECILE) = MAX (MAXELTARGET (DECILE), _MEANELTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   CLTARGET (DECILE) = SUM ( CLTARGET (DECILE) , _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINCLTARGET (DECILE) = MIN (MINCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXCLTARGET (DECILE) = MAX (MAXCLTARGET (DECILE), _MEANCLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   BLTARGET (DECILE) = SUM ( BLTARGET (DECILE) , _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MINBLTARGET (DECILE) = MIN (MINBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   MAXBLTARGET (DECILE) = MAX (MAXBLTARGET (DECILE), _MEANBLTARGET * _WEIGHT);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_default1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_default1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_default1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_default1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   D_default = TRANSLATE (D_default, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   IF D_default = "0" THEN D_TARGET1 ( SLOT ) = SUM (D_TARGET1 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   IF D_default = "1" THEN D_TARGET2 ( SLOT ) = SUM (D_TARGET2 (SLOT) , _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_default1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_default1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_default1 );
MPRINT(EM_ASSESS):   SCR_ELMEANS ( SLOT ) = MEAN (SCR_ELMEANS (SLOT), _MEANELTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_ELMINS ( SLOT ) = MIN (SCR_ELMINS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_ELMAXS ( SLOT ) = MAX (SCR_ELMAXS (SLOT), _MEANELTARGET );
MPRINT(EM_ASSESS):   SCR_CLMEANS ( SLOT ) = MEAN (SCR_CLMEANS (SLOT), _MEANCLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_CLMINS ( SLOT ) = MIN (SCR_CLMINS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_CLMAXS ( SLOT ) = MAX (SCR_CLMAXS (SLOT), _MEANCLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMEANS ( SLOT ) = MEAN (SCR_BLMEANS (SLOT), _MEANBLTARGET * _FREQ_);
MPRINT(EM_ASSESS):   SCR_BLMINS ( SLOT ) = MIN (SCR_BLMINS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   SCR_BLMAXS ( SLOT ) = MAX (SCR_BLMAXS (SLOT), _MEANBLTARGET );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 1.8672561E-6 OVLMAX 0.998362503 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   SUMEL = SUM (OF ELTARGET1 - ELTARGET20);
MPRINT(EM_ASSESS):   DROP SUMEL ;
MPRINT(EM_ASSESS):   SUMCL = SUM (OF CLTARGET1 - CLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMCL ;
MPRINT(EM_ASSESS):   SUMBL = SUM (OF BLTARGET1 - BLTARGET20);
MPRINT(EM_ASSESS):   DROP SUMBL ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 700 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (700/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 700)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 700/20) ) / ( AVGNUMRESP / (700/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 700 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 700 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 700/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 700/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   TOTALEL_TARGET = ELTARGET (GROUP);
MPRINT(EM_ASSESS):   EL_TARGET = TOTALEL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALEL + ELTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVEEL = CUMULATIVETOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINEL_TARGET = MINELTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXEL_TARGET = MAXELTARGET (GROUP);
MPRINT(EM_ASSESS):   MNEL_TARGET = EL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXEL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXEL_TARGET + MAXEL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMEL >= C_MAXEL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTEL = MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTEL = MIN (MAXEL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTEL < 0 THEN BESTEL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALEL = BESTEL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALEL + BESTTOTALEL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMEL - C_MAXEL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEEL = BESTCUMTOTALEL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEEL = SUMEL / 700;
MPRINT(EM_ASSESS):   BASECUMULATIVEEL + BASEEL;
MPRINT(EM_ASSESS):   BASETOTALEL = SUMEL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALEL + BASETOTALEL;
MPRINT(EM_ASSESS):   TOTALCL_TARGET = CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CL_TARGET = TOTALCL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   CUMULATIVETOTALCL + CLTARGET (GROUP);
MPRINT(EM_ASSESS):   CUMULATIVECL = CUMULATIVETOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   MINCL_TARGET = MINCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXCL_TARGET = MAXCLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNCL_TARGET = CL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXCL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXCL_TARGET + MAXCL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMCL >= C_MAXCL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTCL = MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTCL = MIN (MAXCL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTCL < 0 THEN BESTCL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALCL = BESTCL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALCL + BESTTOTALCL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMCL - C_MAXCL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVECL = BESTCUMTOTALCL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASECL = SUMCL / 700;
MPRINT(EM_ASSESS):   BASECUMULATIVECL + BASECL;
MPRINT(EM_ASSESS):   BASETOTALCL = SUMCL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALCL + BASETOTALCL;
MPRINT(EM_ASSESS):   TOTALBL_TARGET = BLTARGET (GROUP);
MPRINT(EM_ASSESS):   BL_TARGET = TOTALBL_TARGET / NUMOBS;
MPRINT(EM_ASSESS):   MINBL_TARGET = MINBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MAXBL_TARGET = MAXBLTARGET (GROUP);
MPRINT(EM_ASSESS):   MNBL_TARGET = BL_TARGET ;
MPRINT(EM_ASSESS):   DROP C_MAXBL_TARGET LEFTOVER;
MPRINT(EM_ASSESS):   C_MAXBL_TARGET + MAXBL_TARGET * NUMOBS;
MPRINT(EM_ASSESS):   IF SUMBL >= C_MAXBL_TARGET THEN DO;
MPRINT(EM_ASSESS):   BESTBL = MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTBL = MIN (MAXBL_TARGET, LEFTOVER / NUMOBS);
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   IF BESTBL < 0 THEN BESTBL = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTTOTALBL = BESTBL * NUMOBS;
MPRINT(EM_ASSESS):   BESTCUMTOTALBL + BESTTOTALBL;
MPRINT(EM_ASSESS):   LEFTOVER = SUMBL - C_MAXBL_TARGET;
MPRINT(EM_ASSESS):   BESTCUMULATIVEBL = BESTCUMTOTALBL / C_NUMOBS;
MPRINT(EM_ASSESS):   BASEBL = SUMBL / 700;
MPRINT(EM_ASSESS):   BASECUMULATIVEBL + BASEBL;
MPRINT(EM_ASSESS):   BASETOTALBL = SUMBL / 20;
MPRINT(EM_ASSESS):   BASECUMTOTALBL + BASETOTALBL;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_96 - D_TARGET1_100);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_96 - D_TARGET2_100);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN96 - SCR_ELMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN96 - SCR_ELMIN100);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX96 - SCR_ELMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN96 - SCR_CLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN96 - SCR_CLMIN100);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX96 - SCR_CLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN96 - SCR_BLMEAN100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN96 - SCR_BLMIN100);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX96 - SCR_BLMAX100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_91 - D_TARGET1_95);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_91 - D_TARGET2_95);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN91 - SCR_ELMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN91 - SCR_ELMIN95);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX91 - SCR_ELMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN91 - SCR_CLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN91 - SCR_CLMIN95);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX91 - SCR_CLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN91 - SCR_BLMEAN95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN91 - SCR_BLMIN95);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX91 - SCR_BLMAX95);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_86 - D_TARGET1_90);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_86 - D_TARGET2_90);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN86 - SCR_ELMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN86 - SCR_ELMIN90);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX86 - SCR_ELMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN86 - SCR_CLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN86 - SCR_CLMIN90);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX86 - SCR_CLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN86 - SCR_BLMEAN90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN86 - SCR_BLMIN90);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX86 - SCR_BLMAX90);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_81 - D_TARGET1_85);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_81 - D_TARGET2_85);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN81 - SCR_ELMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN81 - SCR_ELMIN85);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX81 - SCR_ELMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN81 - SCR_CLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN81 - SCR_CLMIN85);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX81 - SCR_CLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN81 - SCR_BLMEAN85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN81 - SCR_BLMIN85);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX81 - SCR_BLMAX85);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_76 - D_TARGET1_80);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_76 - D_TARGET2_80);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN76 - SCR_ELMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN76 - SCR_ELMIN80);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX76 - SCR_ELMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN76 - SCR_CLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN76 - SCR_CLMIN80);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX76 - SCR_CLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN76 - SCR_BLMEAN80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN76 - SCR_BLMIN80);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX76 - SCR_BLMAX80);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_71 - D_TARGET1_75);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_71 - D_TARGET2_75);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN71 - SCR_ELMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN71 - SCR_ELMIN75);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX71 - SCR_ELMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN71 - SCR_CLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN71 - SCR_CLMIN75);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX71 - SCR_CLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN71 - SCR_BLMEAN75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN71 - SCR_BLMIN75);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX71 - SCR_BLMAX75);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_66 - D_TARGET1_70);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_66 - D_TARGET2_70);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN66 - SCR_ELMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN66 - SCR_ELMIN70);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX66 - SCR_ELMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN66 - SCR_CLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN66 - SCR_CLMIN70);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX66 - SCR_CLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN66 - SCR_BLMEAN70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN66 - SCR_BLMIN70);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX66 - SCR_BLMAX70);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_61 - D_TARGET1_65);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_61 - D_TARGET2_65);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN61 - SCR_ELMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN61 - SCR_ELMIN65);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX61 - SCR_ELMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN61 - SCR_CLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN61 - SCR_CLMIN65);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX61 - SCR_CLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN61 - SCR_BLMEAN65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN61 - SCR_BLMIN65);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX61 - SCR_BLMAX65);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_56 - D_TARGET1_60);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_56 - D_TARGET2_60);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN56 - SCR_ELMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN56 - SCR_ELMIN60);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX56 - SCR_ELMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN56 - SCR_CLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN56 - SCR_CLMIN60);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX56 - SCR_CLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN56 - SCR_BLMEAN60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN56 - SCR_BLMIN60);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX56 - SCR_BLMAX60);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_51 - D_TARGET1_55);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_51 - D_TARGET2_55);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN51 - SCR_ELMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN51 - SCR_ELMIN55);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX51 - SCR_ELMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN51 - SCR_CLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN51 - SCR_CLMIN55);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX51 - SCR_CLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN51 - SCR_BLMEAN55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN51 - SCR_BLMIN55);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX51 - SCR_BLMAX55);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_46 - D_TARGET1_50);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_46 - D_TARGET2_50);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN46 - SCR_ELMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN46 - SCR_ELMIN50);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX46 - SCR_ELMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN46 - SCR_CLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN46 - SCR_CLMIN50);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX46 - SCR_CLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN46 - SCR_BLMEAN50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN46 - SCR_BLMIN50);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX46 - SCR_BLMAX50);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_41 - D_TARGET1_45);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_41 - D_TARGET2_45);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN41 - SCR_ELMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN41 - SCR_ELMIN45);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX41 - SCR_ELMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN41 - SCR_CLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN41 - SCR_CLMIN45);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX41 - SCR_CLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN41 - SCR_BLMEAN45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN41 - SCR_BLMIN45);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX41 - SCR_BLMAX45);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_36 - D_TARGET1_40);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_36 - D_TARGET2_40);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN36 - SCR_ELMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN36 - SCR_ELMIN40);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX36 - SCR_ELMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN36 - SCR_CLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN36 - SCR_CLMIN40);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX36 - SCR_CLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN36 - SCR_BLMEAN40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN36 - SCR_BLMIN40);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX36 - SCR_BLMAX40);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_31 - D_TARGET1_35);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_31 - D_TARGET2_35);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN31 - SCR_ELMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN31 - SCR_ELMIN35);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX31 - SCR_ELMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN31 - SCR_CLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN31 - SCR_CLMIN35);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX31 - SCR_CLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN31 - SCR_BLMEAN35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN31 - SCR_BLMIN35);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX31 - SCR_BLMAX35);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_26 - D_TARGET1_30);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_26 - D_TARGET2_30);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN26 - SCR_ELMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN26 - SCR_ELMIN30);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX26 - SCR_ELMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN26 - SCR_CLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN26 - SCR_CLMIN30);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX26 - SCR_CLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN26 - SCR_BLMEAN30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN26 - SCR_BLMIN30);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX26 - SCR_BLMAX30);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_21 - D_TARGET1_25);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_21 - D_TARGET2_25);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN21 - SCR_ELMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN21 - SCR_ELMIN25);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX21 - SCR_ELMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN21 - SCR_CLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN21 - SCR_CLMIN25);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX21 - SCR_CLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN21 - SCR_BLMEAN25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN21 - SCR_BLMIN25);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX21 - SCR_BLMAX25);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_16 - D_TARGET1_20);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_16 - D_TARGET2_20);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN16 - SCR_ELMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN16 - SCR_ELMIN20);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX16 - SCR_ELMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN16 - SCR_CLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN16 - SCR_CLMIN20);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX16 - SCR_CLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN16 - SCR_BLMEAN20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN16 - SCR_BLMIN20);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX16 - SCR_BLMAX20);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_11 - D_TARGET1_15);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_11 - D_TARGET2_15);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN11 - SCR_ELMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN11 - SCR_ELMIN15);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX11 - SCR_ELMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN11 - SCR_CLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN11 - SCR_CLMIN15);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX11 - SCR_CLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN11 - SCR_BLMEAN15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN11 - SCR_BLMIN15);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX11 - SCR_BLMAX15);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_6 - D_TARGET1_10);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_6 - D_TARGET2_10);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN6 - SCR_ELMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN6 - SCR_ELMIN10);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX6 - SCR_ELMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN6 - SCR_CLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN6 - SCR_CLMIN10);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX6 - SCR_CLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN6 - SCR_BLMEAN10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN6 - SCR_BLMIN10);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX6 - SCR_BLMAX10);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   NUMDECISION1 = SUM ( OF D_TARGET1_1 - D_TARGET1_5);
MPRINT(EM_ASSESS):   NUMDECISION2 = SUM ( OF D_TARGET2_1 - D_TARGET2_5);
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = SUM (OF SCR_ELMEAN1 - SCR_ELMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_ELMIN = MIN (OF SCR_ELMIN1 - SCR_ELMIN5);
MPRINT(EM_ASSESS):   SCR_ELMAX = MAX (OF SCR_ELMAX1 - SCR_ELMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_ELMEAN = .;
MPRINT(EM_ASSESS):   SCR_ELMIN = .;
MPRINT(EM_ASSESS):   SCR_ELMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = SUM (OF SCR_CLMEAN1 - SCR_CLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_CLMIN = MIN (OF SCR_CLMIN1 - SCR_CLMIN5);
MPRINT(EM_ASSESS):   SCR_CLMAX = MAX (OF SCR_CLMAX1 - SCR_CLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_CLMEAN = .;
MPRINT(EM_ASSESS):   SCR_CLMIN = .;
MPRINT(EM_ASSESS):   SCR_CLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = SUM (OF SCR_BLMEAN1 - SCR_BLMEAN5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   SCR_BLMIN = MIN (OF SCR_BLMIN1 - SCR_BLMIN5);
MPRINT(EM_ASSESS):   SCR_BLMAX = MAX (OF SCR_BLMAX1 - SCR_BLMAX5);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   SCR_BLMEAN = .;
MPRINT(EM_ASSESS):   SCR_BLMIN = .;
MPRINT(EM_ASSESS):   SCR_BLMAX = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS SCR_ELMEAN = _MEANEL_ SCR_ELMAX = _MAXEL_ SCR_ELMIN = _MINEL_ SCR_CLMEAN = _MEANCL_ SCR_CLMAX = _MAXCL_ SCR_CLMIN = _MINCL_ NUMDECISION1 = DECISION1 NUMDECISION2 = DECISION2 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" _MEANCL_ = "Mean Computed Loss" _MAXCL_ = "Max Computed Loss" _MINCL_ = "Min Computed Loss" _MAXEL_ = "Max Expected Loss" _MINEL_ = "Min Expected Loss" _MEANEL_ = "Mean Expected Loss" DECISION1= "Report: Number of Decisions = 1"
DECISION2= "Report: Number of Decisions = 2" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC BESTBL = BESTLOSS BESTCUMTOTALBL = BESTCUMULATIVETOTALLOSS BESTCUMULATIVEBL = BESTCUMULATIVELOSS BESTTOTALBL = BESTTOTALLOSS MAXEL_TARGET =
_MAXEL_ MINEL_TARGET = _MINEL_ MNEL_TARGET = _MEANEL_ CUMULATIVEEL = CUMULATIVEEXPECTEDLOSS CUMULATIVETOTALEL= CUMULATIVETOTALEXPECTEDLOSS TOTALEL_TARGET = TOTALEXPECTEDLOSS BASECL = BASELOSS BASETOTALCL = BASETOTALLOSS MAXCL_TARGET = _MAXCL_ MINCL_TARGET
= _MINCL_ MNCL_TARGET = _MEANCL_ BASECUMTOTALCL = BASECUMULATIVETOTALLOSS BASECUMULATIVECL = BASECUMULATIVELOSS TOTALCL_TARGET = TOTALLOSS CUMULATIVECL = CUMULATIVELOSS CUMULATIVETOTALCL= CUMULATIVETOTALLOSS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MEANCL_ = "Mean Computed Loss" _MINCL_ = "Min Computed Loss" _MAXCL_ = "Max Computed Loss" BASELOSS = "Baseline Loss" TOTALLOSS = "Total Computed Loss" CUMULATIVELOSS = "Cumulative Computed Loss" CUMULATIVETOTALLOSS =
"Cumulative Total Computed Loss" BASETOTALLOSS = "Baseline Total Loss" BASECUMULATIVETOTALLOSS = "Baseline Cumulative Total Loss" BASECUMULATIVELOSS = "Baseline Cumulative Loss" BASELOSS = "Baseline Loss" BESTLOSS = "Best Loss" BESTTOTALLOSS = "Best Total
Loss" BESTCUMULATIVETOTALLOSS = "Best Cumulative Total Loss" BESTCUMULATIVELOSS = "Best Cumulative Loss" _MEANEL_ = "Mean Expected Loss" _MINEL_ = "Min Expected Loss" _MAXEL_ = "Max Expected Loss" CUMULATIVETOTALEXPECTEDLOSS = "Cumulative Expected Total
Loss" CUMULATIVEEXPECTEDLOSS = "Cumulative Expected Loss" TOTALEXPECTEDLOSS = "Total Expected Loss" _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline
Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT =
"Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of
Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "default";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'default';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "default";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'default';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
53743      %let _cn = %sysfunc(getoption(CENTER));
53744      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
53745      proc print data=EMWS5.Neural_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Neural_EMREPORTFIT noobs label;
53746      var STAT LABEL TRAIN
53747      TEST
53748      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN TEST ;
53749      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
53750      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
53751      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
53752      run;
 
NOTE: There were 23 observations read from the data set EMWS5.NEURAL_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 24.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
53753      title10;
MPRINT(EM_DIAGRAM):   title10;
53754      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
53755      proc sort data=EMWS5.Neural_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Neural_EMCLASSIFICATION nothreads;
53756      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
53757      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS5.NEURAL_EMCLASSIFICATION.
NOTE: The data set EMWS5.NEURAL_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53758      %let _cn = %sysfunc(getoption(CENTER));
53759      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
53760      proc print data=EMWS5.Neural_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Neural_EMCLASSIFICATION noobs label;
53761      var from into pct_row pct_col count percent
53762      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
53763      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
53764      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
53765      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
53766      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
53767      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
53768      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
53769      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
53770      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
53771      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
53772      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
53773      run;
 
NOTE: There were 4 observations read from the data set EMWS5.NEURAL_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 25.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53774      proc print data=EMWS5.Neural_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Neural_EMCLASSIFICATION noobs label;
53775      var from into pct_row pct_col count percent
53776      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
53777      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
53778      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
53779      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
53780      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
53781      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
53782      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
53783      where _TYPE_='DECISION';
MPRINT(EM_DIAGRAM):   where _TYPE_='DECISION';
53784      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
53785      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
53786      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_decisiontable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Decision Table";
MPRINT(EM_DIAGRAM):   run;
53787      run;
 
NOTE: There were 4 observations read from the data set EMWS5.NEURAL_EMCLASSIFICATION.
      WHERE _TYPE_='DECISION';
NOTE: The PROCEDURE PRINT printed page 26.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53788      title9;
MPRINT(EM_DIAGRAM):   title9;
53789      title10;
MPRINT(EM_DIAGRAM):   title10;
53790      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
53791      %let _cn = %sysfunc(getoption(CENTER));
53792      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
53793      data EMWS5.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS5.Neural_EMEVENTREPORT;
53794      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
53795      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
53795    ! FALSEEVENT
53796      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
53797         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True Positive" TRUENEVENT = "True Negative";
53798      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
53799      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
53800      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
53801      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
53802      set EMWS5.Neural_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMEVENTREPORT;
53803      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_EMEVENTREPORT.
NOTE: The data set EMWS5.NEURAL_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
53804      proc print data=EMWS5.Neural_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Neural_EMEVENTREPORT noobs label;
53805      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
53806      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
53807      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
53808      run;
 
NOTE: There were 1 observations read from the data set EMWS5.NEURAL_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 27.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53809      title10;
MPRINT(EM_DIAGRAM):   title10;
53810      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
53811      proc datasets library=EMWS5 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS5 nolist;
53812      modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   modify Neural_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
53813      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
53814      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
53815      run;
 
NOTE: MODIFY was successful for EMWS5.NEURAL_EMRANK.DATA.
53816      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
53817      %let _cn = %sysfunc(getoption(CENTER));
53818      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
53819      proc print data=EMWS5.Neural_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Neural_EMRANK label noobs;
53820      var
53821      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
53822      by
53823      notsorted DATAROLE
53824      notsorted TARGET
53825      notsorted TARGETLABEL
53826      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
53827      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
53828      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
53829      run;
 
NOTE: There were 20 observations read from the data set EMWS5.NEURAL_EMRANK.
NOTE: The PROCEDURE PRINT printed page 28.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
53830      title10;
MPRINT(EM_DIAGRAM):   title10;
53831      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
53832      proc datasets library=EMWS5 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS5 nolist;
53833      modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Neural_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
53834      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
53835      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
53836      run;
 
NOTE: MODIFY was successful for EMWS5.NEURAL_EMSCOREDIST.DATA.
53837      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Neural_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "default" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
