MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:17:24" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28 March 2021
Time:                20:17:24
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O12ZQ8QR "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O12ZQ8QR new;
MPRINT(EM_DIAGRAM):   run;
26500      %let EMEXCEPTIONSTRING=;
26501      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
26502      * SCORE: Tree;
MPRINT(EM_DIAGRAM):   * SCORE: Tree;
26503      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26504      %let EM_ACTION = SCORE;
26505      %let syscc = 0;
26506      %macro main;
26507      
26508        %if %upcase(&EM_ACTION) = CREATE %then %do;
26509          filename temp catalog 'sashelp.emmodl.tree_create.source';
26510          %include temp;
26511          filename temp;
26512      
26513          %em_tree_create;
26514        %end;
26515      
26516         %else
26517         %if %upcase(&EM_ACTION) = TRAIN %then %do;
26518      
26519             filename temp catalog 'sashelp.emmodl.tree_train.source';
26520             %include temp;
26521             filename temp;
26522             %em_tree_train;
26523         %end;
26524      
26525        %else
26526        %if %upcase(&EM_ACTION) = SCORE %then %do;
26527          filename temp catalog 'sashelp.emmodl.tree_score.source';
26528          %include temp;
26529          filename temp;
26530      
26531          %em_tree_score;
26532      
26533        %end;
26534      
26535        %else
26536        %if %upcase(&EM_ACTION) = REPORT %then %do;
26537      
26538             filename temp catalog 'sashelp.emmodl.tree_report.source';
26539             %include temp;
26540             filename temp;
26541      
26542             %em_tree_report;
26543         %end;
26544      
26545        %else
26546        %if %upcase(&EM_ACTION) = OPENINT %then %do;
26547      
26548             filename temp catalog 'sashelp.emmodl.tree_actions.source';
26549             %include temp;
26550             filename temp;
26551             %EM_TREE_OPENTREEVIEWER;
26552      
26553         %end;
26554      
26555        %else
26556        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
26557      
26558             filename temp catalog 'sashelp.emmodl.tree_actions.source';
26559             %include temp;
26560             filename temp;
26561             %EM_TREE_CLOSETREEVIEWER;
26562      
26563         %end;
26564      
26565      
26566         %doendm:
26567      %mend main;
26568      
26569      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
26571     +%macro em_tree_score;
26573     +   /* determine if multiple targets will be processed */
26574     +   %let em_tree_multipleTargets=N;
26575     +   %let em_tree_numTarget=1;
26576     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
26577     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
26578     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
26579     +         %let em_tree_multipleTargets=N;
26580     +      %end;
26581     +      %else %do;
26582     +         /* create macro array of targets  */
26583     +         data _null_;
26584     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
26585     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
26586     +           if eof then
26587     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
26588     +        run;
26590     +        %if &em_tree_numTarget gt 1 %then %do;
26591     +           %let em_tree_multipleTargets=Y;
26592     +        %end;
26593     +      %end;
26594     +   %end;
26596     +   /* build flow and publish scoring code */
26597     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
26598     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
26600     +   filename treeflow "&EM_USER_TREEFLOW";
26601     +   filename treepub "&EM_USER_TREEPUBLISH";
26603     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
26604     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
26606     +   %em_copyfile(infref=treeflow, outfref=flowref);
26607     +   %em_copyfile(infref=treepub, outfref=pubref);
26609     +   filename treeflow;
26610     +   filename treepub;
26612     +   /* if priors are used, add code to generate unadjusted residuals in export */
26613     +   %let useAdjPriors = N;
26614     +   data _null_;
26615     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
26616     +     if USE="Y" then call symput('useAdjPriors', 'Y');
26617     +   run;
26618     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
26619     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
26620     +      %include temp;
26621     +      filename temp;
26623     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
26624     +      filename adjref "&EM_USER_adjResidualCode";
26625     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
26627     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
26629     +      filename adjref;
26630     +   %end;
26632     +   /* LEAF */
26633     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
26634     +      data _null_;
26635     +        file flowref mod;
26636     +        put 'drop _LEAF_;';
26637     +      run;
26639     +      data _null_;
26640     +        file pubref mod;
26641     +        put 'drop _LEAF_;';
26642     +      run;
26644     +   %end;
26646     +   filename flowref;
26647     +   filename pubref;
26649     +   /* em_metachange code */
26650     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
26651     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
26652     +   %end;
26654     +   /* variable selection based on importance stat    */
26655     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
26656     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
26657     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
26658     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
26659     +     %let obs = %sysfunc(fetch(&dsid));
26660     +     %do %while(&obs=0);
26661     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
26662     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
26663     +       %EM_METACHANGE(name=&varname, role=REJECTED);
26664     +       %let obs = %sysfunc(fetch(&dsid));
26665     +     %end;
26666     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
26667     +   %end;
26669     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
26670     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
26671     +    %let tree_pred_vars = ;
26672     +    %let tree_pred_lvl =;
26673     +    %let numpred= 0;
26675     +    data _null_;
26676     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
26677     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
26678     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
26679     +     if eof then
26680     +       call symput('numpred', strip(put(_N_, BEST.)));
26681     +    run;
26682     +   %end;
26684     +   %if &numpred ne 0 %then %do;
26685     +    %do i=1 %to &numpred;
26686     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
26687     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
26688     +    %end;
26689     +   %end;
26691     +   /* determine if multiple targets will be processed */
26692     +   %let em_tree_multipleTargets=N;
26693     +   %let em_tree_numTarget=1;
26694     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
26695     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
26696     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
26697     +         %let em_tree_multipleTargets=N;
26698     +      %end;
26699     +      %else %do;
26700     +        data _null_;
26701     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
26702     +          if eof then
26703     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
26704     +        run;
26706     +        %if &em_tree_numTarget gt 1 %then %do;
26707     +           %let em_tree_multipleTargets=Y;
26708     +        %end;
26709     +     %end;
26710     +   %end;
26712     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
26713     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
26715     +      /* variable importance */
26716     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
26717     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
26719     +         %let validexist=0;
26720     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
26721     +           %let validexist=1;
26722     +         %end;
26724     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
26725     +         /* and the columns may not be generated                                                                                 */
26726     +         %let em_tree_cvexists=;
26727     +         %let em_tree_surrexists=.;
26728     +         data _null_;
26729     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
26730     +            if eof then do ;
26731     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
26732     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
26733     +            end;
26734     +         run;
26736     +         data &EM_USER_OUTIMPORT;
26737     +            set &EM_USER_OUTIMPORT;
26739     +            /* format columns based on Precison value specified */
26740     +            format importance 15.&EM_PROPERTY_PRECISION
26741     +                 %if &validexist %then %do;
26742     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
26743     +                 %end;
26744     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
26745     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
26746     +                 %end;
26747     +            ;
26748     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
26749     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
26750     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
26751     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
26752     +                 %if "&em_tree_surrexists" ne "" %then %do;
26753     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
26754     +                 %end;
26755     +                 %if &validexist %then %do;
26756     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
26757     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
26758     +                 %end;
26759     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
26760     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
26761     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
26762     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
26763     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
26764     +                 %end;
26765     +            ;
26766     +         run;
26768     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
26769     +      %end;
26770     +   %end;
26772     +   %doendm:
26773     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28 March 2021 20:17:24,
      Create Time=28 March 2021 20:14:37

NOTE: 243 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28 March 2021 20:17:24,
      Create Time=28 March 2021 20:14:37

NOTE: 194 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS5.Ids_default_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 1 observations read from the data set EMWS5.IDS_DEFAULT_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=7960,
      Last Modified=28 March 2021 20:17:24,
      Create Time=28 March 2021 20:14:37

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=6661,
      Last Modified=28 March 2021 20:17:24,
      Create Time=28 March 2021 20:14:37

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("credit_history                  ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("age                             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("instalment                      ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("residence                       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("personal_status                 ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS5.Ids_default_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 2 observations read from the data set EMWS5.IDS_DEFAULT_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_default1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_default0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS5.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data EMWS5.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS5.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" 
CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 12 observations read from the data set EMWS5.TREE_OUTIMPORT.
NOTE: The data set EMWS5.TREE_OUTIMPORT has 12 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.47847314154658;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26774      
26775      *------------------------------------------------------------*;
26776      * End SCORE: Tree;
26777      *------------------------------------------------------------*;

26778      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
26779      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
26780      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

26781      filename x "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
26782      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
26783      file x;
MPRINT(EM_DIAGRAM):   file x;
26784      put 'if upcase(NAME) = "AGE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "AGE" then do;';
26785      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26786      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26787      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26788      put 'if upcase(NAME) = "CREDIT_HISTORY" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "CREDIT_HISTORY" then do;';
26789      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26790      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26791      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26792      put 'if upcase(NAME) = "INSTALMENT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "INSTALMENT" then do;';
26793      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26794      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26795      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26796      put 'if upcase(NAME) = "PERSONAL_STATUS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "PERSONAL_STATUS" then do;';
26797      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26798      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26799      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26800      put 'if upcase(NAME) = "Q_DEFAULT0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_DEFAULT0" then do;';
26801      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
26802      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26803      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26804      put 'if upcase(NAME) = "Q_DEFAULT1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_DEFAULT1" then do;';
26805      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
26806      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26807      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26808      put 'if upcase(NAME) = "RESIDENCE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "RESIDENCE" then do;';
26809      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
26810      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26811      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
26812      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
26813      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
26814      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
26815      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
26816      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 20:17:24,
      Create Time=28 March 2021 20:14:37

NOTE: 32 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 44.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

26817      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
26818      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
26819      *------------------------------------------------------------*;
26820      * Tree: Scoring DATA data;
26821      *------------------------------------------------------------*;
26822      data EMWS5.Tree_TRAIN
26823      / view=EMWS5.Tree_TRAIN
26824      ;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree_TRAIN / view=EMWS5.Tree_TRAIN ;
26825      set EMWS5.VarClus_TRAIN
26826      ;
MPRINT(EM_DIAGRAM):   set EMWS5.VarClus_TRAIN ;
26827      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
26828     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
26829     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
26830     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
26831     +
26832     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
26833     +LENGTH F_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_default $ 12;
26834     +LENGTH I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_default $ 12;
26835     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
26836     +
26837     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
26838     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
26839     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
26840     +label P_default1 = 'Predicted: default=1' ;
MPRINT(EM_DIAGRAM):   label P_default1 = 'Predicted: default=1' ;
26841     +label P_default0 = 'Predicted: default=0' ;
MPRINT(EM_DIAGRAM):   label P_default0 = 'Predicted: default=0' ;
26842     +label Q_default1 = 'Unadjusted P: default=1' ;
MPRINT(EM_DIAGRAM):   label Q_default1 = 'Unadjusted P: default=1' ;
26843     +label Q_default0 = 'Unadjusted P: default=0' ;
MPRINT(EM_DIAGRAM):   label Q_default0 = 'Unadjusted P: default=0' ;
26844     +label R_default1 = 'Residual: default=1' ;
MPRINT(EM_DIAGRAM):   label R_default1 = 'Residual: default=1' ;
26845     +label R_default0 = 'Residual: default=0' ;
MPRINT(EM_DIAGRAM):   label R_default0 = 'Residual: default=0' ;
26846     +label F_default = 'From: default' ;
MPRINT(EM_DIAGRAM):   label F_default = 'From: default' ;
26847     +label I_default = 'Into: default' ;
MPRINT(EM_DIAGRAM):   label I_default = 'Into: default' ;
26848     +label U_default = 'Unnormalized Into: default' ;
MPRINT(EM_DIAGRAM):   label U_default = 'Unnormalized Into: default' ;
26849     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
26850     +
26851     +
26852     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
26853     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
26854     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
26855     +LENGTH _ARBFMT_3 $      3; DROP _ARBFMT_3;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_3 $ 3;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_3;
26856     +_ARBFMT_3 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = ' ';
26857     +LENGTH _ARBFMT_4 $      4; DROP _ARBFMT_4;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_4 $ 4;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_4;
26858     +_ARBFMT_4 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = ' ';
26859     +
26860     +
26861     +_ARBFMT_12 = PUT( default , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( default , BEST12.);
26862     + %DMNORMCP( _ARBFMT_12, F_default );
MPRINT(DMNORMCP):   F_default=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( acc_status , $3.);
26863     +
26864     +******             ASSIGN OBSERVATION TO NODE             ******;
26865     +_ARBFMT_3 = PUT( acc_status , $3.);
26866     + %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A14' ,'A13' ) THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( other_instalments , $4.);
26867     +IF _ARBFMT_3 IN ('A14' ,'A13' ) THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
26868     +  _ARBFMT_4 = PUT( other_instalments , $4.);
26869     +   %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('A141' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
MPRINT(EM_DIAGRAM):   P_default1 = 0.36585365853658;
MPRINT(EM_DIAGRAM):   P_default0 = 0.63414634146341;
26870     +  IF _ARBFMT_4 IN ('A141' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.36585365853658;
26871     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.63414634146341;
26872     +    _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26873     +    P_default1  =     0.36585365853658;
MPRINT(EM_DIAGRAM):   U_default = 0;
26874     +    P_default0  =     0.63414634146341;
MPRINT(EM_DIAGRAM):   END;
26875     +    Q_default1  =     0.36585365853658;
26876     +    Q_default0  =     0.63414634146341;
MPRINT(EM_DIAGRAM):   ELSE DO;
26877     +    I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( acc_status , $3.);
26878     +    U_default  =                    0;
26879     +    END;
26880     +  ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
26881     +    _ARBFMT_3 = PUT( acc_status , $3.);
26882     +     %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A13' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 14;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
MPRINT(EM_DIAGRAM):   P_default1 = 0.22222222222222;
MPRINT(EM_DIAGRAM):   P_default0 = 0.77777777777777;
26883     +    IF _ARBFMT_3 IN ('A13' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.22222222222222;
26884     +      _NODE_  =                   14;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.77777777777777;
26885     +      _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26886     +      P_default1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   U_default = 0;
26887     +      P_default0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   END;
26888     +      Q_default1  =     0.22222222222222;
26889     +      Q_default0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   ELSE DO;
26890     +      I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( pourpose , $4.);
26891     +      U_default  =                    0;
26892     +      END;
26893     +    ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
26894     +      _ARBFMT_4 = PUT( pourpose , $4.);
26895     +       %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('A43' ,'A40' ,'A41' ,'A46' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
MPRINT(EM_DIAGRAM):   P_default1 = 0.04022988505747;
MPRINT(EM_DIAGRAM):   P_default0 = 0.95977011494252;
26896     +      IF _ARBFMT_4 IN ('A43' ,'A40' ,'A41' ,'A46' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.04022988505747;
26897     +        _NODE_  =                   21;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.95977011494252;
26898     +        _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26899     +        P_default1  =     0.04022988505747;
MPRINT(EM_DIAGRAM):   U_default = 0;
26900     +        P_default0  =     0.95977011494252;
MPRINT(EM_DIAGRAM):   END;
26901     +        Q_default1  =     0.04022988505747;
26902     +        Q_default0  =     0.95977011494252;
MPRINT(EM_DIAGRAM):   ELSE DO;
26903     +        I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( job , $4.);
26904     +        U_default  =                    0;
26905     +        END;
26906     +      ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
26907     +        _ARBFMT_4 = PUT( job , $4.);
26908     +         %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('A174' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
MPRINT(EM_DIAGRAM):   P_default1 = 0.66666666666666;
MPRINT(EM_DIAGRAM):   P_default0 = 0.33333333333333;
26909     +        IF _ARBFMT_4 IN ('A174' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.66666666666666;
26910     +          _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.33333333333333;
26911     +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   I_default = '1' ;
26912     +          P_default1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   U_default = 1;
26913     +          P_default0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   END;
26914     +          Q_default1  =     0.66666666666666;
26915     +          Q_default0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   ELSE DO;
26916     +          I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( employment , $3.);
26917     +          U_default  =                    1;
26918     +          END;
26919     +        ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
26920     +          _ARBFMT_3 = PUT( employment , $3.);
26921     +           %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A72' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
MPRINT(EM_DIAGRAM):   P_default1 = 0.46153846153846;
MPRINT(EM_DIAGRAM):   P_default0 = 0.53846153846153;
26922     +          IF _ARBFMT_3 IN ('A72' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.46153846153846;
26923     +            _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.53846153846153;
26924     +            _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26925     +            P_default1  =     0.46153846153846;
MPRINT(EM_DIAGRAM):   U_default = 0;
26926     +            P_default0  =     0.53846153846153;
MPRINT(EM_DIAGRAM):   END;
26927     +            Q_default1  =     0.46153846153846;
26928     +            Q_default0  =     0.53846153846153;
MPRINT(EM_DIAGRAM):   ELSE DO;
26929     +            I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
26930     +            U_default  =                    0;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
26931     +            END;
MPRINT(EM_DIAGRAM):   P_default1 = 0.08;
26932     +          ELSE DO;
MPRINT(EM_DIAGRAM):   P_default0 = 0.92;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.08;
26933     +            _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.92;
26934     +            _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26935     +            P_default1  =                 0.08;
MPRINT(EM_DIAGRAM):   U_default = 0;
26936     +            P_default0  =                 0.92;
MPRINT(EM_DIAGRAM):   END;
26937     +            Q_default1  =                 0.08;
MPRINT(EM_DIAGRAM):   END;
26938     +            Q_default0  =                 0.92;
MPRINT(EM_DIAGRAM):   END;
26939     +            I_default  = '0' ;
MPRINT(EM_DIAGRAM):   END;
26940     +            U_default  =                    0;
MPRINT(EM_DIAGRAM):   END;
26941     +            END;
MPRINT(EM_DIAGRAM):   END;
26942     +          END;
26943     +        END;
MPRINT(EM_DIAGRAM):   ELSE DO;
26944     +      END;
26945     +    END;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(duration ) AND 22.5 <= duration THEN DO;
26946     +  END;
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( savings , $3.);
26947     +ELSE DO;
26948     +  IF  NOT MISSING(duration ) AND
26949     +                    22.5 <= duration  THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
26950     +    _ARBFMT_3 = PUT( savings , $3.);
26951     +     %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A65' ,'A64' ) THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( acc_status , $3.);
26952     +    IF _ARBFMT_3 IN ('A65' ,'A64' ) THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
26953     +      _ARBFMT_3 = PUT( acc_status , $3.);
26954     +       %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A11' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
MPRINT(EM_DIAGRAM):   P_default1 = 0.44444444444444;
MPRINT(EM_DIAGRAM):   P_default0 = 0.55555555555555;
26955     +      IF _ARBFMT_3 IN ('A11' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.44444444444444;
26956     +        _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.55555555555555;
26957     +        _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26958     +        P_default1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   U_default = 0;
26959     +        P_default0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   END;
26960     +        Q_default1  =     0.44444444444444;
26961     +        Q_default0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   ELSE DO;
26962     +        I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 19;
26963     +        U_default  =                    0;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
26964     +        END;
MPRINT(EM_DIAGRAM):   P_default1 = 0.0625;
26965     +      ELSE DO;
MPRINT(EM_DIAGRAM):   P_default0 = 0.9375;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.0625;
26966     +        _NODE_  =                   19;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.9375;
26967     +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26968     +        P_default1  =               0.0625;
MPRINT(EM_DIAGRAM):   U_default = 0;
26969     +        P_default0  =               0.9375;
MPRINT(EM_DIAGRAM):   END;
26970     +        Q_default1  =               0.0625;
MPRINT(EM_DIAGRAM):   END;
26971     +        Q_default0  =               0.9375;
26972     +        I_default  = '0' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
26973     +        U_default  =                    0;
MPRINT(EM_DIAGRAM):   _NODE_ = 10;
26974     +        END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
26975     +      END;
MPRINT(EM_DIAGRAM):   P_default1 = 0.62857142857142;
26976     +    ELSE DO;
MPRINT(EM_DIAGRAM):   P_default0 = 0.37142857142857;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.62857142857142;
26977     +      _NODE_  =                   10;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.37142857142857;
26978     +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   I_default = '1' ;
26979     +      P_default1  =     0.62857142857142;
MPRINT(EM_DIAGRAM):   U_default = 1;
26980     +      P_default0  =     0.37142857142857;
MPRINT(EM_DIAGRAM):   END;
26981     +      Q_default1  =     0.62857142857142;
MPRINT(EM_DIAGRAM):   END;
26982     +      Q_default0  =     0.37142857142857;
26983     +      I_default  = '1' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
26984     +      U_default  =                    1;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
26985     +      END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
26986     +    END;
MPRINT(EM_DIAGRAM):   P_default1 = 0.33953488372093;
26987     +  ELSE DO;
MPRINT(EM_DIAGRAM):   P_default0 = 0.66046511627906;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.33953488372093;
26988     +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.66046511627906;
26989     +    _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
26990     +    P_default1  =     0.33953488372093;
MPRINT(EM_DIAGRAM):   U_default = 0;
26991     +    P_default0  =     0.66046511627906;
MPRINT(EM_DIAGRAM):   END;
26992     +    Q_default1  =     0.33953488372093;
MPRINT(EM_DIAGRAM):   END;
26993     +    Q_default0  =     0.66046511627906;
26994     +    I_default  = '0' ;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
26995     +    U_default  =                    0;
26996     +    END;
MPRINT(EM_DIAGRAM):   IF F_default NE '1' AND F_default NE '0' THEN DO;
26997     +  END;
MPRINT(EM_DIAGRAM):   R_default1 = .;
26998     +
MPRINT(EM_DIAGRAM):   R_default0 = .;
26999     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   END;
27000     +IF  F_default  NE '1'
27001     +AND F_default  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27002     +        R_default1  = .;
MPRINT(EM_DIAGRAM):   R_default1 = -P_default1 ;
27003     +        R_default0  = .;
MPRINT(EM_DIAGRAM):   R_default0 = -P_default0 ;
27004     + END;
MPRINT(EM_DIAGRAM):   SELECT( F_default );
27005     + ELSE DO;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_default1 = R_default1 +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_default0 = R_default0 +1;
27006     +       R_default1  =  -P_default1 ;
MPRINT(EM_DIAGRAM):   END;
27007     +       R_default0  =  -P_default0 ;
MPRINT(EM_DIAGRAM):   END;
27008     +       SELECT( F_default  );
27009     +          WHEN( '1'  ) R_default1  = R_default1  +1;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
27010     +          WHEN( '0'  ) R_default0  = R_default0  +1;
27011     +       END;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
27012     + END;
MPRINT(EM_DIAGRAM):   label D_DEFAULT = 'Decision: default' ;
27013     +
27014     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   label EL_DEFAULT = 'Expected Loss: default' ;
27015     +
27016     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   label BL_DEFAULT = 'Best Loss: default' ;
27017     +label D_DEFAULT = 'Decision: default' ;
MPRINT(EM_DIAGRAM):   label CL_DEFAULT = 'Computed Loss: default' ;
27018     +label EL_DEFAULT = 'Expected Loss: default' ;
27019     +label BL_DEFAULT = 'Best Loss: default' ;
MPRINT(EM_DIAGRAM):   length D_DEFAULT $ 9;
27020     +label CL_DEFAULT = 'Computed Loss: default' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = ' ';
27021     +
MPRINT(EM_DIAGRAM):   EL_DEFAULT = .;
27022     +length D_DEFAULT $ 9;
MPRINT(EM_DIAGRAM):   BL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   CL_DEFAULT = .;
27023     +
27024     +D_DEFAULT = ' ';
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
27025     +EL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
27026     +BL_DEFAULT = .;
27027     +CL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '1' ;
27028     +
MPRINT(EM_DIAGRAM):   EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
27029     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   drop _sum;
27030     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _sum = P_default1 * 5 + P_default0 * 0;
27031     +
MPRINT(EM_DIAGRAM):   if _sum < EL_DEFAULT + -2.27374E-12 then do;
27032     +D_DEFAULT = '1' ;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
27033     +EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '0' ;
27034     +drop _sum;
MPRINT(EM_DIAGRAM):   end;
27035     +_sum = P_default1 * 5 + P_default0 * 0;
27036     +if _sum < EL_DEFAULT + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
27037     +   EL_DEFAULT = _sum; _decnum = 2;
27038     +   D_DEFAULT = '0' ;
27039     +end;
27040     +
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 0 5 1 0 );
27041     +*** Decision Matrix;
27042     +array TREEdema [2,2] _temporary_ (
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
27043     +/* row 1 */  0 5
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_default );
27044     +/* row 2 */  1 0
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
27045     +);
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
27046     +
27047     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
27048     +drop _tarnum; select( F_default );
MPRINT(EM_DIAGRAM):   end;
27049     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
27050     +   when('0' ) _tarnum = 2;
27051     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   CL_DEFAULT = TREEdema [_tarnum,_decnum];
27052     +end;
27053     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
27054     +
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 0 0);
27055     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   BL_DEFAULT = TREEdebe [_tarnum];
27056     +CL_DEFAULT = TREEdema [_tarnum,_decnum];
27057     +
27058     +*** Best Possible Consequence of Any Decision without Cost;
27059     +array TREEdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   TREEdeex:;
27060     +BL_DEFAULT = TREEdebe [_tarnum];
27061     +
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
27062     +
27063     +TREEdeex:;
MPRINT(EM_DIAGRAM):   ****************************************************************;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
27064     +
MPRINT(EM_DIAGRAM):   ****************************************************************;
27065     +*** End Decision Processing ;
27066     +
MPRINT(EM_DIAGRAM):   drop _LEAF_;
27067     +****************************************************************;
27068     +******          END OF DECISION TREE SCORING CODE         ******;
27069     +****************************************************************;
27070     +
27071     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
27072      run;

NOTE: DATA STEP view saved on file EMWS5.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
      

MPRINT(EM_DIAGRAM):   quit;
27073      quit;
27074      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
27075      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
27076      *------------------------------------------------------------*;
27077      * Tree: Scoring TEST data;
27078      *------------------------------------------------------------*;
27079      data EMWS5.Tree_TEST
27080      / view=EMWS5.Tree_TEST
27081      ;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree_TEST / view=EMWS5.Tree_TEST ;
27082      set EMWS5.VarClus_TEST
27083      ;
MPRINT(EM_DIAGRAM):   set EMWS5.VarClus_TEST ;
27084      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\Tree\EMFLOWSCORE.sas.
27085     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27086     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
27087     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27088     +
27089     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
27090     +LENGTH F_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_default $ 12;
27091     +LENGTH I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_default $ 12;
27092     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
27093     +
27094     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
27095     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
27096     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
27097     +label P_default1 = 'Predicted: default=1' ;
MPRINT(EM_DIAGRAM):   label P_default1 = 'Predicted: default=1' ;
27098     +label P_default0 = 'Predicted: default=0' ;
MPRINT(EM_DIAGRAM):   label P_default0 = 'Predicted: default=0' ;
27099     +label Q_default1 = 'Unadjusted P: default=1' ;
MPRINT(EM_DIAGRAM):   label Q_default1 = 'Unadjusted P: default=1' ;
27100     +label Q_default0 = 'Unadjusted P: default=0' ;
MPRINT(EM_DIAGRAM):   label Q_default0 = 'Unadjusted P: default=0' ;
27101     +label R_default1 = 'Residual: default=1' ;
MPRINT(EM_DIAGRAM):   label R_default1 = 'Residual: default=1' ;
27102     +label R_default0 = 'Residual: default=0' ;
MPRINT(EM_DIAGRAM):   label R_default0 = 'Residual: default=0' ;
27103     +label F_default = 'From: default' ;
MPRINT(EM_DIAGRAM):   label F_default = 'From: default' ;
27104     +label I_default = 'Into: default' ;
MPRINT(EM_DIAGRAM):   label I_default = 'Into: default' ;
27105     +label U_default = 'Unnormalized Into: default' ;
MPRINT(EM_DIAGRAM):   label U_default = 'Unnormalized Into: default' ;
27106     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
27107     +
27108     +
27109     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
27110     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
27111     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
27112     +LENGTH _ARBFMT_3 $      3; DROP _ARBFMT_3;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_3 $ 3;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_3;
27113     +_ARBFMT_3 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = ' ';
27114     +LENGTH _ARBFMT_4 $      4; DROP _ARBFMT_4;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_4 $ 4;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_4;
27115     +_ARBFMT_4 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = ' ';
27116     +
27117     +
27118     +_ARBFMT_12 = PUT( default , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( default , BEST12.);
27119     + %DMNORMCP( _ARBFMT_12, F_default );
MPRINT(DMNORMCP):   F_default=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
27120     +
27121     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
27122     +_ARBFMT_3 = PUT( acc_status , $3.);
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( acc_status , $3.);
27123     + %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27124     +IF _ARBFMT_3 IN ('A14' ,'A13' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A14' ,'A13' ) THEN DO;
27125     +  _ARBFMT_4 = PUT( other_instalments , $4.);
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( other_instalments , $4.);
27126     +   %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27127     +  IF _ARBFMT_4 IN ('A141' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('A141' ) THEN DO;
27128     +    _NODE_  =                    6;
MPRINT(EM_DIAGRAM):   _NODE_ = 6;
27129     +    _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
27130     +    P_default1  =     0.36585365853658;
MPRINT(EM_DIAGRAM):   P_default1 = 0.36585365853658;
27131     +    P_default0  =     0.63414634146341;
MPRINT(EM_DIAGRAM):   P_default0 = 0.63414634146341;
27132     +    Q_default1  =     0.36585365853658;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.36585365853658;
27133     +    Q_default0  =     0.63414634146341;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.63414634146341;
27134     +    I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27135     +    U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27136     +    END;
MPRINT(EM_DIAGRAM):   END;
27137     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27138     +    _ARBFMT_3 = PUT( acc_status , $3.);
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( acc_status , $3.);
27139     +     %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27140     +    IF _ARBFMT_3 IN ('A13' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A13' ) THEN DO;
27141     +      _NODE_  =                   14;
MPRINT(EM_DIAGRAM):   _NODE_ = 14;
27142     +      _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
27143     +      P_default1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   P_default1 = 0.22222222222222;
27144     +      P_default0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   P_default0 = 0.77777777777777;
27145     +      Q_default1  =     0.22222222222222;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.22222222222222;
27146     +      Q_default0  =     0.77777777777777;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.77777777777777;
27147     +      I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27148     +      U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27149     +      END;
MPRINT(EM_DIAGRAM):   END;
27150     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27151     +      _ARBFMT_4 = PUT( pourpose , $4.);
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( pourpose , $4.);
27152     +       %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27153     +      IF _ARBFMT_4 IN ('A43' ,'A40' ,'A41' ,'A46' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('A43' ,'A40' ,'A41' ,'A46' ) THEN DO;
27154     +        _NODE_  =                   21;
MPRINT(EM_DIAGRAM):   _NODE_ = 21;
27155     +        _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
27156     +        P_default1  =     0.04022988505747;
MPRINT(EM_DIAGRAM):   P_default1 = 0.04022988505747;
27157     +        P_default0  =     0.95977011494252;
MPRINT(EM_DIAGRAM):   P_default0 = 0.95977011494252;
27158     +        Q_default1  =     0.04022988505747;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.04022988505747;
27159     +        Q_default0  =     0.95977011494252;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.95977011494252;
27160     +        I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27161     +        U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27162     +        END;
MPRINT(EM_DIAGRAM):   END;
27163     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27164     +        _ARBFMT_4 = PUT( job , $4.);
MPRINT(EM_DIAGRAM):   _ARBFMT_4 = PUT( job , $4.);
27165     +         %DMNORMIP( _ARBFMT_4);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_4,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27166     +        IF _ARBFMT_4 IN ('A174' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_4 IN ('A174' ) THEN DO;
27167     +          _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
27168     +          _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
27169     +          P_default1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_default1 = 0.66666666666666;
27170     +          P_default0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_default0 = 0.33333333333333;
27171     +          Q_default1  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.66666666666666;
27172     +          Q_default0  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.33333333333333;
27173     +          I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_default = '1' ;
27174     +          U_default  =                    1;
MPRINT(EM_DIAGRAM):   U_default = 1;
27175     +          END;
MPRINT(EM_DIAGRAM):   END;
27176     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27177     +          _ARBFMT_3 = PUT( employment , $3.);
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( employment , $3.);
27178     +           %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27179     +          IF _ARBFMT_3 IN ('A72' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A72' ) THEN DO;
27180     +            _NODE_  =                   26;
MPRINT(EM_DIAGRAM):   _NODE_ = 26;
27181     +            _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
27182     +            P_default1  =     0.46153846153846;
MPRINT(EM_DIAGRAM):   P_default1 = 0.46153846153846;
27183     +            P_default0  =     0.53846153846153;
MPRINT(EM_DIAGRAM):   P_default0 = 0.53846153846153;
27184     +            Q_default1  =     0.46153846153846;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.46153846153846;
27185     +            Q_default0  =     0.53846153846153;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.53846153846153;
27186     +            I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27187     +            U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27188     +            END;
MPRINT(EM_DIAGRAM):   END;
27189     +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27190     +            _NODE_  =                   27;
MPRINT(EM_DIAGRAM):   _NODE_ = 27;
27191     +            _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
27192     +            P_default1  =                 0.08;
MPRINT(EM_DIAGRAM):   P_default1 = 0.08;
27193     +            P_default0  =                 0.92;
MPRINT(EM_DIAGRAM):   P_default0 = 0.92;
27194     +            Q_default1  =                 0.08;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.08;
27195     +            Q_default0  =                 0.92;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.92;
27196     +            I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27197     +            U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27198     +            END;
MPRINT(EM_DIAGRAM):   END;
27199     +          END;
MPRINT(EM_DIAGRAM):   END;
27200     +        END;
MPRINT(EM_DIAGRAM):   END;
27201     +      END;
MPRINT(EM_DIAGRAM):   END;
27202     +    END;
MPRINT(EM_DIAGRAM):   END;
27203     +  END;
MPRINT(EM_DIAGRAM):   END;
27204     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27205     +  IF  NOT MISSING(duration ) AND
27206     +                    22.5 <= duration  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(duration ) AND 22.5 <= duration THEN DO;
27207     +    _ARBFMT_3 = PUT( savings , $3.);
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( savings , $3.);
27208     +     %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27209     +    IF _ARBFMT_3 IN ('A65' ,'A64' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A65' ,'A64' ) THEN DO;
27210     +      _ARBFMT_3 = PUT( acc_status , $3.);
MPRINT(EM_DIAGRAM):   _ARBFMT_3 = PUT( acc_status , $3.);
27211     +       %DMNORMIP( _ARBFMT_3);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
27212     +      IF _ARBFMT_3 IN ('A11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_3 IN ('A11' ) THEN DO;
27213     +        _NODE_  =                   18;
MPRINT(EM_DIAGRAM):   _NODE_ = 18;
27214     +        _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
27215     +        P_default1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   P_default1 = 0.44444444444444;
27216     +        P_default0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   P_default0 = 0.55555555555555;
27217     +        Q_default1  =     0.44444444444444;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.44444444444444;
27218     +        Q_default0  =     0.55555555555555;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.55555555555555;
27219     +        I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27220     +        U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27221     +        END;
MPRINT(EM_DIAGRAM):   END;
27222     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27223     +        _NODE_  =                   19;
MPRINT(EM_DIAGRAM):   _NODE_ = 19;
27224     +        _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
27225     +        P_default1  =               0.0625;
MPRINT(EM_DIAGRAM):   P_default1 = 0.0625;
27226     +        P_default0  =               0.9375;
MPRINT(EM_DIAGRAM):   P_default0 = 0.9375;
27227     +        Q_default1  =               0.0625;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.0625;
27228     +        Q_default0  =               0.9375;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.9375;
27229     +        I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27230     +        U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27231     +        END;
MPRINT(EM_DIAGRAM):   END;
27232     +      END;
MPRINT(EM_DIAGRAM):   END;
27233     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27234     +      _NODE_  =                   10;
MPRINT(EM_DIAGRAM):   _NODE_ = 10;
27235     +      _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
27236     +      P_default1  =     0.62857142857142;
MPRINT(EM_DIAGRAM):   P_default1 = 0.62857142857142;
27237     +      P_default0  =     0.37142857142857;
MPRINT(EM_DIAGRAM):   P_default0 = 0.37142857142857;
27238     +      Q_default1  =     0.62857142857142;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.62857142857142;
27239     +      Q_default0  =     0.37142857142857;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.37142857142857;
27240     +      I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_default = '1' ;
27241     +      U_default  =                    1;
MPRINT(EM_DIAGRAM):   U_default = 1;
27242     +      END;
MPRINT(EM_DIAGRAM):   END;
27243     +    END;
MPRINT(EM_DIAGRAM):   END;
27244     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27245     +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
27246     +    _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
27247     +    P_default1  =     0.33953488372093;
MPRINT(EM_DIAGRAM):   P_default1 = 0.33953488372093;
27248     +    P_default0  =     0.66046511627906;
MPRINT(EM_DIAGRAM):   P_default0 = 0.66046511627906;
27249     +    Q_default1  =     0.33953488372093;
MPRINT(EM_DIAGRAM):   Q_default1 = 0.33953488372093;
27250     +    Q_default0  =     0.66046511627906;
MPRINT(EM_DIAGRAM):   Q_default0 = 0.66046511627906;
27251     +    I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_default = '0' ;
27252     +    U_default  =                    0;
MPRINT(EM_DIAGRAM):   U_default = 0;
27253     +    END;
MPRINT(EM_DIAGRAM):   END;
27254     +  END;
MPRINT(EM_DIAGRAM):   END;
27255     +
27256     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
27257     +IF  F_default  NE '1'
27258     +AND F_default  NE '0'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_default NE '1' AND F_default NE '0' THEN DO;
27259     +        R_default1  = .;
MPRINT(EM_DIAGRAM):   R_default1 = .;
27260     +        R_default0  = .;
MPRINT(EM_DIAGRAM):   R_default0 = .;
27261     + END;
MPRINT(EM_DIAGRAM):   END;
27262     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
27263     +       R_default1  =  -P_default1 ;
MPRINT(EM_DIAGRAM):   R_default1 = -P_default1 ;
27264     +       R_default0  =  -P_default0 ;
MPRINT(EM_DIAGRAM):   R_default0 = -P_default0 ;
27265     +       SELECT( F_default  );
MPRINT(EM_DIAGRAM):   SELECT( F_default );
27266     +          WHEN( '1'  ) R_default1  = R_default1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_default1 = R_default1 +1;
27267     +          WHEN( '0'  ) R_default0  = R_default0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_default0 = R_default0 +1;
27268     +       END;
MPRINT(EM_DIAGRAM):   END;
27269     + END;
MPRINT(EM_DIAGRAM):   END;
27270     +
27271     +*****  DECISION VARIABLES *******;
MPRINT(EM_DIAGRAM):   ***** DECISION VARIABLES *******;
27272     +
27273     +*** Decision Processing;
MPRINT(EM_DIAGRAM):   *** Decision Processing;
27274     +label D_DEFAULT = 'Decision: default' ;
MPRINT(EM_DIAGRAM):   label D_DEFAULT = 'Decision: default' ;
27275     +label EL_DEFAULT = 'Expected Loss: default' ;
MPRINT(EM_DIAGRAM):   label EL_DEFAULT = 'Expected Loss: default' ;
27276     +label BL_DEFAULT = 'Best Loss: default' ;
MPRINT(EM_DIAGRAM):   label BL_DEFAULT = 'Best Loss: default' ;
27277     +label CL_DEFAULT = 'Computed Loss: default' ;
MPRINT(EM_DIAGRAM):   label CL_DEFAULT = 'Computed Loss: default' ;
27278     +
27279     +length D_DEFAULT $ 9;
MPRINT(EM_DIAGRAM):   length D_DEFAULT $ 9;
27280     +
27281     +D_DEFAULT = ' ';
MPRINT(EM_DIAGRAM):   D_DEFAULT = ' ';
27282     +EL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = .;
27283     +BL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   BL_DEFAULT = .;
27284     +CL_DEFAULT = .;
MPRINT(EM_DIAGRAM):   CL_DEFAULT = .;
27285     +
27286     +*** Compute Expected Consequences and Choose Decision;
MPRINT(EM_DIAGRAM):   *** Compute Expected Consequences and Choose Decision;
27287     +_decnum = 1; drop _decnum;
MPRINT(EM_DIAGRAM):   _decnum = 1;
MPRINT(EM_DIAGRAM):   drop _decnum;
27288     +
27289     +D_DEFAULT = '1' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '1' ;
27290     +EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = P_default1 * 0 + P_default0 * 1;
27291     +drop _sum;
MPRINT(EM_DIAGRAM):   drop _sum;
27292     +_sum = P_default1 * 5 + P_default0 * 0;
MPRINT(EM_DIAGRAM):   _sum = P_default1 * 5 + P_default0 * 0;
27293     +if _sum < EL_DEFAULT + -2.27374E-12 then do;
MPRINT(EM_DIAGRAM):   if _sum < EL_DEFAULT + -2.27374E-12 then do;
27294     +   EL_DEFAULT = _sum; _decnum = 2;
MPRINT(EM_DIAGRAM):   EL_DEFAULT = _sum;
MPRINT(EM_DIAGRAM):   _decnum = 2;
27295     +   D_DEFAULT = '0' ;
MPRINT(EM_DIAGRAM):   D_DEFAULT = '0' ;
27296     +end;
MPRINT(EM_DIAGRAM):   end;
27297     +
27298     +*** Decision Matrix;
MPRINT(EM_DIAGRAM):   *** Decision Matrix;
27299     +array TREEdema [2,2] _temporary_ (
27300     +/* row 1 */  0 5
27301     +/* row 2 */  1 0
27302     +);
MPRINT(EM_DIAGRAM):   array TREEdema [2,2] _temporary_ ( 0 5 1 0 );
27303     +
27304     +*** Find Index of Target Category;
MPRINT(EM_DIAGRAM):   *** Find Index of Target Category;
27305     +drop _tarnum; select( F_default );
MPRINT(EM_DIAGRAM):   drop _tarnum;
MPRINT(EM_DIAGRAM):   select( F_default );
27306     +   when('1' ) _tarnum = 1;
MPRINT(EM_DIAGRAM):   when('1' ) _tarnum = 1;
27307     +   when('0' ) _tarnum = 2;
MPRINT(EM_DIAGRAM):   when('0' ) _tarnum = 2;
27308     +   otherwise _tarnum = 0;
MPRINT(EM_DIAGRAM):   otherwise _tarnum = 0;
27309     +end;
MPRINT(EM_DIAGRAM):   end;
27310     +if _tarnum <= 0 then goto TREEdeex;
MPRINT(EM_DIAGRAM):   if _tarnum <= 0 then goto TREEdeex;
27311     +
27312     +*** Computed Consequence of Chosen Decision;
MPRINT(EM_DIAGRAM):   *** Computed Consequence of Chosen Decision;
27313     +CL_DEFAULT = TREEdema [_tarnum,_decnum];
MPRINT(EM_DIAGRAM):   CL_DEFAULT = TREEdema [_tarnum,_decnum];
27314     +
27315     +*** Best Possible Consequence of Any Decision without Cost;
MPRINT(EM_DIAGRAM):   *** Best Possible Consequence of Any Decision without Cost;
27316     +array TREEdebe [2] _temporary_ ( 0 0);
MPRINT(EM_DIAGRAM):   array TREEdebe [2] _temporary_ ( 0 0);
27317     +BL_DEFAULT = TREEdebe [_tarnum];
MPRINT(EM_DIAGRAM):   BL_DEFAULT = TREEdebe [_tarnum];
27318     +
27319     +
27320     +TREEdeex:;
MPRINT(EM_DIAGRAM):   TREEdeex:;
27321     +
27322     +*** End Decision Processing ;
MPRINT(EM_DIAGRAM):   *** End Decision Processing ;
27323     +
27324     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27325     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
27326     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
27327     +
27328     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
27329      run;

NOTE: DATA STEP view saved on file EMWS5.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
27330      quit;
27331      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      
27333      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
27334      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
27335      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

27336      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
27337      * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
27338      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS5\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.Tree_TRAIN out=WORK.M2O0C9XS noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O0C9XS;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O0C9XS(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2O0C9XS;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2O0C9XS;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M06JEDG7 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3NNHF13(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   set WORK.M06JEDG7;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.VarClus_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.VarClus_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEFAULT1") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_DEFAULT0") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("DEFAULT") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "AGE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "CREDIT_HISTORY" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "INSTALMENT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "PERSONAL_STATUS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_DEFAULT0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_DEFAULT1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "RESIDENCE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
27718      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
27719      set EMWS5.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree_EMINFO;
27720      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
27721      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS5.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

27722      data EMWS5.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree_EMINFO;
27723      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
27724      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
27725      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
27729      run;
27730      data EMWS5.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree_EMINFO;
27731      set EMWS5.Tree_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree_EMINFO WORK.MODELTEMP_INFO;
27732      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

27733      proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.Tree_EMINFO NOTHREADS;
27734      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27735      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set EMWS5.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

27736      proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
27737      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27738      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set EMWS5.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 4 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

27739      proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.Tree_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
27740      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27741      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

27742      data EMWS5.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree_EMINFO;
27743      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
27744      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
27745      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 4 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE_EMINFO has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

27746      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
27747      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
27748      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
27749      quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS5.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS5.TREE_TEST.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
