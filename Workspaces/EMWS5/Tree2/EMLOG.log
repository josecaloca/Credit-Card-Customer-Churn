*------------------------------------------------------------*
User:                Jose Caloca
Date:                28 March 2021
Time:                20:54:24
Site:                70115216
Platform:            X64_10PRO
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:54:18" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28 March 2021
Time:                20:54:18
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2_R11IG "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2_R11IG new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:54:18" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:54:18" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
31530      proc freq data=EMWS5.Tree2_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS5.Tree2_VariableSet noprint;
31531      table ROLE*LEVEL/out=WORK.Tree2META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Tree2META;
31532      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set EMWS5.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
31533      proc print data=WORK.Tree2META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2META label noobs;
31534      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
31535      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
31536      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31537      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
31538      run;
 
NOTE: There were 6 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
31539      title10;
MPRINT(EM_DIAGRAM):   title10;
31540      %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS5.Meta_TRAIN EMWS5.Meta_TRAIN
EMWS5.Meta_TRAIN EMWS5.Meta_TRAIN EMWS5 Meta_TRAIN
EMWS5.Meta_TRAIN EMWS5.Meta_TRAIN
EMWS5.Meta_TRAIN EMWS5.Meta_TRAIN EMWS5 Meta_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS5.Meta_TRAIN classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class I_default(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="I_default";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY NMISSPERCENT rename=(LEVEL=I_default));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="I_default";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='I_default'
                         ROLE='TARGET'
                         LEVEL='NOMINAL'
                         ORDER=''
                         CREATOR='Neural'
                         FORMATTYPE=''
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='C'
                         LABEL='Into: default'
                         FORMAT=''
                         INFORMAT=''
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=12
                         MODEL=''
                      )[18653]
MPRINT(EM_DIAGRAM):
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS5.Meta_TRAIN dmdbcat=WORK.EM_DMDB maxlevel = 513 ;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   I_default(DESC)
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   target I_default ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
MPRINT(EM_DIAGRAM):    proc datasets lib=EMWS5 nolist;
MPRINT(EM_DIAGRAM):   modify Tree2_I_default_DD(type=PROFIT label= I_default);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Determine decision variables for I_default;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data WORK.Tree2_SCORE;
MPRINT(EM_DIAGRAM):   set EMWS5.Meta_TRAIN;
MPRINT(EM_DIAGRAM):   keep I_default;
MPRINT(EM_DIAGRAM):   keep 'P_I_default1'n;
MPRINT(EM_DIAGRAM):   'P_I_default1'n = 0.5;
MPRINT(EM_DIAGRAM):   keep 'P_I_default0'n;
MPRINT(EM_DIAGRAM):   'P_I_default0'n = 0.5;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   stop;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree2_I_default_DM;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_I_default_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_ ^in('FREQ', 'BESTPROFIT', 'COMPUTEDPROFIT', 'EXPECTEDPROFIT', 'BESTLOSS', 'COMPUTEDLOSS', 'EXPECTEDLOSS', 'ROI', 'INVESTMENTCOST', 'MODELDECISION');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify I_default(type=PROFIT label= I_default);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree2_I_default_DM;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_I_default_DM end=eof;
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   if eof then do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
31625      data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
31626      length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
31627      label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
31628         "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels" LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
31629      set EMWS5.TREE2_I_DEFAULT_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS5.TREE2_I_DEFAULT_DM( where=(_TYPE_="TARGET"));
31630      NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
31631      select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
31632      when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
31633      when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
31634      when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
31635      when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
31636      otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
31637      end;
MPRINT(EM_DIAGRAM):   end;
31638      output;
MPRINT(EM_DIAGRAM):   output;
31639      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
31640      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31641      proc print data=WORK.Tree2_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Tree2_EVENT noobs label;
31642      var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
31643      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31644      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
31645      run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
31646      title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "I_default"."
31647      proc print data = EMWS5.Tree2_I_default_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS5.Tree2_I_default_DM noobs label;
31648      var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
31649      where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
31650      label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
31651      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
31652      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
31653      run;
 
NOTE: There were 7 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
31654      title10;
MPRINT(EM_DIAGRAM):   title10;
31655      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify I_default(type=PROFIT label= I_default);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'NN';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emutil.em_decdata.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DECDATA):   proc display cat=sashelp.emutil.makedecdata.scl;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   * Tree2: Create decision matrix;
MPRINT(EM_DECDATA):   *------------------------------------------------------------*;
MPRINT(EM_DECDATA):   data WORK.I_default(label="I_default");
MPRINT(EM_DECDATA):   length I_default $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1 8 DECISION2 8 ;
MPRINT(EM_DECDATA):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR= "Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
MPRINT(EM_DECDATA):   I_default="1";
MPRINT(EM_DECDATA):   COUNT=170;
MPRINT(EM_DECDATA):   DATAPRIOR=0.24285714285714;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.24285714285714;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=1;
MPRINT(EM_DECDATA):   DECISION2=0;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   I_default="0";
MPRINT(EM_DECDATA):   COUNT=530;
MPRINT(EM_DECDATA):   DATAPRIOR=0.75714285714285;
MPRINT(EM_DECDATA):   TRAINPRIOR=0.75714285714285;
MPRINT(EM_DECDATA):   DECPRIOR=.;
MPRINT(EM_DECDATA):   DECISION1=0;
MPRINT(EM_DECDATA):   DECISION2=1;
MPRINT(EM_DECDATA):   output;
MPRINT(EM_DECDATA):   ;
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   proc datasets lib=work nolist;
MPRINT(EM_DECDATA):   modify I_default(type=PROFIT label= I_default);
MPRINT(EM_DECDATA):   label DECISION1= '1';
MPRINT(EM_DECDATA):   label DECISION2= '0';
MPRINT(EM_DECDATA):   run;
MPRINT(EM_DECDATA):   quit;
MPRINT(EM_DECDATA):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   modify I_default(type=PROFIT label= I_default);
MPRINT(EM_DIAGRAM):   label DECISION1= "1";
MPRINT(EM_DIAGRAM):   label DECISION2= "0";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="I_default";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS5.Tree2_I_default_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS5.Tree2_I_default_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EM_TARGETDECINFO;
MPRINT(EM_DIAGRAM):   length TARGET $32 DECDATA DECMETA $43;
MPRINT(EM_DIAGRAM):   TARGET="I_default";
MPRINT(EM_DIAGRAM):   DECDATA="EMWS5.Tree2_I_default_DD";
MPRINT(EM_DIAGRAM):   DECMETA="EMWS5.Tree2_I_default_DM";
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   run;
32160      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32161      * Tree2: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * Tree2: Generation of macros and macro variables;
32162      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
32163      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
32164      %let EMEXCEPTIONSTRING=;
32165      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
32166      * TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   * TRAIN: Tree2;
32167      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
32168      %let EM_ACTION = TRAIN;
32169      %let syscc = 0;
32170      %macro main;
32171
32172        %if %upcase(&EM_ACTION) = CREATE %then %do;
32173          filename temp catalog 'sashelp.emmodl.tree_create.source';
32174          %include temp;
32175          filename temp;
32176
32177          %em_tree_create;
32178        %end;
32179
32180         %else
32181         %if %upcase(&EM_ACTION) = TRAIN %then %do;
32182
32183             filename temp catalog 'sashelp.emmodl.tree_train.source';
32184             %include temp;
32185             filename temp;
32186             %em_tree_train;
32187         %end;
32188
32189        %else
32190        %if %upcase(&EM_ACTION) = SCORE %then %do;
32191          filename temp catalog 'sashelp.emmodl.tree_score.source';
32192          %include temp;
32193          filename temp;
32194
32195          %em_tree_score;
32196
32197        %end;
32198
32199        %else
32200        %if %upcase(&EM_ACTION) = REPORT %then %do;
32201
32202             filename temp catalog 'sashelp.emmodl.tree_report.source';
32203             %include temp;
32204             filename temp;
32205
32206             %em_tree_report;
32207         %end;
32208
32209        %else
32210        %if %upcase(&EM_ACTION) = OPENINT %then %do;
32211
32212             filename temp catalog 'sashelp.emmodl.tree_actions.source';
32213             %include temp;
32214             filename temp;
32215             %EM_TREE_OPENTREEVIEWER;
32216
32217         %end;
32218
32219        %else
32220        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
32221
32222             filename temp catalog 'sashelp.emmodl.tree_actions.source';
32223             %include temp;
32224             filename temp;
32225             %EM_TREE_CLOSETREEVIEWER;
32226
32227         %end;
32228
32229
32230         %doendm:
32231      %mend main;
32232
32233      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
32235     +%macro em_tree_train;
32237     +   %if &EM_IMPORT_DATA eq %then %do;
32238     +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
32239     +       %put &em_codebar;
32240     +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
32241     +       %put &errormsg;
32242     +       %put &em_codebar;
32243     +       %goto doendm;
32244     +   %end;
32245     +   %else
32246     +       %let EMEXCEPTIONSTRING =;
32248     +   %if  &EM_NUM_TARGET lt 1 %then %do;
32249     +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
32250     +        %put &em_codebar;
32251     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
32252     +        %put &errormsg;
32253     +        %put &em_codebar;
32254     +        %goto doendm;
32255     +   %end;
32257     +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
32258     +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
32259     +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
32260     +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
32261     +        %put &em_codebar;
32262     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
32263     +        %put &errormsg;
32264     +        %put &em_codebar;
32265     +        %goto doendm;
32266     +   %end;
32268     +   /* Initialize property macro variables */
32269     +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
32270     +   %include temp;
32271     +   filename temp;
32273     +   %EM_SetProperties;
32275     +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
32276     +   %EM_GETNAME(key=EMTREE, type=DATA);
32277     +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
32278     +     /* if import eq Y and no importtable defined, throw an exception */
32279     +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
32280     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
32281     +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
32282     +         %put &em_codebar;
32283     +         %put &errmsg;
32284     +         %put &em_codebar;
32285     +         %goto doendm;
32286     +      %end;
32287     +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
32288     +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
32289     +         %put &em_codebar;
32290     +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
32291     +         %put &errormsg;
32292     +         %put &em_codebar;
32293     +         %goto doendm;
32294     +      %end;
32295     +      %else %do;
32296     +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
32297     +         %let varnumID = %sysfunc(varnum(&dsid,ID));
32298     +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
32299     +         %let varnumX = %sysfunc(varnum(&dsid,X));
32300     +         %let varnumY = %sysfunc(varnum(&dsid,Y));
32301     +         %let dsid = %sysfunc(close(&dsid));
32302     +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
32303     +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
32304     +            %put &em_codebar;
32305     +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
32306     +            %put &errormsg;
32307     +            %put &em_codebar;
32308     +            %goto doendm;
32309     +         %end;
32310     +      %end;
32311     +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
32312     +         proc delete data=&EM_USER_EMTREE;
32313     +         run;
32314     +      %end;
32315     +   %end;
32316     +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
32317     +      proc delete data=&EM_USER_EMTREE;
32318     +      run;
32319     +   %end;
32321     +   /* load tree macros */
32322     +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
32323     +   %include temp;
32324     +   filename temp;
32326     +   /* data sets */
32327     +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
32328     +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
32329     +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
32331     +   /* files */
32332     +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
32334     +   /* check actual num of target levels */
32335     +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
32336     +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
32337     +                              nLevel=_nTargetLevel );
32338     +      %if &_nTargetLevel  > 2 %then %do;
32339     +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
32340     +        %put &em_codebar;
32341     +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
32342     +        %put &errormsg;
32343     +        %put &em_codebar;
32344     +        %goto doendm;
32345     +      %end;
32346     +   %end;
32348     +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
32349     +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
32350     +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
32351     +        %let costflag=0;
32352     +        data _null_;
32353     +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
32354     +          if eof then call symput("costflag", _N_);
32355     +        run;
32356     +        %if &costflag gt 0 %then %do;
32357     +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
32358     +          %put &em_codebar;
32359     +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
32360     +          %put &errormsg;
32361     +          %put &em_codebar;
32362     +          %goto doendm;
32363     +       %end;
32364     +     %end;
32365     +   %end;
32367     +   /* determine if multiple targets will be processed */
32368     +   %let em_tree_multipleTargets=N;
32369     +   %let em_tree_numTarget = 1;
32370     +   %let em_tree_targetVars=;
32372     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
32373     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
32374     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
32375     +         %let em_tree_multipleTargets=N;
32376     +      %end;
32377     +      %else %do;
32378     +         /* create macro array of targets  */
32379     +         data _null_;
32380     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
32381     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
32382     +           if eof then
32383     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
32384     +        run;
32386     +        %if &em_tree_numTarget gt 1 %then %do;
32387     +           %let em_tree_multipleTargets=Y;
32388     +        %end;
32389     +      %end;
32390     +   %end;
32392     +   /* create view of only necessary variable for performance reasons */
32393     +   %let tempData = &EM_LIB..em_&EM_NODEID;
32394     +   data &tempData / view=&tempData;
32395     +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
32396     +     %if "&em_tree_multipleTargets" eq "N" %then %do;
32397     +       %EM_TARGET
32398     +     %end;
32399     +     %else %do;
32400     +       %if &em_tree_numTarget ne 0 %then %do;
32401     +         %do i=1 %to &em_tree_numTarget;
32402     +            &&em_tree_targetVars&i
32403     +         %end;
32404     +       %end;
32405     +     %end;
32406     +     );
32407     +   run;
32409     +   /* run Tree procedure */
32410     +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
32412     +   /* Check return code and throw exception if error is detected */
32413     +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
32414     +   %if &syserr %then %do;
32415     +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
32416     +     %goto doendm;
32417     +   %end;
32419     +   /* add decision score code if multiple targets are processed */
32420     +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
32421     +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
32422     +   %end;
32424     +   /* create outfit dataset if multiple score statements have been executed */
32425     +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
32427     +   /* create English Rules */
32428     +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
32429     +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
32430     +       %em_tree_makeEnglishRules;
32432     +       /* English Rules */
32433     +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
32435     +     %end;
32436     +   filename x;
32438     +   %doendm:
32439     +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
32440     +%macro EM_SetProperties;
32442     +   /* train properties */
32443     +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
32444     +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
32445     +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
32446     +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
32447     +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
32448     +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
32449     +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
32450     +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
32451     +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
32452     +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
32453     +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
32454     +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
32455     +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
32456     +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
32457     +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
32458     +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
32459     +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
32460     +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
32461     +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
32462     +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
32463     +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
32464     +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
32465     +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
32466     +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
32467     +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
32468     +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
32469     +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
32470     +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
32471     +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
32472     +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
32473     +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
32474     +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
32475     +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
32476     +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
32477     +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
32478     +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
32479     +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
32480     +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
32481     +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
32482     +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
32483     +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
32485     +   /* properties for interactive sample */
32486     +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
32487     +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
32488     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
32489     +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
32491     +   /* report properties */
32492     +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
32493     +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
32494     +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
32495     +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
32496     +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
32497     +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
32498     +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
32499     +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
32500     +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
32501     +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
32502     +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
32503     +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
32504     +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
32506     +   /* score properties */
32507     +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
32508     +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
32510     +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_SETPROPERTIES):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
32512     +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
32513     +  %global &nLevel;
32514     +  proc dmdb batch data=&indata
32515     +    classout=_tmp_dmdbout;
32516     +    class &target;
32517     +  run;
32518     +  data _tmp_dmdbout;
32519     +    set _tmp_dmdbout;
32520     +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
32521     +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
32522     +  run;
32523     +  data _null_;
32524     +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
32525     +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
32526     +    %let dsid = %sysfunc(close(&dsid));
32527     +     call symput("&nLevel", put(&_obs, Best12.));
32528     +  run;
32530     +  proc datasets lib=work nolist;
32531     +     delete _tmp_dmdbout;
32532     +  run;
32533     +  quit;
32534     +%Mend EM_CheckBinaryTargetLevel;
32537     +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
32539     +  /* determine the number of obs in training data */
32540     +  proc sql;
32541     +    reset noprint;
32542     +    select count(*) into :em_nobs from &indata;
32543     +  quit;
32545     +  /* determine the number of input variables */
32546     +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
32547     +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
32549     +  /* retrieve targetEvent from decmeta */
32550     +  %let targetEvent=;
32551     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
32552     +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
32553     +      data _null_;
32554     +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
32555     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
32556     +      run;
32557     +    %end;
32558     +  %end;
32560     +  /* create targetTable if multipleTar eq Y */
32561     +  data temptarget;
32562     +    set &EM_DATA_VARIABLESET;
32563     +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
32564     +  run;
32566     + /* data sets */
32567     + %EM_GETNAME(key=OUTSTATS,      type=DATA);
32568     + %EM_GETNAME(key=EMTREE,        type=DATA);
32569     + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
32570     + %EM_GETNAME(key=OUTSEQ,        type=DATA);
32571     + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
32572     + %EM_GETNAME(key=OUTNODES,      type=DATA);
32573     + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
32574     + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
32575     + %EM_GETNAME(key=OUTPATH,       type=DATA);
32576     + %EM_GETNAME(key=OUTRULES,      type=DATA);
32578     + /* files */
32579     + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
32580     + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
32582     + /* turn on pmml if requested */
32583     + %let nnpmml=0;
32584     + %if %symexist(EM_PMML) %then %do;
32585     +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
32586     +       %let nnpmml=1;
32588     +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
32589     +   %end;
32590     +%end;
32592     +%let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
32594     +%if &nnpmml or &numClassTarget %then %do;
32596     +    /* create dmdb needed for pmml generation */
32597     +    %let tree_maxlevel = 512;
32598     +    %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
32599     +      %if &EM_TRAIN_MAXLEVELS ne %then %do;
32600     +        %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
32601     +      %end;
32602     +    %end;
32603     +    %if &tree_maxlevel gt 0 %then %do;
32604     +        %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
32605     +       %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
32606     +    %end;
32608     +    %let targetOrderString =;
32609     +    %let targetString = ;
32610     +    data _null_;
32611     +       length orderString nameString $10000;
32612     +       retain orderString nameString;
32613     +       set &em_data_variableset end=eof;
32614     +       %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
32615     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
32616     +       %end;
32617     +       %else %do;
32618     +           where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
32619     +       %end;          select(order);
32620     +         when('')        order ='DESC';
32621     +         when('FMTASC')  order='ASCFMT';
32622     +         when('FMTDESC') order='DESFMT';
32623     +         otherwise;
32624     +       end;
32625     +       orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
32626     +       nameString = trim(nameString)!!' '!!trim(NAME);
32628     +       if eof then do;
32629     +          call symput('targetOrderString', trim(orderString));
32630     +          call symput('targetString', trim(nameString));
32631     +       end;
32632     +    run;
32634     +    %let arborkluge= "work._treeDMDB";
32636     +    proc dmdb batch data=&indata
32637     +    %if &nnpmml %then %do;
32638     +        PMML
32639     +    %end;
32640     +     dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
32642     +      %if &nnpmml %then %do;
32643     +           %if "%EM_ID" ne "" %then %do;
32644     +             id %EM_ID;
32645     +           %end;
32646     +           %if &EM_NUM_CLASS gt 0 %then %do;
32647     +             class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
32648     +                  %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
32649     +                  &targetOrderString;
32650     +           %end;
32651     +           %if &EM_NUM_INTERVAL gt 0 %then %do;
32652     +             var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED %EM_INTERVAL_TARGET;
32653     +           %end;
32654     +           target &targetString %EM_INTERVAL_TARGET;
32655     +           %if "%EM_FREQ" ne "" %then %do;
32656     +             freq %EM_FREQ;
32657     +           %end;
32658     +      %end;
32659     +      %else %do;
32660     +         class  &targetOrderString;
32661     +         target &targetString %EM_INTERVAL_TARGET;
32662     +      %end;
32663     +    run;
32664     +    quit;
32666     +    proc datasets lib=work nolist;
32667     +       delete classout varout;
32668     +    run;
32669     +    quit;
32671     + %end;
32674     + /* run Arbor procedure */
32675     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
32676     +  proc arbor data=&INDATA
32678     +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
32679     +    Leafsize = &EM_PROPERTY_LEAFSIZE
32680     +  %end;
32682     +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
32683     +    Splitsize = &EM_PROPERTY_SPLITSIZE
32684     +  %end;
32686     +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
32687     +    MinCatSize = &EM_PROPERTY_MINCATSIZE
32688     +  %end;
32690     +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
32691     +    MaxBranch = &EM_PROPERTY_MAXBRANCH
32692     +  %end;
32694     +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
32695     +    MaxDepth = &EM_PROPERTY_MAXDEPTH
32696     +  %end;
32698     +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
32699     +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
32700     +  %end;
32701     +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
32702     +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
32703     +  %end;
32704     +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
32705     +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
32706     +  %end;
32708     +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
32709     +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
32710     +      alpha = &EM_PROPERTY_SIGLEVEL
32711     +    %end;
32712     +  %end;
32714     +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
32715     +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
32716     +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
32717     +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
32718     +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
32720     +        padjust =
32721     +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
32722     +          &chaid
32723     +        %end;
32724     +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
32725     +          DEPTH
32726     +        %end;
32727     +      %end;
32728     +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
32729     +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
32730     +         pvars = &num_inputs
32731     +      %end;
32732     +    %end;
32733     +  %end;
32734     +  %else %do;
32735     +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
32736     +         padjust = NONE
32737     +      %end;
32738     +  %end;
32740     +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
32741     +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
32742     +    Maxrules = &num_nrules
32743     +  %end;
32745     +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
32746     +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
32747     +    Maxsurrs = &num_nsurrs
32748     +  %end;
32750     +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
32751     +     Missing=&EM_PROPERTY_MISSINGVALUE
32752     +  %end;
32754     +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
32755     +     USEVARONCE
32756     +  %end;
32758     +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
32759     +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
32760     +  %end;
32763     +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
32764     +    event = "&targetEvent"
32765     +  %end;
32767     +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
32768     +     DECSEARCH
32769     +  %end;
32771     +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
32772     +     PRIORSSEARCH
32773     +  %end;
32775     +  %if &arbor_1 ne %then %do;
32776     +    &arbor_1
32777     +  %end;
32779     +  %if &em_arbor ne %then %do;
32780     +     &em_arbor
32781     +  %end;
32782     +  ;
32783     + %end;
32784     + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
32785     +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
32786     +       Performance &EM_PROPERTY_PERFORMANCE
32787     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
32788     +         nodesize=&EM_PROPERTY_NODESAMPLE
32789     +       %end;
32790     +       ;
32791     +       interact;
32792     + %end;
32793     + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
32794     +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
32795     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
32796     +    %put &em_codebar;
32797     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
32798     +    %put &errormsg;
32799     +    %put &em_codebar;
32800     +    %goto doendm;
32801     +   %end;
32802     +   %else %do;
32803     +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
32804     +       Performance &EM_PROPERTY_PERFORMANCE
32805     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
32806     +         nodesize=&EM_PROPERTY_NODESAMPLE
32807     +       %end;
32808     +       ;
32809     +       interact;
32810     +   %end;
32811     + %end;
32813     + %else %do;
32814     +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
32815     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
32816     +    %put &em_codebar;
32817     +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
32818     +    %put &errormsg;
32819     +    %put &em_codebar;
32820     +    %goto doendm;
32821     +   %end;
32822     +   %else %do;
32823     +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
32824     +       Performance &EM_PROPERTY_PERFORMANCE
32825     +       %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
32826     +         nodesize=&EM_PROPERTY_NODESAMPLE
32827     +       %end;
32828     +       ;
32829     +        interact;
32830     +   %end;
32831     + %end;
32833     + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
32834     +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
32835     +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
32836     +    %end;
32838     +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
32839     +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
32840     +    %end;
32842     +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
32843     +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
32844     +    %end;
32846     +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
32847     +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
32848     +    %end;
32850     +    %if "%EM_FREQ" ne "" %then %do;
32851     +       freq %EM_FREQ;
32852     +    %end;
32854     +    %if "&multipleTar" eq "Y" %then %do;
32855     +       /* cycle through all target vars in variableset */
32856     +       %let tdsid = %sysfunc(open(temptarget));
32857     +       %if &tdsid %then %do;
32858     +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
32859     +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
32860     +          %do %while(^ %sysfunc(fetch(&tdsid)));
32861     +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
32862     +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
32863     +             target &var / level = &lvl
32864     +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
32865     +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
32866     +             %end;
32867     +             %else %if "&lvl" eq "INTERVAL" %then %do;
32868     +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
32869     +             %end;
32870     +             %else %if "&lvl" eq "ORDINAL" %then %do;
32871     +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
32872     +             %end;
32873     +          %end;
32874     +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
32875     +       %end;
32876     +       useTarget variable = %EM_TARGET;
32877     +    %end;
32878     +    %else %do;
32879     +      target %EM_TARGET / level = %EM_TARGET_LEVEL
32880     +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
32881     +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
32882     +      %end;
32883     +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
32884     +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
32885     +      %end;
32886     +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
32887     +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
32888     +      %end;
32889     +    %end;
32891     +    %if "&multipleTar" eq "N" %then %do;
32892     +      &EM_DEC_STATEMENT;
32893     +    %end;
32895     +    Performance &EM_PROPERTY_PERFORMANCE
32896     +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
32897     +      nodesize=&EM_PROPERTY_NODESAMPLE
32898     +    %end;
32899     +    ;
32901     +    %if "&intFlag" eq "Y" %then %do;
32902     +       INTERACT Largest;
32903     +       Train maxnewdepth=0;
32904     +    %end;
32906     +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
32907     +         Assess
32908     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
32909     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
32910     +              %put &em_codebar;
32911     +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
32912     +              %put &errormsg;
32913     +              %put &em_codebar;
32914     +            %end;
32915     +            %else %do;
32916     +               Validata=&EM_IMPORT_VALIDATE
32917     +            %end;
32918     +         %end;
32919     +         %else %do;
32920     +           NoValidata
32921     +         %end;
32922     +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
32923     +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
32924     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
32925     +               %if &dsid %then %do;
32926     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
32927     +                 %do %while(^ %sysfunc(fetch(&dsid)));
32928     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
32929     +                   %if "&use" eq "Y" %then %let measure=PROFIT;
32930     +                   %else %do;
32931     +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
32932     +                      %else %let measure= MISC;
32933     +                   %end;
32934     +                 %end;
32935     +               %end;
32936     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32937     +            %end;
32938     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
32939     +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
32940     +                 %let measure=ASE;
32941     +              %end;
32942     +              %else %do;
32943     +                 %let measure=MISC;
32944     +              %end;
32945     +            %end;
32946     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
32947     +              %let measure=ASE;
32948     +            %end;
32949     +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
32950     +               %let measure = LIFT;
32951     +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
32952     +               %if &dsid %then %do;
32953     +                 %let usenum = %sysfunc(varnum(&dsid, USE));
32954     +                 %do %while(^ %sysfunc(fetch(&dsid)));
32955     +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
32956     +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
32957     +                 %end;
32958     +               %end;
32959     +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
32960     +            %end;
32961     +            measure=&measure
32962     +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
32963     +               event = "&targetEvent"
32964     +            %end;
32965     +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
32966     +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
32967     +            %end;
32968     +         %end;
32969     +         %if "&multipleTar" eq "N" %then %do;
32970     +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
32971     +               CV
32972     +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
32973     +                 CVNITer = &EM_PROPERTY_CVNITER
32974     +               %end;
32975     +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
32976     +                 CVRepeat = &EM_PROPERTY_CVREPEAT
32977     +               %end;
32978     +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
32979     +                 CVSeed = &EM_PROPERTY_CVSEED
32980     +               %end;
32981     +            %end;
32982     +         %end;
32983     +       %end;
32984     +      ;
32986     +      %if "&intFlag" ne "Y" %then %do;
32987     +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
32988     +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
32989     +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
32990     +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
32992     +          SUBTREE &subtree
32993     +          %if "&subtree" eq "NLEAVES" %then %do;
32994     +            =&EM_PROPERTY_NSUBTREE
32995     +          %end;
32996     +          ;
32997     +        %end;
32999     +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
33000     +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
33001     +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
33002     +          %end;
33003     +       %end;
33004     +      %end;
33005     + %end;
33008     + MakeMacro nleaves = nleaves;
33009     + save
33010     + %if "&EM_USER_EMTREE" ne "" %then %do;
33011     +   MODEL=&EM_USER_EMTREE
33012     + %end;
33013     + %if "&EM_USER_OUTSEQ" ne "" %then %do;
33014     +   SEQUENCE=&EM_USER_OUTSEQ
33015     + %end;
33016     + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
33017     +   IMPORTANCE=&EM_USER_OUTIMPORT
33018     + %end;
33019     + %if "&EM_USER_OUTNODES" ne "" %then %do;
33020     +   NODESTAT=&EM_USER_OUTNODES
33021     + %end;
33022     + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
33023     +   SUMMARY=&EM_USER_OUTSUMMARY
33024     + %end;
33025     + %if "&EM_USER_OUTSTATS" ne "" %then %do;
33026     +   STATSBYNODE=&EM_USER_OUTSTATS
33027     + %end;
33028     + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
33029     +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
33030     + %end;
33031     + %if "&EM_USER_OUTPATH" ne "" %then %do;
33032     +   Pathlistnonmissing=&EM_USER_OUTPATH
33033     + %end;
33034     + %if "&EM_USER_OUTRULES" ne "" %then %do;
33035     +   RULES = &EM_USER_OUTRULES
33036     + %end;
33037     + ;
33039     + %if "&intFlag" ne "Y" %then %do;
33041     +   %let lookupString = ;
33042     +   %if ^%symexist(EM_OPTION) %then
33043     +      %let EM_OPTION=;
33045     +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
33046     +      %let lookupString = LOOKUP=SELECT;
33047     +   %end;
33049     +   %let codetext=;
33050     +   %let norescodetxt=;
33052     +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
33053     +     %let codetext=&codetext DUMMY;
33054     +     %let norescodetxt=&norescodetxt DUMMY;
33055     +   %end;
33056     +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
33057     +     %let codetext=&codetext NOLEAFID;
33058     +     %let norescodetxt=&norescodetxt NOLEAFID;
33059     +   %end;
33060     +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
33061     +     %let norescodetxt=&norescodetxt NOPRED;
33062     +   %end;
33064     +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
33065     +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
33067     +   %if &nnpmml %then %do;
33068     +     code pmml;
33069     +   %end;
33071     +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
33072     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
33073     +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
33074     +   %end;
33075     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
33076     +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
33077     +   %end;
33078     + %end;
33080     + run;
33081     + quit;
33083     + /*%em_checkerror(); */
33084     +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
33085     +   /* Delete DMDB catalog */
33086     +   proc datasets lib=work nolist;
33087     +       delete _treeDMDB / mt=cat;
33088     +  run;
33089     +  %end;
33091     + %if &nnpmml %then %do;
33092     +    ods pmml close;
33093     + %end;
33095     +  %doendm:
33097     +%mend em_tree_runTreeProcedure;
33099     +%macro em_tree_createFitStats( multipleTar= );
33102     +  /* create targetTable is multipleTar eq Y */
33103     +  data temptarget;
33104     +    set &EM_DATA_VARIABLESET;
33105     +    where ROLE="TARGET";
33106     +  run;
33108     +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
33109     +   data &EM_USER_EMOUTFIT;
33110     +     length target $32;
33111     +     merge work.fit_train
33112     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
33113     +       work.fit_valid
33114     +     %end;
33115     +     %if "&EM_IMPORT_TEST" ne "" %then %do;
33116     +       work.fit_test
33117     +     %end;
33118     +     ;
33119     +     %if "&multipleTar" eq "N" %then %do;
33120     +       target="%EM_TARGET";
33121     +     %end;
33122     +     %else %do;
33123     +       target = _TARGET_;
33124     +     %end;
33125     +     drop _NW_ _SUMW_
33126     +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
33127     +        _VSUMW_
33128     +     %end;
33129     +     ;
33130     +   run;
33132     +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
33133     +     proc datasets library=work nolist;
33134     +       delete fit_valid;
33135     +     run;
33136     +   %end;
33137     +   %if "&EM_IMPORT_TEST" ne "" %then %do;
33138     +     proc datasets library=work nolist;
33139     +       delete fit_test;
33140     +     run;
33141     +   %end;
33143     +%mend em_tree_createFitStats;
33146     +%macro em_tree_makeEnglishRules;
33148     +  %EM_GETNAME(key=OUTNODES, type=DATA);
33149     +  %EM_GETNAME(key=OUTPATH, type=DATA);
33151     +  /* verify that necessary tables exist and if not, skip processing */
33152     +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
33153     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33154     +    %goto doendm;
33155     +  %end;
33156     +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
33157     +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
33158     +    %goto doendm;
33159     +  %end;
33161     +  /* determine length of variable in outpath dataset */
33162     +  %let vlength= ;
33163     +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
33164     +  %if &dsid ne %then %do;
33165     +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
33166     +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
33167     +  %end;
33168     +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
33170     +  data tempoutpath;
33171     +    length varname $&vlength;
33172     +    retain varname;
33173     +    set &EM_USER_OUTPATH;
33175     +    if ^missing(variable) then varname=variable;
33176     +    else if ^missing(var_name) then varname=var_name;
33177     +    output;
33178     +  run;
33180     +  /* create an array of generated predicted variable names */
33181     +  %let tree_pred_vars = ;
33182     +  %let tree_pred_label = ;
33183     +  %let numpred= 0;
33184     +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
33186     +    data _null_;
33187     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
33188     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
33189     +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
33190     +     if eof then
33191     +       call symput('numpred', strip(put(_N_, BEST.)));
33192     +    run;
33193     +  %end;
33195     +  /* determine if NPRIORS exists in outnodes  */
33196     +  %local nprior_flag;
33197     +  data _null_;
33198     +    set &EM_USER_OUTNODES(obs=2) end=eof;
33199     +    if eof then do;
33200     +      call symput('nprior_flag', strip(put(npriors, best.)));
33201     +    end;
33202     +  run;
33204     +  proc sort data=tempoutpath; by node; run;
33205     +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
33207     +  data tempoutpath;
33208     +    merge tempoutpath(in=_a) outnodes(keep= node
33209     +    %if "&nprior_flag" ne "." %then %do;
33210     +      NPRIORS
33211     +    %end;
33212     +    %else %do;
33213     +      N
33214     +    %end;
33215     +    %if &numpred gt 0 %then %do;
33216     +      %do i=1 %to &numpred;
33217     +        &&tree_pred_vars&i
33218     +      %end;
33219     +    %end;
33220     +    );
33221     +    by node;
33222     +    if _a;
33223     +  run;
33225     +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
33227     +  data _null_;
33228     +    file x;
33229     +    set tempoutpath;
33230     +    by node descending varname;
33231     +    retain origvar oldnode string;
33232     +    length origvar $32 oldnode 8 string $5000;
33234     +    if _N_ = 1 then do;
33235     +      origvar = varname;
33236     +      oldnode = node;
33237     +    end;
33239     +    if first.node then do;
33240     +       put "&EM_CODEBAR";
33241     +       put " Node = " node;
33242     +       put "&EM_CODEBAR";
33243     +    end;
33245     +      if first.varname then do;
33246     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
33247     +            if MISSING(CHARACTER_VALUE) then do;
33248     +             if NUMERIC_VALUE ne .  then do;
33249     +              if ^first.node then do;
33250     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
33251     +              end;
33252     +              else do;
33253     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
33254     +              end;
33255     +             end;
33256     +            end;
33257     +            else do;
33258     +              if ^first.node then do;
33259     +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
33260     +              end;
33261     +              else do;
33262     +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
33263     +              end;
33264     +             end;
33265     +         end;
33266     +         else if RELATION in ("=") then do;
33267     +            if ^first.node then do;
33268     +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
33269     +            end;
33270     +            else do;
33271     +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
33272     +            end;
33273     +         end;
33274     +         else if RELATION in ("ISMISSING") then do;
33275     +            if ^first.node then do;
33276     +              string = " AND "|| strip(varname) || " equals Missing";
33277     +            end;
33278     +            else do;
33279     +              string = "if "|| strip(varname) ||" equals Missing";
33280     +            end;
33281     +         end;
33282     +         else if RELATION in ("ISNOTMISSING") then do;
33283     +            if ^first.node then do;
33284     +              string = " AND "|| strip(varname) || " equals All Values";
33285     +            end;
33286     +            else do;
33287     +              string = "if "|| strip(varname) ||" equals All Values";
33288     +            end;
33289     +         end;
33290     +         if ^missing(varname) then origvar = varname;
33291     +         oldnode=node;
33293     +      end;
33294     +      else do;
33295     +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
33296     +          if MISSING(CHARACTER_VALUE) then do;
33297     +           if  NUMERIC_VALUE ne .  then do;
33298     +            if ^MISSING(string) then
33299     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
33300     +            else
33301     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
33302     +           end;
33303     +          end;
33304     +          else do;
33305     +            if ^MISSING(string) then
33306     +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
33307     +            else
33308     +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
33309     +          end;
33311     +         end;
33312     +         else if RELATION in ("=") then do;
33313     +           string = strip(string)||", "||strip(character_value);
33314     +         end;
33315     +         else if RELATION in ("ISMISSING") then do;
33317     +         end;
33318     +         if ^missing(varname) then origvar = varname;
33319     +         oldnode=node;
33320     +      end;
33321     +      if last.varname then do;
33322     +         if RELATION in ("ISMISSING") then do;
33323     +           if ^first.varname then do;
33324     +             string = strip(string) || " or MISSING";
33325     +           end;
33326     +         end;
33327     +         put string;
33328     +         if ^missing(varname) then origvar = varname;
33329     +         oldnode=node;
33330     +      end;
33332     +      if last.node then do;
33333     +         put "then ";
33334     +         put " Tree Node Identifier   = " node;
33336     +         %if "&nprior_flag" ne "." %then %do;
33337     +           put " Number of Observations = " NPRIORS;
33338     +         %end;
33339     +         %else %do;
33340     +           put " Number of Observations = " N;
33341     +         %end;
33343     +         %if &numpred gt 0 %then %do;
33344     +           %do i=1 %to &numpred;
33345     +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
33346     +           %end;
33347     +         %end;
33349     +         put " ";
33350     +         if ^missing(varname) then origvar = varname;
33351     +         oldnode=node;
33352     +      end;
33354     +  run;
33356     +  proc datasets lib=work nolist;
33357     +    delete tempoutpath outnodes;
33358     +  run;
33360     +  %doendm:
33361     +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_TREE_TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8 cas $1;
MPRINT(EM_REGISTER):   key = upcase("ENGLISHRULES");
MPRINT(EM_REGISTER):   type = upcase("FILE");
MPRINT(EM_REGISTER):   file = "ENGLISHRULES";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "txt";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   cas = "N";
MPRINT(EM_REGISTER):   run;
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   data EMWS5.em_Tree2 / view=EMWS5.em_Tree2;
MPRINT(EM_TREE_TRAIN):   set EMWS5.Meta_TRAIN (keep
MPRINT(EM_TREE_TRAIN):  =GRP_acc_status GRP_credit_history GRP_duration GRP_pourpose GRP_savings I_default I_default );
MPRINT(EM_TREE_TRAIN):   run;
 
NOTE: DATA STEP view saved on file EMWS5.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.META_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc sql;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   reset noprint;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select count(*) into :em_nobs from EMWS5.em_Tree2;
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.NEURAL_TRAIN.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.14 seconds
      cpu time            0.15 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.META_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS5.Tree2_I_default_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data temptarget;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS5.Tree2_VariableSet;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" AND LEVEL^="ORDINAL";
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   data _null_;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   length orderString nameString $10000;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   retain orderString nameString;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   set EMWS5.Tree2_VariableSet end=eof;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   select(order);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('') order ='DESC';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTASC') order='ASCFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   when('FMTDESC') order='DESFMT';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   otherwise;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
MPRINT(EM_TREE_RUNTREEPROCEDURE):   nameString = trim(nameString)!!' '!!trim(NAME);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   if eof then do;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetOrderString', trim(orderString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   call symput('targetString', trim(nameString));
MPRINT(EM_TREE_RUNTREEPROCEDURE):   end;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc dmdb batch data=EMWS5.em_Tree2 dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=513;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   class I_default(DESC);
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target I_default
MPRINT(EM_TREE_RUNTREEPROCEDURE):  ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Records processed = 700   Memory used = 511K.
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.NEURAL_TRAIN.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.14 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.META_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 2 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.17 seconds
      cpu time            0.15 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete classout varout;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc arbor data=EMWS5.em_Tree2 Leafsize = 5 MinCatSize = 5 MaxBranch = 2 MaxDepth = 6
MPRINT(EM_TREE_RUNTREEPROCEDURE):   alpha = 0.2 padjust = CHAIDBEFORE DEPTH Maxrules = 5 Maxsurrs = 0 Missing=USEINSEARCH Exhaustive=5000
MPRINT(EM_TREE_RUNTREEPROCEDURE):   event = "1" ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   input
MPRINT(EM_ORDINAL_INPUT):   GRP_acc_status GRP_credit_history GRP_duration GRP_pourpose GRP_savings
MPRINT(EM_TREE_RUNTREEPROCEDURE):  / level = ordinal;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   target
MPRINT(EM_TARGET):   I_default
MPRINT(EM_TREE_RUNTREEPROCEDURE):   / level =
MPRINT(EM_TARGET_LEVEL):   NOMINAL
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Criterion=PROBCHISQ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Performance DISK nodesize=20000 ;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   Assess NoValidata
MPRINT(EM_TREE_RUNTREEPROCEDURE):   measure=MISC
MPRINT(EM_TREE_RUNTREEPROCEDURE):   ;
NOTE: 1321279 kilobytes of physical memory.
NOTE: Will use 700 out of 700 training cases.
NOTE: Using memory pool with 49337344 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 118576 bytes of work memory.
NOTE: The subtree sequence contains 15 subtrees. The largest has 29 nodes and 15 leaves.
NOTE: Using subtree with 21 nodes and 11 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   SUBTREE BEST ;
NOTE: Using subtree with 21 nodes and 11 leaves.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   MakeMacro nleaves = nleaves;
NOTE: Created macro variable NLEAVES equal to 11.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   save MODEL=EMWS5.Tree2_EMTREE SEQUENCE=EMWS5.Tree2_OUTSEQ IMPORTANCE=EMWS5.Tree2_OUTIMPORT NODESTAT=EMWS5.Tree2_OUTNODES SUMMARY=EMWS5.Tree2_OUTSUMMARY STATSBYNODE=EMWS5.Tree2_OUTSTATS TOPOLOGY=EMWS5.Tree2_OUTTOPOLOGY
Pathlistnonmissing=EMWS5.Tree2_OUTPATH RULES = EMWS5.Tree2_OUTRULES ;
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 5 observations and 4 variables.
NOTE: The data set EMWS5.TREE2_EMTREE has 792 observations and 4 variables.
NOTE: The data set EMWS5.TREE2_OUTNODES has 21 observations and 20 variables.
NOTE: The data set EMWS5.TREE2_OUTPATH has 99 observations and 7 variables.
NOTE: The data set EMWS5.TREE2_OUTRULES has 190 observations and 6 variables.
NOTE: The data set EMWS5.TREE2_OUTSEQ has 15 observations and 11 variables.
NOTE: The data set EMWS5.TREE2_OUTSTATS has 84 observations and 5 variables.
NOTE: The data set EMWS5.TREE2_OUTSUMMARY has 12 observations and 5 variables.
NOTE: The data set EMWS5.TREE2_OUTTOPOLOGY has 21 observations and 5 variables.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\TREEFLOW.sas" res group=Tree2 ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\TREEFLOW.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   code file="C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\TREEPUBLISH.sas" nores group=Tree2 ;
NOTE: External file C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\TREEPUBLISH.sas opened.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS5.em_Tree2 out=_NULL_ outfit=work.fit_train role=TRAIN;
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.NEURAL_TRAIN.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.15 seconds
      cpu time            0.15 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.META_TRAIN.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   score data=EMWS5.Meta_TEST out=_NULL_ outfit=work.fit_test role=TEST;
NOTE: The data set WORK.FIT_TEST has 1 observations and 8 variables.
NOTE: There were 300 observations read from the data set EMWS5.PART_TEST.
NOTE: There were 300 observations read from the data set EMWS5.VARSEL_TEST.
NOTE: There were 300 observations read from the data set EMWS5.VARCLUS_TEST.
NOTE: There were 300 observations read from the data set EMWS5.BINNING_TEST.
NOTE: View EMWS5.META_TEST.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.09 seconds
 
NOTE: There were 300 observations read from the data set EMWS5.NEURAL_TEST.
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   quit;
 
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.NEURAL_TRAIN.
NOTE: View EMWS5.EM_TREE2.VIEW used (Total process time):
      real time           0.58 seconds
      cpu time            0.48 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.META_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.61 seconds
      cpu time            0.50 seconds
 
 
MPRINT(EM_TREE_RUNTREEPROCEDURE):   proc datasets lib=work nolist;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   delete _treeDMDB / mt=cat;
MPRINT(EM_TREE_RUNTREEPROCEDURE):   run;
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   data temptarget;
MPRINT(EM_TREE_CREATEFITSTATS):   set EMWS5.Tree2_VariableSet;
MPRINT(EM_TREE_CREATEFITSTATS):   where ROLE="TARGET";
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):  ;
MPRINT(EM_TREE_CREATEFITSTATS):   data EMWS5.Tree2_EMOUTFIT;
MPRINT(EM_TREE_CREATEFITSTATS):   length target $32;
MPRINT(EM_TREE_CREATEFITSTATS):   merge work.fit_train work.fit_test ;
MPRINT(EM_TREE_CREATEFITSTATS):   target=
MPRINT(EM_TREE_CREATEFITSTATS):  "I_default";
MPRINT(EM_TREE_CREATEFITSTATS):   drop _NW_ _SUMW_ ;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS5.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_CREATEFITSTATS):   proc datasets library=work nolist;
MPRINT(EM_TREE_CREATEFITSTATS):   delete fit_test;
MPRINT(EM_TREE_CREATEFITSTATS):   run;
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename X "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\ENGLISHRULES.txt" encoding='utf-8' NOBOM;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
MPRINT(EM_TREE_MAKEENGLISHRULES):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length varname $23;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS5.Tree2_OUTPATH;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(variable) then varname=variable;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if ^missing(var_name) then varname=var_name;
MPRINT(EM_TREE_MAKEENGLISHRULES):   output;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 99 observations read from the data set EMWS5.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 99 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS5.Tree2_I_default_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set EMWS5.Tree2_OUTNODES(obs=2) end=eof;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if eof then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   call symput('nprior_flag', strip(put(npriors, best.)));
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 99 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 99 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=EMWS5.Tree2_OUTNODES out=outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 21 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 21 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   merge tempoutpath(in=_a) outnodes(keep= node NPRIORS P_I_default1 P_I_default0 );
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _a;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 99 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 21 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 99 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc sort data=tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname descending numeric_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: There were 99 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 99 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   data _null_;
MPRINT(EM_TREE_MAKEENGLISHRULES):   file x;
MPRINT(EM_TREE_MAKEENGLISHRULES):   set tempoutpath;
MPRINT(EM_TREE_MAKEENGLISHRULES):   by node descending varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   retain origvar oldnode string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   length origvar $32 oldnode 8 string $5000;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if _N_ = 1 then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode = node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Node = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "*------------------------------------------------------------*";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if NUMERIC_VALUE ne . then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   else string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("=") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string)||", "||strip(character_value);
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   else if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if RELATION in ("ISMISSING") then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^first.varname then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   string = strip(string) || " or MISSING";
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put string;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   if last.node then do;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put "then ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Tree Node Identifier   = " node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Number of Observations = " NPRIORS;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: I_default=1 = " P_I_default1;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " Predicted: I_default=0 = " P_I_default0;
MPRINT(EM_TREE_MAKEENGLISHRULES):   put " ";
MPRINT(EM_TREE_MAKEENGLISHRULES):   if ^missing(varname) then origvar = varname;
MPRINT(EM_TREE_MAKEENGLISHRULES):   oldnode=node;
MPRINT(EM_TREE_MAKEENGLISHRULES):   end;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      218:176   228:190   374:191   381:195
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=28 March 2021 20:54:20,
      Create Time=28 March 2021 20:54:20
 
NOTE: 137 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 64.
NOTE: There were 99 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEENGLISHRULES):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEENGLISHRULES):   delete tempoutpath outnodes;
MPRINT(EM_TREE_MAKEENGLISHRULES):   run;
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
MPRINT(EM_TREE_TRAIN):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SOURCE";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ENGLISHRULES";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.89120587608367;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_TRAIN):  ;
MPRINT(EM_TREE_TRAIN):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33363
33364      *------------------------------------------------------------*;
33365      * End TRAIN: Tree2;
33366      *------------------------------------------------------------*;
 
33367      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
33368      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
33369      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33370      ;
MPRINT(EM_DIAGRAM):   ;
33371      ;
MPRINT(EM_DIAGRAM):   ;
33372      ;
MPRINT(EM_DIAGRAM):   ;
33373      ;
MPRINT(EM_DIAGRAM):   ;
33374      quit;
MPRINT(EM_DIAGRAM):   quit;
33375      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33376      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
33377      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33378      /*; *"; *'; */
33379      ;
MPRINT(EM_DIAGRAM):   ;
33380      run;
MPRINT(EM_DIAGRAM):   run;
33381      quit;
MPRINT(EM_DIAGRAM):   quit;
33382      /* Reset EM Options */
33383      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
33384      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
33385      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
33386      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
33387      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
33388      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:54:21" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28 March 2021
Time:                20:54:21
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O33XZLDN "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O33XZLDN new;
MPRINT(EM_DIAGRAM):   run;
33490      %let EMEXCEPTIONSTRING=;
33491      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
33492      * SCORE: Tree2;
MPRINT(EM_DIAGRAM):   * SCORE: Tree2;
33493      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33494      %let EM_ACTION = SCORE;
33495      %let syscc = 0;
33496      %macro main;
33497
33498        %if %upcase(&EM_ACTION) = CREATE %then %do;
33499          filename temp catalog 'sashelp.emmodl.tree_create.source';
33500          %include temp;
33501          filename temp;
33502
33503          %em_tree_create;
33504        %end;
33505
33506         %else
33507         %if %upcase(&EM_ACTION) = TRAIN %then %do;
33508
33509             filename temp catalog 'sashelp.emmodl.tree_train.source';
33510             %include temp;
33511             filename temp;
33512             %em_tree_train;
33513         %end;
33514
33515        %else
33516        %if %upcase(&EM_ACTION) = SCORE %then %do;
33517          filename temp catalog 'sashelp.emmodl.tree_score.source';
33518          %include temp;
33519          filename temp;
33520
33521          %em_tree_score;
33522
33523        %end;
33524
33525        %else
33526        %if %upcase(&EM_ACTION) = REPORT %then %do;
33527
33528             filename temp catalog 'sashelp.emmodl.tree_report.source';
33529             %include temp;
33530             filename temp;
33531
33532             %em_tree_report;
33533         %end;
33534
33535        %else
33536        %if %upcase(&EM_ACTION) = OPENINT %then %do;
33537
33538             filename temp catalog 'sashelp.emmodl.tree_actions.source';
33539             %include temp;
33540             filename temp;
33541             %EM_TREE_OPENTREEVIEWER;
33542
33543         %end;
33544
33545        %else
33546        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
33547
33548             filename temp catalog 'sashelp.emmodl.tree_actions.source';
33549             %include temp;
33550             filename temp;
33551             %EM_TREE_CLOSETREEVIEWER;
33552
33553         %end;
33554
33555
33556         %doendm:
33557      %mend main;
33558
33559      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
33561     +%macro em_tree_score;
33563     +   /* determine if multiple targets will be processed */
33564     +   %let em_tree_multipleTargets=N;
33565     +   %let em_tree_numTarget=1;
33566     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
33567     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
33568     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
33569     +         %let em_tree_multipleTargets=N;
33570     +      %end;
33571     +      %else %do;
33572     +         /* create macro array of targets  */
33573     +         data _null_;
33574     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
33575     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
33576     +           if eof then
33577     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
33578     +        run;
33580     +        %if &em_tree_numTarget gt 1 %then %do;
33581     +           %let em_tree_multipleTargets=Y;
33582     +        %end;
33583     +      %end;
33584     +   %end;
33586     +   /* build flow and publish scoring code */
33587     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
33588     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
33590     +   filename treeflow "&EM_USER_TREEFLOW";
33591     +   filename treepub "&EM_USER_TREEPUBLISH";
33593     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
33594     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
33596     +   %em_copyfile(infref=treeflow, outfref=flowref);
33597     +   %em_copyfile(infref=treepub, outfref=pubref);
33599     +   filename treeflow;
33600     +   filename treepub;
33602     +   /* if priors are used, add code to generate unadjusted residuals in export */
33603     +   %let useAdjPriors = N;
33604     +   data _null_;
33605     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
33606     +     if USE="Y" then call symput('useAdjPriors', 'Y');
33607     +   run;
33608     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
33609     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
33610     +      %include temp;
33611     +      filename temp;
33613     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
33614     +      filename adjref "&EM_USER_adjResidualCode";
33615     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
33617     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
33619     +      filename adjref;
33620     +   %end;
33622     +   /* LEAF */
33623     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
33624     +      data _null_;
33625     +        file flowref mod;
33626     +        put 'drop _LEAF_;';
33627     +      run;
33629     +      data _null_;
33630     +        file pubref mod;
33631     +        put 'drop _LEAF_;';
33632     +      run;
33634     +   %end;
33636     +   filename flowref;
33637     +   filename pubref;
33639     +   /* em_metachange code */
33640     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
33641     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
33642     +   %end;
33644     +   /* variable selection based on importance stat    */
33645     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
33646     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
33647     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
33648     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
33649     +     %let obs = %sysfunc(fetch(&dsid));
33650     +     %do %while(&obs=0);
33651     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
33652     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
33653     +       %EM_METACHANGE(name=&varname, role=REJECTED);
33654     +       %let obs = %sysfunc(fetch(&dsid));
33655     +     %end;
33656     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
33657     +   %end;
33659     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
33660     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
33661     +    %let tree_pred_vars = ;
33662     +    %let tree_pred_lvl =;
33663     +    %let numpred= 0;
33665     +    data _null_;
33666     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
33667     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
33668     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
33669     +     if eof then
33670     +       call symput('numpred', strip(put(_N_, BEST.)));
33671     +    run;
33672     +   %end;
33674     +   %if &numpred ne 0 %then %do;
33675     +    %do i=1 %to &numpred;
33676     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
33677     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
33678     +    %end;
33679     +   %end;
33681     +   /* determine if multiple targets will be processed */
33682     +   %let em_tree_multipleTargets=N;
33683     +   %let em_tree_numTarget=1;
33684     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
33685     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
33686     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
33687     +         %let em_tree_multipleTargets=N;
33688     +      %end;
33689     +      %else %do;
33690     +        data _null_;
33691     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
33692     +          if eof then
33693     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
33694     +        run;
33696     +        %if &em_tree_numTarget gt 1 %then %do;
33697     +           %let em_tree_multipleTargets=Y;
33698     +        %end;
33699     +     %end;
33700     +   %end;
33702     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
33703     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
33705     +      /* variable importance */
33706     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
33707     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
33709     +         %let validexist=0;
33710     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
33711     +           %let validexist=1;
33712     +         %end;
33714     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
33715     +         /* and the columns may not be generated                                                                                 */
33716     +         %let em_tree_cvexists=;
33717     +         %let em_tree_surrexists=.;
33718     +         data _null_;
33719     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
33720     +            if eof then do ;
33721     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
33722     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
33723     +            end;
33724     +         run;
33726     +         data &EM_USER_OUTIMPORT;
33727     +            set &EM_USER_OUTIMPORT;
33729     +            /* format columns based on Precison value specified */
33730     +            format importance 15.&EM_PROPERTY_PRECISION
33731     +                 %if &validexist %then %do;
33732     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
33733     +                 %end;
33734     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
33735     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
33736     +                 %end;
33737     +            ;
33738     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
33739     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
33740     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
33741     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
33742     +                 %if "&em_tree_surrexists" ne "" %then %do;
33743     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
33744     +                 %end;
33745     +                 %if &validexist %then %do;
33746     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
33747     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
33748     +                 %end;
33749     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
33750     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
33751     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
33752     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
33753     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
33754     +                 %end;
33755     +            ;
33756     +         run;
33758     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
33759     +      %end;
33760     +   %end;
33762     +   %doendm:
33763     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28 March 2021 20:54:21,
      Create Time=28 March 2021 20:53:46
 
NOTE: 202 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28 March 2021 20:54:21,
      Create Time=28 March 2021 20:53:46
 
NOTE: 180 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS5.Tree2_I_default_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file FLOWREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=7364,
      Last Modified=28 March 2021 20:54:21,
      Create Time=28 March 2021 20:53:46
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: The file PUBREF is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=6694,
      Last Modified=28 March 2021 20:54:21,
      Create Time=28 March 2021 20:53:46
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS5.Tree2_I_default_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_I_default1");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_I_default0");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS5.Tree2_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_SCORE):   data EMWS5.Tree2_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS5.Tree2_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance"
CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable VIMPORTANCE is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: Variable RATIO is uninitialized.
NOTE: There were 5 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.57729231034279;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33764
33765      *------------------------------------------------------------*;
33766      * End SCORE: Tree2;
33767      *------------------------------------------------------------*;
 
33768      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
33769      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
33770      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
33771      filename x "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas";
33772      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
33773      file x;
MPRINT(EM_DIAGRAM):   file x;
33774      put 'if upcase(NAME) = "Q_I_DEFAULT0" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_I_DEFAULT0" then do;';
33775      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
33776      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
33777      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
33778      put 'if upcase(NAME) = "Q_I_DEFAULT1" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_I_DEFAULT1" then do;';
33779      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
33780      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
33781      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
33782      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
33783      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
33784      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
33785      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
33786      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 20:54:21,
      Create Time=28 March 2021 20:53:46
 
NOTE: 12 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 41.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
33787      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
33788      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
33789      *------------------------------------------------------------*;
33790      * Tree2: Scoring DATA data;
33791      *------------------------------------------------------------*;
33792      data EMWS5.Tree2_TRAIN
33793      / view=EMWS5.Tree2_TRAIN
33794      ;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_TRAIN / view=EMWS5.Tree2_TRAIN ;
33795      set EMWS5.Meta_TRAIN
33796      ;
MPRINT(EM_DIAGRAM):   set EMWS5.Meta_TRAIN ;
33797      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas.
33798     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
33799     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
33800     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
33801     +
33802     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
33803     +LENGTH F_I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_I_default $ 12;
33804     +LENGTH I_I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_I_default $ 12;
33805     +LENGTH U_I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH U_I_default $ 12;
33806     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
33807     +
33808     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
33809     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
33810     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
33811     +label P_I_default0 = 'Predicted: I_default=0' ;
MPRINT(EM_DIAGRAM):   label P_I_default0 = 'Predicted: I_default=0' ;
33812     +label P_I_default1 = 'Predicted: I_default=1' ;
MPRINT(EM_DIAGRAM):   label P_I_default1 = 'Predicted: I_default=1' ;
33813     +label Q_I_default0 = 'Unadjusted P: I_default=0' ;
MPRINT(EM_DIAGRAM):   label Q_I_default0 = 'Unadjusted P: I_default=0' ;
33814     +label Q_I_default1 = 'Unadjusted P: I_default=1' ;
MPRINT(EM_DIAGRAM):   label Q_I_default1 = 'Unadjusted P: I_default=1' ;
33815     +label R_I_default0 = 'Residual: I_default=0' ;
MPRINT(EM_DIAGRAM):   label R_I_default0 = 'Residual: I_default=0' ;
33816     +label R_I_default1 = 'Residual: I_default=1' ;
MPRINT(EM_DIAGRAM):   label R_I_default1 = 'Residual: I_default=1' ;
33817     +label F_I_default = 'From: I_default' ;
MPRINT(EM_DIAGRAM):   label F_I_default = 'From: I_default' ;
33818     +label I_I_default = 'Into: I_default' ;
MPRINT(EM_DIAGRAM):   label I_I_default = 'Into: I_default' ;
33819     +label U_I_default = 'Unnormalized Into: I_default' ;
MPRINT(EM_DIAGRAM):   label U_I_default = 'Unnormalized Into: I_default' ;
33820     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
33821     +
33822     +
33823     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
33824     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
33825     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
33826     +
33827     +
33828     +_ARBFMT_12 = PUT( I_default , $12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( I_default , $12.);
33829     + %DMNORMCP( _ARBFMT_12, F_I_default );
MPRINT(DMNORMCP):   F_I_default=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
33830     +
33831     +******             ASSIGN OBSERVATION TO NODE             ******;
33832     +_ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
33833     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.98561151079136;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.01438848920863;
33834     +IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.98561151079136;
33835     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.01438848920863;
33836     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
33837     +  P_I_default0  =     0.98561151079136;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
33838     +  P_I_default1  =     0.01438848920863;
MPRINT(EM_DIAGRAM):   END;
33839     +  Q_I_default0  =     0.98561151079136;
33840     +  Q_I_default1  =     0.01438848920863;
MPRINT(EM_DIAGRAM):   ELSE DO;
33841     +  I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_duration , BEST12.);
33842     +  U_I_default  = '0' ;
33843     +  END;
33844     +ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33845     +  _ARBFMT_12 = PUT( GRP_duration , BEST12.);
33846     +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_savings , BEST12.);
33847     +  IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33848     +    _ARBFMT_12 = PUT( GRP_savings , BEST12.);
33849     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('3' ,'4' ,'5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 13;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.66666666666666;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.33333333333333;
33850     +    IF _ARBFMT_12 IN ('3' ,'4' ,'5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.66666666666666;
33851     +      _NODE_  =                   13;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.33333333333333;
33852     +      _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
33853     +      P_I_default0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
33854     +      P_I_default1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   END;
33855     +      Q_I_default0  =     0.66666666666666;
33856     +      Q_I_default1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   ELSE DO;
33857     +      I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33858     +      U_I_default  = '0' ;
33859     +      END;
33860     +    ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33861     +      _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33862     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('6' ,'7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33863     +      IF _ARBFMT_12 IN ('6' ,'7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33864     +        _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33865     +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 25;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.06666666666666;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.93333333333333;
33866     +        IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.06666666666666;
33867     +          _NODE_  =                   25;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.93333333333333;
33868     +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
33869     +          P_I_default0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
33870     +          P_I_default1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   END;
33871     +          Q_I_default0  =     0.06666666666666;
33872     +          Q_I_default1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   ELSE DO;
33873     +          I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
33874     +          U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
33875     +          END;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.875;
33876     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.125;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.875;
33877     +          _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.125;
33878     +          _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
33879     +          P_I_default0  =                0.875;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
33880     +          P_I_default1  =                0.125;
MPRINT(EM_DIAGRAM):   END;
33881     +          Q_I_default0  =                0.875;
MPRINT(EM_DIAGRAM):   END;
33882     +          Q_I_default1  =                0.125;
33883     +          I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
33884     +          U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
33885     +          END;
33886     +        END;
33887     +      ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33888     +        _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
33889     +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33890     +        IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33891     +          _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33892     +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 28;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.88888888888888;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.11111111111111;
33893     +          IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.88888888888888;
33894     +            _NODE_  =                   28;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.11111111111111;
33895     +            _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
33896     +            P_I_default0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
33897     +            P_I_default1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   END;
33898     +            Q_I_default0  =     0.88888888888888;
33899     +            Q_I_default1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   ELSE DO;
33900     +            I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
33901     +            U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
33902     +            END;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.17391304347826;
33903     +          ELSE DO;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.82608695652173;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.17391304347826;
33904     +            _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.82608695652173;
33905     +            _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
33906     +            P_I_default0  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
33907     +            P_I_default1  =     0.82608695652173;
MPRINT(EM_DIAGRAM):   END;
33908     +            Q_I_default0  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   END;
33909     +            Q_I_default1  =     0.82608695652173;
33910     +            I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   ELSE DO;
33911     +            U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
33912     +            END;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
33913     +          END;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.11111111111111;
33914     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.11111111111111;
33915     +          _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.88888888888888;
33916     +          _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
33917     +          P_I_default0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
33918     +          P_I_default1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   END;
33919     +          Q_I_default0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   END;
33920     +          Q_I_default1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   END;
33921     +          I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   END;
33922     +          U_I_default  = '1' ;
33923     +          END;
MPRINT(EM_DIAGRAM):   ELSE DO;
33924     +        END;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_credit_history , BEST12.);
33925     +      END;
33926     +    END;
33927     +  ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33928     +    _ARBFMT_12 = PUT( GRP_credit_history , BEST12.);
33929     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.2;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.8;
33930     +    IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.2;
33931     +      _NODE_  =                   11;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.8;
33932     +      _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
33933     +      P_I_default0  =                  0.2;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
33934     +      P_I_default1  =                  0.8;
MPRINT(EM_DIAGRAM):   END;
33935     +      Q_I_default0  =                  0.2;
33936     +      Q_I_default1  =                  0.8;
MPRINT(EM_DIAGRAM):   ELSE DO;
33937     +      I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
33938     +      U_I_default  = '1' ;
33939     +      END;
33940     +    ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33941     +      _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
33942     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.88118811881188;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.11881188118811;
33943     +      IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.88118811881188;
33944     +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.11881188118811;
33945     +        _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
33946     +        P_I_default0  =     0.88118811881188;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
33947     +        P_I_default1  =     0.11881188118811;
MPRINT(EM_DIAGRAM):   END;
33948     +        Q_I_default0  =     0.88118811881188;
33949     +        Q_I_default1  =     0.11881188118811;
MPRINT(EM_DIAGRAM):   ELSE DO;
33950     +        I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33951     +        U_I_default  = '0' ;
33952     +        END;
33953     +      ELSE DO;
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
33954     +        _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
33955     +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   _NODE_ = 21;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.25;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.75;
33956     +        IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.25;
33957     +          _NODE_  =                   21;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.75;
33958     +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
33959     +          P_I_default0  =                 0.25;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
33960     +          P_I_default1  =                 0.75;
MPRINT(EM_DIAGRAM):   END;
33961     +          Q_I_default0  =                 0.25;
33962     +          Q_I_default1  =                 0.75;
MPRINT(EM_DIAGRAM):   ELSE DO;
33963     +          I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _NODE_ = 20;
33964     +          U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
33965     +          END;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.77981651376146;
33966     +        ELSE DO;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.22018348623853;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.77981651376146;
33967     +          _NODE_  =                   20;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.22018348623853;
33968     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
33969     +          P_I_default0  =     0.77981651376146;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
33970     +          P_I_default1  =     0.22018348623853;
MPRINT(EM_DIAGRAM):   END;
33971     +          Q_I_default0  =     0.77981651376146;
MPRINT(EM_DIAGRAM):   END;
33972     +          Q_I_default1  =     0.22018348623853;
MPRINT(EM_DIAGRAM):   END;
33973     +          I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   END;
33974     +          U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   END;
33975     +          END;
33976     +        END;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
33977     +      END;
33978     +    END;
MPRINT(EM_DIAGRAM):   IF F_I_default NE '0' AND F_I_default NE '1' THEN DO;
33979     +  END;
MPRINT(EM_DIAGRAM):   R_I_default0 = .;
33980     +
MPRINT(EM_DIAGRAM):   R_I_default1 = .;
33981     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   END;
33982     +IF  F_I_default  NE '0'
33983     +AND F_I_default  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
33984     +        R_I_default0  = .;
MPRINT(EM_DIAGRAM):   R_I_default0 = -P_I_default0 ;
33985     +        R_I_default1  = .;
MPRINT(EM_DIAGRAM):   R_I_default1 = -P_I_default1 ;
33986     + END;
MPRINT(EM_DIAGRAM):   SELECT( F_I_default );
33987     + ELSE DO;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_I_default0 = R_I_default0 +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_I_default1 = R_I_default1 +1;
33988     +       R_I_default0  =  -P_I_default0 ;
MPRINT(EM_DIAGRAM):   END;
33989     +       R_I_default1  =  -P_I_default1 ;
MPRINT(EM_DIAGRAM):   END;
33990     +       SELECT( F_I_default  );
33991     +          WHEN( '0'  ) R_I_default0  = R_I_default0  +1;
MPRINT(EM_DIAGRAM):   ****************************************************************;
33992     +          WHEN( '1'  ) R_I_default1  = R_I_default1  +1;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
33993     +       END;
MPRINT(EM_DIAGRAM):   ****************************************************************;
33994     + END;
33995     +
MPRINT(EM_DIAGRAM):   drop _LEAF_;
33996     +****************************************************************;
33997     +******          END OF DECISION TREE SCORING CODE         ******;
33998     +****************************************************************;
33999     +
34000     +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
34001      run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.META_TRAIN.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.11 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.11 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
34002      quit;
34003      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
34004      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34005      *------------------------------------------------------------*;
34006      * Tree2: Scoring TEST data;
34007      *------------------------------------------------------------*;
34008      data EMWS5.Tree2_TEST
34009      / view=EMWS5.Tree2_TEST
34010      ;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_TEST / view=EMWS5.Tree2_TEST ;
34011      set EMWS5.Meta_TEST
34012      ;
MPRINT(EM_DIAGRAM):   set EMWS5.Meta_TEST ;
34013      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMFLOWSCORE.sas.
34014     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
34015     +******             DECISION TREE SCORING CODE             ******;
The SAS System
 
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
34016     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
34017     +
34018     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
34019     +LENGTH F_I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH F_I_default $ 12;
34020     +LENGTH I_I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH I_I_default $ 12;
34021     +LENGTH U_I_default  $   12;
MPRINT(EM_DIAGRAM):   LENGTH U_I_default $ 12;
34022     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
34023     +
34024     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
34025     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
34026     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
34027     +label P_I_default0 = 'Predicted: I_default=0' ;
MPRINT(EM_DIAGRAM):   label P_I_default0 = 'Predicted: I_default=0' ;
34028     +label P_I_default1 = 'Predicted: I_default=1' ;
MPRINT(EM_DIAGRAM):   label P_I_default1 = 'Predicted: I_default=1' ;
34029     +label Q_I_default0 = 'Unadjusted P: I_default=0' ;
MPRINT(EM_DIAGRAM):   label Q_I_default0 = 'Unadjusted P: I_default=0' ;
34030     +label Q_I_default1 = 'Unadjusted P: I_default=1' ;
MPRINT(EM_DIAGRAM):   label Q_I_default1 = 'Unadjusted P: I_default=1' ;
34031     +label R_I_default0 = 'Residual: I_default=0' ;
MPRINT(EM_DIAGRAM):   label R_I_default0 = 'Residual: I_default=0' ;
34032     +label R_I_default1 = 'Residual: I_default=1' ;
MPRINT(EM_DIAGRAM):   label R_I_default1 = 'Residual: I_default=1' ;
34033     +label F_I_default = 'From: I_default' ;
MPRINT(EM_DIAGRAM):   label F_I_default = 'From: I_default' ;
34034     +label I_I_default = 'Into: I_default' ;
MPRINT(EM_DIAGRAM):   label I_I_default = 'Into: I_default' ;
34035     +label U_I_default = 'Unnormalized Into: I_default' ;
MPRINT(EM_DIAGRAM):   label U_I_default = 'Unnormalized Into: I_default' ;
34036     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
34037     +
34038     +
34039     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
34040     +LENGTH _ARBFMT_12 $     12; DROP _ARBFMT_12;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_12 $ 12;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_12;
34041     +_ARBFMT_12 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = ' ';
34042     +
34043     +
34044     +_ARBFMT_12 = PUT( I_default , $12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( I_default , $12.);
34045     + %DMNORMCP( _ARBFMT_12, F_I_default );
MPRINT(DMNORMCP):   F_I_default=dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
34046     +
34047     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
34048     +_ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
34049     + %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34050     +IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
34051     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
34052     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
34053     +  P_I_default0  =     0.98561151079136;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.98561151079136;
34054     +  P_I_default1  =     0.01438848920863;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.01438848920863;
34055     +  Q_I_default0  =     0.98561151079136;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.98561151079136;
34056     +  Q_I_default1  =     0.01438848920863;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.01438848920863;
34057     +  I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
34058     +  U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
34059     +  END;
MPRINT(EM_DIAGRAM):   END;
34060     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34061     +  _ARBFMT_12 = PUT( GRP_duration , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_duration , BEST12.);
34062     +   %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34063     +  IF _ARBFMT_12 IN ('5' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ) THEN DO;
34064     +    _ARBFMT_12 = PUT( GRP_savings , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_savings , BEST12.);
34065     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34066     +    IF _ARBFMT_12 IN ('3' ,'4' ,'5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('3' ,'4' ,'5' ,'6' ) THEN DO;
34067     +      _NODE_  =                   13;
MPRINT(EM_DIAGRAM):   _NODE_ = 13;
34068     +      _LEAF_  =                   11;
MPRINT(EM_DIAGRAM):   _LEAF_ = 11;
34069     +      P_I_default0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.66666666666666;
34070     +      P_I_default1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.33333333333333;
34071     +      Q_I_default0  =     0.66666666666666;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.66666666666666;
34072     +      Q_I_default1  =     0.33333333333333;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.33333333333333;
34073     +      I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
34074     +      U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
34075     +      END;
MPRINT(EM_DIAGRAM):   END;
34076     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34077     +      _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
34078     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34079     +      IF _ARBFMT_12 IN ('6' ,'7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('6' ,'7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
34080     +        _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
34081     +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34082     +        IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
34083     +          _NODE_  =                   25;
MPRINT(EM_DIAGRAM):   _NODE_ = 25;
34084     +          _LEAF_  =                   10;
MPRINT(EM_DIAGRAM):   _LEAF_ = 10;
34085     +          P_I_default0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.06666666666666;
34086     +          P_I_default1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.93333333333333;
34087     +          Q_I_default0  =     0.06666666666666;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.06666666666666;
34088     +          Q_I_default1  =     0.93333333333333;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.93333333333333;
34089     +          I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
34090     +          U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
34091     +          END;
MPRINT(EM_DIAGRAM):   END;
34092     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34093     +          _NODE_  =                   24;
MPRINT(EM_DIAGRAM):   _NODE_ = 24;
34094     +          _LEAF_  =                    9;
MPRINT(EM_DIAGRAM):   _LEAF_ = 9;
34095     +          P_I_default0  =                0.875;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.875;
34096     +          P_I_default1  =                0.125;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.125;
34097     +          Q_I_default0  =                0.875;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.875;
34098     +          Q_I_default1  =                0.125;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.125;
34099     +          I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
34100     +          U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
34101     +          END;
MPRINT(EM_DIAGRAM):   END;
34102     +        END;
MPRINT(EM_DIAGRAM):   END;
34103     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34104     +        _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
34105     +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34106     +        IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
34107     +          _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
34108     +           %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34109     +          IF _ARBFMT_12 IN ('2' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ) THEN DO;
34110     +            _NODE_  =                   28;
MPRINT(EM_DIAGRAM):   _NODE_ = 28;
34111     +            _LEAF_  =                    6;
MPRINT(EM_DIAGRAM):   _LEAF_ = 6;
34112     +            P_I_default0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.88888888888888;
34113     +            P_I_default1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.11111111111111;
34114     +            Q_I_default0  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.88888888888888;
34115     +            Q_I_default1  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.11111111111111;
34116     +            I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
34117     +            U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
34118     +            END;
MPRINT(EM_DIAGRAM):   END;
34119     +          ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34120     +            _NODE_  =                   29;
MPRINT(EM_DIAGRAM):   _NODE_ = 29;
34121     +            _LEAF_  =                    7;
MPRINT(EM_DIAGRAM):   _LEAF_ = 7;
34122     +            P_I_default0  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.17391304347826;
34123     +            P_I_default1  =     0.82608695652173;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.82608695652173;
34124     +            Q_I_default0  =     0.17391304347826;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.17391304347826;
34125     +            Q_I_default1  =     0.82608695652173;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.82608695652173;
34126     +            I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
34127     +            U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
34128     +            END;
MPRINT(EM_DIAGRAM):   END;
34129     +          END;
MPRINT(EM_DIAGRAM):   END;
34130     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34131     +          _NODE_  =                   23;
MPRINT(EM_DIAGRAM):   _NODE_ = 23;
34132     +          _LEAF_  =                    8;
MPRINT(EM_DIAGRAM):   _LEAF_ = 8;
34133     +          P_I_default0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.11111111111111;
34134     +          P_I_default1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.88888888888888;
34135     +          Q_I_default0  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.11111111111111;
34136     +          Q_I_default1  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.88888888888888;
34137     +          I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
34138     +          U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
34139     +          END;
MPRINT(EM_DIAGRAM):   END;
34140     +        END;
MPRINT(EM_DIAGRAM):   END;
34141     +      END;
MPRINT(EM_DIAGRAM):   END;
34142     +    END;
MPRINT(EM_DIAGRAM):   END;
34143     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34144     +    _ARBFMT_12 = PUT( GRP_credit_history , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_credit_history , BEST12.);
34145     +     %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34146     +    IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('5' ,'6' ) THEN DO;
34147     +      _NODE_  =                   11;
MPRINT(EM_DIAGRAM):   _NODE_ = 11;
34148     +      _LEAF_  =                    5;
MPRINT(EM_DIAGRAM):   _LEAF_ = 5;
34149     +      P_I_default0  =                  0.2;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.2;
34150     +      P_I_default1  =                  0.8;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.8;
34151     +      Q_I_default0  =                  0.2;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.2;
34152     +      Q_I_default1  =                  0.8;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.8;
34153     +      I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
34154     +      U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
34155     +      END;
MPRINT(EM_DIAGRAM):   END;
34156     +    ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34157     +      _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_acc_status , BEST12.);
34158     +       %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34159     +      IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('2' ,'3' ) THEN DO;
34160     +        _NODE_  =                   16;
MPRINT(EM_DIAGRAM):   _NODE_ = 16;
34161     +        _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
34162     +        P_I_default0  =     0.88118811881188;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.88118811881188;
34163     +        P_I_default1  =     0.11881188118811;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.11881188118811;
34164     +        Q_I_default0  =     0.88118811881188;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.88118811881188;
34165     +        Q_I_default1  =     0.11881188118811;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.11881188118811;
34166     +        I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
34167     +        U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
34168     +        END;
MPRINT(EM_DIAGRAM):   END;
34169     +      ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34170     +        _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
MPRINT(EM_DIAGRAM):   _ARBFMT_12 = PUT( GRP_pourpose , BEST12.);
34171     +         %DMNORMIP( _ARBFMT_12);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
34172     +        IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_12 IN ('7' ,'8' ,'9' ,'10' ,'11' ) THEN DO;
34173     +          _NODE_  =                   21;
MPRINT(EM_DIAGRAM):   _NODE_ = 21;
34174     +          _LEAF_  =                    4;
MPRINT(EM_DIAGRAM):   _LEAF_ = 4;
34175     +          P_I_default0  =                 0.25;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.25;
34176     +          P_I_default1  =                 0.75;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.75;
34177     +          Q_I_default0  =                 0.25;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.25;
34178     +          Q_I_default1  =                 0.75;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.75;
34179     +          I_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   I_I_default = '1' ;
34180     +          U_I_default  = '1' ;
MPRINT(EM_DIAGRAM):   U_I_default = '1' ;
34181     +          END;
MPRINT(EM_DIAGRAM):   END;
34182     +        ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34183     +          _NODE_  =                   20;
MPRINT(EM_DIAGRAM):   _NODE_ = 20;
34184     +          _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
34185     +          P_I_default0  =     0.77981651376146;
MPRINT(EM_DIAGRAM):   P_I_default0 = 0.77981651376146;
34186     +          P_I_default1  =     0.22018348623853;
MPRINT(EM_DIAGRAM):   P_I_default1 = 0.22018348623853;
34187     +          Q_I_default0  =     0.77981651376146;
MPRINT(EM_DIAGRAM):   Q_I_default0 = 0.77981651376146;
34188     +          Q_I_default1  =     0.22018348623853;
MPRINT(EM_DIAGRAM):   Q_I_default1 = 0.22018348623853;
34189     +          I_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   I_I_default = '0' ;
34190     +          U_I_default  = '0' ;
MPRINT(EM_DIAGRAM):   U_I_default = '0' ;
34191     +          END;
MPRINT(EM_DIAGRAM):   END;
34192     +        END;
MPRINT(EM_DIAGRAM):   END;
34193     +      END;
MPRINT(EM_DIAGRAM):   END;
34194     +    END;
MPRINT(EM_DIAGRAM):   END;
34195     +  END;
MPRINT(EM_DIAGRAM):   END;
34196     +
34197     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
34198     +IF  F_I_default  NE '0'
34199     +AND F_I_default  NE '1'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_I_default NE '0' AND F_I_default NE '1' THEN DO;
34200     +        R_I_default0  = .;
MPRINT(EM_DIAGRAM):   R_I_default0 = .;
34201     +        R_I_default1  = .;
MPRINT(EM_DIAGRAM):   R_I_default1 = .;
34202     + END;
MPRINT(EM_DIAGRAM):   END;
34203     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
34204     +       R_I_default0  =  -P_I_default0 ;
MPRINT(EM_DIAGRAM):   R_I_default0 = -P_I_default0 ;
34205     +       R_I_default1  =  -P_I_default1 ;
MPRINT(EM_DIAGRAM):   R_I_default1 = -P_I_default1 ;
34206     +       SELECT( F_I_default  );
MPRINT(EM_DIAGRAM):   SELECT( F_I_default );
34207     +          WHEN( '0'  ) R_I_default0  = R_I_default0  +1;
MPRINT(EM_DIAGRAM):   WHEN( '0' ) R_I_default0 = R_I_default0 +1;
34208     +          WHEN( '1'  ) R_I_default1  = R_I_default1  +1;
MPRINT(EM_DIAGRAM):   WHEN( '1' ) R_I_default1 = R_I_default1 +1;
34209     +       END;
MPRINT(EM_DIAGRAM):   END;
34210     + END;
MPRINT(EM_DIAGRAM):   END;
34211     +
34212     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
34213     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
34214     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
34215     +
34216     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
34217      run;
 
NOTE: DATA STEP view saved on file EMWS5.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.META_TEST.VIEW used (Total process time):
      real time           0.10 seconds
      cpu time            0.10 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
34218      quit;
34219      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
34221      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
34222      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
34223      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
34224      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34225      * Tree2: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree2: Computing metadata for TRAIN data;
34226      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.Tree2_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.Tree2_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.Tree2_TRAIN out=WORK.M0NF0CYA noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0NF0CYA;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M0NF0CYA(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0NF0CYA;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M0NF0CYA;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M2XN0QFB NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3FKXKN7(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   set WORK.M2XN0QFB;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.Meta_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Meta_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree2";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("I_DEFAULT") model = "Tree2";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree2: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "Q_I_DEFAULT0" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_I_DEFAULT1" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
34583      data EMWS5.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree2_EMINFO;
34584      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
34585      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
34586      cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
34590      run;
34591      proc sort data = EMWS5.Tree2_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.Tree2_EMINFO NOTHREADS;
34592      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
34593      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
34594      proc sort data = EMWS5.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS5.Neural_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
34595      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
34596      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.NEURAL_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 5 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
34597      proc sort data = EMWS5.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS5.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
34598      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
34599      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS5.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
34600      data EMWS5.Tree2_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_EMINFO;
34601      merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
34602      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
34603      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 5 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS5.TREE2_EMINFO has 8 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
34604      proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
34605      delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
34606      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
34607      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.14 seconds
 
NOTE: View EMWS5.TREE2_TEST.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.10 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "20:54:23" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28 March 2021
Time:                20:54:23
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3F24__T "C:\Jose\DM_ang\Workspaces\EMWS5\Tree2\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3F24__T new;
MPRINT(EM_DIAGRAM):   run;
34631      data EMWS5.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree2_EMOUTFIT;
34632      set EMWS5.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_EMOUTFIT;
34633      length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
34634      label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
34635      if upcase(TARGET) eq "I_DEFAULT" then TargetLabel = 'Into: default';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "I_DEFAULT" then TargetLabel = 'Into: default';
34636      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMOUTFIT.
NOTE: The data set EMWS5.TREE2_EMOUTFIT has 1 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
34637      proc sort data=EMWS5.Tree2_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Tree2_EMREPORTFIT nothreads;
34638      by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
34639      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMREPORTFIT.
NOTE: The data set EMWS5.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
34640      %let _EMwarndup = 0;
34641      %let _EMtargetdup =;
34642      %let _EMASEtargetdup =;
34643      data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
34644      set EMWS5.Tree2_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_EMOUTFIT;
34645      if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
34646      call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
34647      call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
34648      call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
34649      end;
MPRINT(EM_DIAGRAM):   end;
34650      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
34651      %let EMEXCEPTIONSTRING=;
34652      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
34653      * REPORT: Tree2;
MPRINT(EM_DIAGRAM):   * REPORT: Tree2;
34654      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
34655      %let EM_ACTION = REPORT;
34656      %let syscc = 0;
34657      %macro main;
34658
34659        %if %upcase(&EM_ACTION) = CREATE %then %do;
34660          filename temp catalog 'sashelp.emmodl.tree_create.source';
34661          %include temp;
34662          filename temp;
34663
34664          %em_tree_create;
34665        %end;
34666
34667         %else
34668         %if %upcase(&EM_ACTION) = TRAIN %then %do;
34669
34670             filename temp catalog 'sashelp.emmodl.tree_train.source';
34671             %include temp;
34672             filename temp;
34673             %em_tree_train;
34674         %end;
34675
34676        %else
34677        %if %upcase(&EM_ACTION) = SCORE %then %do;
34678          filename temp catalog 'sashelp.emmodl.tree_score.source';
34679          %include temp;
34680          filename temp;
34681
34682          %em_tree_score;
34683
34684        %end;
34685
34686        %else
34687        %if %upcase(&EM_ACTION) = REPORT %then %do;
34688
34689             filename temp catalog 'sashelp.emmodl.tree_report.source';
34690             %include temp;
34691             filename temp;
34692
34693             %em_tree_report;
34694         %end;
34695
34696        %else
34697        %if %upcase(&EM_ACTION) = OPENINT %then %do;
34698
34699             filename temp catalog 'sashelp.emmodl.tree_actions.source';
34700             %include temp;
34701             filename temp;
34702             %EM_TREE_OPENTREEVIEWER;
34703
34704         %end;
34705
34706        %else
34707        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
34708
34709             filename temp catalog 'sashelp.emmodl.tree_actions.source';
34710             %include temp;
34711             filename temp;
34712             %EM_TREE_CLOSETREEVIEWER;
34713
34714         %end;
34715
34716
34717         %doendm:
34718      %mend main;
34719
34720      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
34722     +%macro em_tree_makePlotDs( multipleTar= );
34724     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
34725     +  %EM_GETNAME(key=OUTNODES, type=DATA);
34726     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
34727     +  %EM_GETNAME(key=OUTRULES, type=DATA);
34729     +  /* determine if validation statistics will be displayed */
34730     +  %let validflag=N;
34731     +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
34732     +    /* determine if validation data exists */
34733     +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
34734     +      %let validflag=Y;
34735     +    %end;
34736     +  %end;
34738     +   /* retrieve name of decmeta even in presence of multiple targets */
34739     +   %let decmeta = ;
34740     +   %if &EM_DEC_DECMETA eq %then %do;
34741     +     data _Target;
34742     +       set &em_data_variableset;
34743     +       where ROLE='TARGET' and USE in('D', 'Y');
34744     +       keep NAME;
34745     +     run;
34746     +     proc sort data=_Target;
34747     +       by NAME;
34748     +     run;
34749     +     proc sort data=EM_TARGETDECINFO;
34750     +       by TARGET;
34751     +     run;
34752     +     data _Target;
34753     +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
34754     +       by NAME;
34755     +       if _a then do;
34756     +         call symput('decmeta', trim(DECMETA));
34757     +       end;
34758     +     run;
34759     +     proc delete data=_Target;run;
34760     +   %end;
34761     +   %else %let decmeta = &EM_DEC_DECMETA;
34764     +  /* retrieve targetEvent from decmeta */
34765     +  %let targetEvent=;
34766     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
34767     +    %if %sysfunc(exist(&DECMETA)) %then %do;
34768     +      data _null_;
34769     +       set &DECMETA(where=(_TYPE_="TARGET"));
34770     +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
34771     +      run;
34772     +    %end;
34773     +  %end;
34775     +  /* retrieve predicted var for targetEvent from decmeta */
34776     +  %let predTarget=;
34777     +  %let predLvl=;
34778     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
34779     +    %if %sysfunc(exist(&DECMETA)) %then %do;
34780     +      data _null_;
34781     +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
34782     +       call symput('predTarget', strip(VARIABLE));
34783     +       call symput('predLvl', strip(LEVEL));
34784     +      run;
34785     +    %end;
34786     +  %end;
34787     +  %else %do;
34788     +    %if %sysfunc(exist(&DECMETA)) %then %do;
34789     +      data _null_;
34790     +       set &DECMETA(where=(_TYPE_="PREDICTED"));
34791     +       call symput('predTarget', strip(VARIABLE));
34792     +      run;
34793     +    %end;
34794     +  %end;
34796     +  /* create BelowText value */
34797     +  data belowtext;
34798     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
34799     +    keep node belowtext;
34800     +  run;
34802     +  /* replace belowtext with variable label if it exists */
34803     +  data belowtext2;
34804     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
34805     +    keep node belowtextlbl;
34806     +  run;
34808     +  proc sort data=belowtext; by node; run;
34809     +  proc sort data=belowtext2; by node; run;
34811     +  data belowtext;
34812     +    merge belowtext belowtext2(in=_a);
34813     +    by node;
34814     +    if _a then belowtext=belowtextlbl;
34815     +    keep node belowtext;
34816     +  run;
34818     +  /* create AboveText value */
34819     +  data abovetext;
34820     +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
34821     +  run;
34822     +  proc sort data=abovetext; by node numeric_value; run;
34824     +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
34825     +  data abovetext;
34826     +    set abovetext(rename=(node=parent));
34827     +    by parent numeric_value;
34828     +    retain abovetext tempstring flag branch origval origchar ;
34829     +    length abovetext $256;
34830     +    length tempstring origchar $64;
34832     +    if STAT in ("INTERVAL", "ORDINAL") then do;
34833     +      if first.parent then do;
34834     +        if missing(character_value) then do;
34835     +          numeric_value = round(numeric_value, &sp_precision);
34836     +          abovetext = "< "||strip(NUMERIC_VALUE);
34837     +          branch = 1;
34838     +          origval = numeric_value;
34839     +          output;
34840     +        end;
34841     +        else do;
34842     +          abovetext = "< "||strip(CHARACTER_VALUE);
34843     +          branch = 1;
34844     +          origchar = character_value;
34845     +          output;
34846     +        end;
34848     +        if first.parent AND last.parent then do;
34849     +          if missing(character_value) then do;
34850     +            numeric_value = round(numeric_value, &sp_precision);
34851     +            branch = branch + 1;
34852     +            abovetext = ">= "||strip(NUMERIC_VALUE);
34853     +            output;
34854     +          end;
34855     +          else do;
34856     +            branch = branch + 1;
34857     +            abovetext = ">= "||strip(CHARACTER_VALUE);
34858     +            output;
34859     +          end;
34860     +        end;
34861     +      end;
34862     +      else if last.parent then do;
34863     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
34864     +          if missing(character_value) then do;
34865     +            numeric_value = round(numeric_value, &sp_precision);
34866     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
34867     +          end;
34868     +          else do;
34869     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
34870     +          end;
34871     +          branch = branch + 1;
34872     +          output;
34874     +          if missing(character_value) then do;
34875     +            numeric_value = round(numeric_value, &sp_precision);
34876     +            abovetext = ">= "||strip(NUMERIC_VALUE);
34877     +          end;
34878     +          else do;
34879     +            abovetext = ">= "||strip(CHARACTER_VALUE);
34880     +          end;
34881     +          branch = branch + 1;
34882     +          output;
34883     +        end;
34884     +        else do;
34885     +          if missing(character_value) then do;
34886     +            numeric_value = round(numeric_value, &sp_precision);
34887     +            abovetext = ">= "||strip(NUMERIC_VALUE);
34888     +          end;
34889     +          else do;
34890     +            abovetext = ">= "||strip(CHARACTER_VALUE);
34891     +          end;
34892     +          branch = branch + 1;
34893     +          output;
34894     +        end;
34895     +      end;
34896     +      else do;
34897     +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
34898     +          if missing(character_value) then do;
34899     +            numeric_value = round(numeric_value,&sp_precision);
34900     +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
34901     +            origval = numeric_value;
34902     +          end;
34903     +          else do;
34904     +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
34905     +            origchar = character_value;
34906     +          end;
34907     +          branch = branch + 1;
34908     +          output;
34910     +        end;
34911     +        else do;
34912     +          if missing(character_value) then do;
34913     +            numeric_value = round(numeric_value, &sp_precision);
34914     +            abovetext = ">= "||strip(NUMERIC_VALUE);
34915     +            origval = numeric_value;
34916     +          end;
34917     +          else do;
34918     +            abovetext = ">= "||strip(CHARACTER_VALUE);
34919     +            origval = character_value;
34920     +          end;
34921     +          branch = branch + 1;
34922     +          output;
34923     +        end;
34924     +      end;
34925     +    end;
34926     +    else do;
34927     +       if first.numeric_value then do;
34928     +         flag = 0;
34929     +         abovetext = strip(CHARACTER_VALUE);
34930     +         branch = numeric_value;
34931     +         if first.numeric_value AND last.numeric_value then do;
34932     +           output;
34933     +         end;
34934     +       end;
34935     +       else if last.numeric_value then do;
34936     +         if flag=0 then do;
34937     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
34938     +           length = length(strip(tempstring));
34939     +           if length < 32 then do;
34940     +             abovetext = strip(tempstring);
34941     +           end;
34942     +           else do;
34943     +             abovetext = strip(abovetext)||", ...";
34944     +             flag = 1;
34945     +           end;
34946     +         end;
34947     +         branch = numeric_value;
34948     +         output;
34949     +       end;
34950     +       else do;
34951     +         if flag=0 then do;
34952     +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
34953     +           length = length(strip(tempstring));
34954     +           if length < 32 then do;
34955     +             abovetext = strip(tempstring);
34956     +           end;
34957     +           else do;
34958     +             abovetext = strip(abovetext)||", ...";
34959     +             flag=1;
34960     +           end;
34961     +         end;
34962     +         branch = numeric_value;
34963     +       end;
34964     +    end;
34965     +    keep parent branch abovetext;
34966     +  run;
34968     +  /* Missing value to abovetext */
34969     +  data tempmissing;
34970     +    set &EM_USER_OUTRULES;
34971     +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
34972     +    rename node=parent numeric_value=branch character_value=misschar;
34973     +  run;
34976     +  proc sort data=abovetext; by parent branch; run;
34977     +  proc sort data=tempmissing; by parent branch; run;
34978     +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
34980     +  data tempoutnodes;
34981     +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
34982     +    by parent branch;
34983     +    length traintotal validtotal 8;
34984     +    retain traintotal validtotal;
34986     +    if _a then do;
34987     +      if ^MISSING(abovetext) then do;
34988     +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
34989     +      end;
34990     +      else do;
34991     +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
34992     +      end;
34993     +    end;
34994     +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
34996     +    if node=1 then do;
34997     +      traintotal = N;
34998     +      validtotal=VN;
34999     +    end;
35001     +    drop role rank stat misschar belowtext;
35002     +  run;
35003     +  proc sort data=tempoutnodes; by node; run;
35004     +  proc sort data=belowtext; by node; run;
35006     +  data tempoutnodes;
35007     +    merge tempoutnodes belowtext;
35008     +    by node;
35010     +  run;
35012     +  /* determine if adjusted counts exists; if so, use these vs true counts */
35013     +  %let adjusted = N;
35014     +  %let npriors = 0;
35015     +  data _null_ ;
35016     +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
35017     +    if eof then do ;
35018     +      call symput("npriors" , strip(put(_N_,best.))) ;
35019     +    end;
35020     +  run;
35021     +  %if &npriors gt 0 %then %let adjusted=Y;
35024     +  /* create a table with targetUsed and targetLevel columns for each node */
35025     +  data temptarmeta;
35026     +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
35027     +    %if &multipleTar eq N %then %do;
35028     +      AND USE in ('D', 'Y')
35029     +    %end;
35030     +    ));
35031     +    length TARGET $32;
35032     +    Target=name;
35033     +    keep target level;
35034     +  run;
35036     +  %if &multipleTar eq Y %then %do;
35037     +    data temptargetused;
35038     +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
35039     +      keep node target;
35040     +    run;
35041     +    proc sort data=temptargetused; by target; run;
35042     +    proc sort data=temptarmeta; by target; run;
35043     +    data temptargetused;
35044     +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
35045     +      by target;
35046     +      if _a and _b;
35047     +    run;
35048     +  %end;
35049     +  %else %do;
35050     +    data temptargetused;
35051     +      set &EM_USER_OUTSTATS;
35052     +      length target $32 tarlevel $10;
35053     +      target="%EM_TARGET";
35054     +      tarlevel="%EM_TARGET_LEVEL";
35055     +      keep node target tarlevel;
35056     +    run;
35057     +    proc sort data=temptargetused nodupkey; by node; run;
35058     +  %end;
35060     +  /* merge this information back into outstats, keeping only stats for the target used in the tree */
35061     +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
35062     +  proc sort data=temptargetused; by node; run;
35065     +  /* create tables for all interval targets as well as all class targets */
35066     +  data tempinterval tempclass;
35067     +    merge tempoutstats temptargetused( rename=(target=targetused));
35068     +    by node;
35069     +    %if "&multipleTar" eq "Y" %then %do;
35070     +      if ((missing(Target)) OR (target=targetused ));
35071     +    %end;
35073     +    if tarlevel="INTERVAL" then output tempinterval;
35074     +    else output tempclass;
35075     +  run;
35077     +  /* initialize intTarget and classTarget flags */
35078     +  %let em_intNobs =0;
35079     +  %let em_classNobs = 0;
35080     +  %let em_intTarget= N;
35081     +  %let em_classTarget= N;
35083     +  proc sql;
35084     +    reset noprint;
35085     +    select count(*) into :em_intNobs from tempinterval;
35086     +  quit;
35087     +  proc sql;
35088     +    reset noprint;
35089     +    select count(*) into :em_classNobs from tempclass;
35090     +  quit;
35092     +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
35093     +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
35095     +  /* retrieve all information for interval targets */
35096     +  %if &em_intTarget eq Y %then %do;
35098     +    /* determine if leaf variable exists */
35099     +    %let dsid=%sysfunc(open(tempinterval,i));
35100     +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
35101     +    %let rc=%sysfunc(close(&dsid));
35103     +    proc transpose data=tempinterval
35104     +      %if &leafexists %then %do;
35105     +        (drop=leaf)
35106     +      %end;
35107     +      %if &validexist %then %do;
35108     +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
35109     +      %end;
35110     +      %else %do;
35111     +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
35112     +      %end;
35113     +      by node;
35114     +      id statname;
35115     +    run;
35116     +    data tempinterval;
35117     +      set tempinterval;
35118     +      if missing(N) then delete;
35119     +    run;
35120     +  %end;
35122     +  /* retrieve all information for class targets */
35123     +  %if &em_classTarget eq Y %then %do;
35124     +    proc sort data=tempclass; by node category; run;
35125     +    %if &validflag eq N %then %do;
35126     +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
35127     +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
35128     +    %end;
35129     +    %else %do;
35130     +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
35131     +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
35132     +    %end;
35133     +      set tempclass;
35135     +      %if &validflag eq N %then %do;
35136     +        %if "&adjusted" eq "N" %then %do;
35137     +          if statname="N" then output tempn;
35138     +        %end;
35139     +        %else %do;
35140     +          if statname="NPRIORS" then output tempn;
35141     +        %end;
35142     +        else if statname="PREDICTION" then output temppredict;
35143     +        else if statname="PROBABILITY" then output tempprob;
35144     +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
35145     +        else if statname="ALTERNATIVE LOSS" then output temploss;
35146     +      %end;
35147     +      %else %do;
35148     +        %if "&adjusted" eq "N" %then %do;
35149     +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
35150     +        %end;
35151     +        %else %do;
35152     +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
35153     +        %end;
35154     +        else if statname="PREDICTION" then output temppredict;
35155     +        else if statname="PROBABILITY" then output tempprob;
35156     +        else if statname="VALID: PROBABILITY" then output tempvprob;
35157     +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
35158     +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
35159     +      %end;
35160     +    run;
35163     +    /* determine if profit/loss exists in tempprofit */
35164     +    %let em_profitflag=0;
35165     +    %let em_lossflag=0;
35166     +    proc sql;
35167     +      reset noprint;
35168     +      select count(*) into :em_profitflag from tempprofit;
35169     +    quit;
35170     +    proc sql;
35171     +      reset noprint;
35172     +      select count(*) into :em_lossflag from temploss;
35173     +    quit;
35175     +    %if &validFlag eq Y %then %do;
35176     +      proc transpose data=tempn
35177     +        %if "&adjusted" eq "N" %then %do;
35178     +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
35179     +        %end;
35180     +        %else %do;
35181     +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
35182     +        %end;
35183     +        by node;
35184     +        id statname;
35185     +      run;
35186     +      %if &em_profitflag ne 0 %then %do;
35187     +        proc transpose data=tempprofit out=tempprofit;
35188     +          by node category;
35189     +          id statname ;
35190     +        run;
35191     +      %end;
35192     +      %if &em_lossflag ne 0 %then %do;
35193     +        proc transpose data=temploss out=temploss;
35194     +          by node category;
35195     +          id statname ;
35196     +        run;
35197     +      %end;
35198     +      data tempprob;
35199     +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
35200     +        by node
35201     +        %if &multipleTar eq Y %then %do;
35202     +          target
35203     +        %end;
35204     +        category;
35205     +      run;
35206     +    %end;
35208     +    /* store percentcorrect value */
35209     +    data temppredict;
35210     +      merge tempprob temppredict(in=_a);
35211     +      by node category;
35212     +      if _a then do;
35213     +        percentCorrect = statvalue;
35214     +        %if &validFlag eq Y %then %do;
35215     +          vpercentCorrect= vstatvalue;
35216     +        %end;
35217     +      end;
35218     +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
35219     +      %if &validFlag eq Y %then %do;
35220     +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
35221     +      %end;
35222     +      ;
35223     +      if missing(percentCorrect) then delete;
35224     +      drop target;
35225     +    run;
35227     +    /* build profittext */
35228     +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
35229     +      data tempprofittext(keep= node profittext profitloss);
35230     +        length profittext $800 profitloss 8.;
35231     +        retain profittext profitloss;
35233     +        merge tempprob
35234     +        %if &em_profitflag ne 0 %then %do;
35235     +          tempprofit
35236     +        %end;
35237     +        %else %if &em_lossflag ne 0 %then %do;
35238     +          temploss
35239     +        %end;
35240     +        ;
35241     +        by node category;
35243     +        /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
35244     +        %let profittype = &EM_PROPERTY_PROFITLOSS;
35245     +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
35246     +          %let profittype = ALL;
35247     +        %end;
35249     +        /* create the profitloss variable for nodecolor if selected */
35250     +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
35252     +        %if "&profittype" eq "ALL" %then %do;
35253     +          if strip(CATEGORY)="&targetEvent" then do;
35254     +            profitloss=statvalue;
35255     +          end;
35256     +          if first.node then do;
35257     +            %if &validFlag eq N %then %do;
35258     +             %if &em_profitflag ne 0 %then %do;
35259     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35260     +             %end;
35261     +             %if &em_lossflag ne 0 %then %do;
35262     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35263     +             %end;
35264     +            %end;
35265     +            %else %do;
35266     +             %if &em_profitflag ne 0 %then %do;
35267     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
35267    !+14.&EM_PROPERTY_SPLITPRECISION);
35268     +             %end;
35269     +             %if &em_lossflag ne 0 %then %do;
35270     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
35271     +             %end;
35272     +            %end;
35273     +          end;
35274     +          else if last.node then do;
35275     +            %if &validFlag eq N %then %do;
35276     +             %if &em_profitflag ne 0 %then %do;
35277     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35278     +             %end;
35279     +             %if &em_lossflag ne 0 %then %do;
35280     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35281     +             %end;
35282     +             /*if CATEGORY="&targetEvent" then do;
35283     +               profitloss=statvalue;
35284     +             end;*/
35285     +            %end;
35286     +            %else %do;
35287     +             %if &em_profitflag ne 0 %then %do;
35288     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
35288    !+14.&EM_PROPERTY_SPLITPRECISION);
35289     +                if CATEGORY="&targetEvent" then do;
35290     +                 profitloss=ALTERNATIVE_PROFIT;
35291     +                end;
35292     +             %end;
35293     +             %if &em_lossflag ne 0 %then %do;
35294     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
35294    !+14.&EM_PROPERTY_SPLITPRECISION);
35295     +                if CATEGORY="&targetEvent" then do;
35296     +                  profitloss=ALTERNATIVE_LOSS;
35297     +                end;
35298     +             %end;
35299     +            %end;
35300     +            output;
35301     +          end;
35302     +          else do;
35303     +            %if &validFlag eq N %then %do;
35304     +             %if &em_profitflag ne 0 %then %do;
35305     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35306     +             %end;
35307     +             %if &em_lossflag ne 0 %then %do;
35308     +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35309     +             %end;
35310     +            %end;
35311     +            %else %do;
35312     +             %if &em_profitflag ne 0 %then %do;
35313     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
35313    !+14.&EM_PROPERTY_SPLITPRECISION);
35314     +             %end;
35315     +             %if &em_lossflag ne 0 %then %do;
35316     +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
35316    !+14.&EM_PROPERTY_SPLITPRECISION);
35317     +             %end;
35318     +            %end;
35319     +          end;
35320     +        %end;
35321     +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
35322     +          if strip(CATEGORY) = "&targetevent" then do;
35323     +            %if &validFlag eq N %then %do;
35324     +             %if &em_profitflag ne 0 %then %do;
35325     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35326     +             %end;
35327     +             %if &em_lossflag ne 0 %then %do;
35328     +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
35329     +             %end;
35330     +             profitloss=statvalue;
35331     +            %end;
35332     +            %else %do;
35333     +             %if &em_profitflag ne 0 %then %do;
35334     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
35334    !+14.&EM_PROPERTY_SPLITPRECISION);
35335     +                profitloss=ALTERNATIVE_PROFIT;
35336     +             %end;
35337     +             %if &em_lossflag ne 0 %then %do;
35338     +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
35339     +                profitloss=ALTERNATIVE_LOSS;
35340     +             %end;
35341     +            %end;
35342     +            output;
35343     +          end;
35344     +        %end;
35345     +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
35346     +          if strip(CATEGORY) = "&targetevent" then do;
35347     +            %if &validFlag eq N %then %do;
35348     +             profitloss=statvalue;
35349     +            %end;
35350     +            %else %do;
35351     +             %if &em_profitflag ne 0 %then %do;
35352     +                profitloss=ALTERNATIVE_PROFIT;
35353     +             %end;
35354     +             %if &em_lossflag ne 0 %then %do;
35355     +                profitloss=ALTERNATIVE_LOSS;
35356     +             %end;
35357     +            %end;
35358     +            output;
35359     +          end;
35360     +        %end;
35361     +      run;
35362     +    %end;
35364     +    data tempprob(keep= node probtext);
35365     +      length probtext $800;
35366     +      retain probtext;
35367     +      set tempprob ;
35368     +      by node;
35370     +      /* EVENT ONLY IS NOT AVAILABLE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
35371     +      %let probtype = &EM_PROPERTY_TARGET;
35372     +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
35373     +        %let probtype = ALL;
35374     +      %end;
35376     +      %if "&probtype" eq "ALL" %then %do;
35377     +        if first.node then do;
35378     +          %if &validFlag eq N %then %do;
35379     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
35380     +          %end;
35381     +          %else %do;
35382     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
35383     +          %end;
35384     +        end;
35385     +        else if last.node then do;
35386     +          %if &validFlag eq N %then %do;
35387     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
35388     +          %end;
35389     +          %else %do;
35390     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
35391     +          %end;
35392     +          output;
35393     +        end;
35394     +        else do;
35395     +          %if &validFlag eq N %then %do;
35396     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
35397     +          %end;
35398     +          %else %do;
35399     +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
35400     +          %end;
35401     +        end;
35402     +      %end;
35403     +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
35404     +        if strip(CATEGORY) = "&targetevent" then do;
35405     +          %if &validFlag eq N %then %do;
35406     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
35407     +          %end;
35408     +          %else %do;
35409     +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
35410     +          %end;
35411     +          output;
35412     +        end;
35413     +      %end;
35414     +      %else %if "&probtype" eq "NONE" %then %do;
35415     +        if last.node then do;
35416     +          output;
35417     +        end;
35418     +      %end;
35419     +    run;
35420     +  %end;
35422     +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
35424     +  %let oldexists=0;
35425     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
35426     +     data old_tree_plot;
35427     +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
35428     +        rename nodecolor=oldnodecolor;
35429     +     run;
35431     +     proc sort data=old_tree_plot;
35432     +        by node;
35433     +     run;
35435     +     %let oldexists=1;
35436     +  %end;
35438     +  data &EM_USER_TREE_PLOT;
35439     +    length textall $800;
35440     +    merge tempoutnodes temptargetused
35442     +    %if &em_intTarget eq Y %then %do;
35443     +      tempinterval
35444     +    %end;
35446     +    %if &em_classTarget eq Y %then %do;
35448     +      %if &validFlag eq N %then %do;
35449     +        tempn(rename=(statvalue=N))
35450     +      %end;
35451     +      %else %do;
35452     +        tempn
35453     +      %end;
35455     +      temppredict tempprob
35457     +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
35458     +        tempprofittext
35459     +      %end;
35460     +    %end;
35461     +    ;
35462     +    by node;
35464     +    /* build nodetext based on user selection */
35465     +    textall="";
35467     +    %if &em_intTarget eq Y %then %do;
35468     +    if tarlevel="INTERVAL" then do;
35469     +      /* Nodeid */
35470     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
35471     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
35472     +      %end;
35474     +      /* Target identifier if multiple targets are used */
35475     +      %if "&multipleTar" eq "Y" %then %do;
35476     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
35477     +      %end;
35479     +      %if &validFlag eq Y %then %do;
35480     +         /* Column labels displayed in validflag eq Y only */
35481     +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
35482     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
35482    !+ noquote ))";
35483     +         %end;
35485     +         /* Average values */
35486     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
35487     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
35488     +         %end;
35490     +         /* RASE */
35491     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
35492     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
35493     +         %end;
35495     +         /* Count */
35496     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
35497     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
35498     +         %end;
35499     +      %end;
35500     +      %else %do;
35501     +         /* Average values */
35502     +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
35503     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
35504     +         %end;
35506     +         /* RASE */
35507     +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
35508     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
35509     +         %end;
35511     +         /* Count */
35512     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
35513     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
35514     +         %end;
35515     +      %end;
35517     +      /* nodecolor */
35518     +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
35519     +        nodecolor=PREDICTION;
35520     +      %end;
35521     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
35522     +        nodecolor=RASE;
35523     +      %end;
35524     +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
35525     +        nodecolor=1;
35526     +      %end;
35528     +    end;
35529     +    %end;
35530     +    %if &em_classTarget eq Y %then %do;
35531     +    if tarlevel^="INTERVAL" then  do;
35533     +      /* Nodeid */
35534     +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
35535     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
35536     +      %end;
35537     +      /* Target identifier if multiple targets are used */
35538     +      %if "&multipleTar" eq "Y" %then %do;
35539     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
35540     +      %end;
35542     +      /* Predicted values */
35543     +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
35544     +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
35545     +      %end;
35547     +      /* Column labels displayed in validflag eq Y only */
35548     +      %if "&ValidFlag" eq "Y" %then %do;
35549     +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
35550     +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
35550    !+ noquote ))";
35551     +        %end;
35552     +      %end;
35554     +      /* Target Values */
35555     +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
35556     +        textall=strip(textall)||"0A"x||strip(probtext);
35557     +      %end;
35559     +      /* include profit or loss for all target levels */
35560     +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
35561     +        textall=strip(textall)||"0A"x||strip(profittext);
35562     +      %end;
35564     +      %if &validFlag eq N %then %do;
35565     +        /* Percent Correct */
35566     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
35567     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
35568     +        %end;
35570     +         /* Count */
35571     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
35572     +          %if "&adjusted" eq "N" %then %do;
35573     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
35574     +          %end;
35575     +          %else %do;
35576     +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
35577     +          %end;
35578     +         %end;
35579     +      %end;
35580     +      %else %do;
35581     +        /* Percent Correct */
35582     +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
35583     +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
35584     +        %end;
35586     +         /* Count */
35587     +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
35588     +          %if "&adjusted" eq "N" %then %do;
35589     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
35590     +          %end;
35591     +          %else %do;
35592     +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
35593     +          %end;
35594     +         %end;
35595     +      %end;
35597     +      /* nodecolor */
35598     +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
35599     +       %if &multipleTar ne Y %then %do;
35600     +        nodecolor=&predTarget;
35601     +       %end;
35602     +       %else %do;
35603     +         nodecolor=percentcorrect;
35604     +       %end;
35605     +      %end;
35606     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
35607     +        nodecolor=percentcorrect;
35608     +      %end;
35609     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
35610     +        nodecolor=1;
35611     +      %end;
35612     +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
35613     +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
35614     +          nodecolor=percentcorrect;
35615     +        %end;
35616     +        %else %do;
35617     +          nodecolor=profitloss;
35618     +        %end;
35619     +      %end;
35621     +    end;
35622     +    %end;
35623     +    %if &em_intTarget eq Y %then %do;
35624     +     drop  PREDICTION  TARGET TARLEVEL
35625     +     %if &ValidFlag eq Y %then %do;
35626     +         VPREDICTION
35627     +     %end;
35628     +     ;
35629     +    %end;
35630     +    %if &em_classTarget eq Y %then %do;
35631     +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
35632     +     %if &ValidFlag eq Y %then %do;
35633     +         VSTATVALUE
35634     +     %end;
35635     +     ;
35636     +    %end;
35638     +  run;
35640     +  /* add leaf index information to plotds - based on primary target only*/
35641     +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35642     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
35643     +      set &EM_USER_OUTSTATS;
35644     +      if ((statname="PROBABILITY"
35645     +      %if &validexist %then %do;
35646     +       or statname="VALID: PROBABILITY"
35647     +      %end;
35648     +      ) AND (CATEGORY="&TARGETEVENT")
35649     +      %if "&multipleTar" eq "Y" %then %do;
35650     +        AND (Target="%EM_TARGET")
35651     +      %end;
35652     +      );
35653     +    run;
35655     +    %if &validexist %then %do;
35656     +      proc sort data=tempprob; by node; run;
35657     +      %let vpredTarget = V%substr(&predTarget, 2);
35658     +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
35659     +         by node;
35660     +         id statname;
35661     +      run;
35662     +    %end;
35663     +  %end;
35664     +  %else %do;
35665     +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
35666     +      set &EM_USER_OUTSTATS;
35667     +      if ((statname="PREDICTION"
35668     +      %if &validexist %then %do;
35669     +       or statname="VALID: PREDICTION"
35670     +      %end;
35671     +      )
35672     +      %if "&multipleTar" eq "Y" %then %do;
35673     +        AND (Target="%EM_TARGET")
35674     +      %end;
35675     +      );
35676     +    run;
35677     +    %if &validexist %then %do;
35678     +      proc sort data=tempprob; by node; run;
35679     +      %let vpredTarget = V%substr(&predTarget, 2);
35680     +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
35681     +         by node;
35682     +         id statname;
35683     +      run;
35684     +    %end;
35685     +  %end;
35687     +  proc sort data=tempprob; by node; run;
35688     +  data tempoutnodes;
35689     +    merge tempoutnodes tempprob;
35690     +    by node;
35691     +  run;
35693     +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
35694     +  data tempnodes;
35695     +    retain traintotal validtotal;
35696     +    set tempnodes(where=(leaf ne . ));
35697     +    tprob=round(&predTarget, .01);
35698     +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35699     +      percevent_train=round(tprob*100, .01);
35700     +    %end;
35701     +    %else %do;
35702     +      percevent_train=tprob;
35703     +    %end;
35705     +    perc_train=round((n/traintotal)*100, 0.01);
35706     +    /* leafwidth already has a *10 multiplier */
35707     +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
35709     +    %if &validexist %then %do;
35710     +      %let vpredTarget = V%substr(&predTarget,2);
35711     +      vprob=round(&vpredTarget, .01);
35712     +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35713     +        percevent_valid=round(vprob*100, .01);
35714     +      %end;
35715     +      %else %do;
35716     +        percevent_valid=vprob;
35717     +      %end;
35718     +      perc_valid=round((vn/validtotal)*100, .01);
35719     +    %end;
35721     +    index=_N_;
35722     +    keep node index tprob perc_train percevent_train
35723     +    %if &validexist %then %do;
35724     +        vprob percevent_valid perc_valid
35725     +    %end;
35726     +    ;
35727     +  run;
35728     +  proc sort data=tempnodes; by node; run;
35729     +  data &EM_USER_TREE_PLOT;
35730     +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
35731     +    by node;
35732     +    if missing(node) then delete;
35733     +    %if &oldexists %then %do;
35734     +      if missing(nodecolor) then nodecolor=oldnodecolor;
35735     +      drop oldnodecolor;
35736     +    %end;
35737     +    abovetext = compbl(abovetext);
35739     +    /* add variable labels */
35740     +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
35741     +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
35742     +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
35743     +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
35744     +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
35745     +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
35747     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35748     +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
35749     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
35750     +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
35751     +          %end;
35752     +          %else %do;
35753     +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
35754     +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
35755     +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
35756     +          %end;
35757     +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
35759     +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
35760     +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
35761     +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35762     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
35763     +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
35764     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
35765     +          %end;
35766     +          %else %do;
35767     +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
35768     +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
35769     +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
35770     +          %end;
35771     +    ;
35772     +  run;
35774     +  /* delete temporary tables */
35775     +  proc datasets lib=work nolist;
35776     +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
35777     +  run;
35779     +%mend em_tree_makePlotDs;
35783     +%macro em_tree_report;
35785     +   /* report properties */
35786     +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
35787     +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
35788     +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
35789     +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
35790     +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
35791     +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
35792     +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
35793     +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
35794     +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
35795     +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
35796     +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
35797     +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
35798     +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
35800     +   %let validexist=0;
35801     +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
35802     +     %let validexist=1;
35803     +   %end;
35805     +   /* determine if multiple targets will be processed */
35806     +   %let em_tree_multipleTargets=N;
35807     +   %let em_tree_numTarget=1;
35808     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
35809     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
35810     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
35811     +         %let em_tree_multipleTargets=N;
35812     +      %end;
35813     +      %else %do;
35814     +        data _null_;
35815     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
35816     +          if eof then
35817     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
35818     +        run;
35820     +        %if &em_tree_numTarget gt 1 %then %do;
35821     +           %let em_tree_multipleTargets=Y;
35822     +        %end;
35823     +     %end;
35824     +   %end;
35826     +  %if "&em_tree_multipleTargets" eq "N" %then %do;
35828     +   /* variable importance */
35829     +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
35830     +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
35832     +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
35833     +     /* and the columns may not be generated                                                                                 */
35834     +     %let em_tree_cvexists=;
35835     +     %let em_tree_surrexists=.;
35836     +     data _null_;
35837     +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
35838     +       if eof then do ;
35839     +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
35840     +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
35841     +       end;
35842     +     run;
35844     +     data &EM_USER_OUTIMPORT;
35845     +         set &EM_USER_OUTIMPORT;
35846     +         /* format columns based on Precison value specified */
35847     +         format importance 15.&EM_PROPERTY_PRECISION
35848     +              %if &validexist %then %do;
35849     +                vimportance ratio 15.&EM_PROPERTY_PRECISION
35850     +              %end;
35851     +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
35852     +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
35853     +              %end;
35854     +         ;
35855     +     run;
35857     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
35858     +     proc print data=&EM_USER_OUTIMPORT
35859     +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
35860     +          (where=((nrules>0) OR (nsurrogates>0)))
35861     +        %end;
35862     +        %else %do;
35863     +           (where=(nrules>0))
35864     +        %end;
35865     +        label noobs
35866     +        ;
35867     +     run;
35868     +     title10;
35870     +   %end;
35872     +   /* Sequence */
35873     +   %EM_GETNAME(key=OUTSEQ, type=DATA);
35874     +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
35875     +   data _null_ ;
35876     +      set &EM_USER_outseq (obs=2) end=eof ;
35877     +      if eof then do ;
35878     +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
35879     +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
35880     +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
35881     +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
35882     +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
35883     +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
35884     +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
35885     +      end;
35886     +    run;
35888     +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
35889     +      data &EM_USER_OUTSEQ;
35890     +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
35891     +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
35892     +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35893     +           _XMISC_=_VMISC_
35894     +        %end;
35895     +        %if "&em_tree_aprof" ne "."  %then %do;
35896     +           _XAPROF_=_VAPROF_
35897     +           _XPROF_ = _VPROF_
35898     +        %end;
35899     +        %if "&em_tree_aloss" ne "."  %then %do;
35900     +           _XALOSS_=_VALOSS_
35901     +        %end;
35902     +        %if "&EM_TREE_PRIOR" ne "." %then %do;
35903     +           _XPASE_ = _VPASE_
35904     +           _XPMISC_ = _VPMISC_
35905     +        %end;
35907     +        ));
35908     +     %end;
35909     +     %else %do;
35910     +        set &EM_USER_OUTSEQ;
35911     +     %end;
35913     +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
35914     +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35915     +            _MISC_   15.&EM_PROPERTY_PRECISION
35916     +         %end;
35917     +         %if "&EM_TREE_PRIOR" ne "." %then %do;
35918     +            _PASE_  15.&EM_PROPERTY_PRECISION
35919     +            _PMISC_ 15.&EM_PROPERTY_PRECISION
35920     +         %end;
35921     +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
35922     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
35923     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35924     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
35925     +            %end;
35926     +            %if "&EM_TREE_PRIOR" ne "." %then %do;
35927     +              _VPASE_  15.&EM_PROPERTY_PRECISION
35928     +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
35929     +            %end;
35930     +         %end;
35931     +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
35932     +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
35933     +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35934     +               _VMISC_ 15.&EM_PROPERTY_PRECISION
35935     +            %end;
35936     +         %end;
35937     +         %if "&em_tree_seq" ne "." %then %do;
35938     +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
35939     +         %end;
35940     +         %if "&em_tree_vseq" ne "." %then %do;
35941     +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
35942     +         %end;
35943     +         %if "&em_tree_aprof" ne "." %then %do;
35944     +           _APROF_ 15.&EM_PROPERTY_PRECISION
35945     +           _PROF_ 15.&EM_PROPERTY_PRECISION
35946     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
35947     +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
35948     +             _VPROF_ 15.&EM_PROPERTY_PRECISION
35949     +           %end;
35950     +         %end;
35951     +         %else %if "&em_tree_aloss" ne "." %then %do;
35952     +           _ALOSS_  15.&EM_PROPERTY_PRECISION
35953     +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
35954     +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
35955     +           %end;
35956     +         %end;
35957     +      ;
35958     +    run;
35959     +   %end;
35961     +   /* Observation Based Importance */
35962     +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
35964     +      /* need to check for 0 obs */
35965     +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
35966     +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
35967     +      %let rc=%sysfunc(close(&dsid));
35969     +      %if &onobs %then %do;
35970     +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
35971     +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
35973     +         data &EM_USER_OUTOBSIMP;
35974     +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
35975     +           if _a;
35976     +           by _INPUT1_;
35977     +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
35978     +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
35979     +                     _MISC_ 15.&EM_PROPERTY_PRECISION
35980     +                   %end;
35981     +                   ;
35982     +         run;
35983     +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
35984     +      %end;
35985     +   %end;
35987     +  %end;
35989     +  /* create dataset to support tree diagram and icicle plot */
35990     +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
35991     +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
35993     +  /* display tree diagram */
35994     +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
35995     +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
35997     +  /* display icicle diagram */
35998     +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
35999     +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
36001     +  /* Leaf Statistics Plot */
36002     +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
36004     +  /* print leaf information to output window */
36005     +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
36007     +     proc sort data=&EM_USER_TREE_PLOT out=t;
36008     +       by descending N;
36009     +     run;
36011     +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
36012     +     %local vn;
36013     +     data _null_;
36014     +       set t (obs=2) end=eof;
36015     +       if eof then do;
36016     +         call symput("vn", strip(put(vn, best.)));
36017     +       end;
36018     +     run;
36020     +     data t;
36021     +       set t;
36022     +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
36023     +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
36024     +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
36025     +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
36026     +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
36027     +       %end;
36028     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
36029     +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
36030     +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
36031     +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
36032     +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
36033     +          %end;
36034     +       %end;
36035     +       ;
36036     +     run;
36038     +     /* determine if rase is found in t */
36039     +    %let dsid=%sysfunc(open(t,i));
36040     +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
36041     +    %let rc=%sysfunc(close(&dsid));
36043     +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
36044     +     proc print data=t noobs label;
36045     +       where tprob ne .;
36046     +       var node depth N tprob
36047     +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
36048     +         %if "&vn" ne "." %then %do;
36049     +           VN
36050     +         %end;
36051     +         vprob
36052     +       %end;
36053     +       %if &raseexists %then %do;
36054     +            RASE
36055     +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
36056     +              VRASE
36057     +            %end;
36058     +       %end;
36059     +       ;
36060     +     run;
36061     +     title10;
36062     +  %end;
36064     +  /* create plots that are done during training of node */
36065     +  /* display iterative plot, including reference line */
36066     +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
36067     +   /* %if &nleaves eq  %then %do; */
36068     +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
36069     +      data _null_;
36070     +        set &EM_USER_OUTTOPOLOGY end=eof;
36071     +        if eof then do;
36072     +          call symput('nleaves', LEAF);
36073     +        end;
36074     +      run;
36075     +   /* %end; */
36077     +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
36078     +    /*%EM_REPORT(view=1, Y=_ASE_); */
36079     +  %end;
36081     +  /* display leaf statistics */
36082     +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
36084     +  /* stats by node if multiple targets = Y */
36085     +  %EM_GETNAME(key=OUTSTATS, type=DATA);
36086     +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
36087     +    data &EM_USER_OUTSTATS;
36088     +      set &EM_USER_OUTSTATS;
36090     +     * if STATNAME="TARGET" then delete;
36091     +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
36092     +      drop leaf;
36093     +    run;
36094     +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
36096     +  %end;
36097     +  %else %do;
36098     +    /* add outstats and outdescribe to spk but not results */
36099     +    %EM_REPORT(viewtype=, key=OUTSTATS);
36100     +  %end;
36102     +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS5.Tree2_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS5.Tree2_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   set EMWS5.Tree2_OUTIMPORT;
MPRINT(EM_TREE_REPORT):   format importance 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.TREE2_OUTIMPORT.
NOTE: The data set EMWS5.TREE2_OUTIMPORT has 5 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Variable Importance";
MPRINT(EM_TREE_REPORT):   proc print data=EMWS5.Tree2_OUTIMPORT (where=(nrules>0)) label noobs ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_ ;
MPRINT(EM_TREE_REPORT):   set EMWS5.Tree2_OUTSEQ (obs=2) end=eof ;
MPRINT(EM_TREE_REPORT):   if eof then do ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vase" , strip(put(_VASE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_seq" , strip(put(_SEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_vseq" , strip(put(_VSEQUENCE_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
MPRINT(EM_TREE_REPORT):   call symput("em_tree_prior" , strip(put(_PASE_, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _VASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS5.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data EMWS5.Tree2_OUTSEQ;
MPRINT(EM_TREE_REPORT):   set EMWS5.Tree2_OUTSEQ;
MPRINT(EM_TREE_REPORT):   format _ASE_ _ASSESS_ _MAX_ _SSE_ _RASE_ 15.4
MPRINT(EM_TREE_REPORT):   _MISC_ 15.4 ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 15 observations read from the data set EMWS5.TREE2_OUTSEQ.
NOTE: The data set EMWS5.TREE2_OUTSEQ has 15 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):  ;
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_I_default_DM(where=(_TYPE_="TARGET"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_I_default_DM(where=(_TYPE_="PREDICTED" AND LEVEL="1"));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predTarget', strip(VARIABLE));
MPRINT(EM_TREE_MAKEPLOTDS):   call symput('predLvl', strip(LEVEL));
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_I_DEFAULT_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='1');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext2;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT2 has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   merge belowtext belowtext2(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then belowtext=belowtextlbl;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set EMWS5.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   set abovetext(rename=(node=parent));
MPRINT(EM_TREE_MAKEPLOTDS):   by parent numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   retain abovetext tempstring flag branch origval origchar ;
MPRINT(EM_TREE_MAKEPLOTDS):   length abovetext $256;
MPRINT(EM_TREE_MAKEPLOTDS):   length tempstring origchar $64;
MPRINT(EM_TREE_MAKEPLOTDS):   if STAT in ("INTERVAL", "ORDINAL") then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = "< "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.parent AND last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.parent then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value,0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
MPRINT(EM_TREE_MAKEPLOTDS):   origchar = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(character_value) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   numeric_value = round(numeric_value, 0.0001);
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(NUMERIC_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = ">= "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   origval = character_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = branch + 1;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 0;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.numeric_value AND last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.numeric_value then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag = 1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   if flag=0 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
MPRINT(EM_TREE_MAKEPLOTDS):   length = length(strip(tempstring));
MPRINT(EM_TREE_MAKEPLOTDS):   if length < 32 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(tempstring);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = strip(abovetext)||", ...";
MPRINT(EM_TREE_MAKEPLOTDS):   flag=1;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   branch = numeric_value;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   keep parent branch abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 10 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTRULES;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
MPRINT(EM_TREE_MAKEPLOTDS):   rename node=parent numeric_value=branch character_value=misschar;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 190 observations read from the data set EMWS5.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=abovetext;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 20 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempmissing;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 10 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS5.Tree2_OUTNODES out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set EMWS5.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by parent branch;
MPRINT(EM_TREE_MAKEPLOTDS):   length traintotal validtotal 8;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   if ^MISSING(abovetext) then do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext= strip(abovetext)||" Or Missing";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = " Missing Values Only";
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   if MISSING(abovetext) then abovetext="Non-Missing Values";
MPRINT(EM_TREE_MAKEPLOTDS):   if node=1 then do;
MPRINT(EM_TREE_MAKEPLOTDS):   traintotal = N;
MPRINT(EM_TREE_MAKEPLOTDS):   validtotal=VN;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop role rank stat misschar belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Variable VN is uninitialized.
NOTE: There were 20 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 22 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 10 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes belowtext;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 10 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 23 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data _null_ ;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTSTATS(where=(STATNAME="NPRIORS")) end=eof ;
MPRINT(EM_TREE_MAKEPLOTDS):   if eof then do ;
MPRINT(EM_TREE_MAKEPLOTDS):   call symput("npriors" , strip(put(_N_,best.))) ;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 0 observations read from the data set EMWS5.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptarmeta;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_VariableSet(where=(ROLE='TARGET' AND LEVEL^='ORDINAL' AND USE in ('D', 'Y') ));
MPRINT(EM_TREE_MAKEPLOTDS):   length TARGET $32;
MPRINT(EM_TREE_MAKEPLOTDS):   Target=name;
MPRINT(EM_TREE_MAKEPLOTDS):   keep target level;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   length target $32 tarlevel $10;
MPRINT(EM_TREE_MAKEPLOTDS):   target=
MPRINT(EM_TREE_MAKEPLOTDS):  "I_default";
MPRINT(EM_TREE_MAKEPLOTDS):   tarlevel=
MPRINT(EM_TREE_MAKEPLOTDS):  "NOMINAL";
MPRINT(EM_TREE_MAKEPLOTDS):   keep node target tarlevel;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 84 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 84 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused nodupkey;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 84 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 63 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=EMWS5.Tree2_OUTSTATS out=tempoutstats;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 84 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 84 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=temptargetused;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempinterval tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutstats temptargetused( rename=(target=targetused));
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel="INTERVAL" then output tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   else output tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 84 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 84 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_intNobs from tempinterval;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_classNobs from tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 84 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 84 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempprofit(KEEP=NODE STATVALUE CATEGORY ) temploss(KEEP=NODE STATVALUE CATEGORY );
MPRINT(EM_TREE_MAKEPLOTDS):   set tempclass;
MPRINT(EM_TREE_MAKEPLOTDS):   if statname="N" then output tempn;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PREDICTION" then output temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="PROBABILITY" then output tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="ALTERNATIVE PROFIT" then output tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   else if statname="ALTERNATIVE LOSS" then output temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 84 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 42 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 3 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_profitflag from tempprofit;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sql;
MPRINT(EM_TREE_MAKEPLOTDS):   reset noprint;
MPRINT(EM_TREE_MAKEPLOTDS):   select count(*) into :em_lossflag from temploss;
MPRINT(EM_TREE_MAKEPLOTDS):   quit;
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data temppredict;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempprob temppredict(in=_a);
MPRINT(EM_TREE_MAKEPLOTDS):   by node category;
MPRINT(EM_TREE_MAKEPLOTDS):   if _a then do;
MPRINT(EM_TREE_MAKEPLOTDS):   percentCorrect = statvalue;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   label percentCorrect= "Percent Correct" ;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(percentCorrect) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   drop target;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 21 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep= node probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   length probtext $800;
MPRINT(EM_TREE_MAKEPLOTDS):   retain probtext;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if first.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else if last.node then do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   output;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   else do;
MPRINT(EM_TREE_MAKEPLOTDS):   probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 42 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 23 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS5.Tree2_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   length textall $800;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes temptargetused tempn(rename=(statvalue=N)) temppredict tempprob ;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   textall="";
MPRINT(EM_TREE_MAKEPLOTDS):   if tarlevel^="INTERVAL" then do;
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||"Node Id: "||"09"x||strip(Node);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||strip(probtext);
MPRINT(EM_TREE_MAKEPLOTDS):   textall=strip(textall)||"0A"x||" Count: "||"09"x||strip(put(N, best12.));
MPRINT(EM_TREE_MAKEPLOTDS):   nodecolor=percentcorrect;
MPRINT(EM_TREE_MAKEPLOTDS):   end;
MPRINT(EM_TREE_MAKEPLOTDS):   drop CATEGORY PROBTEXT TARGET TARLEVEL STATVALUE ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1095:196
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 21 observations read from the data set WORK.TEMPN.
NOTE: There were 21 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS5.TREE2_TREE_PLOT has 21 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempprob(keep=node statname statvalue rename=(statvalue=P_I_default1));
MPRINT(EM_TREE_MAKEPLOTDS):   set EMWS5.Tree2_OUTSTATS;
MPRINT(EM_TREE_MAKEPLOTDS):   if ((statname="PROBABILITY" ) AND (CATEGORY="1") );
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 84 observations read from the data set EMWS5.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 21 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempoutnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   merge tempoutnodes tempprob;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 21 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 21 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempoutnodes out=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by descending P_I_default1;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 21 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 21 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   retain traintotal validtotal;
MPRINT(EM_TREE_MAKEPLOTDS):   set tempnodes(where=(leaf ne . ));
MPRINT(EM_TREE_MAKEPLOTDS):   tprob=round(P_I_default1, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   percevent_train=round(tprob*100, .01);
MPRINT(EM_TREE_MAKEPLOTDS):   perc_train=round((n/traintotal)*100, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
MPRINT(EM_TREE_MAKEPLOTDS):   index=_N_;
MPRINT(EM_TREE_MAKEPLOTDS):   keep node index tprob perc_train percevent_train ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 11 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc sort data=tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 11 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   data EMWS5.Tree2_TREE_PLOT;
MPRINT(EM_TREE_MAKEPLOTDS):   merge EMWS5.Tree2_TREE_PLOT tempnodes;
MPRINT(EM_TREE_MAKEPLOTDS):   by node;
MPRINT(EM_TREE_MAKEPLOTDS):   if missing(node) then delete;
MPRINT(EM_TREE_MAKEPLOTDS):   abovetext = compbl(abovetext);
MPRINT(EM_TREE_MAKEPLOTDS):   label textall = "All Text" parent = "Parent Id" node = "Node Id" abovetext = "Above Text" traintotal = "Train Total" nodecolor =
MPRINT(EM_TREE_MAKEPLOTDS):   "Node Color" tprob = "Training Percent 1" percevent_train = "Event Percentage" perc_train = "Percent Cases" index = "Index" validtotal = "Valid Total" VN =
MPRINT(EM_TREE_MAKEPLOTDS):   "Valid: Number of Observations" vprob = "Validation Percent 1" perc_valid = "Valid: Percent Cases" percevent_valid = "Valid: Event Percentage" ;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: Variable vprob is uninitialized.
NOTE: Variable perc_valid is uninitialized.
NOTE: Variable percevent_valid is uninitialized.
NOTE: There were 21 observations read from the data set EMWS5.TREE2_TREE_PLOT.
NOTE: There were 11 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS5.TREE2_TREE_PLOT has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_MAKEPLOTDS):   proc datasets lib=work nolist;
MPRINT(EM_TREE_MAKEPLOTDS):   delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
MPRINT(EM_TREE_MAKEPLOTDS):   run;
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
MPRINT(EM_TREE_REPORT):  ;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DTree";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "TREE";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "ABOVETEXT";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "BELOWTEXT";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "LINKWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.10287649049557;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Icicle";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "ICICLE";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "TEXTALL";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "NODETEXT";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "NODECOLOR";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.20119480472113;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "AREABAR";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "VARWIDTH";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "NODE";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "PERCEVENT_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "PERC_TRAIN";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12676612573059;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   proc sort data=EMWS5.Tree2_TREE_PLOT out=t;
MPRINT(EM_TREE_REPORT):   by descending N;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 21 observations read from the data set EMWS5.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 21 observations and 30 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set t (obs=2) end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput("vn", strip(put(vn, best.)));
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   data t;
MPRINT(EM_TREE_REPORT):   set t;
MPRINT(EM_TREE_REPORT):   label N= "Training Observations" DEPTH=
MPRINT(EM_TREE_REPORT):   "Depth" ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 21 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 21 observations and 30 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10 "Tree Leaf Report";
MPRINT(EM_TREE_REPORT):   proc print data=t noobs label;
MPRINT(EM_TREE_REPORT):   where tprob ne .;
MPRINT(EM_TREE_REPORT):   var node depth N tprob ;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: There were 11 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_TREE_REPORT):   title10;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):   data _null_;
MPRINT(EM_TREE_REPORT):   set EMWS5.Tree2_OUTTOPOLOGY end=eof;
MPRINT(EM_TREE_REPORT):   if eof then do;
MPRINT(EM_TREE_REPORT):   call symput('nleaves', LEAF);
MPRINT(EM_TREE_REPORT):   end;
MPRINT(EM_TREE_REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      285:141
NOTE: There were 21 observations read from the data set EMWS5.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSEQ";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "ITERATIONPLOT";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "SUBTREE";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_NW_";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "11";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.1207113173421;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "TREE_PLOT";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "RESPONSEBAR";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WHERECLAUSE";
MPRINT(EM_REPORT):   VALUE = "INDEX ne .";
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "LEAFSTATS";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "INDEX";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "tprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "vprob";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_TREE_REPORT):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTSTATS";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.44041767597217;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_TREE_REPORT):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: Tree2;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
36103
36104      *------------------------------------------------------------*;
36105      * End REPORT: Tree2;
36106      *------------------------------------------------------------*;
 
36107      /* Reset EM Options */
36108      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
36109      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
36110      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
36111      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
36112      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
36113      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36114      proc sort data=EMWS5.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Meta_CMeta_TRAIN out=WORK.SUBSETINMETA;
36115      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
36116      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set EMWS5.META_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 31 observations and 21 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
36117      proc sort data=EMWS5.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
36118      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
36119      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set EMWS5.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 31 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
36120      data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
36121      merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
36122      by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
36123      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 31 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 31 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 31 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36124      data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
36125      set EMWS5.Tree2_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_CMeta_TRAIN;
36126      where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
36127      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS5.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 9 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
36128      data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
36129      set EMWS5.Tree2_TRAIN(keep=
36130      F_I_default
36131      I_I_default
36132      P_I_default0
36133      P_I_default1
36134      Q_I_default0
36135      Q_I_default1
36136      R_I_default0
36137      R_I_default1
36138      U_I_default
36139      I_default
36140      );
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_TRAIN(keep= F_I_default I_I_default P_I_default0 P_I_default1 Q_I_default0 Q_I_default1 R_I_default0 R_I_default1 U_I_default I_default );
36141      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARCLUS_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.BINNING_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.NEURAL_TRAIN.
NOTE: View EMWS5.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.12 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.META_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 700 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_I_default*F_I_default / out = WORK.Tree2_0G2COZG nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Tree2_0G2COZG;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32 CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Tree2_0G2COZG(rename=(F_I_default=FROM I_I_default=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "I_default";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "I_DEFAULT" then TARGETLABEL = 'Into: default';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree2_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_0G2COZG;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Tree2_0G2COZG;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_ _LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS5.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "I_DEFAULT" then TARGETLABEL = 'Into: default';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_I_default_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_I_default") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_I_default") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_I_default ;
 
MPRINT(EM_ASSESS):   VAR P_I_default1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_I_default") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_I_default1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_I_default P_I_default1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_I_default ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_I_default1 NTARGET _tmpfreqvar_ WHERE = (NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_I_default1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT
MAXPROB MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST (KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS
SCR_CP_EVENTS SCR_P_NONEVENTS SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0 NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS1000 0 TRUENEG1 - TRUENEG1000 0 FALSEPOS1 - FALSEPOS1000 0 FALSENEG1 - FALSENEG1000 0 EVENTS1 -
EVENTS1000 NONEVENTS1 - NONEVENTS1000 0 FIRSTIN1 - FIRSTIN1000 . LASTIN1 - LASTIN1000 . RESPRATE 0.2428571429 _NEVENTS 170 _NNONEVENTS 530 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (1000) TRUEPOS1 - TRUEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (1000) FALSEPOS1 - FALSEPOS1000;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (1000) FALSENEG1 - FALSENEG1000;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (1000) TRUENEG1 - TRUENEG1000;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (1000) EVENTS1 - EVENTS1000;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (1000) NONEVENTS1 - NONEVENTS1000;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (1000) FIRSTIN1 - FIRSTIN1000;
MPRINT(EM_ASSESS):   ARRAY LASTIN (1000) LASTIN1 - LASTIN1000;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB1000 0 SCR_MINPROB1 - SCR_MINPROB1000 1 SCR_MAXPROB1 - SCR_MAXPROB1000 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (1000) SCR_MNPROB1 - SCR_MNPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (1000) SCR_MINPROB1 - SCR_MINPROB1000;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (1000) SCR_MAXPROB1 - SCR_MAXPROB1000;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB1000 SCR_MAXPROB1 - SCR_MAXPROB1000 SCR_MNPROB1 - SCR_MNPROB1000 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 700));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_I_default1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_I_default1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_I_default1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 1000;
MPRINT(EM_ASSESS):   IF P_I_default1 * 1000 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_I_default1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_I_default1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_I_default1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_I_default1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_I_default1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_I_default1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0143884892 OVLMAX 0.9333333333 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   numeventwhole = floor(_NEVENTS/20);
MPRINT(EM_ASSESS):   remainevent= _NEVENTS - (numeventwhole)*20;
MPRINT(EM_ASSESS):   drop numeventwhole remainevent;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   BASEEVENTS = numeventwhole;
MPRINT(EM_ASSESS):   if GROUP > 20-remainevent then BASEEVENTS=BASEEVENTS + 1;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTLIFT = ((_NEVENTS+_NNONEVENTS) / 20) /AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 700 * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP / (700/20)) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 700)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP /((20-GROUP+1)* 700/20) ) / ( AVGNUMRESP / (700/20))) - 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 700 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 700 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * 700/20 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * ((20-GROUP+1)* 700/20));
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 - SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 - SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 - SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 - SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 - SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 - SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 - SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 - SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 - SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 - SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 - SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 - SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 - SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 - SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 - SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 - SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 - SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 - SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 - SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 700;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS = CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE = EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP =
PERCENTAGE SCR_MINPROB = _MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP = CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS =
PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability" PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS =
"Cumulative Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS = "Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents" CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR
= "Upper Bound Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage" NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min Posterior Probability" _MAXP_ = "Max Posterior Probability"
SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP = CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS = BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT =
BASELIFTC C_LIFT = LIFTC MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response" BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS =
"Baseline Number of Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC = "Baseline Cumulative Lift" BESTCAP = "Best %
Captured Response" BESTCAPC = "Best Cumulative % Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift" BESTNUMBEROFEVENTS = "Best Number of
Events" CAP = "% Captured Response" CAPC = "Cumulative % Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift" NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC = "Cumulative %
Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "I_default";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Into: default';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "I_default";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'Into: default';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
40423      %let _cn = %sysfunc(getoption(CENTER));
40424      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
40425      proc print data=EMWS5.Tree2_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Tree2_EMREPORTFIT noobs label;
40426      var STAT LABEL TRAIN
40427      TEST
40428      ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN TEST ;
40429      by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
40430      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40431      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
40432      run;
 
NOTE: There were 8 observations read from the data set EMWS5.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
40433      title10;
MPRINT(EM_DIAGRAM):   title10;
40434      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
40435      proc sort data=EMWS5.Tree2_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS5.Tree2_EMCLASSIFICATION nothreads;
40436      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
40437      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set EMWS5.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS5.TREE2_EMCLASSIFICATION has 4 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
40438      %let _cn = %sysfunc(getoption(CENTER));
40439      options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
40440      proc print data=EMWS5.Tree2_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Tree2_EMCLASSIFICATION noobs label;
40441      var from into pct_row pct_col count percent
40442      ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
40443      by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
40444      label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
40445      label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
40446      label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
40447      label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
40448      label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
40449      label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
40450      where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
40451      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40452      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
40453      run;
 
NOTE: There were 4 observations read from the data set EMWS5.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 10.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
40454      title9;
MPRINT(EM_DIAGRAM):   title9;
40455      title10;
MPRINT(EM_DIAGRAM):   title10;
40456      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
40457      %let _cn = %sysfunc(getoption(CENTER));
40458      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
40459      data EMWS5.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS5.Tree2_EMEVENTREPORT;
40460      length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT 8;
40461      label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))" TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))" TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
40461    ! FALSEEVENT
40462      = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
40463         "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True Positive" TRUENEVENT = "True Negative";
40464      FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
40465      FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
40466      TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
40467      TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
40468      set EMWS5.Tree2_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS5.Tree2_EMEVENTREPORT;
40469      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS5.TREE2_EMEVENTREPORT has 1 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
40470      proc print data=EMWS5.Tree2_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Tree2_EMEVENTREPORT noobs label;
40471      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40472      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
40473      by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
40474      run;
 
NOTE: There were 1 observations read from the data set EMWS5.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 11.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
40475      title10;
MPRINT(EM_DIAGRAM):   title10;
40476      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
40477      proc datasets library=EMWS5 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS5 nolist;
40478      modify Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   modify Tree2_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
40479      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
40480      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
40481      run;
 
NOTE: MODIFY was successful for EMWS5.TREE2_EMRANK.DATA.
40482      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
40483      %let _cn = %sysfunc(getoption(CENTER));
40484      options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
40485      proc print data=EMWS5.Tree2_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Tree2_EMRANK label noobs;
40486      var
40487      decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
40488      by
40489      notsorted DATAROLE
40490      notsorted TARGET
40491      notsorted TARGETLABEL
40492      ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
40493      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
40494      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
40495      run;
 
NOTE: There were 20 observations read from the data set EMWS5.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 12.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
40496      title10;
MPRINT(EM_DIAGRAM):   title10;
40497      options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
40498      proc datasets library=EMWS5 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS5 nolist;
40499      modify Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Tree2_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
40500      label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
40501      label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   run;
40502      run;
 
NOTE: MODIFY was successful for EMWS5.TREE2_EMSCOREDIST.DATA.
40503      quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS5.Tree2_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "I_default" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
