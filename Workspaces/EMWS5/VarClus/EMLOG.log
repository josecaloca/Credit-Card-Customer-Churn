*------------------------------------------------------------*
User:                Jose Caloca
Date:                28 March 2021
Time:                17:58:51
Site:                70115216
Platform:            X64_10PRO
Maintenance Release: 9.04.01M6P111518
EM Version:          15.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:58:47" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28 March 2021
Time:                17:58:47
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1N0BHZD "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1N0BHZD new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:58:47" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70115216";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_10PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M6P111518";
MPRINT(EM_DIAGRAM):   put "EM Version:          15.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:58:47" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Jose Caloca";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
42374      proc freq data=EMWS5.VarClus_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS5.VarClus_VariableSet noprint;
42375      table ROLE*LEVEL/out=WORK.VarClusMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.VarClusMETA;
42376      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 15 observations read from the data set EMWS5.VARCLUS_VARIABLESET.
NOTE: The data set WORK.VARCLUSMETA has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
42377      proc print data=WORK.VarClusMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.VarClusMETA label noobs;
42378      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
42379      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
42380      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
42381      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
42382      run;
 
NOTE: There were 4 observations read from the data set WORK.VARCLUSMETA.
NOTE: The PROCEDURE PRINT printed page 13.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
42383      title10;
MPRINT(EM_DIAGRAM):   title10;
42384      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'DM_ang';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'NN';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   set EMWS5.Ids_EMINFO;
MPRINT(EM_DIAGRAM):   where key in('HPDMSAMPLE', 'IDSTABLE');
MPRINT(EM_DIAGRAM):   if key = 'HPDMSAMPLE' then call symput('_ForceGrid', '1');
MPRINT(EM_DIAGRAM):   else call symput('_IDS_TABLE', DATA);
MPRINT(EM_DIAGRAM):   run;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42740      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42741      * VarClus: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * VarClus: Generation of macros and macro variables;
42742      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
42743      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
42744      %let EMEXCEPTIONSTRING=;
42745      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
42746      * TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   * TRAIN: VarClus;
42747      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
42748      %let EM_ACTION = TRAIN;
42749      %let syscc = 0;
42750
42751      %macro main;
42752
42753         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
42754         %include temp;
42755         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
42756         %include temp;
42757         filename temp;
42758
42759        %SetProperties;
42760
42761         %if %upcase(&EM_ACTION) = CREATE %then %do;
42762             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
42763             %include temp;
42764             filename temp;
42765             %create;
42766         %end;
42767         %else
42768         %if %upcase(&EM_ACTION) = TRAIN %then %do;
42769              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
42770                 %include temp;
42771                 filename temp;
42772                 %train;
42773         %end;
42774         %else
42775         %if %upcase(&EM_ACTION) = SCORE %then %do;
42776                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
42777                 %include temp;
42778                 filename temp;
42779                 %score;
42780         %end;
42781         %else
42782         %if %upcase(&EM_ACTION) = REPORT %then %do;
42783                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
42784                 %include temp;
42785                 filename temp;
42786                 %report;
42787         %end;
42788         /*
42789         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
42790             %put 'OPENING TABLE';
42791         %end;
42792         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
42793             %put 'CLOSE TABLE';
42794         %end;
42795         */
42796      %mend main;
42797      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
42798     +
42799     +/* Initialize property macro variables */
42800     +%macro SetProperties;
42801     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
42802     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
42803     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
42804     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
42805     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
42806     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
42807     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
42808     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
42809     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
42810     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
42811     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
42812     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
42813     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
42814     +
42815     +%mend SetProperties;
42816     +
42817     +%Macro MakeDummyVariables(indata=,
42818     +                          outvar=,
42819     +                          outdata=,
42820     +                          fileref=,
42821     +                          recreatecmeta=N, /* optional */
42822     +                          incmeta=,     /* optional */
42823     +                          outcmeta=,    /* optional */
42824     +                          ndummyvars=_ndummyvars
42825     +                          );
42826     +    %global &ndummyvars;
42827     +
42828     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
42829     +       class
42830     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
42831     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
42832     +    ;
42833     +    run;
42834     +    %let &ndummyvars = 0;
42835     +    data _null_;
42836     +    %let dsid = %sysfunc(open(work._classout));
42837     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
42838     +    %let dsid = %sysfunc(close(&dsid));
42839     +    run;
42840     +
42841     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
42842     +       input
42843     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
42844     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
42845     +        / level=nominal stdize=no;
42846     +       make outvar = &outvar;
42847     +       score data = &indata out =&outdata;
42848     +       code  file=  "&fileref";
42849     +    run;
42850     +    %if &recreatecmeta eq Y %then %do;
42851     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
42852     +    data _tmpds;
42853     +        set _tmpds;
42854     +           ROLE = 'INPUT';
42855     +           LEVEL = 'INTERVAL';
42856     +           CREATOR='DMZIP';
42857     +           if NAME = '_TYPE_' then delete;
42858     +    run;
42859     +    data &outcmeta;
42860     +         set &incmeta _tmpds;
42861     +    run;
42862     +    %end;
42863     +    proc datasets lib=work nolist;
42864     +      delete  _dmdbdat _dmdbcat _classout
42865     +    %if &recreatecmeta eq Y %then %do;
42866     +    _tmpds
42867     +    %end;
42868     +    ;
42869     +    quit;
42870     +%Mend MakeDummyVariables;
42871     +
42872     +/*--- Determine Optimal Number of Cluster ----
42873     +%macro FindClusNum(statds=, groupds=, minvariation=);
42874     +   %global optnclus;
42875     +   data varclus_tmp(drop=_NAME_);
42876     +      set &statDs;
42877     +      where _type_ ='PROPOR';
42878     +   run;
42879     +   proc sort data=varclus_tmp;
42880     +      by _NCL_;
42881     +   run;
42882     +   proc transpose data=varclus_tmp out=varclus_tmp;
42883     +      by _NCL_;
42884     +      var %EM_INTERVAL_INPUT
42885     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
42886     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
42887     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
42888     +          %do i = 2 %to &nvar;
42889     +          %let varname = %sysfunc(varname(&dsid, &i));
42890     +          &varname
42891     +          %end;
42892     +      %end;
42893     +   ;
42894     +   run;
42895     +
42896     +   %if &minVariation eq %then %do;
42897     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
42898     +   %end;
42899     +   %if ^(0<&minVariation<100) %then %do;
42900     +       %let minVariation = 90;
42901     +   %end;
42902     +
42903     +   data _null_;
42904     +      set varclus_tmp end=eof;
42905     +      by _NCL_;
42906     +      retain flag 0;
42907     +      if first._ncl_ then flag=0;
42908     +      if .<col1 < &minVariation then flag=1;
42909     +      if last._ncl_ and ^flag then do;
42910     +         call symput('OPTNCL', _ncl_);
42911     +         stop;
42912     +      end;
42913     +     if eof then call symput('OPTNCL', _ncl_);
42914     +   run;
42915     +
42916     +   %let optnclus = &OPTNCL;
42917     +
42918     +   data varclus_tmp(drop=_NCL_ _NAME_);
42919     +      set &statDs;
42920     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
42921     +   run;
42922     +   proc sort data=varclus_tmp;
42923     +      by _TYPE_;
42924     +   run;
42925     +   proc transpose data=varclus_tmp out=varclus_tmp;
42926     +      by _TYPE_;
42927     +   run;
42928     +   proc sort data=varclus_tmp;
42929     +      by _name_ _type_;
42930     +   run;
42931     +
42932     +  proc transpose data=varclus_tmp out=&groupds;
42933     +      by _NAME_;
42934     +   run;
42935     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
42936     +      by Cluster descending Rsquare;
42937     +      where Cluster ne 0;
42938     +   run;
42939     +   proc datasets lib=work nolist mt=(DATA VIEW);
42940     +      delete varclus_tmp;
42941     +   run;
42942     +   quit;
42943     +%mend findClusNum;
42944     +*/
42945     +
42946     +%macro getNclusfromTrain(inoutstat=, nc=);
42947     +%global &nc;
42948     +data _null_;
42949     +    set &inoutstat end=eof;
42950     +    if eof then do;
42951     +    call symput("&nc", _ncl_);
42952     +    end;
42953     +run;
42954     +%mend  getNclusfromTrain;
42955     +
42956     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
42957     +
42958     +     *--- Build Code to Modify Metadata ---*;
42959     +     filename X "&deltacodefile";
42960     +     data _null_;
42961     +        FILE X;
42962     +        set &groupds end=eof;
42963     +        /*by Cluster;*/
42964     +         if _N_=1 then do;
42965     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
42966     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
42967     +           %end;
42968     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
42969     +           put "if upcase(strip(NAME)) in (";
42970     +        end;
42971     +        if Strip(upcase(Selected)) eq 'YES' then do;
42972     +           string = '"'!!trim(left(VARIABLE))!!'"';
42973     +           put string;
42974     +        end;
42975     +        if eof then do;
42976     +           put ') then ROLE="INPUT";';
42977     +           put 'else ROLE="REJECTED";';
42978     +           put 'end;';
42979     +
42980     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
42981     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
42982     +           %end;
42983     +        end;
42984     +     run;
42985     +     quit;
42986     +
42987     +     filename X;
42988     +
42989     +     quit;
42990     +%mend MakeDeltaCode;
42991     +
42992     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
42993     +    %if ^%sysfunc(exist(&statds)) %then %do;
42994     +         %goto doendc;
42995     +    %end;
42996     +
42997     +    data &corrds(drop=_TYPE_ _NCL_) ;
42998     +       set &statds;
42999     +       where _type_ eq 'CORR' ;
43000     +    run ;
43001     +    proc sort data=&corrds;
43002     +       by _NAME_ ;
43003     +    run ;
43004     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
43005     +      BY _NAME_ ;
43006     +    run ;
43007     +    data &corrplotds;
43008     +       length _Y_ $100;
43009     +       set &corrplotDs;
43010     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
43011     +    run ;
43012     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
43013     +       set &corrplotds;
43014     +       where _LABEL_ ne '' ;
43015     +       keep _TMP_ _LABEL_ ;
43016     +    run ;
43017     +    data _null_;
43018     +       nobs=0;
43019     +       dsid = open('varclus_match');
43020     +       if dsid then do;
43021     +          nobs = attrn(dsid, 'NOBS');
43022     +          dsid = close(dsid);
43023     +       end;
43024     +       call symput ('CORR_NOBS', nobs);
43025     +    run;
43026     +    %if &corr_nobs %then %do;
43027     +        proc sort data=varclus_match;
43028     +           by _name_;
43029     +        run ;
43030     +        proc sort data=&corrplotds;
43031     +           by _name_;
43032     +        run ;
43033     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
43034     +           merge varclus_match &corrplotds;
43035     +           by _NAME_ ;
43036     +           if _X_ eq '' then _X_=_NAME_ ;
43037     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
43038     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
43039     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
43040     +
43041     +       run ;
43042     +    %end;
43043     +    %else %do;
43044     +        proc sort data=&corrplotds;
43045     +           by _name_;
43046     +        run ;
43047     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
43048     +           set &corrplotds;
43049     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
43050     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
43051     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
43052     +
43053     +        run ;
43054     +    %end;
43055     +    proc sort data=&corrplotds;
43056     +       by _X_ _Y_;
43057     +    run ;
43058     +    proc datasets lib=work nolist mt=(DATA VIEW);
43059     +       delete varclus_match;
43060     +    run;
43061     +    quit;
43062     +
43063     +%doendc:
43064     +
43065     +%mend MakeVarClusCorrData;
43066     +
43067     +%macro MakeStatPlotData(statds= , outstatplotds=);
43068     +   %if %sysfunc(exist(&statds)) %then %do;
43069     +
43070     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
43071     +          set &statDs;
43072     +          where _type_ in('MEAN', 'STD', 'N');
43073     +       run ;
43074     +       proc transpose data=varclus_tmp out=&outstatplotds;
43075     +          id _TYPE_ ;
43076     +       run ;
43077     +       data &outstatplotds;
43078     +          set &outstatplotds(obs=1000);
43079     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
43080     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
43081     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
43082     +          else SCALEDSTD= STD ;
43083     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
43084     +       run ;
43085     +       proc sort data=&outstatplotds;
43086     +          by descending SCALEDSTD ;
43087     +       run ;
43088     +       proc datasets lib=work nolist mt=(DATA VIEW);
43089     +          delete varclus_tmp;
43090     +       run;
43091     +       quit;
43092     +    %end;
43093     +
43094     +%mend MakeStatPlotData;
43095     +
43096     +
43097     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
43098     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
43099     +    data &EM_USER_OUTSTATSCORE;
43100     +          set &indata;
43101     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
43102     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
43103     +          if _TYPE_ = 'STD' then _NAME_='STD';
43104     +          DROP _TYPE_ _NCL_;
43105     +     run;
43106     +
43107     +     filename _file_  "&fileRef";
43108     +
43109     +     data _null_;
43110     +        FILE _file_ MOD;
43111     +        put ' ';
43112     +        put '/*-------------------------------------------------*/';
43113     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
43114     +        put '/*-------------------------------------------------*/';
43115     +        put ' ';
43116     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
43117     +
43118     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
43119     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
43120     +
43121     +        %let k = 1;
43122     +        %do %while(^%sysfunc(fetch(&dsid)));
43123     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
43124     +                %if &k > 2 %then %do;
43125     +                 %let cn = %eval(&k-2);
43126     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
43127     +                %end;
43128     +                %let k = %eval(&k+1);
43129     +        %end;
43130     +
43131     +        %let rc = %sysfunc(rewind(&dsid));
43132     +
43133     +        %do i= 2 %to &nvar;
43134     +            %let _varname =  %sysfunc(varname(&dsid, &i));
43135     +            %do %while(^%sysfunc(fetch(&dsid)));
43136     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
43137     +                %if &_name = MEAN %then
43138     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
43139     +                %else %if &_name = STD %then
43140     +                %let _std = %sysfunc(getvarn(&dsid, &i));
43141     +                %else %do;
43142     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
43143     +                      %let abscoeff = %sysfunc(abs(&coeff));
43144     +                          %if &abscoeff >  0 %then %do;
43145     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
43146     +                           %end;
43147     +                 %end;
43148     +             %end;
43149     +             %let rc = %sysfunc(rewind(&dsid));
43150     +         %end;
43151     +
43152     +        %let dsid= %sysfunc(close(&dsid));
43153     +       run;
43154     +%mend CreateScoreCode;
43155     +
43156     +
43157     +
43158     +/*----------------------------------------------------------
43159     +    Instead of using %MakeRSquareData,
43160     +    %MakeVarClusResultTable at macro2.source is used
43161     + +----------------------------------------------------------*/
43162     +
43163     +
43164     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
43165     +
43166     +/* modifying  from ods rsquare = data */
43167     +
43168     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
43169     +    Length Cluster $16;
43170     +    length Variable $32;
43171     +    Length VariableLabel $64;
43172     +    set &indata; retain CurrentCluster;
43173     +    if NumberOfClusters ^= &ncluster then delete;
43174     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
43175     +    CurrentCluster = Cluster;
43176     +   run;
43177     +proc sort data =&outdata ;
43178     +     by Cluster RsquareRatio;
43179     +run;
43180     +data _tmprsq(drop=index);
43181     +     set &outdata; by Cluster;
43182     +     if first.Cluster then do;
43183     +     index = strip(scan(Cluster,2 ));
43184     +     Variable = "Clus"||index;
43185     +     VariableLabel = "Cluster Component "||index;
43186     +     OwnCluster = 1;
43187     +     NextClosest = .;
43188     +     RsquareRatio = 0;
43189     +     output;
43190     +     end;
43191     +run;
43192     +
43193     +proc sort data = _tmprsq ;
43194     +     by Cluster RsquareRatio;
43195     +run;
43196     +data &outdata;
43197     +     set &outdata _tmprsq;
43198     +by Cluster;
43199     +run;
43200     +
43201     +
43202     +/* Just create the Selected variable with all YES */
43203     +
43204     +data &outdata;
43205     +    set &outdata; by cluster;
43206     +    length Selected $8;
43207     +    Selected = 'YES';
43208     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
43209     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
43210     +    rename OwnCluster = RSqWithClusterComp;
43211     +    rename NextClosest = RSqWithNextClusComp;
43212     +run;
43213     +
43214     +
43215     +/* Selected = Y/N will be done %score section -----
43216     +
43217     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
43218     +data &outdata;
43219     +    set &outdata; by cluster;
43220     +    length Selected $8;
43221     +    if first.Cluster then Selected = 'YES';
43222     +    else Selected = 'NO';
43223     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
43224     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
43225     +    rename OwnCluster = RSqWithClusterComp;
43226     +    rename NextClosest = RSqWithNextClusComp;
43227     +run;
43228     +%end;
43229     +%else %do;
43230     +data &outdata;
43231     +    set &outdata; by cluster;
43232     +    if last.Cluster then Selected = 'YES';
43233     +    else Selected = 'NO';
43234     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
43235     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
43236     +    rename OwnCluster = RSqWithClusterComp;
43237     +    rename NextClosest = RSqWithNextClusComp;
43238     +run;
43239     +%end;
43240     +---------------------------------------------------------------*/
43241     +
43242     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
43243     +/* to calculate NextClosestClusRsq */
43244     +proc transpose data = &inClusRSquare  out=_clusRsq;
43245     +      by cluster;
43246     +      run;
43247     +data _clusRsq;
43248     +     set _clusRsq;
43249     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
43250     +run;
43251     +
43252     +proc sort data=_clusRsq;
43253     +    by cluster col1;
43254     +    run;
43255     +data _clusRsq(drop=_NAME_ _LABEL_);
43256     +     set _clusRsq; by cluster;
43257     +     if last.Cluster then output;
43258     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
43259     +     rename COL1 = RSqWithNextClusComp;
43260     +     rename Cluster = Variable;
43261     +     label  Cluster = "Variable";
43262     +run;
43263     +
43264     +proc sort data =&outdata;
43265     +     by Variable;
43266     +run;
43267     +data &outdata;
43268     +    merge &outdata _clusRsq;
43269     +    by Variable;
43270     +run;
43271     +proc sort data =&outdata;
43272     +by Cluster  RsquareRatio;
43273     +run;
43274     +quit;
43275     +%end;
43276     +
43277     +proc datasets lib = work nolist;
43278     +     delete _tmprsq _clusRsq;
43279     +     run;
43280     +quit;
43281     +
43282     +%mend MakeRSquareData;
43283     +
43284     +
43285     +/*-------------------------------------------------------------------------*/
43286     +
43287     +
43288     +
43289     +%macro ModifyCorr(indata=,
43290     +                  outdata=,
43291     +                  rsquare = Y
43292     +                  );
43293     +    data corr_tmp;
43294     +        set &indata;
43295     +    run;
43296     +     proc sql;
43297     +           update &indata
43298     +           set
43299     +     %let dsid = %sysfunc(open(work.corr_tmp));
43300     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
43301     +          %do i = 4 %to &nvar;
43302     +          %let _name = %sysfunc(varname(&dsid, &i));
43303     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
43304     +            %else  %let _name_md = &_name;
43305     +            %if &i < &nvar %then %do;
43306     +               &_name = 1- &_name_md ,
43307     +            %end;
43308     +            %else %do;
43309     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
43310     +            %end;
43311     +          %end;
43312     +      %let dsid= %sysfunc(close(&dsid));
43313     +
43314     +      select * from &indata;
43315     +      run;
43316     +      proc datasets lib = work nolist;
43317     +           delete corr_tmp;
43318     +      run;
43319     +      quit;
43320     +
43321     + %mend ModifyCorr;
43322     +
43323     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
43324     +    data &outdata(drop= _NCL_  _TYPE_);
43325     +       set &indata;
43326     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
43327     +       rename _NAME_ = Cluster;
43328     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
43329     +    run;
43330     +    %if &RSquare eq Y %then %do;
43331     +     data corr_tmp;
43332     +        set &outdata;
43333     +     run;
43334     +
43335     +     data &outdata(drop=i);
43336     +          set &outdata;
43337     +          %let dsid = %sysfunc(open(work.corr_tmp));
43338     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
43339     +          %do i = 2 %to &nvar;
43340     +            %let _name = %sysfunc(varname(&dsid, &i));
43341     +            %let _name_md = &_name.**2;
43342     +                &_name = &_name_md;
43343     +          %end;
43344     +      %let dsid= %sysfunc(close(&dsid));
43345     +      run;
43346     +      proc datasets lib = work nolist;
43347     +           delete corr_tmp;
43348     +      run;
43349     +
43350     +    %end;
43351     +     quit;
43352     +%mend MakeClusStructCorrData;
43353     +
43354     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
43355     +    data &outdata(drop= _NCL_  _TYPE_);
43356     +       set &indata;
43357     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
43358     +       rename _NAME_ = Cluster;
43359     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
43360     +    run;
43361     +    data corr_tmp;
43362     +        set &outdata;
43363     +    run;
43364     +
43365     +    %let dsid = %sysfunc(open(work.corr_tmp));
43366     +    %let nclus2= %eval(&ncluster+1);
43367     +    data &outdata;
43368     +         set &outdata;
43369     +          %do i = 2 %to &nclus2;
43370     +          %let i_1 = %eval(&i-1);
43371     +            %let _name = %sysfunc(varname(&dsid, &i));
43372     +            %let _newName = Clus&i_1;
43373     +                rename &_name = &_newName; ;
43374     +                *label &_name ="Cluster &i_1";
43375     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
43376     +          %end;
43377     +          keep Cluster
43378     +          %do i = 2 %to &nclus2;
43379     +                %let _name = %sysfunc(varname(&dsid, &i));
43380     +                &_name
43381     +          %end;
43382     +          ;
43383     +    %let dsid= %sysfunc(close(&dsid));
43384     +     run;
43385     +     quit;
43386     +
43387     +    %if &RSquare eq Y %then %do;
43388     +
43389     +       data corr_tmp;
43390     +        set &outdata;
43391     +     run;
43392     +
43393     +     data &outdata(drop=i);
43394     +          set &outdata;
43395     +          %let dsid = %sysfunc(open(work.corr_tmp));
43396     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
43397     +          %do i = 2 %to &nvar;
43398     +            %let _name = %sysfunc(varname(&dsid, &i));
43399     +            %let _name_md = &_name.**2;
43400     +                &_name = &_name_md;
43401     +          %end;
43402     +      %let dsid= %sysfunc(close(&dsid));
43403     +      run;
43404     +    %end;
43405     +
43406     +    %if &makeplotds eq Y %then %do;
43407     +     proc transpose data = &outdata
43408     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
43409     +          by cluster;
43410     +     run;
43411     +     data &plotds;
43412     +          set  &plotds;
43413     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
43414     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
43415     +     run;
43416     +     %end;
43417     +     proc datasets lib = work nolist;
43418     +           delete corr_tmp;
43419     +     run;
43420     +     quit;
43421     +%mend MakeInterClusCorrData;
43422     +
43423     +
43424     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
43425     +
43426     +data &outlink(drop = Selected);
43427     +     set &indata;
43428     +     LINKID = _N_;
43429     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
43430     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
43431     +run;
43432     +data &outnode(keep=NODEID TYPE LABEL);
43433     +    set &indata;
43434     +    length TYPE $16;
43435     +    rename Variable = NODEID;
43436     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
43437     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
43438     +    then  TYPE = "CLUSTER";
43439     +    else  TYPE="VARIABLE";
43440     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
43441     +run;
43442     +quit;
43443     +%mend MakeClusConstellData;
43444     +
43445     +
43446     +
43447     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
43448     +
43449     +data &outlink(drop = Selected);
43450     +     set &indata;
43451     +     LINKID = _N_;
43452     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
43453     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
43454     +run;
43455     +data &outnode(keep=NODEID TYPE LABEL);
43456     +    set &indata;
43457     +    length TYPE $16;
43458     +    rename Variable = NODEID;
43459     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
43460     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
43461     +    then  TYPE = "CLUSTER";
43462     +    else  TYPE="VARIABLE";
43463     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
43464     +run;
43465     +quit;
43466     +%mend MakeClusConstellData;
43467     +
43468     +
43469     +/*--- This will work only when inds is not a view data -------
43470     +
43471     +%macro getNVarNObs(inds=, nvar=, nobs=);
43472     +
43473     +    %global &nvar;
43474     +    %global &nobs;
43475     +    data _null_;
43476     +         dsid = open("&inds");
43477     +         nv = attrn(dsid, 'NVAR');
43478     +         no = attrn(dsid, 'NOBS');
43479     +         dsid = close(dsid);
43480     +         call symput("&nvar", nv);
43481     +         call symput("&nobs", no);
43482     +    run;
43483     +    quit;
43484     +%mend  getNVarNObs;
43485     +
43486     ++---------------------------------------------------------------*/
43487     +
43488     +
43489     +%macro getNVar(inds=, nvar=);
43490     +    %global &nvar;
43491     +    data _null_;
43492     +         dsid = open("&inds");
43493     +         nv = attrn(dsid, 'NVAR');
43494     +         dsid = close(dsid);
43495     +         call symput("&nvar", nv);
43496     +    run;
43497     +    quit;
43498     +%mend  getNVar;
43499     +
43500     +
43501     +
43502     +%macro getNObs(inds=, nobs=);
43503     +    %global &nobs;
43504     +    data _null_;
43505     +        set &inds end=eof;
43506     +        if eof then call symput("&nobs", _N_);
43507     +    run;
43508     +    quit;
43509     +%mend  getNObs;
43510     +
43511     +%Macro CreateVarclusMeta(trainnum=);
43512     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
43513     +    data &EM_USER_VARCLUSMETA;
43514     +         length TrainNum 8.;
43515     +         length NewTrain $8;
43516     +         length NGCluster 8.;
43517     +         length ExportedComp $16;
43518     +         length HideVariable $8;
43519     +         TrainNum = &trainnum;
43520     +         NewTrain = "Y";
43521     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
43522     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
43523     +         NGCluster = 0; /* zero means no twostage */
43524     +   run;
43525     +   quit;
43526     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
43527     +
43528     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
43529     +    data &outdata(drop= _NCL_  _TYPE_);
43530     +       set &indata;
43531     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
43532     +       %if &globalclusid ne %then %do;
43533     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
43534     +       rename _NAME_ = Cluster;
43535     +       %end;
43536     +       %else %do;
43537     +        _NAME_ = upcase(_NAME_);
43538     +       rename _NAME_ = Cluster;
43539     +       %end;
43540     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
43541     +    run;
43542     +    data corr_tmp;
43543     +        set &outdata;
43544     +    run;
43545     +
43546     +    %let dsid = %sysfunc(open(work.corr_tmp));
43547     +    %let nclus2= %eval(&ncluster+1);
43548     +    data &outdata;
43549     +         set &outdata;
43550     +          %do i = 2 %to &nclus2;
43551     +          %let i_1 = %eval(&i-1);
43552     +            %let _name = %sysfunc(varname(&dsid, &i));
43553     +            %if &globalclusid ne %then
43554     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
43555     +                     rename &_name = &_newName;
43556     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
43557     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
43558     +                %end;
43559     +            %else
43560     +                %do; %let _newName = CLUS&i_1;
43561     +                     rename &_name = &_newName;
43562     +                     *label &_name ="Cluster &i_1";
43563     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
43564     +                %end;
43565     +          %end;
43566     +          keep Cluster
43567     +          %do i = 2 %to &nclus2;
43568     +                %let _name = %sysfunc(varname(&dsid, &i));
43569     +                &_name
43570     +          %end;
43571     +          ;
43572     +    %let dsid= %sysfunc(close(&dsid));
43573     +     run;
43574     +     quit;
43575     +
43576     +    %if &RSquare eq Y %then %do;
43577     +
43578     +       data corr_tmp;
43579     +        set &outdata;
43580     +     run;
43581     +
43582     +     data &outdata;
43583     +          set &outdata;
43584     +          %let dsid = %sysfunc(open(work.corr_tmp));
43585     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
43586     +          %do i = 2 %to &nvar;
43587     +            %let _name = %sysfunc(varname(&dsid, &i));
43588     +            %let _name_md = &_name.**2;
43589     +                &_name = &_name_md;
43590     +          %end;
43591     +      %let dsid= %sysfunc(close(&dsid));
43592     +      run;
43593     +    %end;
43594     +
43595     +    %if &makeplotds eq Y %then %do;
43596     +     proc transpose data = &outdata
43597     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
43598     +          by cluster;
43599     +     run;
43600     +     data &plotds;
43601     +          set  &plotds;
43602     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
43603     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
43604     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
43605     +     run;
43606     +     %end;
43607     +     proc datasets lib = work nolist;
43608     +           delete corr_tmp;
43609     +     run;
43610     +     quit;
43611     +%mend MakeInterClusCorrData;
43612     +
43613     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
43614     +    data _tmpds(drop= _NCL_);
43615     +       set &indata;
43616     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
43617     +       %if &globalclusid ne %then %do;
43618     +           _NAME_ = "GC&globalclusid.";
43619     +       rename _NAME_ = Cluster;
43620     +       %end;
43621     +       %else %do;
43622     +        _NAME_ = "CLUS";
43623     +        rename _NAME_ = Cluster;
43624     +       %end;
43625     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
43626     +    run;
43627     +    proc transpose data =_tmpds out =&outdata;
43628     +    run;
43629     +
43630     +    data &outdata(drop=COL1);
43631     +        %if &globalclusid ne %then %do;
43632     +        length GCluster $16;
43633     +        %end;
43634     +        length Cluster $32;
43635     +        length _NAME_ $32;
43636     +         set &outdata;
43637     +         _NAME_ = upcase(_NAME_);
43638     +         rename _NAME_=Variable;
43639     +         *label _NAME_="Variable";
43640     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
43641     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
43642     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
43643     +
43644     +         %if &globalclusid ne %then %do;
43645     +          GCluster = "GC&globalclusid";
43646     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
43647     +         %end;
43648     +         %else %do;
43649     +         Cluster = "CLUS"||strip(COL1);
43650     +        %end;
43651     +         rename COL2 = RSqWithOwnClusComp;
43652     +         *label COL2 = "R-Square With Own Cluster Component";
43653     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
43654     +
43655     +   run;
43656     +   proc sort data =&outdata;
43657     +        by Cluster RSqWithOwnClusComp;
43658     +   run;
43659     +   proc datasets lib = work nolist;
43660     +           delete _tmpds;
43661     +   run;
43662     +   quit;
43663     +%mend MakeOwnRSquare;
43664     +
43665     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
43666     +    data &outdata(drop= _NCL_  _TYPE_);
43667     +       %if &globalclusid ne %then %do;
43668     +        length GCluster $16;
43669     +        %end;
43670     +       set &indata;
43671     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
43672     +       %if &globalclusid ne %then %do;
43673     +         GCluster = "GC&globalclusid";
43674     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
43675     +         rename _NAME_ = Cluster;
43676     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
43677     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
43678     +
43679     +       %end;
43680     +       %else %do;
43681     +         _NAME_ = upcase(_NAME_);
43682     +         rename _NAME_ = Cluster;
43683     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
43684     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
43685     +
43686     +       %end;
43687     +     run;
43688     +    %if &RSquare eq Y %then %do;
43689     +     data corr_tmp;
43690     +          set &outdata;
43691     +     run;
43692     +     %let istart = 2;
43693     +     %if &globalclusid ne %then %let istart = 3;
43694     +     data &outdata;
43695     +          set &outdata;
43696     +          %let dsid = %sysfunc(open(work.corr_tmp));
43697     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
43698     +          %do i =&istart %to &nvar;
43699     +            %let _name = %sysfunc(varname(&dsid, &i));
43700     +            %let _name_md = &_name.**2;
43701     +                &_name = &_name_md;
43702     +          %end;
43703     +      %let dsid= %sysfunc(close(&dsid));
43704     +      run;
43705     +      proc datasets lib = work nolist;
43706     +           delete corr_tmp;
43707     +      run;
43708     +    %end;
43709     +     quit;
43710     +%mend MakeClusStructCorrData;
43711     +
43712     +/*
43713     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
43714     +*/
43715     +
43716     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
43717     +
43718     +     /* The indata should be the outdata
43719     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
43720     +
43721     +     proc sort data =&indata out=_tmpclusRsq;
43722     +     by cluster;
43723     +     run;
43724     +
43725     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
43726     +      by cluster;
43727     +     run;
43728     +
43729     +     proc sort data=_tmpclusRsq;
43730     +        by _NAME_ COL1;
43731     +     run;
43732     +
43733     +     data _tmpclusRsq;
43734     +         length _NAME_ $32;
43735     +         set _tmpclusRsq; by _NAME_;
43736     +          _NAME_ = upcase(_NAME_);
43737     +          %if &ncluster ne 1 %then %do;
43738     +             if last._NAME_ then delete;
43739     +          %end;
43740     +          %else %do;
43741     +             COL1 = 0;
43742     +          %end;
43743     +     run;
43744     +     /* need to sort again */
43745     +     proc sort data=_tmpclusRsq;
43746     +        by _NAME_ COL1;
43747     +     run;
43748     +
43749     +     data &outdata;
43750     +         set _tmpclusRsq; by _NAME_;
43751     +         Cluster = upcase(Cluster);
43752     +         if last._NAME_ then output;
43753     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
43754     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
43755     +         rename COL1 = RSqWithNextClusComp;
43756     +         Cluster = upcase(Cluster);
43757     +         rename Cluster = ClosestCluster;
43758     +         *label  Cluster = "Next Closest Cluster";
43759     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
43760     +         rename _NAME_ = Variable;
43761     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
43762     +    run;
43763     +
43764     +
43765     +    %if &globalclusid ne %then %do;
43766     +    data &outdata;
43767     +       length GCluster $16;
43768     +       set &outdata;
43769     +       GCluster = "GC&globalclusid";
43770     +       run;
43771     +    %end;
43772     +    proc datasets lib = work nolist;
43773     +           delete _tmpclusRsq;
43774     +    run;
43775     +    quit;
43776     +%mend FindNextClosestClusByVar;
43777     +
43778     +
43779     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
43780     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
43781     +     proc sort data =&indata out=_tmpclusRsq;
43782     +     by cluster;
43783     +     run;
43784     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
43785     +     by cluster;
43786     +     run;
43787     +     proc sort data=_tmpclusRsq;
43788     +        by _NAME_ col1;
43789     +     run;
43790     +     data _tmpclusRsq;
43791     +         length _NAME_ $32;
43792     +         set _tmpclusRsq; by _NAME_;
43793     +          _NAME_ = upcase(_NAME_);
43794     +          %if &ncluster ne 1 %then %do;
43795     +             if last._NAME_ then delete;
43796     +          %end;
43797     +          %else %do;
43798     +             COL1 = 0;
43799     +          %end;
43800     +     run;
43801     +     data &outdata;
43802     +         set _tmpclusRsq; by _NAME_;
43803     +         Cluster = upcase(Cluster);
43804     +         if last._NAME_ then output;
43805     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
43806     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
43807     +         rename COL1 = RSqWithNextClusComp;
43808     +         Cluster = upcase(Cluster);
43809     +         rename Cluster = ClosestCluster;
43810     +         *label  Cluster = "Next Closest Cluster";
43811     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
43812     +         rename _NAME_ = Variable;
43813     +         *label  _NAME_ = "Variable";
43814     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
43815     +
43816     +    run;
43817     +    %if &globalclusid ne %then %do;
43818     +    data &outdata;
43819     +       length GCluster $16;
43820     +       set &outdata;
43821     +       GCluster = "GC&globalclusid";
43822     +       run;
43823     +    %end;
43824     +
43825     +    proc datasets lib = work nolist;
43826     +           delete _tmpclusRsq;
43827     +    run;
43828     +
43829     +    quit;
43830     +%mend FindNextClosestClusByCluster;
43831     +
43832     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
43833     +/*----
43834     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
43835     +-----------*/
43836     +
43837     +proc sort data =&indata1;
43838     +    by Variable;
43839     +run;
43840     +proc sort data =&indata2;
43841     +    by Variable;
43842     +run;
43843     +data &outdata;
43844     +    merge &indata1 &indata2;
43845     +    by Variable;
43846     +    length Type $16;
43847     +    Type = 'Variable';
43848     +    *label Type ='Type';
43849     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
43850     +run;
43851     +
43852     +
43853     +data &indata3;
43854     +    set  &indata3 ;
43855     +    length RSqWithOwnClusComp 8.;
43856     +    Cluster = Variable;
43857     +    RSqWithOwnClusComp = 1;
43858     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
43859     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
43860     +    length Type $16;
43861     +    Type = 'ClusterComp';
43862     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
43863     +
43864     +;
43865     +run;
43866     +
43867     +proc sort data=&outdata;
43868     +    by Cluster;
43869     +run;
43870     +proc sort data =&indata3;
The SAS System
 
43871     +    by Cluster;
43872     +run;
43873     +
43874     +data &outdata;
43875     +     set &outdata &indata3;
43876     +     by Cluster;
43877     +run;
43878     +
43879     +
43880     +/* Create the Selected variable with all YES */
43881     +
43882     +data &outdata;
43883     +     set &outdata;
43884     +     length RsqRatio 8.;
43885     +     length Selected $8;
43886     +     *label RSqRatio = "1-R**2 Ratio";
43887     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
43888     +     *label Selected = "Variable Selected";
43889     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
43890     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
43891     +     Selected ='YES';
43892     +     rename _LABEL_ = Label;
43893     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
43894     +run;
43895     +
43896     +
43897     +/*----  Selected = Y/N will be assigened at the %score                   -------+
43898     +        Just create the Selected variable with all YES at the step above
43899     + +------------------------------------------------------------------------------+
43900     +
43901     +proc sort data=&outdata;
43902     +    by Cluster RsqRatio;
43903     +run;
43904     +
43905     +%if &selectedcomp eq CLUSTERCOMP %then %do;
43906     +data &outdata;
43907     +     set &outdata; by Cluster;
43908     +     length Selected $8;
43909     +     label Selected = "Variable Selected";
43910     +     if  first.Cluster then Selected ='Yes';
43911     +     else Selected = 'No';
43912     +    run;
43913     +%end;
43914     +%else %do;
43915     +data &outdata(drop = _var _varchange);
43916     +     set &outdata; retain _var 0; by Cluster;
43917     +     length Selected $8;
43918     +     label Selected = "Variable Selected";
43919     +     if first.Cluster then  _varchange = 0;
43920     +     else _varchange =1;
43921     +     if _var ne _varchange then  Selected  = 'Yes';
43922     +     else Selected = 'No';
43923     +     if last.cluster then  _var = 0;
43924     +     else _var = _varchange;
43925     +run;
43926     +%end;
43927     +
43928     +--------------------------------------------------------------*/
43929     +
43930     +quit;
43931     +%mend MakeVarClusResultTable;
43932     +
43933     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
43934     +     proc sort data =&indata;
43935     +        by cluster;
43936     +     run;
43937     +     proc transpose data =&indata
43938     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
43939     +          by cluster;
43940     +     run;
43941     +     data &outdata;
43942     +          set  &outdata;
43943     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
43944     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
43945     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
43946     +     run;
43947     +     %if &globalclusid ne %then %do;
43948     +     data &outdata;
43949     +          Length GCluster $16;
43950     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
43951     +          set  &outdata;
43952     +          GCluster ="GC&globalclusid.";
43953     +          run;
43954     +     %end;
43955     +
43956     +%Mend MakePlotDataFromCorrTable;
43957     +
43958     +
43959     +%macro MakeCorrelation(indata=,
43960     +                       outstat=_tmpoutstat,
43961     +                       corrmatrix=N,
43962     +                       outcorr=_tmpoutcorr,
43963     +                       includeclassvar=N,
43964     +                       target=,
43965     +                       freq=,
43966     +                       weight=);
43967     +   %if &target eq  %then %do;
43968     +
43969     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
43970     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
43971     +       %if &includeclassvar eq Y %then %do;
43972     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
43973     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
43974     +          %do i = 2 %to &nvar;
43975     +          %let varname = %sysfunc(varname(&dsid, &i));
43976     +          &varname
43977     +          %end;
43978     +       %end;
43979     +       ;
43980     +      %if &freq ne  %then %do;
43981     +          freq &freq;
43982     +      %end;
43983     +      %if &weight ne  %then %do;
43984     +          weight &weight;
43985     +      %end;
43986     +
43987     +      run;
43988     +      %if &corrmatrix eq Y %then %do;
43989     +      data  &outcorr (drop = _NCL_ _TYPE_);
43990     +           set  &outstat ;
43991     +           if _TYPE_ ='CORR' then output;
43992     +      run;
43993     +      %end;
43994     +    %end;
43995     +    %else %do;
43996     +       proc corr data=&indata outp=&outstat noprint;
43997     +            var
43998     +       %let dsid = %sysfunc(open(&indata));
43999     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
44000     +          %do i = 1 %to &nvar;
44001     +              %let _name = %sysfunc(varname(&dsid, &i));
44002     +              %if &_name ne &target %then;
44003     +              &_name
44004     +           %end;
44005     +        %let dsid= %sysfunc(close(&dsid));
44006     +        ;
44007     +        with &target;
44008     +        run;
44009     +    %end;
44010     +    quit;
44011     +%mend MakeCorrelation;
44012     +
44013     +
44014     +%macro MakeCorrelationDistance(indata=,
44015     +                               outdata=,
44016     +                               rsquare = N
44017     +                               );
44018     +    data corr_tmp;
44019     +        set &indata;
44020     +        if _N_ = 1 then do;
44021     +           output;
44022     +           stop;
44023     +         end;
44024     +    run;
44025     +    %if &outdata ne  %then %let  _outdata = &outdata;
44026     +    %else %let _outdata = &indata;
44027     +
44028     +    data &_outdata;
44029     +         set &indata;
44030     +
44031     +         %let dsid = %sysfunc(open(work.corr_tmp));
44032     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
44033     +          %do i = 2 %to &nvar;
44034     +              %let _name = %sysfunc(varname(&dsid, &i));
44035     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
44036     +              %else  %let _name_md = &_name;
44037     +              &_name = 1- &_name_md;
44038     +          %end;
44039     +      %let dsid= %sysfunc(close(&dsid));
44040     +      run;
44041     +      proc datasets lib = work nolist;
44042     +           delete corr_tmp;
44043     +      run;
44044     +      quit;
44045     +  %mend MakeCorrelationDistance;
44046     +
44047     +
44048     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
44049     +                                   rsquare = N
44050     +                                   );
44051     +    data corr_tmp;
44052     +        set &indata;
44053     +    run;
44054     +    proc sql noprint;
44055     +           update &indata
44056     +           set
44057     +     %let dsid = %sysfunc(open(work.corr_tmp));
44058     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
44059     +          %do i = 4 %to &nvar;
44060     +          %let _name = %sysfunc(varname(&dsid, &i));
44061     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
44062     +            %else  %let _name_md = &_name;
44063     +            %if &i < &nvar %then %do;
44064     +               &_name = 1- &_name_md ,
44065     +            %end;
44066     +            %else %do;
44067     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
44068     +            %end;
44069     +          %end;
44070     +      %let dsid= %sysfunc(close(&dsid));
44071     +
44072     +      select * from &indata;
44073     +      run;
44074     +     data &indata( drop = _NCL_);
44075     +           set &indata;
44076     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
44077     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
44078     +     run;
44079     +     data &indata(DROP = _NCL_);
44080     +           set &indata;
44081     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
44082     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
44083     +           rename _NAME_ = _VAR_;
44084     +     run;
44085     +     proc datasets lib = work nolist;
44086     +           delete corr_tmp;
44087     +     run;
44088     +     quit;
44089     + %mend UpdateOutStatCorrToDistance;
44090     +
44091     +
44092     +%macro HierClusWithCorr(indata= ,
44093     +                        ncluster=,
44094     +                        method = Ward,
44095     +                        outtree = _outtree,
44096     +                        idvar =_VAR_,
44097     +                        outdata=,
44098     +                        rescore = N,
44099     +                        newncluster=
44100     +                        );
44101     +      %global &newncluster;
44102     +      %if &rescore ne Y %then %do;
44103     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
44104     +                   method=&method outtree=&outtree noprint;
44105     +           id &idvar;
44106     +      run;
44107     +      %end;
44108     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
44109     +      run;
44110     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
44111     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
44112     +      run;
44113     +      data _outcontent;
44114     +          set _outcontent;
44115     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
44116     +          index = 1;
44117     +          rename NAME = _NAME_;
44118     +      run;
44119     +      proc sort data=_outcontent;
44120     +          by _NAME_;
44121     +      run;
44122     +      proc sort data =&outdata;
44123     +           by _NAME_;
44124     +      run;
44125     +      data &outdata(drop=index);
44126     +          merge &outdata _outcontent;
44127     +          by _NAME_;
44128     +          if index = . then delete;
44129     +      run;
44130     +      /*-----------------------------------------------------------*/
44131     +      data &outdata;
44132     +           length CLUSNAME $16;
44133     +           set &outdata;
44134     +           if CLUSTER > &ncluster then delete;
44135     +           CLUSNAME='GC'||strip(CLUSTER);
44136     +           *label CLUSNAME = "Cluster Name";
44137     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
44138     +           rename _NAME_ = VARIABLE ;
44139     +           *label _NAME_ = "Variable";
44140     +           *label CLUSTER = "Cluster";
44141     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
44142     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
44143     +      run;
44144     +      proc sort data=&outdata out=&outdata;
44145     +           by CLUSTER;
44146     +      run;
44147     +      proc means data =&outdata noprint;
44148     +           output out=_meanout;
44149     +      run;
44150     +      data _null_;
44151     +            set _meanout;
44152     +            if strip(_STAT_) eq 'MAX' then do;
44153     +            call symput("&newncluster", CLUSTER);
44154     +            stop;
44155     +            end;
44156     +      run;
44157     +
44158     +      proc datasets lib = work nolist;
44159     +           delete _outcontent _meanout;
44160     +      run;
44161     +      quit;
44162     +%mend  HierClusWithCorr;
44163     +
44164     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
44165     +
44166     +     data _tmpindata;
44167     +          set &indata;
44168     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
44169     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
44170     +          if _TYPE_ = 'STD' then _NAME_='STD';
44171     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
44172     +          DROP _TYPE_ _NCL_;
44173     +     run;
44174     +
44175     +     filename _file_  "&fileRef";
44176     +
44177     +     data _null_;
44178     +        FILE _file_ MOD;
44179     +        put ' ';
44180     +        put "/*-------------------------------------------------*/";
44181     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
44182     +        put "/*-------------------------------------------------*/";
44183     +        put ' ';
44184     +        %let dsid = %sysfunc(open(work._tmpindata));
44185     +
44186     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
44187     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
44188     +        %let k = 1;
44189     +        %do %while(^%sysfunc(fetch(&dsid)));
44190     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
44191     +               %if &k > 2 %then %do;
44192     +                %let cn = %eval(&k-2);
44193     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
44194     +                %end;
44195     +                %let k = %eval(&k+1);
44196     +
44197     +        %end;
44198     +        %let rc = %sysfunc(rewind(&dsid));
44199     +
44200     +        %do j= 2 %to &nvar;
44201     +            %let _varname = %sysfunc(varname(&dsid, &j));
44202     +            %do %while(^%sysfunc(fetch(&dsid)));
44203     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
44204     +                %if &_name = MEAN %then
44205     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
44206     +                %else %if &_name = STD %then
44207     +                %let _std = %sysfunc(getvarn(&dsid, &j));
44208     +                %else %do;
44209     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
44210     +                      %let abscoeff = %sysfunc(abs(&coeff));
44211     +                          %if &abscoeff >  0 %then %do;
44212     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
44213     +                           %end;
44214     +                 %end;
44215     +             %end;
44216     +             %let rc = %sysfunc(rewind(&dsid));
44217     +         %end;
44218     +
44219     +        %let dsid= %sysfunc(close(&dsid));
44220     +
44221     +     run;
44222     +
44223     +     filename _file_;
44224     +     proc datasets lib = work nolist;
44225     +           delete _tmpindata;
44226     +     run;
44227     +     quit;
44228     +%mend CreateScoreCode2;
44229     +
44230     +
44231     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
44232     +
44233     +     /*--- Build Code to Modify Metadata ---*/
44234     +     filename X "&deltacodefile";
44235     +     data _null_;
44236     +        FILE X;
44237     +        set &groupds end=eof;
44238     +        if _N_=1 then do;
44239     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
44240     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
44241     +           %end;
44242     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
44243     +           put "if upcase(strip(NAME)) in (";
44244     +        end;
44245     +        if Strip(upcase(Selected)) eq 'YES' then do;
44246     +           string = '"'!!trim(left(VARIABLE))!!'"';
44247     +           put string;
44248     +        end;
44249     +        if eof then do;
44250     +           put ') then ROLE="INPUT";';
44251     +           put 'else ROLE="REJECTED";';
44252     +           put 'end;';
44253     +
44254     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
44255     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
44256     +           %end;
44257     +        end;
44258     +     run;
44259     +     quit;
44260     +
44261     +     filename X;
44262     +     quit;
44263     +%mend MakeDeltaCode2;
44264     +
44265     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
44266     +  %global &ngc;
44267     +  data _null_;
44268     +  %if &indata ne %then %do;
44269     +      %let dsid = %sysfunc(open(&indata));
44270     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
44271     +      %let dsid = %sysfunc(close(&dsid));
44272     +  %end;
44273     +  %else %do;
44274     +       %let nvar = %eval(&ninput+&ndummy); ;
44275     +  %end;
44276     +  %let numgc = %eval(&nvar/&div+2);
44277     +  %let &ngc = &numgc;
44278     +   run;
44279     +  quit;
44280     +%mend getInitialGClusterNumber;
44281     +
44282     +
44283     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
44284     +data &outlink(drop = Selected);
44285     +     set &indata;
44286     +     LINKID = _N_;
44287     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
44288     +run;
44289     +data &outnode(keep=NODEID TYPE LABEL);
44290     +    set &indata;
44291     +    length TYPE $16;
44292     +    rename VARIABLE = NODEID;
44293     +    *label  CLUSNAME="Node ID";
44294     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
44295     +    TYPE = "VARIABLE";
44296     +    *label TYPE = "Node Type";
44297     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
44298     +    run;
44299     +data _tmp(keep=NODEID TYPE LABEL);
44300     +    set &indata;
44301     +    length TYPE $16;
44302     +    rename CLUSNAME = NODEID;
44303     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
44304     +    TYPE = "GCLUSTER";
44305     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
44306     +    run;
44307     +proc sort data=_tmp;
44308     +    by NODEID;
44309     +run;
44310     +data _tmp;
44311     +    set _tmp; by NODEID;
44312     +    if first.NODEID then output;
44313     +run;
44314     +proc sort data=&outnode;
44315     +    by NODEID;
44316     +run;
44317     +data  &outnode;
44318     +    set _tmp &outnode;
44319     +run;
44320     +proc datasets lib = work nolist;
44321     +     delete _tmp;
44322     +run;
44323     +quit;
44324     +%mend MakeGobalConstellData;
44325     +
44326     +/* Make contellation plot data among GCLUSTERS */
44327     +
44328     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
44329     +
44330     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
44331     +     set &indata;
44332     +     LINKID = _N_;
44333     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
44334     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
44335     +     end;
44336     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
44337     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
44338     +     end;
44339     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
44340     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
44341     +    end;
44342     +run;
44343     +
44344     +data _tmp_outrsquare;
44345     +        set &inoutrsq;
44346     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
44347     +run;
44348     +
44349     +proc freq data =_tmp_outrsquare noprint;
44350     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
44351     +run;
44352     +
44353     +data &outnode(keep=_NAME_ TYPE LABEL);
44354     +    set &outlink;
44355     +    length TYPE $16;
44356     +    length LABEL $100;
44357     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
44358     +
44359     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
44360     +    TYPE = "GCLUSTER";
44361     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
44362     +    end;
44363     +    else do;
44364     +    TYPE= "ROOT";
44365     +    LABEL= _NAME_;
44366     +    end;
44367     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
44368     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
44369     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
44370     +    run;
44371     +
44372     +proc sort data=&outnode;
44373     +     by _NAME_;
44374     +proc sort data=_tmp_GCLUSFREQ;
44375     +     by _NAME_;
44376     +run;
44377     +
44378     +data  &outnode;
44379     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
44380     +     if COUNT=. then COUNT=1;
44381     +run;
44382     +
44383     +proc datasets lib = work nolist;
44384     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
44385     +run;
44386     +
44387     +quit;
44388     +%Mend MakeGClusterConstData;
44389     +
44390     +
44391     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
44392     +
44393     +    data _gscoretmpds;
44394     +          set &indata;
44395     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
44396     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
44397     +          if _TYPE_ = 'STD' then _NAME_='STD';
44398     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
44399     +          DROP _TYPE_ _NCL_;
44400     +     run;
44401     +
44402     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
44403     +        GCluster Component &globalclusid ------ */
44404     +
44405     +    filename _file_  "&fileref";
44406     +
44407     +    data _null_;
44408     +        %if &globalclusid eq 1 %then %do;
44409     +          FILE _file_;
44410     +        %end;
44411     +        %else %do;
44412     +          FILE _file_ MOD;
44413     +        %end;
44414     +
44415     +        %let dsid = %sysfunc(open(work._gscoretmpds));
44416     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
44417     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
44418     +
44419     +        %let k = 1;
44420     +        %do %while(^%sysfunc(fetch(&dsid)));
44421     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
44422     +                %if &k > 2 %then %do;
44423     +                put "&_name = 0 ; ";
44424     +                %end;
44425     +                %let k = %eval(&k+1);
44426     +        %end;
44427     +
44428     +        %let rc = %sysfunc(rewind(&dsid));
44429     +        %do i= 2 %to &nvar;
44430     +            %let _varname =  %sysfunc(varname(&dsid, &i));
44431     +            %do %while(^%sysfunc(fetch(&dsid)));
44432     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
44433     +                %if &_name = MEAN %then
44434     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
44435     +                %else %if &_name = STD %then
44436     +                %let _std = %sysfunc(getvarn(&dsid, &i));
44437     +                %else %do;
44438     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
44439     +                      %let abscoeff = %sysfunc(abs(&coeff));
44440     +                          %if &abscoeff >  0 %then %do;
44441     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
44442     +                           %end;
44443     +                 %end;
44444     +             %end;
44445     +             %let rc = %sysfunc(rewind(&dsid));
44446     +
44447     +         %end;
44448     +
44449     +        %let dsid= %sysfunc(close(&dsid));
44450     +       run;
44451     +
44452     +
44453     +       proc datasets lib=work nolist;
44454     +            delete _gscoretmpds;
44455     +       run;
44456     +      quit;
44457     +
44458     +%mend CreateGClusterScoreCode;
44459     +
44460     +
44461     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
44462     +
44463     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
44464     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
44465     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
44466     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
44467     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
44468     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
44469     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
44470     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
44471     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
44472     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
44473     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
44474     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
44475     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
44476     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
44477     +
44478     +   filename gsfile "&gscorecode";
44479     +
44480     +   data &EM_USER_GSCORE;
44481     +             set &indata;
44482     +             %include  gsfile;
44483     +        keep
44484     +        %do i=1 %to &ngcluster;
44485     +         %let gcvarname = GC&i;
44486     +         &gcvarname
44487     +        %end;
44488     +     ;
44489     +   run;
44490     +
44491     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
44492     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
44493     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
44494     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
44495     +    noprint  ;
44496     +     var
44497     +       %do i=1 %to &ngcluster;
44498     +         %let gcvarname = GC&i;
44499     +         &gcvarname
44500     +        %end;
44501     +   ;
44502     +   run;
44503     +
44504     +
44505     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
44506     +   data &EM_USER_GSCORECORRPLOT ;
44507     +        set &EM_USER_GSCORECORRPLOT;
44508     +        rename _X_ = X;
44509     +        rename _Y_ = Y;
44510     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
44511     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
44512     +   run;
44513     +
44514     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
44515     +
44516     +   data &EM_USER_GSCORETREE;
44517     +        length _NAME_ $32;
44518     +        length _LABEL_ $100;
44519     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
44520     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
44521     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
44522     +        end;else do;
44523     +         _LABEL_ = _NAME_;
44524     +        end;
44525     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
44526     +
44527     +   run;
44528     +
44529     +   quit;
44530     +
44531     +%mend MakeGClusterCorrelation;
44532     +
44533     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN.SOURCE.
44536     +%macro train;
44538     +   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
44539     +   %include temp;
44540     +   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
44541     +   %include temp;
44542     +   filename temp catalog 'sashelp.emutil.em_copyfile.source';
44543     +   %include temp;
44544     +   filename temp;
44546     +   %let VARCLUS_MAXNUMOBS = 100000;
44547     +   %let VARCLUS_MAXNUMVAR = 200;
44548     +   %let trainnum = 0;
44549     +   %let error = 0;
44551     +   %if &EM_IMPORT_DATA eq %then %do;
44552     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
44553     +       %let  error = 1;
44554     +       %goto endtrain;
44555     +   %end;
44557     +    %if (%sysfunc(exist(&EM_IMPORT_DATA)) or %sysfunc(exist(&EM_IMPORT_DATA, VIEW))) < 1 %then %do;
44558     +        %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
44559     +        %let  error = 1;
44560     +        %goto endline;
44561     +    %end;
44563     +   %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
44564     +   %let _num_input_binary = %eval(&EM_NUM_BINARY_INPUT+&EM_NUM_BINARY_REJECTED);
44565     +   %let _num_input_nominal = %eval(&EM_NUM_NOMINAL_INPUT+&EM_NUM_NOMINAL_REJECTED);
44566     +   %let _num_input_ordinal = %eval(&EM_NUM_ORDINAL_INPUT+&EM_NUM_ORDINAL_REJECTED);
44567     +   %let _num_input_class = %eval(&_num_input_binary+&_num_input_nominal+&_num_input_ordinal);
44568     +   %let _num_input_total = %eval(&_num_input_interval+&_num_input_class);
44570     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) %then %do;
44571     +        %if  &_num_input_total < 2 %then %do;
44572     +            %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
44573     +            %let error = 2;
44574     +            %goto endtrain;
44575     +        %end;
44576     +   %end;
44577     +   %else %do;
44578     +         %if  &_num_input_interval < 2 %then %do;
44579     +         %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
44580     +         %let error = 2;
44581     +         %goto endtrain;
44582     +         %end;
44583     +   %end;
44585     +   %em_checkerror();
44587     +   %if &EMEXCEPTIONSTRING ne %then %do;
44588     +       %goto endtrain;
44589     +   %end;
44591     +   %if (&EM_PROPERTY_INCLUDECLASSVAR eq Y) and (&_num_input_class > 0) %then %do;
44593     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
44594     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
44595     +                             outvar=&EM_USER_OUTDUMMY,
44596     +                             outdata=_newtrainds,
44597     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
44599     +       %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
44600     +           %getNObs(inds=_newtrainds, nobs=_varclus_nobs);
44601     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
44602     +                proc datasets lib=work nolist;
44603     +                delete  _newtrainds;
44604     +                run;
44605     +                quit;
44606     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
44607     +                %let error = 3;
44608     +               %goto endtrain;
44609     +            %end;
44610     +        %end;
44612     +        %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
44613     +             %getNVar(inds=_newtrainds, nvar=_nvar);
44615     +            %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;
44616     +                %let trainnum = 2;
44617     +            %end;
44618     +            %else %do;
44619     +                %let trainnum = 1;
44620     +            %end;
44621     +        %end;
44622     +    %end;
44623     +    %else %do;
44625     +          %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
44627     +            %getNObs(inds=&EM_IMPORT_DATA, nobs=_varclus_nobs);
44629     +            %if &_varclus_nobs > &VARCLUS_MAXNUMOBS  %then %do;
44631     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
44632     +                  %let error = 3;
44633     +                 %goto endtrain;
44634     +            %end;
44635     +        %end;
44638     +         %if &EM_PROPERTY_TWOSTAGECLUS eq AUTO %then %do;
44639     +            /*%getNVar(inds=&EM_IMPORT_DATA, nvar=_nvar);
44640     +              %if &_nvar > &VARCLUS_MAXNUMVAR %then %do;*/
44641     +            %if &EM_NUM_INTERVAL_INPUT > &VARCLUS_MAXNUMVAR %then %do;
44642     +                %let trainnum = 2;
44643     +            %end;
44644     +            %else %do;
44645     +                %let trainnum = 1;
44646     +            %end;
44647     +        %end;
44649     +   %end;
44651     +    %em_checkerror();
44653     +    %if &EMEXCEPTIONSTRING ne %then %do;
44654     +       %let error = 4;
44655     +       %goto endtrain;
44656     +    %end;
44658     +    %CreateVarclusMeta(trainnum=&trainnum);
44660     +    %if &error > 0 %then  %goto endtrain;
44662     +       /* when only EM_PROPERTY_TWOSTAGECLUS eq AUTO &_triannum will be 1 or 2  */
44664     +       %if (&trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
44665     +           %train1;
44666     +       %end;
44667     +       %if (&trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
44668     +           %train2;
44669     +       %end;
44671     +      filename _in  "&EM_FILE_EMFLOWSCORECODE";
44672     +      filename _out "&EM_FILE_EMPUBLISHSCORECODE";
44673     +      data _null_;
44674     +         length line $20000;
44675     +         file _out lrecl=20000;
44676     +         fid=fopen("_in",'i',20000,'v');
44677     +         if fid > 0  then do;
44678     +            do while(^fread(fid));
44679     +               rlen = frlen(fid);
44680     +               rc= fget(fid,line,20000);
44681     +               start = length(line)-length(left(line))+1;
44682     +               line=strip(line);
44683     +               if line ne 'delete;' then do;
44684     +                  put @start line;
44685     +               end;
44686     +            end;
44687     +            if fid > 0  then rc=fclose(fid);
44688     +         end;
44689     +      run;
44690     +      filename _in;
44691     +      filename _out;
44693     +   %endtrain:
44696     +%mend train;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN1.SOURCE.
44698     +%macro VarClus(indata=,
44699     +               outstat=,
44700     +               outtree=,
44701     +               vars=,
44702     +               freq=,
44703     +               weight=,
44704     +               includeclassvar=
44705     +               );
44707     +   %if &vars eq %then
44708     +       %let vars = %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED;
44710     +        /*Add by ruzhan, May 28, 2013*/
44711     +        ods graphics on;
44712     +        %let odspath =;
44713     +        data _null_;
44714     +            path = pathname('WORK');
44715     +            call symput('odspath', path);
44716     +        run;
44717     +        ods listing gpath="&odspath";
44718     +        ods output DENDROGRAM=&outtree;
44719     +       proc varclus data = &indata outstat= &outstat
44720     +        %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
44721     +        %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
44722     +        %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
44723     +        /*-----------------------
44724     +        %if %upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT %then %do;
44725     +            %let maxc = %sysevalf(&EM_PROPERTY_MAXCLUS, int);
44726     +            %if &maxc > 1 %then %do;     maxc=&maxc %end;
44727     +       %end;
44728     +       -------------------------*/
44729     +       %if (&EM_PROPERTY_MAXCLUS ne . )  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
44730     +            maxc = &EM_PROPERTY_MAXCLUS
44731     +       %end;
44733     +       /*------------------------------------------------------------------------------------------------------
44734     +        (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) is needed because of diagram conversion from Em12.1 to 12.3
44735     +        ------------------------------------------------------------------------------------------------------*/
44737     +       %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
44738     +           ( ( &EM_PROPERTY_MAXEIGEN ne . )  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT) ) %then %do;
44739     +            maxeigen = &EM_PROPERTY_MAXEIGEN
44740     +       %end;
44742     +       %if &EM_PROPERTY_PROPORTION ne 0  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
44743     +            proportion = &EM_PROPERTY_PROPORTION
44744     +       %end;
44745     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
44746     +               summary
44747     +       %end;
44749     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
44750     +           short
44751     +       %end;
44752     +        %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
44753     +           corr trace simple
44754     +       %end;
44755     +       %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
44756     +          noprint
44757     +       %end;
44758     +        /*Comment out by ruzhan, May 28, 2013*/
44759     +       /*       outtree=&outtree*/
44760     +       ;
44761     +        var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
44763     +      %if &includeclassvar eq Y %then %do;
44764     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
44765     +          %if &dsid > 0 %then %do;
44766     +             %let nvar = %sysfunc(attrn(&dsid, NVAR));
44767     +              %do i = 2 %to &nvar;
44768     +                  %let varname = %sysfunc(varname(&dsid, &i));
44769     +                   &varname
44770     +              %end;
44772     +          %end;
44773     +      %end;
44775     +      ;
44776     +      /*------------------------
44777     +      %if &freq ne  %then %do;
44778     +          freq &freq;
44779     +      %end;
44780     +      %if &weight ne  %then %do;
44781     +          weight &weight;
44782     +      %end;
44783     +      ----------------------------*/
44784     +      %if %EM_FREQ ne %then %do;
44785     +           Freq %EM_FREQ;
44786     +      %end;
44787     +      ;
44788     +    run;
44789     +    ods graphics off;
44790     +    %endline:
44791     +    quit;
44792     +%mend VarClus;
44794     +%macro Train1;
44796     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
44797     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
44798     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
44799     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
44800     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
44801     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
44802     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
44803     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
44804     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
44805     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
44806     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
44807     +   %EM_GETNAME(key=OUTLINK, type=DATA) ;
44808     +   %EM_GETNAME(key=OUTNODE, type=DATA) ;
44810     +   /*
44811     +     %let VARCLUS_MAXNUMOBS = 100;
44812     +     %let VARCLUS_MAXNUMVAR = 200;
44813     +   */
44815     +   /* Train
44817     +   %if &EM_IMPORT_DATA eq %then %do;
44818     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
44819     +       %goto endtrain1;
44820     +   %end;
44822     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
44823     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
44824     +        %goto endtrain1;
44825     +   %end;
44826     +   */
44827     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
44828     +       /* moved this to pretrain ------------
44830     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
44831     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
44832     +                             outvar=&EM_USER_OUTDUMMY,
44833     +                             outdata=_newtrainds,
44834     +                             fileref=&EM_FILE_EMFLOWSCORECODE);
44836     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
44837     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
44838     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
44839     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
44840     +                %goto endtrain;
44841     +            %end;
44842     +        %end;
44844     +        +-------------------------------------*/
44846     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
44847     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
44848     +          There is no _newtrainds */
44849     +         %VarClus( indata=&EM_IMPORT_DATA,
44850     +                  outstat=&EM_USER_OUTSTAT,
44851     +                  outtree = &EM_USER_OUTTREE,
44852     +                  includeclassvar=N
44853     +                 );
44854     +        %end;
44855     +        %else %do;
44856     +        %VarClus( indata=_newtrainds,
44857     +                  outstat=&EM_USER_OUTSTAT,
44858     +                  outtree = &EM_USER_OUTTREE,
44859     +                  includeclassvar=Y
44860     +                 );
44861     +         proc datasets lib=work nolist;
44862     +              delete  _newtrainds;
44863     +         run;
44864     +         %end;
44865     +    %end;
44866     +    %else %do;
44868     +        /*----- moved this to pretrain ------------
44869     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
44870     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
44871     +            %if &_nobs > &VARCLUS_MAXNUMOBS ne %then %do;
44872     +                 %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning;
44873     +                 %goto endtrain;
44874     +            %end;
44875     +        %end;
44876     +        +-------------------------------------*/
44878     +        %VarClus(indata=&EM_IMPORT_DATA,
44879     +                  outstat=&EM_USER_OUTSTAT,
44880     +                  outtree =&EM_USER_OUTTREE,
44881     +                  includeclassvar=N
44882     +               );
44884     +   %end;
44886     +   %em_checkerror();
44888     +   %if &EMEXCEPTIONSTRING ne %then %do;
44889     +       %goto endtrain1;
44890     +   %end;
44891     +    /*
44892     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
44893     +    */
44895     +    %getNclusfromTrain(inoutstat=&EM_USER_OUTSTAT, nc=_nclus);
44897     +    %let gid=;
44899     +    /*--- To make the main result table ----------------------*/
44901     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORR, ncluster=&_nclus, RSquare=Y);
44902     +    %FindNextClosestClusByCluster(indata=&EM_USER_OUTCLUSCORR, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
44903     +    %MakeOwnRSquare(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
44904     +    %MakeClusStructCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSSTRUCT , ncluster=&_nclus, Rsquare=Y);
44905     +    %FindNextClosestClusByVar(indata=&EM_USER_OUTCLUSSTRUCT, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
44906     +    %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&EM_USER_OUTRSQUARE, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
44908     +   /* Inter Cluster Correlation Plot ------------------------*/
44910     +    %MakeInterClusCorrData(indata=&EM_USER_OUTSTAT, globalclusid=&gid, outdata=&EM_USER_OUTCLUSCORRPLOT, ncluster=&_nclus, RSquare=N);
44911     +    %MakePlotDataFromCorrTable(indata=&EM_USER_OUTCLUSCORRPLOT, outdata=&EM_USER_OUTCLUSCORRPLOT, globalclusid=&gid);
44913     +   /* Create some other data sets for results ----*/
44915     +   %MakeStatPlotData(statds=&EM_USER_OUTSTAT , outstatplotds=&EM_USER_OUTSTATPLOT);
44916     +   %MakeVarClusCorrData(statds=&EM_USER_OUTSTAT, corrds=&EM_USER_OUTCORR, corrplotds=&EM_USER_OUTCORRPLOT);
44917     +   %MakeClusConstellData(indata=&EM_USER_OUTRSQUARE, outlink=&EM_USER_OUTLINK, outnode=&EM_USER_OUTNODE);
44919     +  /*---- move this to Score action ------------
44920     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
44921     +   */
44923     +   /* create score code at training time */
44924     +   %CreateScoreCode(indata=&EM_USER_OUTSTAT, ncluscomp=&_nclus, fileref=&EM_FILE_EMFLOWSCORECODE);
44925     +   %endtrain1:
44926     +%mend Train1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_train2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_TRAIN2.SOURCE.
44929     +%macro VarClus2( indata=,
44930     +                 outdata=,
44931     +                 outstat =outstat,
44932     +                 outrsquare=outrsquare,
44933     +                 outtree = outtree,
44934     +                 outclusstruct = outclusstruct,
44935     +                 outcluscorr =outcluscorr,
44936     +                 outcluscorrplot =outcluscorrplot,
44937     +                 outclusrsquare =outclusrsquare,
44938     +                 outstatplot = outstatplot,
44939     +                 outcorr = outcorr,
44940     +                 outcorrplot = outcorrplot,
44941     +                 clusdata=,
44942     +                 outnode=outnode,
44943     +                 outlink=outlink,
44944     +                 ngroup =1  );
44945     +         %if (%sysfunc(exist(&indata)) or %sysfunc(exist(&indata, VIEW))) < 1 %then %do;
44946     +              %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
44947     +              %goto endline;
44948     +         %end;
44950     +        %global numglobalcluster;
44951     +        %let  numglobalcluster = &ngroup;
44952     +        %let  gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
44953     +        %do vci =1 %to &ngroup;
44954     +           data tmp_clusdata;
44955     +                set &clusdata;
44956     +                if CLUSTER ne &vci then delete;
44957     +           run;
44958     +           %let outstatds = &outstat.&vci;
44959     +           %let outrsquareds = &outrsquare.&vci;
44960     +           %let outtreeds = &outtree.&vci;
44961     +           %let outclusstuctds = &outclusstruct.&vci;
44962     +           %let outcluscorrds = &outcluscorr.&vci;
44963     +           %let outcluscorrplotds = &outcluscorrplot.&vci;
44964     +           %let outclusrsquareds = &outclussquare.&vci;
44965     +           %let outstatplotds = &outstatplot.&vci;
44966     +           %let outcorrds = &outcorr.&vci;
44967     +           %let outcorrplotds = &outcorrplot.&vci;
44968     +           %let outnodeds = &outnode.&vci;
44969     +           %let outlinkds = &outlink.&vci;
44971     +           %EM_REGISTER(KEY=&outstatds, TYPE=DATA);
44972     +           %EM_GETNAME(KEY=&outstatds, TYPE=DATA);
44973     +           %let emuseroutstat = &EM_USER_&outstatds;
44975     +           %EM_REGISTER(KEY=&outtreeds, TYPE=DATA);
44976     +           %EM_GETNAME(KEY=&outtreeds, TYPE=DATA);
44977     +           %let emuserouttree = &EM_USER_&outtreeds;
44979     +           %EM_REGISTER(KEY=&outcluscorrds, TYPE=DATA);
44980     +           %EM_GETNAME(KEY=&outcluscorrds, TYPE=DATA);
44981     +           %let emuseroutcluscorr = &EM_USER_&outcluscorrds;
44983     +           %EM_REGISTER(KEY=&outclusstuctds, TYPE=DATA);
44984     +           %EM_GETNAME(KEY=&outclusstuctds, TYPE=DATA);
44985     +           %let emuseroutclusstruct = &EM_USER_&outclusstuctds;
44987     +           %EM_REGISTER(KEY=&outrsquareds, TYPE=DATA);
44988     +           %EM_GETNAME(KEY=&outrsquareds, TYPE=DATA);
44989     +           %let emuseroutrsquare = &EM_USER_&outrsquareds;
44991     +           %EM_REGISTER(KEY=&outcluscorrplotds, TYPE=DATA);
44992     +           %EM_GETNAME(KEY=&outcluscorrplotds, TYPE=DATA);
44993     +           %let emuseroutcluscorrplot = &EM_USER_&outcluscorrplotds;
44995     +           %EM_REGISTER(KEY=&outstatplotds, TYPE=DATA);
44996     +           %EM_GETNAME(KEY=&outstatplotds, TYPE=DATA);
44997     +           %let emuseroutstatplot = &EM_USER_&outstatplotds;
44999     +           %EM_REGISTER(KEY=&outcorrds, TYPE=DATA);
45000     +           %EM_GETNAME(KEY=&outcorrds, TYPE=DATA);
45001     +           %let emuseroutcorr = &EM_USER_&outcorrds;
45003     +           %EM_REGISTER(KEY=&outcorrplotds, TYPE=DATA);
45004     +           %EM_GETNAME(KEY=&outcorrplotds, TYPE=DATA);
45005     +           %let emuseroutcorrplot = &EM_USER_&outcorrplotds;
45007     +           %EM_REGISTER(KEY=&outnodeds, TYPE=DATA);
45008     +           %EM_GETNAME(KEY=&outnodeds, TYPE=DATA);
45009     +           %let emuseroutnode = &EM_USER_&outnodeds;
45011     +           %EM_REGISTER(KEY=&outlinkds, TYPE=DATA);
45012     +           %EM_GETNAME(KEY=&outlinkds, TYPE=DATA);
45013     +           %let emuseroutlink = &EM_USER_&outlinkds;
45015     +           /*Add by ruzhan, May 28, 2013*/
45016     +           ods graphics on;
45017     +            %let odspath =;
45018     +            data _null_;
45019     +                path = pathname('WORK');
45020     +                call symput('odspath', path);
45021     +            run;
45022     +            ods listing gpath="&odspath";
45024     +           ods output DENDROGRAM=&emuserouttree;
45026     +           proc varclus data=&indata outstat=&emuseroutstat
45027     +            %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
45028     +            %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
45029     +            %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
45030     +            %if (&EM_PROPERTY_MAXCLUS ne .)  and (%upcase(&EM_PROPERTY_MAXCLUS) ne DEFAULT) %then %do;
45031     +                  maxc=&EM_PROPERTY_MAXCLUS
45032     +           %end;
45034     +            %if (%upcase(&EM_PROPERTY_CLUSCOMP) ne CENTROID) and
45035     +                ( (&EM_PROPERTY_MAXEIGEN ne .)  and (%upcase(&EM_PROPERTY_MAXEIGEN) ne DEFAULT)) %then %do;
45036     +            maxeigen = &EM_PROPERTY_MAXEIGEN
45037     +            %end;
45039     +           %if (&EM_PROPERTY_PROPORTION ne 0)  and (%upcase(&EM_PROPERTY_PROPORTION) ne DEFAULT) %then %do;
45040     +                proportion = &EM_PROPERTY_PROPORTION
45041     +           %end;
45042     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SUMMARY %then %do;
45043     +               summary
45044     +           %end;
45045     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq SHORT %then %do;
45046     +               short
45047     +           %end;
45048     +            %if %upcase(&EM_PROPERTY_PRINTOPTION) eq ALL %then %do;
45049     +               corr trace simple
45050     +           %end;
45051     +           %if %upcase(&EM_PROPERTY_PRINTOPTION) eq NONE %then %do;
45052     +               noprint
45053     +           %end;
45054     +            /*Comment out by ruzhan, May 28, 2013*/
45055     +              /*outtree=&emuserouttree*/
45056     +           ;
45057     +           var
45058     +           %let dsid=%sysfunc(open(work.tmp_clusdata));
45059     +           %let vn_name =%sysfunc(varnum(&dsid, VARIABLE));
45060     +                %do %while(^%sysfunc(fetch(&dsid)));
45061     +                    %let _varname= %sysfunc(getvarc(&dsid, &vn_name));
45062     +                    &_varname
45063     +                %end;
45064     +            %let dsid = %sysfunc(close(&dsid));
45065     +           ;
45066     +           %if %EM_FREQ ne %then %do;
45067     +           Freq %EM_FREQ;
45068     +           %end;
45069     +           run;
45070     +            ods graphics off;
45071     +            %getNclusfromTrain(inoutstat=&emuseroutstat, nc=_nclus);
45073     +            %let gid=&vci;
45074     +            /*--- To make the main result table ----------------------*/
45075     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorr, ncluster=&_nclus, RSquare=Y);
45076     +            %FindNextClosestClusByCluster(indata=&emuseroutcluscorr, outdata=_nextClusRSq, globalclusid=&gid, ncluster=&_nclus);
45077     +            %MakeOwnRSquare(indata=&emuseroutstat, globalclusid=&gid, outdata=_ownRsq, ncluster=&_nclus);
45078     +            %MakeClusStructCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutclusstruct , ncluster=&_nclus, Rsquare=Y);
45079     +            %FindNextClosestClusByVar(indata=&emuseroutclusstruct, outdata=_nextVarRSq, globalclusid=&gid, ncluster=&_nclus);
45080     +            %MakeVarClusResultTable(indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq, outdata=&emuseroutrsquare, globalclusid=&gid, ncluster=&_nclus, selectedcomp=&EM_PROPERTY_EXPORTEDCOMP);
45082     +            /* Inter Cluster Correlation Plot ------------------------*/
45084     +            %MakeInterClusCorrData(indata=&emuseroutstat, globalclusid=&gid, outdata=&emuseroutcluscorrplot, ncluster=&_nclus, RSquare=N);
45085     +            %MakePlotDataFromCorrTable(indata=&emuseroutcluscorrplot, outdata=&emuseroutcluscorrplot, globalclusid=&gid);
45087     +           /* Create some other data sets for results ---------------*/
45089     +           %MakeStatPlotData(statds=&emuseroutstat , outstatplotds=&emuseroutstatplot);
45090     +           %MakeVarClusCorrData(statds=&emuseroutstat, corrds=&emuseroutcorr, corrplotds=&emuseroutcorrplot);
45091     +           %MakeClusConstellData(indata=&emuseroutrsquare, outlink=&emuseroutlink, outnode=&emuseroutnode);
45093     +           %CreateScoreCode2(indata=&emuseroutstat, ncluscomp=&_nclus, globalclusid=&gid, fileref=&EM_FILE_EMFLOWSCORECODE);
45095     +           %CreateGClusterScoreCode(indata=&emuseroutstat,  globalclusid=&gid, fileref=&gscorefile);
45097     +           %if &vci = 1 %then %do;
45098     +           data &EM_USER_OUTRSQUARE;
45099     +                set &emuseroutrsquare;
45100     +           run;
45101     +           %end;
45102     +           %else %do;
45103     +           data &EM_USER_OUTRSQUARE;
45104     +                set &EM_USER_OUTRSQUARE &emuseroutrsquare;
45105     +           run;
45106     +           %end;
45107     +           quit;
45108     +       %end;
45110     +       /*---- move this to Score action ------------
45111     +       %MakeDeltaCode2(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
45112     +       */
45114     +       /* Make Score Gcluster component & correlation  */
45115     +       %MakeGClusterCorrelation(Indata=&indata, ngcluster=&ngroup, gscorecode=&gscorefile, outrsquare=&EM_USER_OUTRSQUARE);
45117     +       quit;
45118     +       %endline:
45119     +%mend VarClus2;
45122     +%macro Train2;
45124     +   %EM_GETNAME(key=OUTCORRPLOT, type=DATA) ;
45125     +   %EM_GETNAME(key=OUTCORR, type=DATA) ;
45126     +   %EM_GETNAME(key=OUTSTAT, type=DATA) ;
45127     +   %EM_GETNAME(key=OUTGROUP, type=DATA) ;
45128     +   %EM_GETNAME(key=OUTSTATPLOT, type=DATA) ;
45129     +   %EM_GETNAME(key=OUTTREE, type=DATA) ;
45130     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
45131     +   %EM_GETNAME(key=OUTCLUSSTRUCT, type=DATA) ;
45132     +   %EM_GETNAME(key=OUTCLUSCORR, type=DATA) ;
45133     +   %EM_GETNAME(key=OUTCLUSCORRPLOT, type=DATA) ;
45134     +   %EM_GETNAME(key=OUTCLUSRSQUARE, type=DATA) ;
45135     +   %EM_GETNAME(key=GOUTSTAT, type=DATA) ;
45136     +   %EM_GETNAME(key=GOUTTREE, type=DATA) ;
45137     +   %EM_GETNAME(key=GOUTCORR, type=DATA) ;
45138     +   %EM_GETNAME(key=GOUTGROUP, type=DATA) ;
45139     +   %EM_GETNAME(key=GOUTNODE, type=DATA) ;
45140     +   %EM_GETNAME(key=GOUTLINK, type=DATA) ;
45141     +   %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
45145     +    /* Train */
45147     +   /* moved to pretrain ------------
45149     +   %if &EM_IMPORT_DATA eq %then %do;
45150     +       %let  EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
45151     +       %goto endtrain2;
45152     +   %end;
45154     +   %if  &EM_NUM_INTERVAL_INPUT < 2 %then %do;
45155     +        %let  EMEXCEPTIONSTRING = exception.server.METADATA.USEATLEAST2INPUTREJECT;
45156     +        %goto endtrain2;
45157     +   %end;
45158     +   +-------------------------------------------*/
45160     +    %let _num_input_interval = %eval(&EM_NUM_INTERVAL_INPUT+&EM_NUM_INTERVAL_REJECTED);
45163     +    %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
45165     +        /*----- moved to pretrain ------------
45167     +        %EM_GETNAME(key=OUTDUMMY, type=DATA);
45168     +        %MakeDummyVariables( indata=&EM_IMPORT_DATA,
45169     +                             outvar=&EM_USER_OUTDUMMY,
45170     +                             outdata=_newtrainds,
45171     +                             fileref=&EM_FILE_EMFLOWSCORECODE,
45172     +                              ndummyvars=_ndummyvars
45173     +                            );
45175     +        %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
45176     +            %getNVarNObs(inds=_newtrainds, nvar=_nvar, nobs=_nobs);
45177     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
45178     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
45179     +                %goto endtrain;
45180     +            %end;
45181     +        %end;
45183     +        +---------------------------------------*/
45184     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
45185     +        /*when there is no class var and &EM_PROPERTY_INCLUDECLASSVAR eq Y
45186     +          There is no _newtrainds */
45187     +        %MakeCorrelation(    indata=&EM_IMPORT_DATA,
45188     +                             outstat=&EM_USER_GOUTSTAT,
45189     +                             corrmatrix=Y,
45190     +                             outcorr=&EM_USER_GOUTCORR,
45191     +                             includeclassvar=N,
45192     +                             freq =%EM_FREQ
45193     +                          );
45194     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
45196     +        %end;
45197     +        %else %do;
45198     +         %MakeCorrelation(   indata=_newtrainds,
45199     +                             outstat=&EM_USER_GOUTSTAT,
45200     +                             corrmatrix=Y,
45201     +                             outcorr=&EM_USER_GOUTCORR,
45202     +                             includeclassvar=Y,
45203     +                             freq =%EM_FREQ
45204     +                          );
45205     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ndummy=&_ndummyvars, ngc=_ngc);
45207     +        %end;
45209     +    %end;
45210     +    %else %do;
45212     +        /* moved to pretrain -------------------
45214     +         %if &EM_PROPERTY_SUPPRESSSAMPWARN eq N %then %do;
45215     +            %getNVarNObs(inds=&EM_IMPORT_DATA, nvar=_nvar, nobs=_nobs);
45216     +            %if &_nobs > &VARCLUS_MAXNUMOBS  %then %do;
45217     +                %let  EMEXCEPTIONSTRING = exception.server.varclus.sample.warning
45218     +                %goto endtrain;
45219     +            %end;
45220     +        %end;
45221     +         +------------------------------------------*/
45223     +        %MakeCorrelation( indata=&EM_IMPORT_DATA,
45224     +                          outstat=&EM_USER_GOUTSTAT,
45225     +                          corrmatrix=Y,
45226     +                          outcorr=&EM_USER_GOUTCORR,
45227     +                          includeclassvar=N,
45228     +                          freq =%EM_FREQ
45229     +                          );
45230     +        %getInitialGClusterNumber(ninput=&_num_input_interval, ngc=_ngc);
45231     +    %end;
45233     +   %UpdateOutStatCorrToDistance(indata=&EM_USER_GOUTSTAT, /* indata should be a outstat from proc varclus */
45234     +                                rsquare = N
45235     +                                );
45236     +   %HierClusWithCorr( indata=&EM_USER_GOUTSTAT ,
45237     +                      ncluster=&_ngc,
45238     +                      method = Ward,
45239     +                      outtree =&EM_USER_GOUTTREE,
45240     +                      idvar = _VAR_,
45241     +                      outdata=&EM_USER_GOUTGROUP,
45242     +                      rescore = N,
45243     +                      newncluster=_newnclus
45244     +                        );
45246     +   /* store the number of global cluster */
45248     +   data &EM_USER_VARCLUSMETA;
45249     +        set &EM_USER_VARCLUSMETA;
45250     +        NGCluster = &_newnclus;
45251     +   run;
45253     +   %MakeGobalConstellData(indata=&EM_USER_GOUTGROUP, outlink=&EM_USER_GOUTLINK, outnode=&EM_USER_GOUTNODE);
45255     +   %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
45256     +        %if (%sysfunc(exist(_newtrainds)) or %sysfunc(exist(_newtrainds, VIEW))) < 1 %then %do;
45257     +            %VarClus2(indata=&EM_IMPORT_DATA,
45258     +                 clusdata=&EM_USER_GOUTGROUP,
45259     +                 ngroup=&_newnclus);
45260     +         %end;
45261     +         %else %do;
45262     +             %VarClus2(indata=_newtrainds,
45263     +                 clusdata=&EM_USER_GOUTGROUP,
45264     +                 ngroup=&_newnclus);
45266     +         %end;
45268     +   %end;
45269     +   %else %do;
45270     +       %VarClus2(indata=&EM_IMPORT_DATA,
45271     +                 clusdata=&EM_USER_GOUTGROUP,
45272     +                 ngroup=&_newnclus);
45273     +   %end;
45275     +   %em_checkerror();
45276     +   %if &EMEXCEPTIONSTRING ne %then %do;
45277     +       %put &em_codebar;
45278     +       %put Error: Variable clustering failed.;
45279     +       %put &em_codebar;
45280     +       %goto endtrain2;
45281     +   %end;
45282     +   /*
45283     +    %FindClusNum(statds=&EM_USER_OUTSTAT, groupds=&EM_USER_OUTGROUP, minvariation=&EM_PROPERTY_MINVARIATION);
45284     +   */
45285     +   %endtrain2:
45286     +%mend Train2;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp catalog 'sashelp.emutil.em_copyfile.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMUTIL.EM_COPYFILE.SOURCE.
45288     +%macro em_copyfile(infref=, outfref=, append=N);
45289     +
45290     +   %if %sysfunc(fileref(&infref))=0 and %sysfunc(fileref(&outfref))<=0 %then %do;
45291     +
45292     +       %let omode =;
45293     +       %if &append=Y %then
45294     +           %let omode = MOD;
45295     +       data _null_;
45296     +          length line $20000;
45297     +          file &outfref &omode lrecl=20000;
45298     +          fid=fopen("&infref",'i',20000,'v');
45299     +          if fid > 0  then do;
45300     +             do while(^fread(fid));
45301     +                rlen = frlen(fid);
45302     +                rc= fget(fid,line,20000);
45303     +                start = length(line)-length(left(line))+1;
45304     +                line=strip(line);
45305     +                put @start line;
45306     +             end;
45307     +             if fid > 0  then rc=fclose(fid);
45308     +          end;
45309     +       run;
45310     +
45311     +   %end;
45312     +%mend em_copyfile;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
45313      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN):  ;
MPRINT(GETNOBS):   data _null_;
MPRINT(GETNOBS):   set EMWS5.Varsel_TRAIN end=eof;
MPRINT(GETNOBS):   if eof then call symput("_varclus_nobs", _N_);
MPRINT(GETNOBS):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: View EMWS5.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: There were 700 observations read from the data set EMWS5.VARSEL_TRAIN.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(GETNOBS):   quit;
MPRINT(TRAIN):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
45314      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN):  ;
MPRINT(CREATEVARCLUSMETA):  ;
MPRINT(CREATEVARCLUSMETA):   data EMWS5.VarClus_VARCLUSMETA;
MPRINT(CREATEVARCLUSMETA):   length TrainNum 8.;
MPRINT(CREATEVARCLUSMETA):   length NewTrain $8;
MPRINT(CREATEVARCLUSMETA):   length NGCluster 8.;
MPRINT(CREATEVARCLUSMETA):   length ExportedComp $16;
MPRINT(CREATEVARCLUSMETA):   length HideVariable $8;
MPRINT(CREATEVARCLUSMETA):   TrainNum = 1;
MPRINT(CREATEVARCLUSMETA):   NewTrain = "Y";
MPRINT(CREATEVARCLUSMETA):   ExportedComp = "BESTVARWITHCOMP";
MPRINT(CREATEVARCLUSMETA):   HideVariable = "Y";
MPRINT(CREATEVARCLUSMETA):   NGCluster = 0;
MPRINT(CREATEVARCLUSMETA):   run;
 
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CREATEVARCLUSMETA):   quit;
MPRINT(TRAIN):  ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(TRAIN1):   ;
MPRINT(VARCLUS):   ods graphics on;
MPRINT(VARCLUS):   data _null_;
MPRINT(VARCLUS):   path = pathname('WORK');
MPRINT(VARCLUS):   call symput('odspath', path);
MPRINT(VARCLUS):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(VARCLUS):   ods listing gpath="C:\Users\JOSECA~1\AppData\Local\Temp\SAS Temporary Files\_TD13232_DESKTOP-97HB97B_\Prc2                                                                                                                 ";
MPRINT(VARCLUS):   ods output DENDROGRAM=EMWS5.VarClus_OUTTREE;
MPRINT(VARCLUS):   proc varclus data = EMWS5.Varsel_TRAIN outstat= EMWS5.VarClus_OUTSTAT hi short ;
MPRINT(VARCLUS):   var
MPRINT(EM_INTERVAL_INPUT):   age credit_amt duration
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   ;
MPRINT(VARCLUS):   run;
 
NOTE: Clustering algorithm converged.
NOTE: Clustering algorithm converged.
NOTE: View EMWS5.VARSEL_TRAIN.VIEW used (Total process time):
      real time           1.59 seconds
      cpu time            0.20 seconds
 
NOTE: There were 700 observations read from the data set EMWS5.PART_TRAIN.
NOTE: The data set EMWS5.VARCLUS_OUTTREE has 5 observations and 3 variables.
NOTE: The data set EMWS5.VARCLUS_OUTSTAT has 25 observations and 6 variables.
NOTE: The PROCEDURE VARCLUS printed page 14.
NOTE: PROCEDURE VARCLUS used (Total process time):
      real time           1.67 seconds
      cpu time            0.20 seconds
 
 
MPRINT(VARCLUS):   ods graphics off;
MPRINT(VARCLUS):   quit;
MPRINT(TRAIN1):  ;
MPRINT(EM_CHECKERROR):   proc display c=sashelp.emutil.checkerror.scl;
MPRINT(EM_CHECKERROR):   run;
 
45315      %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_CHECKERROR):
MPRINT(TRAIN1):  ;
MPRINT(GETNCLUSFROMTRAIN):   data _null_;
MPRINT(GETNCLUSFROMTRAIN):   set EMWS5.VarClus_OUTSTAT end=eof;
MPRINT(GETNCLUSFROMTRAIN):   if eof then do;
MPRINT(GETNCLUSFROMTRAIN):   call symput("_nclus", _ncl_);
MPRINT(GETNCLUSFROMTRAIN):   end;
MPRINT(GETNCLUSFROMTRAIN):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      5:214
NOTE: There were 25 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS5.VarClus_OUTCLUSCORR(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:15
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      7:9
NOTE: There were 25 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORR has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS5.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   rename age = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label age = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename credit_amt = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label credit_amt = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster age credit_amt ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK.CORR_TMP has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS5.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTCLUSCORR;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS1 = CLUS1**2;
MPRINT(MAKEINTERCLUSCORRDATA):   CLUS2 = CLUS2**2;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORR has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data =EMWS5.VarClus_OUTCLUSCORR out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORR.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_ col1;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 4 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 4 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   data _nextClusRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   *label _NAME_ = "Variable";
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   run;
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYCLUSTER):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEOWNRSQUARE):   data _tmpds(drop= _NCL_);
MPRINT(MAKEOWNRSQUARE):   set EMWS5.VarClus_OUTSTAT;
MPRINT(MAKEOWNRSQUARE):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = "CLUS";
MPRINT(MAKEOWNRSQUARE):   rename _NAME_ = Cluster;
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Cluster Name";
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      2:77
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      2:71
NOTE: There were 25 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set WORK._TMPDS has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc transpose data =_tmpds out =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPDS.
NOTE: The data set WORK._OWNRSQ has 3 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   data _ownRsq(drop=COL1);
MPRINT(MAKEOWNRSQUARE):   length Cluster $32;
MPRINT(MAKEOWNRSQUARE):   length _NAME_ $32;
MPRINT(MAKEOWNRSQUARE):   set _ownRsq;
MPRINT(MAKEOWNRSQUARE):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEOWNRSQUARE):   rename _NAME_=Variable;
MPRINT(MAKEOWNRSQUARE):   *label _NAME_="Variable";
MPRINT(MAKEOWNRSQUARE):   label _NAME_ = "Variable" ;
MPRINT(MAKEOWNRSQUARE):   label Cluster = "Cluster" ;
MPRINT(MAKEOWNRSQUARE):   label GCluster = "Global Cluster" ;
MPRINT(MAKEOWNRSQUARE):   Cluster = "CLUS"||strip(COL1);
MPRINT(MAKEOWNRSQUARE):   rename COL2 = RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   *label COL2 = "R-Square With Own Cluster Component";
MPRINT(MAKEOWNRSQUARE):   label COL2 = "R-Square With Own Cluster Component" ;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      12:35
NOTE: Variable GCluster is uninitialized.
NOTE: There were 3 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc sort data =_ownRsq;
MPRINT(MAKEOWNRSQUARE):   by Cluster RSqWithOwnClusComp;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: There were 3 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEOWNRSQUARE):   proc datasets lib = work nolist;
MPRINT(MAKEOWNRSQUARE):   delete _tmpds;
MPRINT(MAKEOWNRSQUARE):   run;
 
NOTE: Deleting WORK._TMPDS (memtype=DATA).
MPRINT(MAKEOWNRSQUARE):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS5.VarClus_OUTCLUSSTRUCT(drop= _NCL_ _TYPE_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS5.VarClus_OUTSTAT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) eq 'STRUCTUR') then delete;
MPRINT(MAKECLUSSTRUCTCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKECLUSSTRUCTCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label _NAME_ = "Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   label GCluster = "Global Cluster" ;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      4:40
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      4:34
NOTE: Variable GCluster is uninitialized.
NOTE: There were 25 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSSTRUCT has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   data corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS5.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK.CORR_TMP has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   data EMWS5.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   set EMWS5.VarClus_OUTCLUSSTRUCT;
MPRINT(MAKECLUSSTRUCTCORRDATA):   age = age**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   credit_amt = credit_amt**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   duration = duration**2;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSSTRUCT has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSSTRUCTCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKECLUSSTRUCTCORRDATA):   delete corr_tmp;
MPRINT(MAKECLUSSTRUCTCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKECLUSSTRUCTCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data =EMWS5.VarClus_OUTCLUSSTRUCT out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSSTRUCT.
NOTE: The data set WORK._TMPCLUSRSQ has 2 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc transpose data =_tmpclusRsq out=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by cluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 2 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 6 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 6 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   length _NAME_ $32;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   _NAME_ = upcase(_NAME_);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then delete;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 6 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc sort data=_tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_ COL1;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._TMPCLUSRSQ has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   data _nextVarRSq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   set _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   by _NAME_;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   if last._NAME_ then output;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label COL1 = 'R-Sqaure with Next Cluster Component';
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label COL1 = "R-Square with Next Cluster Component" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename COL1 = RSqWithNextClusComp;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   Cluster = upcase(Cluster);
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename Cluster = ClosestCluster;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   *label Cluster = "Next Closest Cluster";
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label Cluster = "Next Closest Cluster" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   rename _NAME_ = Variable;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   label _NAME_ = "Variable" ;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMPCLUSRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   proc datasets lib = work nolist;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   delete _tmpclusRsq;
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   run;
 
NOTE: Deleting WORK._TMPCLUSRSQ (memtype=DATA).
MPRINT(FINDNEXTCLOSESTCLUSBYVAR):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_ownRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 3 observations read from the data set WORK._OWNRSQ.
NOTE: The data set WORK._OWNRSQ has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 3 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set WORK._NEXTVARRSQ has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   merge _ownRsq _nextVarRsq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'Variable';
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Type ='Type';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 3 observations read from the data set WORK._OWNRSQ.
NOTE: There were 3 observations read from the data set WORK._NEXTVARRSQ.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 3 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   set _nextClusRSq ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RSqWithOwnClusComp 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   Cluster = Variable;
MPRINT(MAKEVARCLUSRESULTTABLE):   RSqWithOwnClusComp = 1;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqWithOwnClusComp = "R-Square With Own Cluster Component" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Type $16;
MPRINT(MAKEVARCLUSRESULTTABLE):   Type = 'ClusterComp';
MPRINT(MAKEVARCLUSRESULTTABLE):   label Type = "Type" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data=EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 3 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   proc sort data =_nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set WORK._NEXTCLUSRSQ has 2 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS5.VarClus_OUTRSQUARE _nextClusRSq;
MPRINT(MAKEVARCLUSRESULTTABLE):   by Cluster;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: There were 2 observations read from the data set WORK._NEXTCLUSRSQ.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 5 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   data EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   set EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKEVARCLUSRESULTTABLE):   length RsqRatio 8.;
MPRINT(MAKEVARCLUSRESULTTABLE):   length Selected $8;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label RSqRatio = "1-R**2 Ratio";
MPRINT(MAKEVARCLUSRESULTTABLE):   label RSqRatio = "1-R2 Ratio" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   *label Selected = "Variable Selected";
MPRINT(MAKEVARCLUSRESULTTABLE):   label Selected = "Variable Selected" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
MPRINT(MAKEVARCLUSRESULTTABLE):   Selected ='YES';
MPRINT(MAKEVARCLUSRESULTTABLE):   rename _LABEL_ = Label;
MPRINT(MAKEVARCLUSRESULTTABLE):   label _LABEL_ = "Label" ;
MPRINT(MAKEVARCLUSRESULTTABLE):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSRESULTTABLE):   quit;
MPRINT(TRAIN1):  ;
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS5.VarClus_OUTCLUSCORRPLOT(drop= _NCL_ _TYPE_);
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTSTAT;
MPRINT(MAKEINTERCLUSCORRDATA):   if ^(strip(_NCL_) eq 2 and strip(_TYPE_) eq 'CCORR') then delete;
MPRINT(MAKEINTERCLUSCORRDATA):   _NAME_ = upcase(_NAME_);
MPRINT(MAKEINTERCLUSCORRDATA):   rename _NAME_ = Cluster;
MPRINT(MAKEINTERCLUSCORRDATA):   label _NAME_ = "Cluster Name";
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      118724:90
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      118724:84
NOTE: There were 25 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set WORK.CORR_TMP has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   data EMWS5.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   set EMWS5.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEINTERCLUSCORRDATA):   rename age = CLUS1;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label age = "Cluster 1";
MPRINT(MAKEINTERCLUSCORRDATA):   rename credit_amt = CLUS2;
MPRINT(MAKEINTERCLUSCORRDATA):   *label &_name ="Cluster &i_1";
MPRINT(MAKEINTERCLUSCORRDATA):   label credit_amt = "Cluster 2";
MPRINT(MAKEINTERCLUSCORRDATA):   keep Cluster age credit_amt ;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
MPRINT(MAKEINTERCLUSCORRDATA):   proc datasets lib = work nolist;
MPRINT(MAKEINTERCLUSCORRDATA):   delete corr_tmp;
MPRINT(MAKEINTERCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.CORR_TMP (memtype=DATA).
MPRINT(MAKEINTERCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc sort data =EMWS5.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 2 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   proc transpose data =EMWS5.VarClus_OUTCLUSCORRPLOT out=EMWS5.VarClus_OUTCLUSCORRPLOT(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   by cluster;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   data EMWS5.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   set EMWS5.VarClus_OUTCLUSCORRPLOT;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label x= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Y= "Cluster" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   label Correlation = "Correlation" ;
MPRINT(MAKEPLOTDATAFROMCORRTABLE):   run;
 
NOTE: There were 4 observations read from the data set EMWS5.VARCLUS_OUTCLUSCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCLUSCORRPLOT has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKESTATPLOTDATA):   data varclus_tmp(drop=_NAME_ _NCL_) ;
MPRINT(MAKESTATPLOTDATA):   set EMWS5.VarClus_OUTSTAT;
MPRINT(MAKESTATPLOTDATA):   where _type_ in('MEAN', 'STD', 'N');
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
      WHERE _type_ in ('MEAN', 'N', 'STD');
NOTE: The data set WORK.VARCLUS_TMP has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc transpose data=varclus_tmp out=EMWS5.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   id _TYPE_ ;
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set WORK.VARCLUS_TMP.
NOTE: The data set EMWS5.VARCLUS_OUTSTATPLOT has 3 observations and 5 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   data EMWS5.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   set EMWS5.VarClus_OUTSTATPLOT(obs=1000);
MPRINT(MAKESTATPLOTDATA):   label _name_= "Name";
MPRINT(MAKESTATPLOTDATA):   label _label_= "Label" ;
MPRINT(MAKESTATPLOTDATA):   if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
MPRINT(MAKESTATPLOTDATA):   else SCALEDSTD= STD ;
MPRINT(MAKESTATPLOTDATA):   label SCALEDSTD = "Scaled STD";
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTSTATPLOT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc sort data=EMWS5.VarClus_OUTSTATPLOT;
MPRINT(MAKESTATPLOTDATA):   by descending SCALEDSTD ;
MPRINT(MAKESTATPLOTDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTSTATPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTSTATPLOT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKESTATPLOTDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKESTATPLOTDATA):   delete varclus_tmp;
MPRINT(MAKESTATPLOTDATA):   run;
 
NOTE: Deleting WORK.VARCLUS_TMP (memtype=DATA).
MPRINT(MAKESTATPLOTDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS5.VarClus_OUTCORR(drop=_TYPE_ _NCL_) ;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS5.VarClus_OUTSTAT;
MPRINT(MAKEVARCLUSCORRDATA):   where _type_ eq 'CORR' ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
      WHERE _type_='CORR';
NOTE: The data set EMWS5.VARCLUS_OUTCORR has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS5.VarClus_OUTCORR;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCORR has 3 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc transpose data=EMWS5.VarClus_OUTCORR out=EMWS5.VarClus_OUTCORRPLOT name=_TMP_;
MPRINT(MAKEVARCLUSCORRDATA):   BY _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 3 observations read from the data set EMWS5.VARCLUS_OUTCORR.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 9 observations and 4 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS5.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   length _Y_ $100;
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS5.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   if _LABEL_ ne '' then _Y_=_LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   else _Y_=_TMP_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 9 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 9 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
MPRINT(MAKEVARCLUSCORRDATA):   set EMWS5.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   where _LABEL_ ne '' ;
MPRINT(MAKEVARCLUSCORRDATA):   keep _TMP_ _LABEL_ ;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 9 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
      WHERE _LABEL_ not = ' ';
NOTE: The data set WORK.VARCLUS_MATCH has 9 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data _null_;
MPRINT(MAKEVARCLUSCORRDATA):   nobs=0;
MPRINT(MAKEVARCLUSCORRDATA):   dsid = open('varclus_match');
MPRINT(MAKEVARCLUSCORRDATA):   if dsid then do;
MPRINT(MAKEVARCLUSCORRDATA):   nobs = attrn(dsid, 'NOBS');
MPRINT(MAKEVARCLUSCORRDATA):   dsid = close(dsid);
MPRINT(MAKEVARCLUSCORRDATA):   end;
MPRINT(MAKEVARCLUSCORRDATA):   call symput ('CORR_NOBS', nobs);
MPRINT(MAKEVARCLUSCORRDATA):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      7:246
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 9 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: The data set WORK.VARCLUS_MATCH has 9 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS5.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _name_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 9 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 9 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   data EMWS5.VarClus_OUTCORRPLOT(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
MPRINT(MAKEVARCLUSCORRDATA):   merge varclus_match EMWS5.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   if _X_ eq '' then _X_=_NAME_ ;
MPRINT(MAKEVARCLUSCORRDATA):   label _X_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label _Y_ = "Variable";
MPRINT(MAKEVARCLUSCORRDATA):   label col1 = "Correlation";
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
WARNING: Multiple lengths were specified for the BY variable _NAME_ by input data sets. This might cause unexpected results.
NOTE: MERGE statement has more than one data set with repeats of BY values.
NOTE: There were 9 observations read from the data set WORK.VARCLUS_MATCH.
NOTE: There were 9 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 9 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc sort data=EMWS5.VarClus_OUTCORRPLOT;
MPRINT(MAKEVARCLUSCORRDATA):   by _X_ _Y_;
MPRINT(MAKEVARCLUSCORRDATA):   run ;
 
NOTE: There were 9 observations read from the data set EMWS5.VARCLUS_OUTCORRPLOT.
NOTE: The data set EMWS5.VARCLUS_OUTCORRPLOT has 9 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEVARCLUSCORRDATA):   proc datasets lib=work nolist mt=(DATA VIEW);
MPRINT(MAKEVARCLUSCORRDATA):   delete varclus_match;
MPRINT(MAKEVARCLUSCORRDATA):   run;
 
NOTE: Deleting WORK.VARCLUS_MATCH (memtype=DATA).
MPRINT(MAKEVARCLUSCORRDATA):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS5.VarClus_OUTLINK(drop = Selected);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   LINKID = _N_;
MPRINT(MAKECLUSCONSTELLDATA):   label LINKID = "Link ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
MPRINT(MAKECLUSCONSTELLDATA):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTLINK has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKECLUSCONSTELLDATA):   data EMWS5.VarClus_OUTNODE(keep=NODEID TYPE LABEL);
MPRINT(MAKECLUSCONSTELLDATA):   set EMWS5.VarClus_OUTRSQUARE;
MPRINT(MAKECLUSCONSTELLDATA):   length TYPE $16;
MPRINT(MAKECLUSCONSTELLDATA):   rename Variable = NODEID;
MPRINT(MAKECLUSCONSTELLDATA):   label Variable= "Node ID";
MPRINT(MAKECLUSCONSTELLDATA):   if strip(upcase(Cluster)) eq strip(upcase(Variable)) then TYPE = "CLUSTER";
MPRINT(MAKECLUSCONSTELLDATA):   else TYPE="VARIABLE";
MPRINT(MAKECLUSCONSTELLDATA):   label TYPE = "Node Type";
MPRINT(MAKECLUSCONSTELLDATA):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTNODE has 5 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKECLUSCONSTELLDATA):   quit;
MPRINT(TRAIN1):  ;
MPRINT(CREATESCORECODE):  ;
MPRINT(CREATESCORECODE):   data EMWS5.VarClus_OUTSTATSCORE;
MPRINT(CREATESCORECODE):   set EMWS5.VarClus_OUTSTAT;
MPRINT(CREATESCORECODE):   if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 2 ) or (_TYPE_ in ('MEAN' 'STD'));
MPRINT(CREATESCORECODE):   if _TYPE_ = 'MEAN' then _NAME_='MEAN';
MPRINT(CREATESCORECODE):   if _TYPE_ = 'STD' then _NAME_='STD';
MPRINT(CREATESCORECODE):   DROP _TYPE_ _NCL_;
MPRINT(CREATESCORECODE):   run;
 
NOTE: There were 25 observations read from the data set EMWS5.VARCLUS_OUTSTAT.
NOTE: The data set EMWS5.VARCLUS_OUTSTATSCORE has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CREATESCORECODE):   filename _file_ "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
MPRINT(CREATESCORECODE):   data _null_;
MPRINT(CREATESCORECODE):   FILE _file_ MOD;
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put '/* ' "Varclus Score Code Begins" '*/';
MPRINT(CREATESCORECODE):   put '/*-------------------------------------------------*/';
MPRINT(CREATESCORECODE):   put ' ';
MPRINT(CREATESCORECODE):   put "Clus1 = 0 ; /*---" "Cluster Component 1" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = 0 ; /*---" "Cluster Component 2" "------ */";
MPRINT(CREATESCORECODE):   put "Clus2 = Clus2+1 * (age - 35.6457142857142)/11.4027665959311;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.55531235556365 * (credit_amt - 3376.24428571428)/2936.07117692604;";
MPRINT(CREATESCORECODE):   put "Clus1 = Clus1+0.55531235556365 * (duration - 21.1414285714285)/12.2857605429763;";
MPRINT(CREATESCORECODE):   run;
 
NOTE: The file _FILE_ is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 17:58:49,
      Create Time=28 March 2021 17:52:03
 
NOTE: 10 records were written to the file _FILE_.
      The minimum record length was 1.
      The maximum record length was 82.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(TRAIN1):  ;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename _in "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
MPRINT(TRAIN):   filename _out "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMPUBLISHSCORE.sas";
MPRINT(TRAIN):   data _null_;
MPRINT(TRAIN):   length line $20000;
MPRINT(TRAIN):   file _out lrecl=20000;
MPRINT(TRAIN):   fid=fopen("_in",'i',20000,'v');
MPRINT(TRAIN):   if fid > 0 then do;
MPRINT(TRAIN):   do while(^fread(fid));
MPRINT(TRAIN):   rlen = frlen(fid);
MPRINT(TRAIN):   rc= fget(fid,line,20000);
MPRINT(TRAIN):   start = length(line)-length(left(line))+1;
MPRINT(TRAIN):   line=strip(line);
MPRINT(TRAIN):   if line ne 'delete;' then do;
MPRINT(TRAIN):   put @start line;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   if fid > 0 then rc=fclose(fid);
MPRINT(TRAIN):   end;
MPRINT(TRAIN):   run;
 
NOTE: The file _OUT is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=28 March 2021 17:58:49,
      Create Time=28 March 2021 17:52:03
 
NOTE: 10 records were written to the file _OUT.
      The minimum record length was 1.
      The maximum record length was 82.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(TRAIN):   filename _in;
NOTE: Fileref _IN has been deassigned.
MPRINT(TRAIN):   filename _out;
NOTE: Fileref _OUT has been deassigned.
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45316      *------------------------------------------------------------*;
45317      * End TRAIN: VarClus;
45318      *------------------------------------------------------------*;
45319
 
45320      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45321      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
45322      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45323      ;
MPRINT(EM_DIAGRAM):   ;
45324      ;
MPRINT(EM_DIAGRAM):   ;
45325      ;
MPRINT(EM_DIAGRAM):   ;
45326      ;
MPRINT(EM_DIAGRAM):   ;
45327      quit;
MPRINT(EM_DIAGRAM):   quit;
45328      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45329      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
45330      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45331      /*; *"; *'; */
45332      ;
MPRINT(EM_DIAGRAM):   ;
45333      run;
MPRINT(EM_DIAGRAM):   run;
45334      quit;
MPRINT(EM_DIAGRAM):   quit;
45335      /* Reset EM Options */
45336      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
45337      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
45338      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:58:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28 March 2021
Time:                17:58:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O0UET98G "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O0UET98G new;
MPRINT(EM_DIAGRAM):   run;
45440      %let EMEXCEPTIONSTRING=;
45441      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
45442      * SCORE: VarClus;
MPRINT(EM_DIAGRAM):   * SCORE: VarClus;
45443      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
45444      %let EM_ACTION = SCORE;
45445      %let syscc = 0;
45446
45447      %macro main;
45448
45449         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
45450         %include temp;
45451         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
45452         %include temp;
45453         filename temp;
45454
45455        %SetProperties;
45456
45457         %if %upcase(&EM_ACTION) = CREATE %then %do;
45458             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
45459             %include temp;
45460             filename temp;
45461             %create;
45462         %end;
45463         %else
45464         %if %upcase(&EM_ACTION) = TRAIN %then %do;
45465              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
45466                 %include temp;
45467                 filename temp;
45468                 %train;
45469         %end;
45470         %else
45471         %if %upcase(&EM_ACTION) = SCORE %then %do;
45472                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
45473                 %include temp;
45474                 filename temp;
45475                 %score;
45476         %end;
45477         %else
45478         %if %upcase(&EM_ACTION) = REPORT %then %do;
45479                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
45480                 %include temp;
45481                 filename temp;
45482                 %report;
45483         %end;
45484         /*
45485         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
45486             %put 'OPENING TABLE';
45487         %end;
45488         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
45489             %put 'CLOSE TABLE';
45490         %end;
45491         */
45492      %mend main;
45493      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
45494     +
45495     +/* Initialize property macro variables */
45496     +%macro SetProperties;
45497     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
45498     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
45499     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
45500     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
45501     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
45502     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
45503     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
45504     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
45505     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
45506     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
45507     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
45508     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
45509     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
45510     +
45511     +%mend SetProperties;
45512     +
45513     +%Macro MakeDummyVariables(indata=,
45514     +                          outvar=,
45515     +                          outdata=,
45516     +                          fileref=,
45517     +                          recreatecmeta=N, /* optional */
45518     +                          incmeta=,     /* optional */
45519     +                          outcmeta=,    /* optional */
45520     +                          ndummyvars=_ndummyvars
45521     +                          );
45522     +    %global &ndummyvars;
45523     +
45524     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
45525     +       class
45526     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
45527     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
45528     +    ;
45529     +    run;
45530     +    %let &ndummyvars = 0;
45531     +    data _null_;
45532     +    %let dsid = %sysfunc(open(work._classout));
45533     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
45534     +    %let dsid = %sysfunc(close(&dsid));
45535     +    run;
45536     +
45537     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
45538     +       input
45539     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
45540     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
45541     +        / level=nominal stdize=no;
45542     +       make outvar = &outvar;
45543     +       score data = &indata out =&outdata;
45544     +       code  file=  "&fileref";
45545     +    run;
45546     +    %if &recreatecmeta eq Y %then %do;
45547     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
45548     +    data _tmpds;
45549     +        set _tmpds;
45550     +           ROLE = 'INPUT';
45551     +           LEVEL = 'INTERVAL';
45552     +           CREATOR='DMZIP';
45553     +           if NAME = '_TYPE_' then delete;
45554     +    run;
45555     +    data &outcmeta;
45556     +         set &incmeta _tmpds;
45557     +    run;
45558     +    %end;
45559     +    proc datasets lib=work nolist;
45560     +      delete  _dmdbdat _dmdbcat _classout
45561     +    %if &recreatecmeta eq Y %then %do;
45562     +    _tmpds
45563     +    %end;
45564     +    ;
45565     +    quit;
45566     +%Mend MakeDummyVariables;
45567     +
45568     +/*--- Determine Optimal Number of Cluster ----
45569     +%macro FindClusNum(statds=, groupds=, minvariation=);
45570     +   %global optnclus;
45571     +   data varclus_tmp(drop=_NAME_);
45572     +      set &statDs;
45573     +      where _type_ ='PROPOR';
45574     +   run;
45575     +   proc sort data=varclus_tmp;
45576     +      by _NCL_;
45577     +   run;
45578     +   proc transpose data=varclus_tmp out=varclus_tmp;
45579     +      by _NCL_;
45580     +      var %EM_INTERVAL_INPUT
45581     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
45582     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
45583     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
45584     +          %do i = 2 %to &nvar;
45585     +          %let varname = %sysfunc(varname(&dsid, &i));
45586     +          &varname
45587     +          %end;
45588     +      %end;
45589     +   ;
45590     +   run;
45591     +
45592     +   %if &minVariation eq %then %do;
45593     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
45594     +   %end;
45595     +   %if ^(0<&minVariation<100) %then %do;
45596     +       %let minVariation = 90;
45597     +   %end;
45598     +
45599     +   data _null_;
45600     +      set varclus_tmp end=eof;
45601     +      by _NCL_;
45602     +      retain flag 0;
45603     +      if first._ncl_ then flag=0;
45604     +      if .<col1 < &minVariation then flag=1;
45605     +      if last._ncl_ and ^flag then do;
45606     +         call symput('OPTNCL', _ncl_);
45607     +         stop;
45608     +      end;
45609     +     if eof then call symput('OPTNCL', _ncl_);
45610     +   run;
45611     +
45612     +   %let optnclus = &OPTNCL;
45613     +
45614     +   data varclus_tmp(drop=_NCL_ _NAME_);
45615     +      set &statDs;
45616     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
45617     +   run;
45618     +   proc sort data=varclus_tmp;
45619     +      by _TYPE_;
45620     +   run;
45621     +   proc transpose data=varclus_tmp out=varclus_tmp;
45622     +      by _TYPE_;
45623     +   run;
45624     +   proc sort data=varclus_tmp;
45625     +      by _name_ _type_;
45626     +   run;
45627     +
45628     +  proc transpose data=varclus_tmp out=&groupds;
45629     +      by _NAME_;
45630     +   run;
45631     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
45632     +      by Cluster descending Rsquare;
45633     +      where Cluster ne 0;
45634     +   run;
45635     +   proc datasets lib=work nolist mt=(DATA VIEW);
45636     +      delete varclus_tmp;
45637     +   run;
45638     +   quit;
45639     +%mend findClusNum;
45640     +*/
45641     +
45642     +%macro getNclusfromTrain(inoutstat=, nc=);
45643     +%global &nc;
45644     +data _null_;
45645     +    set &inoutstat end=eof;
45646     +    if eof then do;
45647     +    call symput("&nc", _ncl_);
45648     +    end;
45649     +run;
45650     +%mend  getNclusfromTrain;
45651     +
45652     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
45653     +
45654     +     *--- Build Code to Modify Metadata ---*;
45655     +     filename X "&deltacodefile";
45656     +     data _null_;
45657     +        FILE X;
45658     +        set &groupds end=eof;
45659     +        /*by Cluster;*/
45660     +         if _N_=1 then do;
45661     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
45662     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
45663     +           %end;
45664     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
45665     +           put "if upcase(strip(NAME)) in (";
45666     +        end;
45667     +        if Strip(upcase(Selected)) eq 'YES' then do;
45668     +           string = '"'!!trim(left(VARIABLE))!!'"';
45669     +           put string;
45670     +        end;
45671     +        if eof then do;
45672     +           put ') then ROLE="INPUT";';
45673     +           put 'else ROLE="REJECTED";';
45674     +           put 'end;';
45675     +
45676     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
45677     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
45678     +           %end;
45679     +        end;
45680     +     run;
45681     +     quit;
45682     +
45683     +     filename X;
45684     +
45685     +     quit;
45686     +%mend MakeDeltaCode;
45687     +
45688     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
45689     +    %if ^%sysfunc(exist(&statds)) %then %do;
45690     +         %goto doendc;
45691     +    %end;
45692     +
45693     +    data &corrds(drop=_TYPE_ _NCL_) ;
45694     +       set &statds;
45695     +       where _type_ eq 'CORR' ;
45696     +    run ;
45697     +    proc sort data=&corrds;
45698     +       by _NAME_ ;
45699     +    run ;
45700     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
45701     +      BY _NAME_ ;
45702     +    run ;
45703     +    data &corrplotds;
45704     +       length _Y_ $100;
45705     +       set &corrplotDs;
45706     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
45707     +    run ;
45708     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
45709     +       set &corrplotds;
45710     +       where _LABEL_ ne '' ;
45711     +       keep _TMP_ _LABEL_ ;
45712     +    run ;
45713     +    data _null_;
45714     +       nobs=0;
45715     +       dsid = open('varclus_match');
45716     +       if dsid then do;
45717     +          nobs = attrn(dsid, 'NOBS');
45718     +          dsid = close(dsid);
45719     +       end;
45720     +       call symput ('CORR_NOBS', nobs);
45721     +    run;
45722     +    %if &corr_nobs %then %do;
45723     +        proc sort data=varclus_match;
45724     +           by _name_;
45725     +        run ;
45726     +        proc sort data=&corrplotds;
45727     +           by _name_;
45728     +        run ;
45729     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
45730     +           merge varclus_match &corrplotds;
45731     +           by _NAME_ ;
45732     +           if _X_ eq '' then _X_=_NAME_ ;
45733     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
45734     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
45735     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
45736     +
45737     +       run ;
45738     +    %end;
45739     +    %else %do;
45740     +        proc sort data=&corrplotds;
45741     +           by _name_;
45742     +        run ;
45743     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
45744     +           set &corrplotds;
45745     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
45746     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
45747     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
45748     +
45749     +        run ;
45750     +    %end;
45751     +    proc sort data=&corrplotds;
45752     +       by _X_ _Y_;
45753     +    run ;
45754     +    proc datasets lib=work nolist mt=(DATA VIEW);
45755     +       delete varclus_match;
45756     +    run;
45757     +    quit;
45758     +
45759     +%doendc:
45760     +
45761     +%mend MakeVarClusCorrData;
45762     +
45763     +%macro MakeStatPlotData(statds= , outstatplotds=);
45764     +   %if %sysfunc(exist(&statds)) %then %do;
45765     +
45766     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
45767     +          set &statDs;
45768     +          where _type_ in('MEAN', 'STD', 'N');
45769     +       run ;
45770     +       proc transpose data=varclus_tmp out=&outstatplotds;
45771     +          id _TYPE_ ;
45772     +       run ;
45773     +       data &outstatplotds;
45774     +          set &outstatplotds(obs=1000);
45775     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
45776     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
45777     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
45778     +          else SCALEDSTD= STD ;
45779     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
45780     +       run ;
45781     +       proc sort data=&outstatplotds;
45782     +          by descending SCALEDSTD ;
45783     +       run ;
45784     +       proc datasets lib=work nolist mt=(DATA VIEW);
45785     +          delete varclus_tmp;
45786     +       run;
45787     +       quit;
45788     +    %end;
45789     +
45790     +%mend MakeStatPlotData;
45791     +
45792     +
45793     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
45794     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
45795     +    data &EM_USER_OUTSTATSCORE;
45796     +          set &indata;
45797     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
45798     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
45799     +          if _TYPE_ = 'STD' then _NAME_='STD';
45800     +          DROP _TYPE_ _NCL_;
45801     +     run;
45802     +
45803     +     filename _file_  "&fileRef";
45804     +
45805     +     data _null_;
45806     +        FILE _file_ MOD;
45807     +        put ' ';
45808     +        put '/*-------------------------------------------------*/';
45809     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
45810     +        put '/*-------------------------------------------------*/';
45811     +        put ' ';
45812     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
45813     +
45814     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
45815     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
45816     +
45817     +        %let k = 1;
45818     +        %do %while(^%sysfunc(fetch(&dsid)));
45819     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
45820     +                %if &k > 2 %then %do;
45821     +                 %let cn = %eval(&k-2);
45822     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
45823     +                %end;
45824     +                %let k = %eval(&k+1);
45825     +        %end;
45826     +
45827     +        %let rc = %sysfunc(rewind(&dsid));
45828     +
45829     +        %do i= 2 %to &nvar;
45830     +            %let _varname =  %sysfunc(varname(&dsid, &i));
45831     +            %do %while(^%sysfunc(fetch(&dsid)));
45832     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
45833     +                %if &_name = MEAN %then
45834     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
45835     +                %else %if &_name = STD %then
45836     +                %let _std = %sysfunc(getvarn(&dsid, &i));
45837     +                %else %do;
45838     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
45839     +                      %let abscoeff = %sysfunc(abs(&coeff));
45840     +                          %if &abscoeff >  0 %then %do;
45841     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
45842     +                           %end;
45843     +                 %end;
45844     +             %end;
45845     +             %let rc = %sysfunc(rewind(&dsid));
45846     +         %end;
45847     +
45848     +        %let dsid= %sysfunc(close(&dsid));
45849     +       run;
45850     +%mend CreateScoreCode;
45851     +
45852     +
45853     +
45854     +/*----------------------------------------------------------
45855     +    Instead of using %MakeRSquareData,
45856     +    %MakeVarClusResultTable at macro2.source is used
45857     + +----------------------------------------------------------*/
45858     +
45859     +
45860     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
45861     +
45862     +/* modifying  from ods rsquare = data */
45863     +
45864     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
45865     +    Length Cluster $16;
45866     +    length Variable $32;
45867     +    Length VariableLabel $64;
45868     +    set &indata; retain CurrentCluster;
45869     +    if NumberOfClusters ^= &ncluster then delete;
45870     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
45871     +    CurrentCluster = Cluster;
45872     +   run;
45873     +proc sort data =&outdata ;
45874     +     by Cluster RsquareRatio;
45875     +run;
45876     +data _tmprsq(drop=index);
45877     +     set &outdata; by Cluster;
45878     +     if first.Cluster then do;
45879     +     index = strip(scan(Cluster,2 ));
45880     +     Variable = "Clus"||index;
45881     +     VariableLabel = "Cluster Component "||index;
45882     +     OwnCluster = 1;
45883     +     NextClosest = .;
45884     +     RsquareRatio = 0;
45885     +     output;
45886     +     end;
45887     +run;
45888     +
45889     +proc sort data = _tmprsq ;
45890     +     by Cluster RsquareRatio;
45891     +run;
45892     +data &outdata;
45893     +     set &outdata _tmprsq;
45894     +by Cluster;
45895     +run;
45896     +
45897     +
45898     +/* Just create the Selected variable with all YES */
45899     +
45900     +data &outdata;
45901     +    set &outdata; by cluster;
45902     +    length Selected $8;
45903     +    Selected = 'YES';
45904     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
45905     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
45906     +    rename OwnCluster = RSqWithClusterComp;
45907     +    rename NextClosest = RSqWithNextClusComp;
45908     +run;
45909     +
45910     +
45911     +/* Selected = Y/N will be done %score section -----
45912     +
45913     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
45914     +data &outdata;
45915     +    set &outdata; by cluster;
45916     +    length Selected $8;
45917     +    if first.Cluster then Selected = 'YES';
45918     +    else Selected = 'NO';
45919     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
45920     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
45921     +    rename OwnCluster = RSqWithClusterComp;
45922     +    rename NextClosest = RSqWithNextClusComp;
45923     +run;
45924     +%end;
45925     +%else %do;
45926     +data &outdata;
45927     +    set &outdata; by cluster;
45928     +    if last.Cluster then Selected = 'YES';
45929     +    else Selected = 'NO';
45930     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
45931     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
45932     +    rename OwnCluster = RSqWithClusterComp;
45933     +    rename NextClosest = RSqWithNextClusComp;
45934     +run;
45935     +%end;
45936     +---------------------------------------------------------------*/
45937     +
45938     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
45939     +/* to calculate NextClosestClusRsq */
45940     +proc transpose data = &inClusRSquare  out=_clusRsq;
45941     +      by cluster;
45942     +      run;
45943     +data _clusRsq;
45944     +     set _clusRsq;
45945     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
45946     +run;
45947     +
45948     +proc sort data=_clusRsq;
45949     +    by cluster col1;
45950     +    run;
45951     +data _clusRsq(drop=_NAME_ _LABEL_);
45952     +     set _clusRsq; by cluster;
45953     +     if last.Cluster then output;
45954     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
45955     +     rename COL1 = RSqWithNextClusComp;
45956     +     rename Cluster = Variable;
45957     +     label  Cluster = "Variable";
45958     +run;
45959     +
45960     +proc sort data =&outdata;
45961     +     by Variable;
45962     +run;
45963     +data &outdata;
45964     +    merge &outdata _clusRsq;
45965     +    by Variable;
45966     +run;
45967     +proc sort data =&outdata;
45968     +by Cluster  RsquareRatio;
45969     +run;
45970     +quit;
45971     +%end;
45972     +
45973     +proc datasets lib = work nolist;
45974     +     delete _tmprsq _clusRsq;
45975     +     run;
45976     +quit;
45977     +
45978     +%mend MakeRSquareData;
45979     +
45980     +
45981     +/*-------------------------------------------------------------------------*/
45982     +
45983     +
45984     +
45985     +%macro ModifyCorr(indata=,
45986     +                  outdata=,
45987     +                  rsquare = Y
45988     +                  );
45989     +    data corr_tmp;
45990     +        set &indata;
45991     +    run;
45992     +     proc sql;
45993     +           update &indata
45994     +           set
45995     +     %let dsid = %sysfunc(open(work.corr_tmp));
45996     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
45997     +          %do i = 4 %to &nvar;
45998     +          %let _name = %sysfunc(varname(&dsid, &i));
45999     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
46000     +            %else  %let _name_md = &_name;
46001     +            %if &i < &nvar %then %do;
46002     +               &_name = 1- &_name_md ,
46003     +            %end;
46004     +            %else %do;
46005     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
46006     +            %end;
46007     +          %end;
46008     +      %let dsid= %sysfunc(close(&dsid));
46009     +
46010     +      select * from &indata;
46011     +      run;
46012     +      proc datasets lib = work nolist;
46013     +           delete corr_tmp;
46014     +      run;
46015     +      quit;
46016     +
46017     + %mend ModifyCorr;
46018     +
46019     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
46020     +    data &outdata(drop= _NCL_  _TYPE_);
46021     +       set &indata;
46022     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
46023     +       rename _NAME_ = Cluster;
46024     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
46025     +    run;
46026     +    %if &RSquare eq Y %then %do;
46027     +     data corr_tmp;
46028     +        set &outdata;
46029     +     run;
46030     +
46031     +     data &outdata(drop=i);
46032     +          set &outdata;
46033     +          %let dsid = %sysfunc(open(work.corr_tmp));
46034     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
46035     +          %do i = 2 %to &nvar;
46036     +            %let _name = %sysfunc(varname(&dsid, &i));
46037     +            %let _name_md = &_name.**2;
46038     +                &_name = &_name_md;
46039     +          %end;
46040     +      %let dsid= %sysfunc(close(&dsid));
46041     +      run;
46042     +      proc datasets lib = work nolist;
46043     +           delete corr_tmp;
46044     +      run;
46045     +
46046     +    %end;
46047     +     quit;
46048     +%mend MakeClusStructCorrData;
46049     +
46050     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
46051     +    data &outdata(drop= _NCL_  _TYPE_);
46052     +       set &indata;
46053     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
46054     +       rename _NAME_ = Cluster;
46055     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
46056     +    run;
46057     +    data corr_tmp;
46058     +        set &outdata;
46059     +    run;
46060     +
46061     +    %let dsid = %sysfunc(open(work.corr_tmp));
46062     +    %let nclus2= %eval(&ncluster+1);
46063     +    data &outdata;
46064     +         set &outdata;
46065     +          %do i = 2 %to &nclus2;
46066     +          %let i_1 = %eval(&i-1);
46067     +            %let _name = %sysfunc(varname(&dsid, &i));
46068     +            %let _newName = Clus&i_1;
46069     +                rename &_name = &_newName; ;
46070     +                *label &_name ="Cluster &i_1";
46071     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
46072     +          %end;
46073     +          keep Cluster
46074     +          %do i = 2 %to &nclus2;
46075     +                %let _name = %sysfunc(varname(&dsid, &i));
46076     +                &_name
46077     +          %end;
46078     +          ;
46079     +    %let dsid= %sysfunc(close(&dsid));
46080     +     run;
46081     +     quit;
46082     +
46083     +    %if &RSquare eq Y %then %do;
46084     +
46085     +       data corr_tmp;
46086     +        set &outdata;
46087     +     run;
46088     +
46089     +     data &outdata(drop=i);
46090     +          set &outdata;
46091     +          %let dsid = %sysfunc(open(work.corr_tmp));
46092     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
46093     +          %do i = 2 %to &nvar;
46094     +            %let _name = %sysfunc(varname(&dsid, &i));
46095     +            %let _name_md = &_name.**2;
46096     +                &_name = &_name_md;
46097     +          %end;
46098     +      %let dsid= %sysfunc(close(&dsid));
46099     +      run;
46100     +    %end;
46101     +
46102     +    %if &makeplotds eq Y %then %do;
46103     +     proc transpose data = &outdata
46104     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
46105     +          by cluster;
46106     +     run;
46107     +     data &plotds;
46108     +          set  &plotds;
46109     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
46110     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
46111     +     run;
46112     +     %end;
46113     +     proc datasets lib = work nolist;
46114     +           delete corr_tmp;
46115     +     run;
46116     +     quit;
46117     +%mend MakeInterClusCorrData;
46118     +
46119     +
46120     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
46121     +
46122     +data &outlink(drop = Selected);
46123     +     set &indata;
46124     +     LINKID = _N_;
46125     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
46126     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
46127     +run;
46128     +data &outnode(keep=NODEID TYPE LABEL);
46129     +    set &indata;
46130     +    length TYPE $16;
46131     +    rename Variable = NODEID;
46132     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
46133     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
46134     +    then  TYPE = "CLUSTER";
46135     +    else  TYPE="VARIABLE";
46136     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
46137     +run;
46138     +quit;
46139     +%mend MakeClusConstellData;
46140     +
46141     +
46142     +
46143     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
46144     +
46145     +data &outlink(drop = Selected);
46146     +     set &indata;
46147     +     LINKID = _N_;
46148     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
46149     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
46150     +run;
46151     +data &outnode(keep=NODEID TYPE LABEL);
46152     +    set &indata;
46153     +    length TYPE $16;
46154     +    rename Variable = NODEID;
46155     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
46156     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
46157     +    then  TYPE = "CLUSTER";
46158     +    else  TYPE="VARIABLE";
46159     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
46160     +run;
46161     +quit;
46162     +%mend MakeClusConstellData;
46163     +
46164     +
46165     +/*--- This will work only when inds is not a view data -------
46166     +
46167     +%macro getNVarNObs(inds=, nvar=, nobs=);
46168     +
46169     +    %global &nvar;
46170     +    %global &nobs;
46171     +    data _null_;
46172     +         dsid = open("&inds");
46173     +         nv = attrn(dsid, 'NVAR');
46174     +         no = attrn(dsid, 'NOBS');
46175     +         dsid = close(dsid);
46176     +         call symput("&nvar", nv);
46177     +         call symput("&nobs", no);
46178     +    run;
46179     +    quit;
46180     +%mend  getNVarNObs;
46181     +
46182     ++---------------------------------------------------------------*/
46183     +
46184     +
46185     +%macro getNVar(inds=, nvar=);
46186     +    %global &nvar;
46187     +    data _null_;
46188     +         dsid = open("&inds");
46189     +         nv = attrn(dsid, 'NVAR');
46190     +         dsid = close(dsid);
46191     +         call symput("&nvar", nv);
46192     +    run;
46193     +    quit;
46194     +%mend  getNVar;
46195     +
46196     +
46197     +
46198     +%macro getNObs(inds=, nobs=);
46199     +    %global &nobs;
46200     +    data _null_;
46201     +        set &inds end=eof;
46202     +        if eof then call symput("&nobs", _N_);
46203     +    run;
46204     +    quit;
46205     +%mend  getNObs;
46206     +
46207     +%Macro CreateVarclusMeta(trainnum=);
46208     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
46209     +    data &EM_USER_VARCLUSMETA;
46210     +         length TrainNum 8.;
46211     +         length NewTrain $8;
46212     +         length NGCluster 8.;
46213     +         length ExportedComp $16;
46214     +         length HideVariable $8;
46215     +         TrainNum = &trainnum;
46216     +         NewTrain = "Y";
46217     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
46218     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
46219     +         NGCluster = 0; /* zero means no twostage */
46220     +   run;
46221     +   quit;
46222     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
46223     +
46224     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
46225     +    data &outdata(drop= _NCL_  _TYPE_);
46226     +       set &indata;
46227     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
46228     +       %if &globalclusid ne %then %do;
46229     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
46230     +       rename _NAME_ = Cluster;
46231     +       %end;
46232     +       %else %do;
46233     +        _NAME_ = upcase(_NAME_);
46234     +       rename _NAME_ = Cluster;
46235     +       %end;
46236     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
46237     +    run;
46238     +    data corr_tmp;
46239     +        set &outdata;
46240     +    run;
46241     +
46242     +    %let dsid = %sysfunc(open(work.corr_tmp));
46243     +    %let nclus2= %eval(&ncluster+1);
46244     +    data &outdata;
46245     +         set &outdata;
46246     +          %do i = 2 %to &nclus2;
46247     +          %let i_1 = %eval(&i-1);
46248     +            %let _name = %sysfunc(varname(&dsid, &i));
46249     +            %if &globalclusid ne %then
46250     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
46251     +                     rename &_name = &_newName;
46252     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
46253     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
46254     +                %end;
46255     +            %else
46256     +                %do; %let _newName = CLUS&i_1;
46257     +                     rename &_name = &_newName;
46258     +                     *label &_name ="Cluster &i_1";
46259     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
46260     +                %end;
46261     +          %end;
46262     +          keep Cluster
46263     +          %do i = 2 %to &nclus2;
46264     +                %let _name = %sysfunc(varname(&dsid, &i));
46265     +                &_name
46266     +          %end;
46267     +          ;
46268     +    %let dsid= %sysfunc(close(&dsid));
46269     +     run;
46270     +     quit;
46271     +
46272     +    %if &RSquare eq Y %then %do;
46273     +
46274     +       data corr_tmp;
46275     +        set &outdata;
46276     +     run;
46277     +
46278     +     data &outdata;
46279     +          set &outdata;
46280     +          %let dsid = %sysfunc(open(work.corr_tmp));
46281     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
46282     +          %do i = 2 %to &nvar;
46283     +            %let _name = %sysfunc(varname(&dsid, &i));
46284     +            %let _name_md = &_name.**2;
46285     +                &_name = &_name_md;
46286     +          %end;
46287     +      %let dsid= %sysfunc(close(&dsid));
46288     +      run;
46289     +    %end;
46290     +
46291     +    %if &makeplotds eq Y %then %do;
46292     +     proc transpose data = &outdata
46293     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
46294     +          by cluster;
46295     +     run;
46296     +     data &plotds;
46297     +          set  &plotds;
46298     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
46299     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
46300     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
46301     +     run;
46302     +     %end;
46303     +     proc datasets lib = work nolist;
46304     +           delete corr_tmp;
46305     +     run;
46306     +     quit;
46307     +%mend MakeInterClusCorrData;
46308     +
46309     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
46310     +    data _tmpds(drop= _NCL_);
46311     +       set &indata;
46312     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
46313     +       %if &globalclusid ne %then %do;
46314     +           _NAME_ = "GC&globalclusid.";
46315     +       rename _NAME_ = Cluster;
46316     +       %end;
46317     +       %else %do;
46318     +        _NAME_ = "CLUS";
46319     +        rename _NAME_ = Cluster;
46320     +       %end;
46321     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
46322     +    run;
46323     +    proc transpose data =_tmpds out =&outdata;
46324     +    run;
46325     +
46326     +    data &outdata(drop=COL1);
46327     +        %if &globalclusid ne %then %do;
46328     +        length GCluster $16;
46329     +        %end;
46330     +        length Cluster $32;
46331     +        length _NAME_ $32;
46332     +         set &outdata;
46333     +         _NAME_ = upcase(_NAME_);
46334     +         rename _NAME_=Variable;
46335     +         *label _NAME_="Variable";
46336     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
46337     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
46338     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
46339     +
46340     +         %if &globalclusid ne %then %do;
46341     +          GCluster = "GC&globalclusid";
46342     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
46343     +         %end;
46344     +         %else %do;
46345     +         Cluster = "CLUS"||strip(COL1);
46346     +        %end;
46347     +         rename COL2 = RSqWithOwnClusComp;
46348     +         *label COL2 = "R-Square With Own Cluster Component";
46349     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
46350     +
46351     +   run;
46352     +   proc sort data =&outdata;
46353     +        by Cluster RSqWithOwnClusComp;
46354     +   run;
46355     +   proc datasets lib = work nolist;
46356     +           delete _tmpds;
46357     +   run;
46358     +   quit;
46359     +%mend MakeOwnRSquare;
46360     +
46361     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
46362     +    data &outdata(drop= _NCL_  _TYPE_);
46363     +       %if &globalclusid ne %then %do;
46364     +        length GCluster $16;
46365     +        %end;
46366     +       set &indata;
46367     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
46368     +       %if &globalclusid ne %then %do;
46369     +         GCluster = "GC&globalclusid";
46370     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
46371     +         rename _NAME_ = Cluster;
46372     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
46373     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
46374     +
46375     +       %end;
46376     +       %else %do;
46377     +         _NAME_ = upcase(_NAME_);
46378     +         rename _NAME_ = Cluster;
46379     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
46380     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
46381     +
46382     +       %end;
46383     +     run;
46384     +    %if &RSquare eq Y %then %do;
46385     +     data corr_tmp;
46386     +          set &outdata;
46387     +     run;
46388     +     %let istart = 2;
46389     +     %if &globalclusid ne %then %let istart = 3;
46390     +     data &outdata;
46391     +          set &outdata;
46392     +          %let dsid = %sysfunc(open(work.corr_tmp));
46393     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
46394     +          %do i =&istart %to &nvar;
46395     +            %let _name = %sysfunc(varname(&dsid, &i));
46396     +            %let _name_md = &_name.**2;
46397     +                &_name = &_name_md;
46398     +          %end;
46399     +      %let dsid= %sysfunc(close(&dsid));
46400     +      run;
46401     +      proc datasets lib = work nolist;
46402     +           delete corr_tmp;
46403     +      run;
46404     +    %end;
46405     +     quit;
46406     +%mend MakeClusStructCorrData;
46407     +
46408     +/*
46409     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
46410     +*/
46411     +
46412     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
46413     +
46414     +     /* The indata should be the outdata
46415     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
46416     +
46417     +     proc sort data =&indata out=_tmpclusRsq;
46418     +     by cluster;
46419     +     run;
46420     +
46421     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
46422     +      by cluster;
46423     +     run;
46424     +
46425     +     proc sort data=_tmpclusRsq;
46426     +        by _NAME_ COL1;
46427     +     run;
46428     +
46429     +     data _tmpclusRsq;
46430     +         length _NAME_ $32;
46431     +         set _tmpclusRsq; by _NAME_;
46432     +          _NAME_ = upcase(_NAME_);
46433     +          %if &ncluster ne 1 %then %do;
46434     +             if last._NAME_ then delete;
46435     +          %end;
46436     +          %else %do;
46437     +             COL1 = 0;
46438     +          %end;
46439     +     run;
46440     +     /* need to sort again */
46441     +     proc sort data=_tmpclusRsq;
46442     +        by _NAME_ COL1;
46443     +     run;
46444     +
46445     +     data &outdata;
46446     +         set _tmpclusRsq; by _NAME_;
46447     +         Cluster = upcase(Cluster);
46448     +         if last._NAME_ then output;
46449     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
46450     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
46451     +         rename COL1 = RSqWithNextClusComp;
46452     +         Cluster = upcase(Cluster);
46453     +         rename Cluster = ClosestCluster;
46454     +         *label  Cluster = "Next Closest Cluster";
46455     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
46456     +         rename _NAME_ = Variable;
46457     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
46458     +    run;
46459     +
46460     +
46461     +    %if &globalclusid ne %then %do;
46462     +    data &outdata;
46463     +       length GCluster $16;
46464     +       set &outdata;
46465     +       GCluster = "GC&globalclusid";
46466     +       run;
46467     +    %end;
46468     +    proc datasets lib = work nolist;
46469     +           delete _tmpclusRsq;
46470     +    run;
46471     +    quit;
46472     +%mend FindNextClosestClusByVar;
46473     +
46474     +
46475     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
46476     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
46477     +     proc sort data =&indata out=_tmpclusRsq;
46478     +     by cluster;
46479     +     run;
46480     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
46481     +     by cluster;
46482     +     run;
46483     +     proc sort data=_tmpclusRsq;
46484     +        by _NAME_ col1;
46485     +     run;
46486     +     data _tmpclusRsq;
46487     +         length _NAME_ $32;
46488     +         set _tmpclusRsq; by _NAME_;
46489     +          _NAME_ = upcase(_NAME_);
46490     +          %if &ncluster ne 1 %then %do;
46491     +             if last._NAME_ then delete;
46492     +          %end;
46493     +          %else %do;
46494     +             COL1 = 0;
46495     +          %end;
46496     +     run;
46497     +     data &outdata;
46498     +         set _tmpclusRsq; by _NAME_;
46499     +         Cluster = upcase(Cluster);
46500     +         if last._NAME_ then output;
46501     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
46502     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
46503     +         rename COL1 = RSqWithNextClusComp;
46504     +         Cluster = upcase(Cluster);
46505     +         rename Cluster = ClosestCluster;
46506     +         *label  Cluster = "Next Closest Cluster";
46507     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
46508     +         rename _NAME_ = Variable;
46509     +         *label  _NAME_ = "Variable";
46510     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
46511     +
46512     +    run;
46513     +    %if &globalclusid ne %then %do;
46514     +    data &outdata;
46515     +       length GCluster $16;
46516     +       set &outdata;
46517     +       GCluster = "GC&globalclusid";
46518     +       run;
46519     +    %end;
46520     +
46521     +    proc datasets lib = work nolist;
46522     +           delete _tmpclusRsq;
46523     +    run;
46524     +
46525     +    quit;
46526     +%mend FindNextClosestClusByCluster;
46527     +
46528     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
46529     +/*----
46530     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
46531     +-----------*/
46532     +
46533     +proc sort data =&indata1;
46534     +    by Variable;
46535     +run;
46536     +proc sort data =&indata2;
46537     +    by Variable;
46538     +run;
46539     +data &outdata;
46540     +    merge &indata1 &indata2;
46541     +    by Variable;
46542     +    length Type $16;
46543     +    Type = 'Variable';
46544     +    *label Type ='Type';
46545     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
46546     +run;
46547     +
46548     +
46549     +data &indata3;
46550     +    set  &indata3 ;
46551     +    length RSqWithOwnClusComp 8.;
46552     +    Cluster = Variable;
46553     +    RSqWithOwnClusComp = 1;
46554     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
46555     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
46556     +    length Type $16;
46557     +    Type = 'ClusterComp';
46558     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
46559     +
46560     +;
46561     +run;
46562     +
46563     +proc sort data=&outdata;
46564     +    by Cluster;
46565     +run;
46566     +proc sort data =&indata3;
46567     +    by Cluster;
46568     +run;
46569     +
46570     +data &outdata;
46571     +     set &outdata &indata3;
46572     +     by Cluster;
46573     +run;
46574     +
46575     +
46576     +/* Create the Selected variable with all YES */
46577     +
46578     +data &outdata;
46579     +     set &outdata;
46580     +     length RsqRatio 8.;
46581     +     length Selected $8;
46582     +     *label RSqRatio = "1-R**2 Ratio";
46583     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
46584     +     *label Selected = "Variable Selected";
46585     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
46586     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
46587     +     Selected ='YES';
46588     +     rename _LABEL_ = Label;
46589     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
46590     +run;
46591     +
46592     +
46593     +/*----  Selected = Y/N will be assigened at the %score                   -------+
46594     +        Just create the Selected variable with all YES at the step above
46595     + +------------------------------------------------------------------------------+
46596     +
46597     +proc sort data=&outdata;
46598     +    by Cluster RsqRatio;
46599     +run;
46600     +
46601     +%if &selectedcomp eq CLUSTERCOMP %then %do;
46602     +data &outdata;
46603     +     set &outdata; by Cluster;
46604     +     length Selected $8;
46605     +     label Selected = "Variable Selected";
46606     +     if  first.Cluster then Selected ='Yes';
46607     +     else Selected = 'No';
46608     +    run;
46609     +%end;
46610     +%else %do;
46611     +data &outdata(drop = _var _varchange);
46612     +     set &outdata; retain _var 0; by Cluster;
46613     +     length Selected $8;
46614     +     label Selected = "Variable Selected";
46615     +     if first.Cluster then  _varchange = 0;
46616     +     else _varchange =1;
46617     +     if _var ne _varchange then  Selected  = 'Yes';
46618     +     else Selected = 'No';
46619     +     if last.cluster then  _var = 0;
46620     +     else _var = _varchange;
46621     +run;
46622     +%end;
46623     +
46624     +--------------------------------------------------------------*/
46625     +
46626     +quit;
46627     +%mend MakeVarClusResultTable;
46628     +
46629     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
46630     +     proc sort data =&indata;
46631     +        by cluster;
46632     +     run;
46633     +     proc transpose data =&indata
46634     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
46635     +          by cluster;
46636     +     run;
46637     +     data &outdata;
46638     +          set  &outdata;
46639     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
46640     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
46641     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
46642     +     run;
46643     +     %if &globalclusid ne %then %do;
46644     +     data &outdata;
46645     +          Length GCluster $16;
46646     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
46647     +          set  &outdata;
46648     +          GCluster ="GC&globalclusid.";
46649     +          run;
46650     +     %end;
46651     +
46652     +%Mend MakePlotDataFromCorrTable;
46653     +
46654     +
46655     +%macro MakeCorrelation(indata=,
46656     +                       outstat=_tmpoutstat,
46657     +                       corrmatrix=N,
46658     +                       outcorr=_tmpoutcorr,
46659     +                       includeclassvar=N,
46660     +                       target=,
46661     +                       freq=,
46662     +                       weight=);
46663     +   %if &target eq  %then %do;
46664     +
46665     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
46666     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
46667     +       %if &includeclassvar eq Y %then %do;
46668     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
46669     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
46670     +          %do i = 2 %to &nvar;
46671     +          %let varname = %sysfunc(varname(&dsid, &i));
46672     +          &varname
46673     +          %end;
46674     +       %end;
46675     +       ;
46676     +      %if &freq ne  %then %do;
46677     +          freq &freq;
46678     +      %end;
46679     +      %if &weight ne  %then %do;
46680     +          weight &weight;
46681     +      %end;
46682     +
46683     +      run;
46684     +      %if &corrmatrix eq Y %then %do;
46685     +      data  &outcorr (drop = _NCL_ _TYPE_);
46686     +           set  &outstat ;
46687     +           if _TYPE_ ='CORR' then output;
46688     +      run;
46689     +      %end;
46690     +    %end;
46691     +    %else %do;
46692     +       proc corr data=&indata outp=&outstat noprint;
46693     +            var
46694     +       %let dsid = %sysfunc(open(&indata));
46695     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
46696     +          %do i = 1 %to &nvar;
46697     +              %let _name = %sysfunc(varname(&dsid, &i));
46698     +              %if &_name ne &target %then;
46699     +              &_name
46700     +           %end;
46701     +        %let dsid= %sysfunc(close(&dsid));
46702     +        ;
46703     +        with &target;
46704     +        run;
46705     +    %end;
46706     +    quit;
46707     +%mend MakeCorrelation;
46708     +
46709     +
46710     +%macro MakeCorrelationDistance(indata=,
46711     +                               outdata=,
46712     +                               rsquare = N
46713     +                               );
46714     +    data corr_tmp;
46715     +        set &indata;
46716     +        if _N_ = 1 then do;
46717     +           output;
46718     +           stop;
46719     +         end;
46720     +    run;
46721     +    %if &outdata ne  %then %let  _outdata = &outdata;
46722     +    %else %let _outdata = &indata;
46723     +
46724     +    data &_outdata;
46725     +         set &indata;
46726     +
46727     +         %let dsid = %sysfunc(open(work.corr_tmp));
46728     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
46729     +          %do i = 2 %to &nvar;
46730     +              %let _name = %sysfunc(varname(&dsid, &i));
46731     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
46732     +              %else  %let _name_md = &_name;
46733     +              &_name = 1- &_name_md;
46734     +          %end;
46735     +      %let dsid= %sysfunc(close(&dsid));
46736     +      run;
46737     +      proc datasets lib = work nolist;
46738     +           delete corr_tmp;
46739     +      run;
46740     +      quit;
46741     +  %mend MakeCorrelationDistance;
46742     +
46743     +
46744     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
46745     +                                   rsquare = N
46746     +                                   );
46747     +    data corr_tmp;
46748     +        set &indata;
46749     +    run;
46750     +    proc sql noprint;
46751     +           update &indata
46752     +           set
46753     +     %let dsid = %sysfunc(open(work.corr_tmp));
46754     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
46755     +          %do i = 4 %to &nvar;
46756     +          %let _name = %sysfunc(varname(&dsid, &i));
46757     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
46758     +            %else  %let _name_md = &_name;
46759     +            %if &i < &nvar %then %do;
46760     +               &_name = 1- &_name_md ,
46761     +            %end;
46762     +            %else %do;
46763     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
46764     +            %end;
46765     +          %end;
46766     +      %let dsid= %sysfunc(close(&dsid));
46767     +
46768     +      select * from &indata;
46769     +      run;
46770     +     data &indata( drop = _NCL_);
46771     +           set &indata;
46772     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
46773     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
46774     +     run;
46775     +     data &indata(DROP = _NCL_);
46776     +           set &indata;
46777     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
46778     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
46779     +           rename _NAME_ = _VAR_;
46780     +     run;
46781     +     proc datasets lib = work nolist;
46782     +           delete corr_tmp;
46783     +     run;
46784     +     quit;
46785     + %mend UpdateOutStatCorrToDistance;
46786     +
46787     +
46788     +%macro HierClusWithCorr(indata= ,
46789     +                        ncluster=,
46790     +                        method = Ward,
46791     +                        outtree = _outtree,
46792     +                        idvar =_VAR_,
46793     +                        outdata=,
46794     +                        rescore = N,
46795     +                        newncluster=
46796     +                        );
46797     +      %global &newncluster;
46798     +      %if &rescore ne Y %then %do;
46799     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
46800     +                   method=&method outtree=&outtree noprint;
46801     +           id &idvar;
46802     +      run;
46803     +      %end;
46804     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
46805     +      run;
46806     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
46807     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
46808     +      run;
46809     +      data _outcontent;
46810     +          set _outcontent;
46811     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
46812     +          index = 1;
46813     +          rename NAME = _NAME_;
46814     +      run;
46815     +      proc sort data=_outcontent;
46816     +          by _NAME_;
46817     +      run;
46818     +      proc sort data =&outdata;
46819     +           by _NAME_;
46820     +      run;
46821     +      data &outdata(drop=index);
46822     +          merge &outdata _outcontent;
46823     +          by _NAME_;
46824     +          if index = . then delete;
46825     +      run;
46826     +      /*-----------------------------------------------------------*/
46827     +      data &outdata;
46828     +           length CLUSNAME $16;
46829     +           set &outdata;
46830     +           if CLUSTER > &ncluster then delete;
46831     +           CLUSNAME='GC'||strip(CLUSTER);
46832     +           *label CLUSNAME = "Cluster Name";
46833     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
46834     +           rename _NAME_ = VARIABLE ;
46835     +           *label _NAME_ = "Variable";
46836     +           *label CLUSTER = "Cluster";
46837     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
46838     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
46839     +      run;
46840     +      proc sort data=&outdata out=&outdata;
46841     +           by CLUSTER;
46842     +      run;
46843     +      proc means data =&outdata noprint;
46844     +           output out=_meanout;
46845     +      run;
46846     +      data _null_;
46847     +            set _meanout;
46848     +            if strip(_STAT_) eq 'MAX' then do;
46849     +            call symput("&newncluster", CLUSTER);
46850     +            stop;
46851     +            end;
46852     +      run;
46853     +
46854     +      proc datasets lib = work nolist;
46855     +           delete _outcontent _meanout;
46856     +      run;
46857     +      quit;
46858     +%mend  HierClusWithCorr;
46859     +
46860     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
46861     +
46862     +     data _tmpindata;
46863     +          set &indata;
46864     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
46865     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
46866     +          if _TYPE_ = 'STD' then _NAME_='STD';
46867     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
46868     +          DROP _TYPE_ _NCL_;
46869     +     run;
46870     +
46871     +     filename _file_  "&fileRef";
46872     +
46873     +     data _null_;
46874     +        FILE _file_ MOD;
46875     +        put ' ';
46876     +        put "/*-------------------------------------------------*/";
46877     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
46878     +        put "/*-------------------------------------------------*/";
46879     +        put ' ';
46880     +        %let dsid = %sysfunc(open(work._tmpindata));
46881     +
46882     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
46883     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
46884     +        %let k = 1;
46885     +        %do %while(^%sysfunc(fetch(&dsid)));
46886     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
46887     +               %if &k > 2 %then %do;
46888     +                %let cn = %eval(&k-2);
46889     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
46890     +                %end;
46891     +                %let k = %eval(&k+1);
46892     +
46893     +        %end;
46894     +        %let rc = %sysfunc(rewind(&dsid));
46895     +
46896     +        %do j= 2 %to &nvar;
46897     +            %let _varname = %sysfunc(varname(&dsid, &j));
46898     +            %do %while(^%sysfunc(fetch(&dsid)));
46899     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
46900     +                %if &_name = MEAN %then
46901     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
46902     +                %else %if &_name = STD %then
46903     +                %let _std = %sysfunc(getvarn(&dsid, &j));
46904     +                %else %do;
46905     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
46906     +                      %let abscoeff = %sysfunc(abs(&coeff));
46907     +                          %if &abscoeff >  0 %then %do;
46908     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
46909     +                           %end;
46910     +                 %end;
46911     +             %end;
46912     +             %let rc = %sysfunc(rewind(&dsid));
46913     +         %end;
46914     +
46915     +        %let dsid= %sysfunc(close(&dsid));
46916     +
46917     +     run;
46918     +
46919     +     filename _file_;
46920     +     proc datasets lib = work nolist;
46921     +           delete _tmpindata;
46922     +     run;
46923     +     quit;
46924     +%mend CreateScoreCode2;
46925     +
46926     +
46927     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
46928     +
46929     +     /*--- Build Code to Modify Metadata ---*/
46930     +     filename X "&deltacodefile";
46931     +     data _null_;
46932     +        FILE X;
46933     +        set &groupds end=eof;
46934     +        if _N_=1 then do;
46935     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
46936     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
46937     +           %end;
46938     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
46939     +           put "if upcase(strip(NAME)) in (";
46940     +        end;
46941     +        if Strip(upcase(Selected)) eq 'YES' then do;
46942     +           string = '"'!!trim(left(VARIABLE))!!'"';
46943     +           put string;
46944     +        end;
46945     +        if eof then do;
46946     +           put ') then ROLE="INPUT";';
46947     +           put 'else ROLE="REJECTED";';
46948     +           put 'end;';
46949     +
46950     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
46951     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
46952     +           %end;
46953     +        end;
46954     +     run;
46955     +     quit;
46956     +
46957     +     filename X;
46958     +     quit;
46959     +%mend MakeDeltaCode2;
46960     +
46961     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
46962     +  %global &ngc;
46963     +  data _null_;
46964     +  %if &indata ne %then %do;
46965     +      %let dsid = %sysfunc(open(&indata));
46966     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
46967     +      %let dsid = %sysfunc(close(&dsid));
46968     +  %end;
46969     +  %else %do;
46970     +       %let nvar = %eval(&ninput+&ndummy); ;
46971     +  %end;
46972     +  %let numgc = %eval(&nvar/&div+2);
46973     +  %let &ngc = &numgc;
46974     +   run;
46975     +  quit;
46976     +%mend getInitialGClusterNumber;
46977     +
46978     +
46979     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
46980     +data &outlink(drop = Selected);
46981     +     set &indata;
46982     +     LINKID = _N_;
46983     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
46984     +run;
46985     +data &outnode(keep=NODEID TYPE LABEL);
46986     +    set &indata;
46987     +    length TYPE $16;
46988     +    rename VARIABLE = NODEID;
46989     +    *label  CLUSNAME="Node ID";
46990     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
46991     +    TYPE = "VARIABLE";
46992     +    *label TYPE = "Node Type";
46993     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
46994     +    run;
46995     +data _tmp(keep=NODEID TYPE LABEL);
46996     +    set &indata;
46997     +    length TYPE $16;
46998     +    rename CLUSNAME = NODEID;
46999     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
47000     +    TYPE = "GCLUSTER";
47001     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
47002     +    run;
47003     +proc sort data=_tmp;
47004     +    by NODEID;
47005     +run;
47006     +data _tmp;
47007     +    set _tmp; by NODEID;
47008     +    if first.NODEID then output;
47009     +run;
47010     +proc sort data=&outnode;
47011     +    by NODEID;
47012     +run;
47013     +data  &outnode;
47014     +    set _tmp &outnode;
47015     +run;
47016     +proc datasets lib = work nolist;
47017     +     delete _tmp;
47018     +run;
47019     +quit;
47020     +%mend MakeGobalConstellData;
47021     +
47022     +/* Make contellation plot data among GCLUSTERS */
47023     +
47024     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
47025     +
47026     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
47027     +     set &indata;
47028     +     LINKID = _N_;
47029     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
47030     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
47031     +     end;
47032     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
47033     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
47034     +     end;
47035     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
47036     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
47037     +    end;
47038     +run;
47039     +
47040     +data _tmp_outrsquare;
47041     +        set &inoutrsq;
47042     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
47043     +run;
47044     +
47045     +proc freq data =_tmp_outrsquare noprint;
47046     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
47047     +run;
47048     +
47049     +data &outnode(keep=_NAME_ TYPE LABEL);
47050     +    set &outlink;
47051     +    length TYPE $16;
47052     +    length LABEL $100;
47053     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
47054     +
47055     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
47056     +    TYPE = "GCLUSTER";
47057     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
47058     +    end;
47059     +    else do;
47060     +    TYPE= "ROOT";
47061     +    LABEL= _NAME_;
47062     +    end;
47063     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
47064     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
47065     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
47066     +    run;
47067     +
47068     +proc sort data=&outnode;
47069     +     by _NAME_;
47070     +proc sort data=_tmp_GCLUSFREQ;
47071     +     by _NAME_;
47072     +run;
47073     +
47074     +data  &outnode;
47075     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
47076     +     if COUNT=. then COUNT=1;
47077     +run;
47078     +
47079     +proc datasets lib = work nolist;
47080     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
47081     +run;
47082     +
47083     +quit;
47084     +%Mend MakeGClusterConstData;
47085     +
47086     +
47087     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
47088     +
47089     +    data _gscoretmpds;
47090     +          set &indata;
47091     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
47092     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
47093     +          if _TYPE_ = 'STD' then _NAME_='STD';
47094     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
47095     +          DROP _TYPE_ _NCL_;
47096     +     run;
47097     +
47098     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
47099     +        GCluster Component &globalclusid ------ */
47100     +
47101     +    filename _file_  "&fileref";
47102     +
47103     +    data _null_;
47104     +        %if &globalclusid eq 1 %then %do;
47105     +          FILE _file_;
47106     +        %end;
47107     +        %else %do;
47108     +          FILE _file_ MOD;
47109     +        %end;
47110     +
47111     +        %let dsid = %sysfunc(open(work._gscoretmpds));
47112     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
47113     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
47114     +
47115     +        %let k = 1;
47116     +        %do %while(^%sysfunc(fetch(&dsid)));
47117     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
47118     +                %if &k > 2 %then %do;
47119     +                put "&_name = 0 ; ";
47120     +                %end;
47121     +                %let k = %eval(&k+1);
47122     +        %end;
47123     +
47124     +        %let rc = %sysfunc(rewind(&dsid));
47125     +        %do i= 2 %to &nvar;
47126     +            %let _varname =  %sysfunc(varname(&dsid, &i));
47127     +            %do %while(^%sysfunc(fetch(&dsid)));
47128     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
47129     +                %if &_name = MEAN %then
47130     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
47131     +                %else %if &_name = STD %then
47132     +                %let _std = %sysfunc(getvarn(&dsid, &i));
47133     +                %else %do;
47134     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
47135     +                      %let abscoeff = %sysfunc(abs(&coeff));
47136     +                          %if &abscoeff >  0 %then %do;
47137     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
47138     +                           %end;
47139     +                 %end;
47140     +             %end;
47141     +             %let rc = %sysfunc(rewind(&dsid));
47142     +
47143     +         %end;
47144     +
47145     +        %let dsid= %sysfunc(close(&dsid));
47146     +       run;
47147     +
47148     +
47149     +       proc datasets lib=work nolist;
47150     +            delete _gscoretmpds;
47151     +       run;
47152     +      quit;
47153     +
47154     +%mend CreateGClusterScoreCode;
47155     +
47156     +
47157     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
47158     +
47159     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
47160     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
47161     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
47162     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
47163     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
47164     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
47165     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
47166     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
47167     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
47168     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
47169     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
47170     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
47171     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
47172     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
47173     +
47174     +   filename gsfile "&gscorecode";
47175     +
47176     +   data &EM_USER_GSCORE;
47177     +             set &indata;
47178     +             %include  gsfile;
47179     +        keep
47180     +        %do i=1 %to &ngcluster;
47181     +         %let gcvarname = GC&i;
47182     +         &gcvarname
47183     +        %end;
47184     +     ;
47185     +   run;
47186     +
47187     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
47188     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
47189     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
47190     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
47191     +    noprint  ;
47192     +     var
47193     +       %do i=1 %to &ngcluster;
47194     +         %let gcvarname = GC&i;
47195     +         &gcvarname
47196     +        %end;
47197     +   ;
47198     +   run;
47199     +
47200     +
47201     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
47202     +   data &EM_USER_GSCORECORRPLOT ;
47203     +        set &EM_USER_GSCORECORRPLOT;
47204     +        rename _X_ = X;
47205     +        rename _Y_ = Y;
47206     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
47207     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
47208     +   run;
47209     +
47210     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
47211     +
47212     +   data &EM_USER_GSCORETREE;
47213     +        length _NAME_ $32;
47214     +        length _LABEL_ $100;
47215     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
47216     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
47217     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
47218     +        end;else do;
47219     +         _LABEL_ = _NAME_;
47220     +        end;
47221     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
47222     +
47223     +   run;
47224     +
47225     +   quit;
47226     +
47227     +%mend MakeGClusterCorrelation;
47228     +
47229     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE.SOURCE.
47230     +%macro score;
47231     +
47232     +filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
47233     +%include temp;
47234     +filename temp;
47235     +
47236     +%EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
47237     +
47238     +data _null_;
47239     +         set &EM_USER_VARCLUSMETA;
47240     +         if _N_=1 then
47241     +         call symput('_trainnum', TrainNum);
47242     +         call symput('_exportedcomp', ExportedComp);
47243     +         call symput('_hidevariable', HideVariable);
47244     +         call symput('_newTrain', NewTrain);
47245     +run;
47246     +
47247     +%if &_newTrain = N %then %do;
47248     +        %if &EM_PROPERTY_EXPORTEDCOMP eq &_exportedcomp %then %let _exportedCompChanged = N;
47249     +        %else %let _exportedCompChanged = Y;
47250     +        %if &EM_PROPERTY_HIDEVARIABLE eq &_hidevariable %then %let _hideVariableChanged = N;
47251     +        %else  %let _hideVariableChanged = Y;
47252     +%end;
47253     +%else %do;
47254     +        %let _exportedCompChanged = Y;
47255     +        %let _hideVariableChanged = Y;
47256     +%end;
47257     +
47258     +%if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
47259     +     filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
47260     +     %include temp;
47261     +     filename temp;
47262     +     %score1(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
47263     +%end;
47264     +%if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
47265     +     filename temp catalog 'sashelp.emexpl.variableclustering_score2.source';
47266     +     %include temp;
47267     +     filename temp;
47268     +     %score2(ExportedCompChanged=&_exportedCompChanged, HideVariableChanged=&_hideVariableChanged);
47269     +%end;
47270     +
47271     +  /* store  current property values */
47272     + data &EM_USER_VARCLUSMETA;
47273     +       set &EM_USER_VARCLUSMETA;
47274     +        ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
47275     +        HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
47276     + run;
47277     +
47278     +%mend score;
47279     +
47280     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE_MACROS.SOURCE.
47281     +
47282     +%macro ChangeVariableSelectionFlag(Indata=, gcluster=);
47283     +     proc sort data =&indata;
47284     +              by Cluster RsqRatio Type;
47285     +     run;
47286     +     /*----------------------------------------------------------------------
47287     +      The Type variabe is used becuse the variable need to be selected
47288     +        instead of Cluster component when only one variable is in the cluster
47289     +     +-----------------------------------------------------------------------*/
47290     +
47291     +     %if &EM_PROPERTY_EXPORTEDCOMP eq CLUSTERCOMP %then %do;
47292     +         data &indata;
47293     +              set &indata; by cluster;
47294     +              if first.Cluster then Selected = 'YES';
47295     +              else Selected = 'NO';
47296     +         run;
47297     +         quit;
47298     +    %end;
47299     +    %else %do;
47300     +         data &indata(drop = _var _varchange);
47301     +              set &indata; retain _var 0; by Cluster;
47302     +             if first.Cluster then  _varchange = 0;
47303     +                 else _varchange =1;
47304     +             if _var ne _varchange then  Selected  = 'YES';
47305     +             else Selected = 'NO';
47306     +             if last.cluster then  _var = 0;
47307     +             else _var = _varchange;
47308     +         run;
47309     +         quit;
47310     +    %end;
47311     +%mend ChangeVariableSelectionFlag;
47312     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE):   ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   set EMWS5.VarClus_VARCLUSMETA;
MPRINT(SCORE):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(SCORE):   call symput('_exportedcomp', ExportedComp);
MPRINT(SCORE):   call symput('_hidevariable', HideVariable);
MPRINT(SCORE):   call symput('_newTrain', NewTrain);
MPRINT(SCORE):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      3:15
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(SCORE):   filename temp catalog 'sashelp.emexpl.variableclustering_score1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_SCORE1.SOURCE.
47313     +
47314     +%macro score1(ExportedCompChanged=,
47315     +              HideVariableChanged=);
47316     +
47317     +   %EM_GETNAME(KEY=OUTRSQUARE, TYPE=DATA);
47318     +   %if &ExportedCompChanged = Y %then %do;
47319     +   %ChangeVariableSelectionFlag(Indata=&EM_USER_OUTRSQUARE);
47320     +   %end;
47321     +   %MakeDeltaCode(groupds=&EM_USER_OUTRSQUARE, DeltaCodeFile=&EM_FILE_CDELTA_TRAIN);
47322     +
47323     +%mend score1;
47324     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SCORE1):  ;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   proc sort data =EMWS5.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by Cluster RsqRatio Type;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 5 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CHANGEVARIABLESELECTIONFLAG):   data EMWS5.VarClus_OUTRSQUARE(drop = _var _varchange);
MPRINT(CHANGEVARIABLESELECTIONFLAG):   set EMWS5.VarClus_OUTRSQUARE;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   retain _var 0;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   by Cluster;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if first.Cluster then _varchange = 0;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else _varchange =1;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if _var ne _varchange then Selected = 'YES';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else Selected = 'NO';
MPRINT(CHANGEVARIABLESELECTIONFLAG):   if last.cluster then _var = 0;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   else _var = _varchange;
MPRINT(CHANGEVARIABLESELECTIONFLAG):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTRSQUARE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(CHANGEVARIABLESELECTIONFLAG):   quit;
MPRINT(SCORE1):  ;
MPRINT(MAKEDELTACODE):   *--- Build Code to Modify Metadata ---*;
MPRINT(MAKEDELTACODE):   filename X "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\CDELTA_TRAIN.sas";
MPRINT(MAKEDELTACODE):   data _null_;
MPRINT(MAKEDELTACODE):   FILE X;
MPRINT(MAKEDELTACODE):   set EMWS5.VarClus_OUTRSQUARE end=eof;
MPRINT(MAKEDELTACODE):   if _N_=1 then do;
MPRINT(MAKEDELTACODE):   put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
MPRINT(MAKEDELTACODE):   put "if upcase(strip(NAME)) in (";
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if Strip(upcase(Selected)) eq 'YES' then do;
MPRINT(MAKEDELTACODE):   string = '"'!!trim(left(VARIABLE))!!'"';
MPRINT(MAKEDELTACODE):   put string;
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   if eof then do;
MPRINT(MAKEDELTACODE):   put ') then ROLE="INPUT";';
MPRINT(MAKEDELTACODE):   put 'else ROLE="REJECTED";';
MPRINT(MAKEDELTACODE):   put 'end;';
MPRINT(MAKEDELTACODE):   put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
MPRINT(MAKEDELTACODE):   end;
MPRINT(MAKEDELTACODE):   run;
 
NOTE: The file X is:
      Filename=C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=28 March 2021 17:58:50,
      Create Time=28 March 2021 17:52:03
 
NOTE: 8 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 75.
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(MAKEDELTACODE):   quit;
MPRINT(MAKEDELTACODE):   filename X;
NOTE: Fileref X has been deassigned.
MPRINT(MAKEDELTACODE):   quit;
MPRINT(SCORE1):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):   data EMWS5.VarClus_VARCLUSMETA;
MPRINT(SCORE):   set EMWS5.VarClus_VARCLUSMETA;
MPRINT(SCORE):   ExportedComp = "BESTVARWITHCOMP";
MPRINT(SCORE):   HideVariable = "Y";
MPRINT(SCORE):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47325      *------------------------------------------------------------*;
47326      * End SCORE: VarClus;
47327      *------------------------------------------------------------*;
47328
 
47329      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47330      *------------------------------------------------------------*;
47331      * VarClus: Scoring DATA data;
47332      *------------------------------------------------------------*;
47333      data EMWS5.VarClus_TRAIN
47334      / view=EMWS5.VarClus_TRAIN
47335      ;
MPRINT(EM_DIAGRAM):   data EMWS5.VarClus_TRAIN / view=EMWS5.VarClus_TRAIN ;
47336      set EMWS5.Varsel_TRAIN
47337      ;
MPRINT(EM_DIAGRAM):   set EMWS5.Varsel_TRAIN ;
47338      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas.
47339     +
47340     +/*-------------------------------------------------*/
47341     +/* Varclus Score Code Begins*/
47342     +/*-------------------------------------------------*/
47343     +
47344     +Clus1 = 0 ; /*---Cluster Component 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
47345     +Clus2 = 0 ; /*---Cluster Component 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
47346     +Clus2 = Clus2+1 * (age - 35.6457142857142)/11.4027665959311;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+1 * (age - 35.6457142857142)/11.4027665959311;
47347     +Clus1 = Clus1+0.55531235556365 * (credit_amt - 3376.24428571428)/2936.07117692604;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.55531235556365 * (credit_amt - 3376.24428571428)/2936.07117692604;
47348     +Clus1 = Clus1+0.55531235556365 * (duration - 21.1414285714285)/12.2857605429763;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.55531235556365 * (duration - 21.1414285714285)/12.2857605429763;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
47349      run;
 
NOTE: DATA STEP view saved on file EMWS5.VARCLUS_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47350      quit;
47351      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
47352      filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Scoring TEST data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47353      *------------------------------------------------------------*;
47354      * VarClus: Scoring TEST data;
47355      *------------------------------------------------------------*;
47356      data EMWS5.VarClus_TEST
47357      / view=EMWS5.VarClus_TEST
47358      ;
MPRINT(EM_DIAGRAM):   data EMWS5.VarClus_TEST / view=EMWS5.VarClus_TEST ;
47359      set EMWS5.Varsel_TEST
47360      ;
MPRINT(EM_DIAGRAM):   set EMWS5.Varsel_TEST ;
47361      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMFLOWSCORE.sas.
47362     +
47363     +/*-------------------------------------------------*/
47364     +/* Varclus Score Code Begins*/
47365     +/*-------------------------------------------------*/
47366     +
47367     +Clus1 = 0 ; /*---Cluster Component 1------ */
MPRINT(EM_DIAGRAM):   Clus1 = 0 ;
47368     +Clus2 = 0 ; /*---Cluster Component 2------ */
MPRINT(EM_DIAGRAM):   Clus2 = 0 ;
47369     +Clus2 = Clus2+1 * (age - 35.6457142857142)/11.4027665959311;
MPRINT(EM_DIAGRAM):   Clus2 = Clus2+1 * (age - 35.6457142857142)/11.4027665959311;
47370     +Clus1 = Clus1+0.55531235556365 * (credit_amt - 3376.24428571428)/2936.07117692604;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.55531235556365 * (credit_amt - 3376.24428571428)/2936.07117692604;
47371     +Clus1 = Clus1+0.55531235556365 * (duration - 21.1414285714285)/12.2857605429763;
MPRINT(EM_DIAGRAM):   Clus1 = Clus1+0.55531235556365 * (duration - 21.1414285714285)/12.2857605429763;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
47372      run;
 
NOTE: DATA STEP view saved on file EMWS5.VARCLUS_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS5.VARSEL_TEST.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
47373      quit;
47374      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
47376      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
47377      * VarClus: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * VarClus: Computing metadata for TRAIN data;
47378      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS5.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS5.VarClus_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS5.VarClus_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS5.VarClus_TRAIN out=WORK.M3CT2XIU noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CT2XIU;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CT2XIU(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CT2XIU;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CT2XIU;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3BNEP3X NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M16MF298(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX"
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   set WORK.M3BNEP3X;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS5.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS5.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS5.VarClus_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "VarClus";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * VarClus: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;
MPRINT(EM_DIAGRAM):   if upcase(strip(NAME)) in ( "DURATION" "AGE" ) then ROLE="INPUT";
MPRINT(EM_DIAGRAM):   else ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if upcase(strip(ROLE)) = "REJECTED" then delete ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS5.VARCLUS_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS5.VARCLUS_TEST.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28 March 2021" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "17:58:51" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28 March 2021
Time:                17:58:51
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2FDUCQS "C:\Jose\DM_ang\Workspaces\EMWS5\VarClus\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2FDUCQS new;
MPRINT(EM_DIAGRAM):   run;
47747      %let EMEXCEPTIONSTRING=;
47748      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
47749      * REPORT: VarClus;
MPRINT(EM_DIAGRAM):   * REPORT: VarClus;
47750      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
47751      %let EM_ACTION = REPORT;
47752      %let syscc = 0;
47753
47754      %macro main;
47755
47756         filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
47757         %include temp;
47758         filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
47759         %include temp;
47760         filename temp;
47761
47762        %SetProperties;
47763
47764         %if %upcase(&EM_ACTION) = CREATE %then %do;
47765             filename temp catalog 'sashelp.emexpl.variableclustering_create.source';
47766             %include temp;
47767             filename temp;
47768             %create;
47769         %end;
47770         %else
47771         %if %upcase(&EM_ACTION) = TRAIN %then %do;
47772              filename temp catalog 'sashelp.emexpl.variableclustering_train.source';
47773                 %include temp;
47774                 filename temp;
47775                 %train;
47776         %end;
47777         %else
47778         %if %upcase(&EM_ACTION) = SCORE %then %do;
47779                 filename temp catalog 'sashelp.emexpl.variableclustering_score.source';
47780                 %include temp;
47781                 filename temp;
47782                 %score;
47783         %end;
47784         %else
47785         %if %upcase(&EM_ACTION) = REPORT %then %do;
47786                 filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
47787                 %include temp;
47788                 filename temp;
47789                 %report;
47790         %end;
47791         /*
47792         %if %upcase(&EM_ACTION) = OPENTESTTABLE %then %do;
47793             %put 'OPENING TABLE';
47794         %end;
47795         %if %upcase(&EM_ACTION) = CLOSETESTTABLE %then %do;
47796             %put 'CLOSE TABLE';
47797         %end;
47798         */
47799      %mend main;
47800      %main;
MPRINT(EM_DIAGRAM):
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS.SOURCE.
47801     +
47802     +/* Initialize property macro variables */
47803     +%macro SetProperties;
47804     +   %em_checkmacro(name=EM_PROPERTY_MAXCLUS,       global=Y, value=DEFAULT);
47805     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,  global=Y, value=Y);
47806     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,   global=Y, value=SHORT);
47807     +   %em_checkmacro(name=EM_PROPERTY_CLUSSOURCE,    global=Y, value=CORR);
47808     +   %em_checkmacro(name=EM_PROPERTY_CLUSCOMP,      global=Y, value=PRINCIPAL);
47809     +   %em_checkmacro(name=EM_PROPERTY_CLUSHIERACHY,      global=Y, value=Y);
47810     +   %em_checkmacro(name=EM_PROPERTY_INCLUDECLASSVAR,      global=Y, value=N);
47811     +   %em_checkmacro(name=EM_PROPERTY_EXPORTEDCOMP,      global=Y, value=CLUSTERCOMP);
47812     +   %em_checkmacro(name=EM_PROPERTY_MAXEIGEN,         global=Y, value=DEFAULT);
47813     +   %em_checkmacro(name=EM_PROPERTY_PROPORTION,      global=Y, value=DEFAULT);
47814     +   %em_checkmacro(name=EM_PROPERTY_PRINTOPTION,      global=Y, value=SHORT);
47815     +   %em_checkmacro(name=EM_PROPERTY_TWOSTAGECLUS,      global=Y, value=AUTO);
47816     +   %em_checkmacro(name=EM_PROPERTY_SUPPRESSSAMPWARN,      global=Y, value=N);
47817     +
47818     +%mend SetProperties;
47819     +
47820     +%Macro MakeDummyVariables(indata=,
47821     +                          outvar=,
47822     +                          outdata=,
47823     +                          fileref=,
47824     +                          recreatecmeta=N, /* optional */
47825     +                          incmeta=,     /* optional */
47826     +                          outcmeta=,    /* optional */
47827     +                          ndummyvars=_ndummyvars
47828     +                          );
47829     +    %global &ndummyvars;
47830     +
47831     +    proc dmdb batch data=&indata out=_dmdbdat dmdbcat=_dmdbcat classout=_classout;;
47832     +       class
47833     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
47834     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
47835     +    ;
47836     +    run;
47837     +    %let &ndummyvars = 0;
47838     +    data _null_;
47839     +    %let dsid = %sysfunc(open(work._classout));
47840     +      %let &ndummyvars = %sysfunc(attrn(&dsid, NOBS));
47841     +    %let dsid = %sysfunc(close(&dsid));
47842     +    run;
47843     +
47844     +    proc dmzip data=_dmdbdat dmdbcat=_dmdbcat;
47845     +       input
47846     +       %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
47847     +       %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
47848     +        / level=nominal stdize=no;
47849     +       make outvar = &outvar;
47850     +       score data = &indata out =&outdata;
47851     +       code  file=  "&fileref";
47852     +    run;
47853     +    %if &recreatecmeta eq Y %then %do;
47854     +    proc contents data =&outvar out=_tmpds(keep=NAME LABEL);
47855     +    data _tmpds;
47856     +        set _tmpds;
47857     +           ROLE = 'INPUT';
47858     +           LEVEL = 'INTERVAL';
47859     +           CREATOR='DMZIP';
47860     +           if NAME = '_TYPE_' then delete;
47861     +    run;
47862     +    data &outcmeta;
47863     +         set &incmeta _tmpds;
47864     +    run;
47865     +    %end;
47866     +    proc datasets lib=work nolist;
47867     +      delete  _dmdbdat _dmdbcat _classout
47868     +    %if &recreatecmeta eq Y %then %do;
47869     +    _tmpds
47870     +    %end;
47871     +    ;
47872     +    quit;
47873     +%Mend MakeDummyVariables;
47874     +
47875     +/*--- Determine Optimal Number of Cluster ----
47876     +%macro FindClusNum(statds=, groupds=, minvariation=);
47877     +   %global optnclus;
47878     +   data varclus_tmp(drop=_NAME_);
47879     +      set &statDs;
47880     +      where _type_ ='PROPOR';
47881     +   run;
47882     +   proc sort data=varclus_tmp;
47883     +      by _NCL_;
47884     +   run;
47885     +   proc transpose data=varclus_tmp out=varclus_tmp;
47886     +      by _NCL_;
47887     +      var %EM_INTERVAL_INPUT
47888     +      %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
47889     +      %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
47890     +      %let nvar = %sysfunc(attrn(&dsid, NVAR));
47891     +          %do i = 2 %to &nvar;
47892     +          %let varname = %sysfunc(varname(&dsid, &i));
47893     +          &varname
47894     +          %end;
47895     +      %end;
47896     +   ;
47897     +   run;
47898     +
47899     +   %if &minVariation eq %then %do;
47900     +       %let minVariation = &EM_PROPERTY_MINVARIATION;
47901     +   %end;
47902     +   %if ^(0<&minVariation<100) %then %do;
47903     +       %let minVariation = 90;
47904     +   %end;
47905     +
47906     +   data _null_;
47907     +      set varclus_tmp end=eof;
47908     +      by _NCL_;
47909     +      retain flag 0;
47910     +      if first._ncl_ then flag=0;
47911     +      if .<col1 < &minVariation then flag=1;
47912     +      if last._ncl_ and ^flag then do;
47913     +         call symput('OPTNCL', _ncl_);
47914     +         stop;
47915     +      end;
47916     +     if eof then call symput('OPTNCL', _ncl_);
47917     +   run;
47918     +
47919     +   %let optnclus = &OPTNCL;
47920     +
47921     +   data varclus_tmp(drop=_NCL_ _NAME_);
47922     +      set &statDs;
47923     +      where _type_ in('RSQUARED' 'GROUP') and _NCL_=&OPTNCL;
47924     +   run;
47925     +   proc sort data=varclus_tmp;
47926     +      by _TYPE_;
47927     +   run;
47928     +   proc transpose data=varclus_tmp out=varclus_tmp;
47929     +      by _TYPE_;
47930     +   run;
47931     +   proc sort data=varclus_tmp;
47932     +      by _name_ _type_;
47933     +   run;
47934     +
47935     +  proc transpose data=varclus_tmp out=&groupds;
47936     +      by _NAME_;
47937     +   run;
47938     +   proc sort data=&groupDs(rename=(col1=Cluster col2=Rsquare _NAME_=VARIABLE));
47939     +      by Cluster descending Rsquare;
47940     +      where Cluster ne 0;
47941     +   run;
47942     +   proc datasets lib=work nolist mt=(DATA VIEW);
47943     +      delete varclus_tmp;
47944     +   run;
47945     +   quit;
47946     +%mend findClusNum;
47947     +*/
47948     +
47949     +%macro getNclusfromTrain(inoutstat=, nc=);
47950     +%global &nc;
47951     +data _null_;
47952     +    set &inoutstat end=eof;
47953     +    if eof then do;
47954     +    call symput("&nc", _ncl_);
47955     +    end;
47956     +run;
47957     +%mend  getNclusfromTrain;
47958     +
47959     +%macro MakeDeltaCode(groupds=, outstatscore=, deltacodefile=);
47960     +
47961     +     *--- Build Code to Modify Metadata ---*;
47962     +     filename X "&deltacodefile";
47963     +     data _null_;
47964     +        FILE X;
47965     +        set &groupds end=eof;
47966     +        /*by Cluster;*/
47967     +         if _N_=1 then do;
47968     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
47969     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
47970     +           %end;
47971     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
47972     +           put "if upcase(strip(NAME)) in (";
47973     +        end;
47974     +        if Strip(upcase(Selected)) eq 'YES' then do;
47975     +           string = '"'!!trim(left(VARIABLE))!!'"';
47976     +           put string;
47977     +        end;
47978     +        if eof then do;
47979     +           put ') then ROLE="INPUT";';
47980     +           put 'else ROLE="REJECTED";';
47981     +           put 'end;';
47982     +
47983     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
47984     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
47985     +           %end;
47986     +        end;
47987     +     run;
47988     +     quit;
47989     +
47990     +     filename X;
47991     +
47992     +     quit;
47993     +%mend MakeDeltaCode;
47994     +
47995     +%macro MakeVarClusCorrData(statds=, corrds=, corrplotds= );
47996     +    %if ^%sysfunc(exist(&statds)) %then %do;
47997     +         %goto doendc;
47998     +    %end;
47999     +
48000     +    data &corrds(drop=_TYPE_ _NCL_) ;
48001     +       set &statds;
48002     +       where _type_ eq 'CORR' ;
48003     +    run ;
48004     +    proc sort data=&corrds;
48005     +       by _NAME_ ;
48006     +    run ;
48007     +    proc transpose data=&corrds out=&corrplotds name=_TMP_;
48008     +      BY _NAME_ ;
48009     +    run ;
48010     +    data &corrplotds;
48011     +       length _Y_ $100;
48012     +       set &corrplotDs;
48013     +       if _LABEL_ ne '' then _Y_=_LABEL_ ; else _Y_=_TMP_ ;
48014     +    run ;
48015     +    data varclus_match(rename=(_TMP_= _NAME_ _LABEL_=_X_));
48016     +       set &corrplotds;
48017     +       where _LABEL_ ne '' ;
48018     +       keep _TMP_ _LABEL_ ;
48019     +    run ;
48020     +    data _null_;
48021     +       nobs=0;
48022     +       dsid = open('varclus_match');
48023     +       if dsid then do;
48024     +          nobs = attrn(dsid, 'NOBS');
48025     +          dsid = close(dsid);
48026     +       end;
48027     +       call symput ('CORR_NOBS', nobs);
48028     +    run;
48029     +    %if &corr_nobs %then %do;
48030     +        proc sort data=varclus_match;
48031     +           by _name_;
48032     +        run ;
48033     +        proc sort data=&corrplotds;
48034     +           by _name_;
48035     +        run ;
48036     +        data &corrplotds(keep= _X_ _Y_ col1 rename=(col1=Correlation)) ;
48037     +           merge varclus_match &corrplotds;
48038     +           by _NAME_ ;
48039     +           if _X_ eq '' then _X_=_NAME_ ;
48040     +           label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
48041     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
48042     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
48043     +
48044     +       run ;
48045     +    %end;
48046     +    %else %do;
48047     +        proc sort data=&corrplotds;
48048     +           by _name_;
48049     +        run ;
48050     +        data &corrplotds(keep= _NAME_ _Y_ col1 rename=(_NAME_=_X_ col1=Correlation)) ;
48051     +           set &corrplotds;
48052     +           label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48053     +           label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48054     +           label col1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
48055     +
48056     +        run ;
48057     +    %end;
48058     +    proc sort data=&corrplotds;
48059     +       by _X_ _Y_;
48060     +    run ;
48061     +    proc datasets lib=work nolist mt=(DATA VIEW);
48062     +       delete varclus_match;
48063     +    run;
48064     +    quit;
48065     +
48066     +%doendc:
48067     +
48068     +%mend MakeVarClusCorrData;
48069     +
48070     +%macro MakeStatPlotData(statds= , outstatplotds=);
48071     +   %if %sysfunc(exist(&statds)) %then %do;
48072     +
48073     +       data varclus_tmp(drop=_NAME_ _NCL_) ;
48074     +          set &statDs;
48075     +          where _type_ in('MEAN', 'STD', 'N');
48076     +       run ;
48077     +       proc transpose data=varclus_tmp out=&outstatplotds;
48078     +          id _TYPE_ ;
48079     +       run ;
48080     +       data &outstatplotds;
48081     +          set &outstatplotds(obs=1000);
48082     +          label _name_= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_name, noquote))";
48083     +          label _label_="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
48084     +          if MEAN ne 0 then SCALEDSTD= STD / MEAN ;
48085     +          else SCALEDSTD= STD ;
48086     +          label SCALEDSTD = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_scaledstd, noquote))";
48087     +       run ;
48088     +       proc sort data=&outstatplotds;
48089     +          by descending SCALEDSTD ;
48090     +       run ;
48091     +       proc datasets lib=work nolist mt=(DATA VIEW);
48092     +          delete varclus_tmp;
48093     +       run;
48094     +       quit;
48095     +    %end;
48096     +
48097     +%mend MakeStatPlotData;
48098     +
48099     +
48100     +%macro CreateScoreCode(indata=, ncluscomp=, fileref=);
48101     +     %EM_GETNAME(KEY=OUTSTATSCORE, type=DATA);
48102     +    data &EM_USER_OUTSTATSCORE;
48103     +          set &indata;
48104     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
48105     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
48106     +          if _TYPE_ = 'STD' then _NAME_='STD';
48107     +          DROP _TYPE_ _NCL_;
48108     +     run;
48109     +
48110     +     filename _file_  "&fileRef";
48111     +
48112     +     data _null_;
48113     +        FILE _file_ MOD;
48114     +        put ' ';
48115     +        put '/*-------------------------------------------------*/';
48116     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_begin , noquote))" '*/';
48117     +        put '/*-------------------------------------------------*/';
48118     +        put ' ';
48119     +        %let dsid = %sysfunc(open(&EM_USER_OUTSTATSCORE));
48120     +
48121     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
48122     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
48123     +
48124     +        %let k = 1;
48125     +        %do %while(^%sysfunc(fetch(&dsid)));
48126     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
48127     +                %if &k > 2 %then %do;
48128     +                 %let cn = %eval(&k-2);
48129     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_cluscompnum, noquote, &cn))"  "------ */";
48130     +                %end;
48131     +                %let k = %eval(&k+1);
48132     +        %end;
48133     +
48134     +        %let rc = %sysfunc(rewind(&dsid));
48135     +
48136     +        %do i= 2 %to &nvar;
48137     +            %let _varname =  %sysfunc(varname(&dsid, &i));
48138     +            %do %while(^%sysfunc(fetch(&dsid)));
48139     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
48140     +                %if &_name = MEAN %then
48141     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
48142     +                %else %if &_name = STD %then
48143     +                %let _std = %sysfunc(getvarn(&dsid, &i));
48144     +                %else %do;
48145     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
48146     +                      %let abscoeff = %sysfunc(abs(&coeff));
48147     +                          %if &abscoeff >  0 %then %do;
48148     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
48149     +                           %end;
48150     +                 %end;
48151     +             %end;
48152     +             %let rc = %sysfunc(rewind(&dsid));
48153     +         %end;
48154     +
48155     +        %let dsid= %sysfunc(close(&dsid));
48156     +       run;
48157     +%mend CreateScoreCode;
48158     +
48159     +
48160     +
48161     +/*----------------------------------------------------------
48162     +    Instead of using %MakeRSquareData,
48163     +    %MakeVarClusResultTable at macro2.source is used
48164     + +----------------------------------------------------------*/
48165     +
48166     +
48167     +%macro MakeRSquareData(indata=, inClusRSquare=, outdata=, ncluster=);
48168     +
48169     +/* modifying  from ods rsquare = data */
48170     +
48171     +data &outdata(drop= ControlVar  NumberOfClusters CurrentCluster);
48172     +    Length Cluster $16;
48173     +    length Variable $32;
48174     +    Length VariableLabel $64;
48175     +    set &indata; retain CurrentCluster;
48176     +    if NumberOfClusters ^= &ncluster then delete;
48177     +    if strip(Cluster) eq '' then Cluster = CurrentCluster;
48178     +    CurrentCluster = Cluster;
48179     +   run;
48180     +proc sort data =&outdata ;
48181     +     by Cluster RsquareRatio;
48182     +run;
48183     +data _tmprsq(drop=index);
48184     +     set &outdata; by Cluster;
48185     +     if first.Cluster then do;
48186     +     index = strip(scan(Cluster,2 ));
48187     +     Variable = "Clus"||index;
48188     +     VariableLabel = "Cluster Component "||index;
48189     +     OwnCluster = 1;
48190     +     NextClosest = .;
48191     +     RsquareRatio = 0;
48192     +     output;
48193     +     end;
48194     +run;
48195     +
48196     +proc sort data = _tmprsq ;
48197     +     by Cluster RsquareRatio;
48198     +run;
48199     +data &outdata;
48200     +     set &outdata _tmprsq;
48201     +by Cluster;
48202     +run;
48203     +
48204     +
48205     +/* Just create the Selected variable with all YES */
48206     +
48207     +data &outdata;
48208     +    set &outdata; by cluster;
48209     +    length Selected $8;
48210     +    Selected = 'YES';
48211     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
48212     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
48213     +    rename OwnCluster = RSqWithClusterComp;
48214     +    rename NextClosest = RSqWithNextClusComp;
48215     +run;
48216     +
48217     +
48218     +/* Selected = Y/N will be done %score section -----
48219     +
48220     +%if &EM_PROPERTY_EXPORTEDCOMP ne CLUSTERCOMP %then %do;
48221     +data &outdata;
48222     +    set &outdata; by cluster;
48223     +    length Selected $8;
48224     +    if first.Cluster then Selected = 'YES';
48225     +    else Selected = 'NO';
48226     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
48227     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
48228     +    rename OwnCluster = RSqWithClusterComp;
48229     +    rename NextClosest = RSqWithNextClusComp;
48230     +run;
48231     +%end;
48232     +%else %do;
48233     +data &outdata;
48234     +    set &outdata; by cluster;
48235     +    if last.Cluster then Selected = 'YES';
48236     +    else Selected = 'NO';
48237     +    label  OwnCluster = 'R-Sqaure with Cluster Component';
48238     +    label  NextClosest = 'R-Sqaure with Next Cluster Component';
48239     +    rename OwnCluster = RSqWithClusterComp;
48240     +    rename NextClosest = RSqWithNextClusComp;
48241     +run;
48242     +%end;
48243     +---------------------------------------------------------------*/
48244     +
48245     +%if %sysfunc(exist(&inClusRSquare)) %then %do;
48246     +/* to calculate NextClosestClusRsq */
48247     +proc transpose data = &inClusRSquare  out=_clusRsq;
48248     +      by cluster;
48249     +      run;
48250     +data _clusRsq;
48251     +     set _clusRsq;
48252     +     if strip(upcase(Cluster)) eq strip(upcase(_NAME_)) then delete;
48253     +run;
48254     +
48255     +proc sort data=_clusRsq;
48256     +    by cluster col1;
48257     +    run;
48258     +data _clusRsq(drop=_NAME_ _LABEL_);
48259     +     set _clusRsq; by cluster;
48260     +     if last.Cluster then output;
48261     +     label  COL1 = 'R-Sqaure with Next Cluster Component';
48262     +     rename COL1 = RSqWithNextClusComp;
48263     +     rename Cluster = Variable;
48264     +     label  Cluster = "Variable";
48265     +run;
48266     +
48267     +proc sort data =&outdata;
48268     +     by Variable;
48269     +run;
48270     +data &outdata;
48271     +    merge &outdata _clusRsq;
48272     +    by Variable;
48273     +run;
48274     +proc sort data =&outdata;
48275     +by Cluster  RsquareRatio;
48276     +run;
48277     +quit;
48278     +%end;
48279     +
48280     +proc datasets lib = work nolist;
48281     +     delete _tmprsq _clusRsq;
48282     +     run;
48283     +quit;
48284     +
48285     +%mend MakeRSquareData;
48286     +
48287     +
48288     +/*-------------------------------------------------------------------------*/
48289     +
48290     +
48291     +
48292     +%macro ModifyCorr(indata=,
48293     +                  outdata=,
48294     +                  rsquare = Y
48295     +                  );
48296     +    data corr_tmp;
48297     +        set &indata;
48298     +    run;
48299     +     proc sql;
48300     +           update &indata
48301     +           set
48302     +     %let dsid = %sysfunc(open(work.corr_tmp));
48303     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
48304     +          %do i = 4 %to &nvar;
48305     +          %let _name = %sysfunc(varname(&dsid, &i));
48306     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
48307     +            %else  %let _name_md = &_name;
48308     +            %if &i < &nvar %then %do;
48309     +               &_name = 1- &_name_md ,
48310     +            %end;
48311     +            %else %do;
48312     +               &_name = &_name_md where _TYPE_ contains 'CORR' ;
48313     +            %end;
48314     +          %end;
48315     +      %let dsid= %sysfunc(close(&dsid));
48316     +
48317     +      select * from &indata;
48318     +      run;
48319     +      proc datasets lib = work nolist;
48320     +           delete corr_tmp;
48321     +      run;
48322     +      quit;
48323     +
48324     + %mend ModifyCorr;
48325     +
48326     + %macro MakeClusStructCorrData(indata=,outdata=, ncluster=, Rsquare=N);
48327     +    data &outdata(drop= _NCL_  _TYPE_);
48328     +       set &indata;
48329     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
48330     +       rename _NAME_ = Cluster;
48331     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48332     +    run;
48333     +    %if &RSquare eq Y %then %do;
48334     +     data corr_tmp;
48335     +        set &outdata;
48336     +     run;
48337     +
48338     +     data &outdata(drop=i);
48339     +          set &outdata;
48340     +          %let dsid = %sysfunc(open(work.corr_tmp));
48341     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48342     +          %do i = 2 %to &nvar;
48343     +            %let _name = %sysfunc(varname(&dsid, &i));
48344     +            %let _name_md = &_name.**2;
48345     +                &_name = &_name_md;
48346     +          %end;
48347     +      %let dsid= %sysfunc(close(&dsid));
48348     +      run;
48349     +      proc datasets lib = work nolist;
48350     +           delete corr_tmp;
48351     +      run;
48352     +
48353     +    %end;
48354     +     quit;
48355     +%mend MakeClusStructCorrData;
48356     +
48357     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, RSquare=N, makeplotds=N, plotds=);
48358     +    data &outdata(drop= _NCL_  _TYPE_);
48359     +       set &indata;
48360     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
48361     +       rename _NAME_ = Cluster;
48362     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48363     +    run;
48364     +    data corr_tmp;
48365     +        set &outdata;
48366     +    run;
48367     +
48368     +    %let dsid = %sysfunc(open(work.corr_tmp));
48369     +    %let nclus2= %eval(&ncluster+1);
48370     +    data &outdata;
48371     +         set &outdata;
48372     +          %do i = 2 %to &nclus2;
48373     +          %let i_1 = %eval(&i-1);
48374     +            %let _name = %sysfunc(varname(&dsid, &i));
48375     +            %let _newName = Clus&i_1;
48376     +                rename &_name = &_newName; ;
48377     +                *label &_name ="Cluster &i_1";
48378     +                label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
48379     +          %end;
48380     +          keep Cluster
48381     +          %do i = 2 %to &nclus2;
48382     +                %let _name = %sysfunc(varname(&dsid, &i));
48383     +                &_name
48384     +          %end;
48385     +          ;
48386     +    %let dsid= %sysfunc(close(&dsid));
48387     +     run;
48388     +     quit;
48389     +
48390     +    %if &RSquare eq Y %then %do;
48391     +
48392     +       data corr_tmp;
48393     +        set &outdata;
48394     +     run;
48395     +
48396     +     data &outdata(drop=i);
48397     +          set &outdata;
48398     +          %let dsid = %sysfunc(open(work.corr_tmp));
48399     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48400     +          %do i = 2 %to &nvar;
48401     +            %let _name = %sysfunc(varname(&dsid, &i));
48402     +            %let _name_md = &_name.**2;
48403     +                &_name = &_name_md;
48404     +          %end;
48405     +      %let dsid= %sysfunc(close(&dsid));
48406     +      run;
48407     +    %end;
48408     +
48409     +    %if &makeplotds eq Y %then %do;
48410     +     proc transpose data = &outdata
48411     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
48412     +          by cluster;
48413     +     run;
48414     +     data &plotds;
48415     +          set  &plotds;
48416     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
48417     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
48418     +     run;
48419     +     %end;
48420     +     proc datasets lib = work nolist;
48421     +           delete corr_tmp;
48422     +     run;
48423     +     quit;
48424     +%mend MakeInterClusCorrData;
48425     +
48426     +
48427     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
48428     +
48429     +data &outlink(drop = Selected);
48430     +     set &indata;
48431     +     LINKID = _N_;
48432     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
48433     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
48434     +run;
48435     +data &outnode(keep=NODEID TYPE LABEL);
48436     +    set &indata;
48437     +    length TYPE $16;
48438     +    rename Variable = NODEID;
48439     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
48440     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
48441     +    then  TYPE = "CLUSTER";
48442     +    else  TYPE="VARIABLE";
48443     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
48444     +run;
48445     +quit;
48446     +%mend MakeClusConstellData;
48447     +
48448     +
48449     +
48450     +%macro MakeClusConstellData(indata=, outlink=, outnode=);
48451     +
48452     +data &outlink(drop = Selected);
48453     +     set &indata;
48454     +     LINKID = _N_;
48455     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid,  noquote))";
48456     +     if strip(upcase(Cluster)) eq strip(upcase(Variable)) then Variable = ClosestCluster;
48457     +run;
48458     +data &outnode(keep=NODEID TYPE LABEL);
48459     +    set &indata;
48460     +    length TYPE $16;
48461     +    rename Variable = NODEID;
48462     +    label  Variable= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))";
48463     +    if strip(upcase(Cluster)) eq strip(upcase(Variable))
48464     +    then  TYPE = "CLUSTER";
48465     +    else  TYPE="VARIABLE";
48466     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))";
48467     +run;
48468     +quit;
48469     +%mend MakeClusConstellData;
48470     +
48471     +
48472     +/*--- This will work only when inds is not a view data -------
48473     +
48474     +%macro getNVarNObs(inds=, nvar=, nobs=);
48475     +
48476     +    %global &nvar;
48477     +    %global &nobs;
48478     +    data _null_;
48479     +         dsid = open("&inds");
48480     +         nv = attrn(dsid, 'NVAR');
48481     +         no = attrn(dsid, 'NOBS');
48482     +         dsid = close(dsid);
48483     +         call symput("&nvar", nv);
48484     +         call symput("&nobs", no);
48485     +    run;
48486     +    quit;
48487     +%mend  getNVarNObs;
48488     +
48489     ++---------------------------------------------------------------*/
48490     +
48491     +
48492     +%macro getNVar(inds=, nvar=);
48493     +    %global &nvar;
48494     +    data _null_;
48495     +         dsid = open("&inds");
48496     +         nv = attrn(dsid, 'NVAR');
48497     +         dsid = close(dsid);
48498     +         call symput("&nvar", nv);
48499     +    run;
48500     +    quit;
48501     +%mend  getNVar;
48502     +
48503     +
48504     +
48505     +%macro getNObs(inds=, nobs=);
48506     +    %global &nobs;
48507     +    data _null_;
48508     +        set &inds end=eof;
48509     +        if eof then call symput("&nobs", _N_);
48510     +    run;
48511     +    quit;
48512     +%mend  getNObs;
48513     +
48514     +%Macro CreateVarclusMeta(trainnum=);
48515     +   %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
48516     +    data &EM_USER_VARCLUSMETA;
48517     +         length TrainNum 8.;
48518     +         length NewTrain $8;
48519     +         length NGCluster 8.;
48520     +         length ExportedComp $16;
48521     +         length HideVariable $8;
48522     +         TrainNum = &trainnum;
48523     +         NewTrain = "Y";
48524     +         ExportedComp = "&EM_PROPERTY_EXPORTEDCOMP";
48525     +         HideVariable = "&EM_PROPERTY_HIDEVARIABLE";
48526     +         NGCluster = 0; /* zero means no twostage */
48527     +   run;
48528     +   quit;
48529     +%mend CreateVarclusMeta;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_macros2.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_MACROS2.SOURCE.
48530     +
48531     +%macro MakeInterClusCorrData(indata=, outdata=, ncluster=, globalclusid=, RSquare=N, makeplotds=N, plotds=);
48532     +    data &outdata(drop= _NCL_  _TYPE_);
48533     +       set &indata;
48534     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'CCORR') then delete;
48535     +       %if &globalclusid ne %then %do;
48536     +       _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
48537     +       rename _NAME_ = Cluster;
48538     +       %end;
48539     +       %else %do;
48540     +        _NAME_ = upcase(_NAME_);
48541     +       rename _NAME_ = Cluster;
48542     +       %end;
48543     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48544     +    run;
48545     +    data corr_tmp;
48546     +        set &outdata;
48547     +    run;
48548     +
48549     +    %let dsid = %sysfunc(open(work.corr_tmp));
48550     +    %let nclus2= %eval(&ncluster+1);
48551     +    data &outdata;
48552     +         set &outdata;
48553     +          %do i = 2 %to &nclus2;
48554     +          %let i_1 = %eval(&i-1);
48555     +            %let _name = %sysfunc(varname(&dsid, &i));
48556     +            %if &globalclusid ne %then
48557     +                %do; %let _newName = GC&globalclusid._CLUS&i_1;
48558     +                     rename &_name = &_newName;
48559     +                     *label &_name ="GC &globalclusid : Cluster &i_1";
48560     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gc_clusternum, noquote,  &globalclusid, &i_1))";
48561     +                %end;
48562     +            %else
48563     +                %do; %let _newName = CLUS&i_1;
48564     +                     rename &_name = &_newName;
48565     +                     *label &_name ="Cluster &i_1";
48566     +                     label &_name = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clusternum, noquote,  &i_1))";
48567     +                %end;
48568     +          %end;
48569     +          keep Cluster
48570     +          %do i = 2 %to &nclus2;
48571     +                %let _name = %sysfunc(varname(&dsid, &i));
48572     +                &_name
48573     +          %end;
48574     +          ;
48575     +    %let dsid= %sysfunc(close(&dsid));
48576     +     run;
48577     +     quit;
48578     +
48579     +    %if &RSquare eq Y %then %do;
48580     +
48581     +       data corr_tmp;
48582     +        set &outdata;
48583     +     run;
48584     +
48585     +     data &outdata;
48586     +          set &outdata;
48587     +          %let dsid = %sysfunc(open(work.corr_tmp));
48588     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48589     +          %do i = 2 %to &nvar;
48590     +            %let _name = %sysfunc(varname(&dsid, &i));
48591     +            %let _name_md = &_name.**2;
48592     +                &_name = &_name_md;
48593     +          %end;
48594     +      %let dsid= %sysfunc(close(&dsid));
48595     +      run;
48596     +    %end;
48597     +
48598     +    %if &makeplotds eq Y %then %do;
48599     +     proc transpose data = &outdata
48600     +          out=&plotds(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
48601     +          by cluster;
48602     +     run;
48603     +     data &plotds;
48604     +          set  &plotds;
48605     +          label x="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
48606     +          label Y="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))";
48607     +          label  Correlation="%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))";
48608     +     run;
48609     +     %end;
48610     +     proc datasets lib = work nolist;
48611     +           delete corr_tmp;
48612     +     run;
48613     +     quit;
48614     +%mend MakeInterClusCorrData;
48615     +
48616     +%macro MakeOwnRSquare(indata=, outdata=, ncluster=, globalclusid=);
48617     +    data _tmpds(drop= _NCL_);
48618     +       set &indata;
48619     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) in ('GROUP','RSQUARED')) then delete;
48620     +       %if &globalclusid ne %then %do;
48621     +           _NAME_ = "GC&globalclusid.";
48622     +       rename _NAME_ = Cluster;
48623     +       %end;
48624     +       %else %do;
48625     +        _NAME_ = "CLUS";
48626     +        rename _NAME_ = Cluster;
48627     +       %end;
48628     +       label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername,  noquote))";
48629     +    run;
48630     +    proc transpose data =_tmpds out =&outdata;
48631     +    run;
48632     +
48633     +    data &outdata(drop=COL1);
48634     +        %if &globalclusid ne %then %do;
48635     +        length GCluster $16;
48636     +        %end;
48637     +        length Cluster $32;
48638     +        length _NAME_ $32;
48639     +         set &outdata;
48640     +         _NAME_ = upcase(_NAME_);
48641     +         rename _NAME_=Variable;
48642     +         *label _NAME_="Variable";
48643     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48644     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
48645     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
48646     +
48647     +         %if &globalclusid ne %then %do;
48648     +          GCluster = "GC&globalclusid";
48649     +          Cluster = "GC&globalclusid._CLUS"||strip(COL1);
48650     +         %end;
48651     +         %else %do;
48652     +         Cluster = "CLUS"||strip(COL1);
48653     +        %end;
48654     +         rename COL2 = RSqWithOwnClusComp;
48655     +         *label COL2 = "R-Square With Own Cluster Component";
48656     +         label COL2 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
48657     +
48658     +   run;
48659     +   proc sort data =&outdata;
48660     +        by Cluster RSqWithOwnClusComp;
48661     +   run;
48662     +   proc datasets lib = work nolist;
48663     +           delete _tmpds;
48664     +   run;
48665     +   quit;
48666     +%mend MakeOwnRSquare;
48667     +
48668     +%macro MakeClusStructCorrData(indata=, outdata=, globalclusid=, ncluster=, Rsquare=N);
48669     +    data &outdata(drop= _NCL_  _TYPE_);
48670     +       %if &globalclusid ne %then %do;
48671     +        length GCluster $16;
48672     +        %end;
48673     +       set &indata;
48674     +       if ^(strip(_NCL_) eq &ncluster and strip(_TYPE_) eq 'STRUCTUR') then delete;
48675     +       %if &globalclusid ne %then %do;
48676     +         GCluster = "GC&globalclusid";
48677     +         _NAME_ = "GC&globalclusid._"||upcase(_NAME_);
48678     +         rename _NAME_ = Cluster;
48679     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
48680     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
48681     +
48682     +       %end;
48683     +       %else %do;
48684     +         _NAME_ = upcase(_NAME_);
48685     +         rename _NAME_ = Cluster;
48686     +         label _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
48687     +         label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
48688     +
48689     +       %end;
48690     +     run;
48691     +    %if &RSquare eq Y %then %do;
48692     +     data corr_tmp;
48693     +          set &outdata;
48694     +     run;
48695     +     %let istart = 2;
48696     +     %if &globalclusid ne %then %let istart = 3;
48697     +     data &outdata;
48698     +          set &outdata;
48699     +          %let dsid = %sysfunc(open(work.corr_tmp));
48700     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48701     +          %do i =&istart %to &nvar;
48702     +            %let _name = %sysfunc(varname(&dsid, &i));
48703     +            %let _name_md = &_name.**2;
48704     +                &_name = &_name_md;
48705     +          %end;
48706     +      %let dsid= %sysfunc(close(&dsid));
48707     +      run;
48708     +      proc datasets lib = work nolist;
48709     +           delete corr_tmp;
48710     +      run;
48711     +    %end;
48712     +     quit;
48713     +%mend MakeClusStructCorrData;
48714     +
48715     +/*
48716     +%MakeClusStructCorrData(indata=playpen._outstat, outdata=_structrsq , ncluster=7, Rsquare=Y);
48717     +*/
48718     +
48719     +%macro FindNextClosestClusByVar(indata=, outdata=, globalclusid=, ncluster=);
48720     +
48721     +     /* The indata should be the outdata
48722     +        from %MakeClusStructCorrData(indata=, outdata=, ); */
48723     +
48724     +     proc sort data =&indata out=_tmpclusRsq;
48725     +     by cluster;
48726     +     run;
48727     +
48728     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
48729     +      by cluster;
48730     +     run;
48731     +
48732     +     proc sort data=_tmpclusRsq;
48733     +        by _NAME_ COL1;
48734     +     run;
48735     +
48736     +     data _tmpclusRsq;
48737     +         length _NAME_ $32;
48738     +         set _tmpclusRsq; by _NAME_;
48739     +          _NAME_ = upcase(_NAME_);
48740     +          %if &ncluster ne 1 %then %do;
48741     +             if last._NAME_ then delete;
48742     +          %end;
48743     +          %else %do;
48744     +             COL1 = 0;
48745     +          %end;
48746     +     run;
48747     +     /* need to sort again */
48748     +     proc sort data=_tmpclusRsq;
48749     +        by _NAME_ COL1;
48750     +     run;
48751     +
48752     +     data &outdata;
48753     +         set _tmpclusRsq; by _NAME_;
48754     +         Cluster = upcase(Cluster);
48755     +         if last._NAME_ then output;
48756     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
48757     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
48758     +         rename COL1 = RSqWithNextClusComp;
48759     +         Cluster = upcase(Cluster);
48760     +         rename Cluster = ClosestCluster;
48761     +         *label  Cluster = "Next Closest Cluster";
48762     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
48763     +         rename _NAME_ = Variable;
48764     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48765     +    run;
48766     +
48767     +
48768     +    %if &globalclusid ne %then %do;
48769     +    data &outdata;
48770     +       length GCluster $16;
48771     +       set &outdata;
48772     +       GCluster = "GC&globalclusid";
48773     +       run;
48774     +    %end;
48775     +    proc datasets lib = work nolist;
48776     +           delete _tmpclusRsq;
48777     +    run;
48778     +    quit;
48779     +%mend FindNextClosestClusByVar;
48780     +
48781     +
48782     +%macro FindNextClosestClusByCluster(indata=, outdata=, globalclusid=, ncluster=);
48783     +     /* The indata should be the outdata from %MakeInterClusCorrData(indata=, outdata=, ); */
48784     +     proc sort data =&indata out=_tmpclusRsq;
48785     +     by cluster;
48786     +     run;
48787     +     proc transpose data =_tmpclusRsq out=_tmpclusRsq;
48788     +     by cluster;
48789     +     run;
48790     +     proc sort data=_tmpclusRsq;
48791     +        by _NAME_ col1;
48792     +     run;
48793     +     data _tmpclusRsq;
48794     +         length _NAME_ $32;
48795     +         set _tmpclusRsq; by _NAME_;
48796     +          _NAME_ = upcase(_NAME_);
48797     +          %if &ncluster ne 1 %then %do;
48798     +             if last._NAME_ then delete;
48799     +          %end;
48800     +          %else %do;
48801     +             COL1 = 0;
48802     +          %end;
48803     +     run;
48804     +     data &outdata;
48805     +         set _tmpclusRsq; by _NAME_;
48806     +         Cluster = upcase(Cluster);
48807     +         if last._NAME_ then output;
48808     +         *label  COL1 = 'R-Sqaure with Next Cluster Component';
48809     +         label COL1 = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextrsq, noquote))" ;
48810     +         rename COL1 = RSqWithNextClusComp;
48811     +         Cluster = upcase(Cluster);
48812     +         rename Cluster = ClosestCluster;
48813     +         *label  Cluster = "Next Closest Cluster";
48814     +         label Cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nextclus, noquote))" ;
48815     +         rename _NAME_ = Variable;
48816     +         *label  _NAME_ = "Variable";
48817     +         label  _NAME_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
48818     +
48819     +    run;
48820     +    %if &globalclusid ne %then %do;
48821     +    data &outdata;
48822     +       length GCluster $16;
48823     +       set &outdata;
48824     +       GCluster = "GC&globalclusid";
48825     +       run;
48826     +    %end;
48827     +
48828     +    proc datasets lib = work nolist;
48829     +           delete _tmpclusRsq;
48830     +    run;
48831     +
48832     +    quit;
48833     +%mend FindNextClosestClusByCluster;
48834     +
48835     +%macro MakeVarClusResultTable(indata1=, indata2=, indata3=, outdata=, globalclusid=, ncluster=, selectedcomp=clustercomp);
48836     +/*----
48837     +  indata1=_ownRsq, indata2=_nextVarRsq, indata3=_nextClusRSq,
48838     +-----------*/
48839     +
48840     +proc sort data =&indata1;
48841     +    by Variable;
48842     +run;
48843     +proc sort data =&indata2;
48844     +    by Variable;
48845     +run;
48846     +data &outdata;
48847     +    merge &indata1 &indata2;
48848     +    by Variable;
48849     +    length Type $16;
48850     +    Type = 'Variable';
48851     +    *label Type ='Type';
48852     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
48853     +run;
48854     +
48855     +
48856     +data &indata3;
48857     +    set  &indata3 ;
48858     +    length RSqWithOwnClusComp 8.;
48859     +    Cluster = Variable;
48860     +    RSqWithOwnClusComp = 1;
48861     +    *label RSqWithOwnClusComp = "R-Square With Own Cluster Component";
48862     +    label RSqWithOwnClusComp = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_ownrsq, noquote))" ;
48863     +    length Type $16;
48864     +    Type = 'ClusterComp';
48865     +    label Type = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_type, noquote))" ;
48866     +
48867     +;
48868     +run;
48869     +
48870     +proc sort data=&outdata;
48871     +    by Cluster;
48872     +run;
48873     +proc sort data =&indata3;
48874     +    by Cluster;
48875     +run;
48876     +
48877     +data &outdata;
48878     +     set &outdata &indata3;
48879     +     by Cluster;
48880     +run;
48881     +
48882     +
48883     +/* Create the Selected variable with all YES */
48884     +
48885     +data &outdata;
48886     +     set &outdata;
48887     +     length RsqRatio 8.;
48888     +     length Selected $8;
48889     +     *label RSqRatio = "1-R**2 Ratio";
48890     +     label RSqRatio =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_oneminusrsq, noquote))" ;
48891     +     *label Selected = "Variable Selected";
48892     +     label Selected = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_varselected, noquote))" ;
48893     +     RsqRatio = (1-RSqWithOwnClusComp)/(1-RSqWithNextClusComp);
48894     +     Selected ='YES';
48895     +     rename _LABEL_ = Label;
48896     +     label _LABEL_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
48897     +run;
48898     +
48899     +
48900     +/*----  Selected = Y/N will be assigened at the %score                   -------+
48901     +        Just create the Selected variable with all YES at the step above
48902     + +------------------------------------------------------------------------------+
48903     +
48904     +proc sort data=&outdata;
48905     +    by Cluster RsqRatio;
48906     +run;
48907     +
48908     +%if &selectedcomp eq CLUSTERCOMP %then %do;
48909     +data &outdata;
48910     +     set &outdata; by Cluster;
48911     +     length Selected $8;
48912     +     label Selected = "Variable Selected";
48913     +     if  first.Cluster then Selected ='Yes';
48914     +     else Selected = 'No';
48915     +    run;
48916     +%end;
48917     +%else %do;
48918     +data &outdata(drop = _var _varchange);
48919     +     set &outdata; retain _var 0; by Cluster;
48920     +     length Selected $8;
48921     +     label Selected = "Variable Selected";
48922     +     if first.Cluster then  _varchange = 0;
48923     +     else _varchange =1;
48924     +     if _var ne _varchange then  Selected  = 'Yes';
48925     +     else Selected = 'No';
48926     +     if last.cluster then  _var = 0;
48927     +     else _var = _varchange;
48928     +run;
48929     +%end;
48930     +
48931     +--------------------------------------------------------------*/
48932     +
48933     +quit;
48934     +%mend MakeVarClusResultTable;
48935     +
48936     +%Macro MakePlotDataFromCorrTable(indata=, outdata=, globalclusid=);
48937     +     proc sort data =&indata;
48938     +        by cluster;
48939     +     run;
48940     +     proc transpose data =&indata
48941     +          out=&outdata(drop=_LABEL_ rename=(_NAME_ = Y Cluster=X Col1= Correlation));
48942     +          by cluster;
48943     +     run;
48944     +     data &outdata;
48945     +          set  &outdata;
48946     +          label x= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
48947     +          label Y= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
48948     +          label Correlation = "%sysfunc(sasmsg(sashelp.dmine, rpt_correlation_vlabel, noquote))" ;
48949     +     run;
48950     +     %if &globalclusid ne %then %do;
48951     +     data &outdata;
48952     +          Length GCluster $16;
48953     +          label GCluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
48954     +          set  &outdata;
48955     +          GCluster ="GC&globalclusid.";
48956     +          run;
48957     +     %end;
48958     +
48959     +%Mend MakePlotDataFromCorrTable;
48960     +
48961     +
48962     +%macro MakeCorrelation(indata=,
48963     +                       outstat=_tmpoutstat,
48964     +                       corrmatrix=N,
48965     +                       outcorr=_tmpoutcorr,
48966     +                       includeclassvar=N,
48967     +                       target=,
48968     +                       freq=,
48969     +                       weight=);
48970     +   %if &target eq  %then %do;
48971     +
48972     +       proc varclus data=&indata outstat=&outstat hi maxclusters=1 noprint;
48973     +            var %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED
48974     +       %if &includeclassvar eq Y %then %do;
48975     +          %let dsid = %sysfunc(open(&EM_USER_OUTDUMMY));
48976     +          %let nvar = %sysfunc(attrn(&dsid, NVAR));
48977     +          %do i = 2 %to &nvar;
48978     +          %let varname = %sysfunc(varname(&dsid, &i));
48979     +          &varname
48980     +          %end;
48981     +       %end;
48982     +       ;
48983     +      %if &freq ne  %then %do;
48984     +          freq &freq;
48985     +      %end;
48986     +      %if &weight ne  %then %do;
48987     +          weight &weight;
48988     +      %end;
48989     +
48990     +      run;
48991     +      %if &corrmatrix eq Y %then %do;
48992     +      data  &outcorr (drop = _NCL_ _TYPE_);
48993     +           set  &outstat ;
48994     +           if _TYPE_ ='CORR' then output;
48995     +      run;
48996     +      %end;
48997     +    %end;
48998     +    %else %do;
48999     +       proc corr data=&indata outp=&outstat noprint;
49000     +            var
49001     +       %let dsid = %sysfunc(open(&indata));
49002     +       %let nvar = %sysfunc(attrn(&dsid, NVAR));
49003     +          %do i = 1 %to &nvar;
49004     +              %let _name = %sysfunc(varname(&dsid, &i));
49005     +              %if &_name ne &target %then;
49006     +              &_name
49007     +           %end;
49008     +        %let dsid= %sysfunc(close(&dsid));
49009     +        ;
49010     +        with &target;
49011     +        run;
49012     +    %end;
49013     +    quit;
49014     +%mend MakeCorrelation;
49015     +
49016     +
49017     +%macro MakeCorrelationDistance(indata=,
49018     +                               outdata=,
49019     +                               rsquare = N
49020     +                               );
49021     +    data corr_tmp;
49022     +        set &indata;
49023     +        if _N_ = 1 then do;
49024     +           output;
49025     +           stop;
49026     +         end;
49027     +    run;
49028     +    %if &outdata ne  %then %let  _outdata = &outdata;
49029     +    %else %let _outdata = &indata;
49030     +
49031     +    data &_outdata;
49032     +         set &indata;
49033     +
49034     +         %let dsid = %sysfunc(open(work.corr_tmp));
49035     +         %let nvar = %sysfunc(attrn(&dsid, NVAR));
49036     +          %do i = 2 %to &nvar;
49037     +              %let _name = %sysfunc(varname(&dsid, &i));
49038     +              %if &rsquare eq Y %then %let _name_md = &_name.**2;
49039     +              %else  %let _name_md = &_name;
49040     +              &_name = 1- &_name_md;
49041     +          %end;
49042     +      %let dsid= %sysfunc(close(&dsid));
49043     +      run;
49044     +      proc datasets lib = work nolist;
49045     +           delete corr_tmp;
49046     +      run;
49047     +      quit;
49048     +  %mend MakeCorrelationDistance;
49049     +
49050     +
49051     +%macro UpdateOutStatCorrToDistance(indata=, /* indata should be a outstat from proc varclus */
49052     +                                   rsquare = N
49053     +                                   );
49054     +    data corr_tmp;
49055     +        set &indata;
49056     +    run;
49057     +    proc sql noprint;
49058     +           update &indata
49059     +           set
49060     +     %let dsid = %sysfunc(open(work.corr_tmp));
49061     +     %let nvar = %sysfunc(attrn(&dsid, NVAR));
49062     +          %do i = 4 %to &nvar;
49063     +          %let _name = %sysfunc(varname(&dsid, &i));
49064     +             %if &rsquare eq Y %then %let _name_md = &_name.**2;
49065     +            %else  %let _name_md = &_name;
49066     +            %if &i < &nvar %then %do;
49067     +               &_name = 1- &_name_md ,
49068     +            %end;
49069     +            %else %do;
49070     +               &_name = &_name_md where _TYPE_ eq 'CORR' ;
49071     +            %end;
49072     +          %end;
49073     +      %let dsid= %sysfunc(close(&dsid));
49074     +
49075     +      select * from &indata;
49076     +      run;
49077     +     data &indata( drop = _NCL_);
49078     +           set &indata;
49079     +           if _TYPE_ not in ('CORR', 'STD', 'N', 'MEAN') then delete;
49080     +           if _TYPE_ ='CORR' then _TYPE_ ='DISTANCE';
49081     +     run;
49082     +     data &indata(DROP = _NCL_);
49083     +           set &indata;
49084     +           if _TYPE_ = 'CORR' then _TYPE_ ='DISTANCE';
49085     +           if _TYPE_ not in ('DISTANCE', 'N', 'STD', 'MEAN') then delete;
49086     +           rename _NAME_ = _VAR_;
49087     +     run;
49088     +     proc datasets lib = work nolist;
49089     +           delete corr_tmp;
49090     +     run;
49091     +     quit;
49092     + %mend UpdateOutStatCorrToDistance;
49093     +
49094     +
49095     +%macro HierClusWithCorr(indata= ,
49096     +                        ncluster=,
49097     +                        method = Ward,
49098     +                        outtree = _outtree,
49099     +                        idvar =_VAR_,
49100     +                        outdata=,
49101     +                        rescore = N,
49102     +                        newncluster=
49103     +                        );
49104     +      %global &newncluster;
49105     +      %if &rescore ne Y %then %do;
49106     +      proc cluster data=&indata(type=Distance where=(upcase(strip(_TYPE_)) = "DISTANCE"))
49107     +                   method=&method outtree=&outtree noprint;
49108     +           id &idvar;
49109     +      run;
49110     +      %end;
49111     +      proc tree data=&outtree nclusters = &ncluster out=&outdata noprint;
49112     +      run;
49113     +      /* ----- Check some variables like CL1, CL5..., remove them ----*/
49114     +      proc contents data =&indata out=_outcontent(keep=NAME) noprint;
49115     +      run;
49116     +      data _outcontent;
49117     +          set _outcontent;
49118     +          if NAME in ('_TYPE_' , '_VAR_') then delete;
49119     +          index = 1;
49120     +          rename NAME = _NAME_;
49121     +      run;
49122     +      proc sort data=_outcontent;
49123     +          by _NAME_;
49124     +      run;
49125     +      proc sort data =&outdata;
49126     +           by _NAME_;
49127     +      run;
49128     +      data &outdata(drop=index);
49129     +          merge &outdata _outcontent;
49130     +          by _NAME_;
49131     +          if index = . then delete;
49132     +      run;
49133     +      /*-----------------------------------------------------------*/
49134     +      data &outdata;
49135     +           length CLUSNAME $16;
49136     +           set &outdata;
49137     +           if CLUSTER > &ncluster then delete;
49138     +           CLUSNAME='GC'||strip(CLUSTER);
49139     +           *label CLUSNAME = "Cluster Name";
49140     +           label CLUSNAME  = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_clustername, noquote))" ;
49141     +           rename _NAME_ = VARIABLE ;
49142     +           *label _NAME_ = "Variable";
49143     +           *label CLUSTER = "Cluster";
49144     +           label _NAME_ ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))" ;
49145     +           label CLUSTER ="%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, noquote))" ;
49146     +      run;
49147     +      proc sort data=&outdata out=&outdata;
49148     +           by CLUSTER;
49149     +      run;
49150     +      proc means data =&outdata noprint;
49151     +           output out=_meanout;
49152     +      run;
49153     +      data _null_;
49154     +            set _meanout;
49155     +            if strip(_STAT_) eq 'MAX' then do;
49156     +            call symput("&newncluster", CLUSTER);
49157     +            stop;
49158     +            end;
49159     +      run;
49160     +
49161     +      proc datasets lib = work nolist;
49162     +           delete _outcontent _meanout;
49163     +      run;
49164     +      quit;
49165     +%mend  HierClusWithCorr;
49166     +
49167     +%macro CreateScoreCode2(indata=, ncluscomp=, globalclusid=, fileref=);
49168     +
49169     +     data _tmpindata;
49170     +          set &indata;
49171     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = &ncluscomp ) or (_TYPE_ in ('MEAN' 'STD'));
49172     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
49173     +          if _TYPE_ = 'STD' then _NAME_='STD';
49174     +          if _TYPE_ = 'SCORE' then _NAME_=upcase("GC&globalclusid._"||_NAME_);
49175     +          DROP _TYPE_ _NCL_;
49176     +     run;
49177     +
49178     +     filename _file_  "&fileRef";
49179     +
49180     +     data _null_;
49181     +        FILE _file_ MOD;
49182     +        put ' ';
49183     +        put "/*-------------------------------------------------*/";
49184     +        put '/* ' "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_title_gclus, noquote, &globalclusid))" '*/';
49185     +        put "/*-------------------------------------------------*/";
49186     +        put ' ';
49187     +        %let dsid = %sysfunc(open(work._tmpindata));
49188     +
49189     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
49190     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
49191     +        %let k = 1;
49192     +        %do %while(^%sysfunc(fetch(&dsid)));
49193     +               %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49194     +               %if &k > 2 %then %do;
49195     +                %let cn = %eval(&k-2);
49196     +                 put "&_name = 0 ; /*---" "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_score_gcluscompnum, noquote, &globalclusid, &cn))" "------ */";
49197     +                %end;
49198     +                %let k = %eval(&k+1);
49199     +
49200     +        %end;
49201     +        %let rc = %sysfunc(rewind(&dsid));
49202     +
49203     +        %do j= 2 %to &nvar;
49204     +            %let _varname = %sysfunc(varname(&dsid, &j));
49205     +            %do %while(^%sysfunc(fetch(&dsid)));
49206     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49207     +                %if &_name = MEAN %then
49208     +                %let _mean = %sysfunc(getvarn(&dsid, &j));
49209     +                %else %if &_name = STD %then
49210     +                %let _std = %sysfunc(getvarn(&dsid, &j));
49211     +                %else %do;
49212     +                      %let coeff =  %sysfunc(getvarn(&dsid, &j));
49213     +                      %let abscoeff = %sysfunc(abs(&coeff));
49214     +                          %if &abscoeff >  0 %then %do;
49215     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
49216     +                           %end;
49217     +                 %end;
49218     +             %end;
49219     +             %let rc = %sysfunc(rewind(&dsid));
49220     +         %end;
49221     +
49222     +        %let dsid= %sysfunc(close(&dsid));
49223     +
49224     +     run;
49225     +
49226     +     filename _file_;
49227     +     proc datasets lib = work nolist;
49228     +           delete _tmpindata;
49229     +     run;
49230     +     quit;
49231     +%mend CreateScoreCode2;
49232     +
49233     +
49234     +%macro MakeDeltaCode2(groupds=,deltacodefile=);
49235     +
49236     +     /*--- Build Code to Modify Metadata ---*/
49237     +     filename X "&deltacodefile";
49238     +     data _null_;
49239     +        FILE X;
49240     +        set &groupds end=eof;
49241     +        if _N_=1 then do;
49242     +           %if &EM_PROPERTY_INCLUDECLASSVAR eq Y %then %do;
49243     +            put "if upcase(strip(ROLE)) ='INPUT' and upcase(strip(LEVEL)) ^='INTERVAL' then ROLE ='REJECTED' ;";
49244     +           %end;
49245     +           put "if upcase(strip(ROLE))='INPUT' and upcase(strip(LEVEL))='INTERVAL' then do;";
49246     +           put "if upcase(strip(NAME)) in (";
49247     +        end;
49248     +        if Strip(upcase(Selected)) eq 'YES' then do;
49249     +           string = '"'!!trim(left(VARIABLE))!!'"';
49250     +           put string;
49251     +        end;
49252     +        if eof then do;
49253     +           put ') then ROLE="INPUT";';
49254     +           put 'else ROLE="REJECTED";';
49255     +           put 'end;';
49256     +
49257     +           %if %upcase(&EM_PROPERTY_HIDEVARIABLE) eq Y %then %do;
49258     +             put 'if upcase(strip(ROLE)) = "REJECTED" then delete ;';
49259     +           %end;
49260     +        end;
49261     +     run;
49262     +     quit;
49263     +
49264     +     filename X;
49265     +     quit;
49266     +%mend MakeDeltaCode2;
49267     +
49268     +%macro getInitialGClusterNumber(indata=, ninput=, ndummy=0, div=100, ngc=);
49269     +  %global &ngc;
49270     +  data _null_;
49271     +  %if &indata ne %then %do;
49272     +      %let dsid = %sysfunc(open(&indata));
49273     +           %let nvar = %sysfunc(attrn(&dsid, NVAR));
49274     +      %let dsid = %sysfunc(close(&dsid));
49275     +  %end;
49276     +  %else %do;
49277     +       %let nvar = %eval(&ninput+&ndummy); ;
49278     +  %end;
49279     +  %let numgc = %eval(&nvar/&div+2);
49280     +  %let &ngc = &numgc;
49281     +   run;
49282     +  quit;
49283     +%mend getInitialGClusterNumber;
49284     +
49285     +
49286     +%macro MakeGobalConstellData(indata=, outlink=, outnode=);
49287     +data &outlink(drop = Selected);
49288     +     set &indata;
49289     +     LINKID = _N_;
49290     +     label LINKID = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_linkid, noquote))" ;
49291     +run;
49292     +data &outnode(keep=NODEID TYPE LABEL);
49293     +    set &indata;
49294     +    length TYPE $16;
49295     +    rename VARIABLE = NODEID;
49296     +    *label  CLUSNAME="Node ID";
49297     +    label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
49298     +    TYPE = "VARIABLE";
49299     +    *label TYPE = "Node Type";
49300     +    label TYPE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
49301     +    run;
49302     +data _tmp(keep=NODEID TYPE LABEL);
49303     +    set &indata;
49304     +    length TYPE $16;
49305     +    rename CLUSNAME = NODEID;
49306     +    label  CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
49307     +    TYPE = "GCLUSTER";
49308     +    label TYPE = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
49309     +    run;
49310     +proc sort data=_tmp;
49311     +    by NODEID;
49312     +run;
49313     +data _tmp;
49314     +    set _tmp; by NODEID;
49315     +    if first.NODEID then output;
49316     +run;
49317     +proc sort data=&outnode;
49318     +    by NODEID;
49319     +run;
49320     +data  &outnode;
49321     +    set _tmp &outnode;
49322     +run;
49323     +proc datasets lib = work nolist;
49324     +     delete _tmp;
49325     +run;
49326     +quit;
49327     +%mend MakeGobalConstellData;
49328     +
49329     +/* Make contellation plot data among GCLUSTERS */
49330     +
49331     +%Macro MakeGClusterConstData(indata=, inoutrsq=, outnode=, outlink=);
49332     +
49333     +data &outlink(keep = _NAME_ _PARENT_ _LABEL_ LINKID);
49334     +     set &indata;
49335     +     LINKID = _N_;
49336     +     if upcase(substr(strip(_NAME_),1, 2))="CL" then do;
49337     +        _NAME_ = "ROOT"||upcase(substr(strip(_NAME_),5));
49338     +     end;
49339     +     if _PARENT_ ne " " and upcase(substr(strip(_PARENT_),1, 2))="CL" then do;
49340     +        _PARENT_ = "ROOT"||upcase(substr(strip(_PARENT_),5));
49341     +     end;
49342     +     if upcase(substr(strip(_LABEL_),1, 2))="CL" then do;
49343     +        _LABEL_ = "ROOT"||upcase(substr(strip(_LABEL_),5));
49344     +    end;
49345     +run;
49346     +
49347     +data _tmp_outrsquare;
49348     +        set &inoutrsq;
49349     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
49350     +run;
49351     +
49352     +proc freq data =_tmp_outrsquare noprint;
49353     +         tables GCluster/out=_tmp_GCLUSFREQ(rename=(GCLUSTER=_NAME_));
49354     +run;
49355     +
49356     +data &outnode(keep=_NAME_ TYPE LABEL);
49357     +    set &outlink;
49358     +    length TYPE $16;
49359     +    length LABEL $100;
49360     +    /*label CLUSNAME= "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;*/
49361     +
49362     +    if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
49363     +    TYPE = "GCLUSTER";
49364     +    LABEL = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
49365     +    end;
49366     +    else do;
49367     +    TYPE= "ROOT";
49368     +    LABEL= _NAME_;
49369     +    end;
49370     +    label TYPE  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodetype, noquote))" ;
49371     +    label LABEL =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_label, noquote))" ;
49372     +    label _NAME_ =  "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_nodeidvar, noquote))" ;
49373     +    run;
49374     +
49375     +proc sort data=&outnode;
49376     +     by _NAME_;
49377     +proc sort data=_tmp_GCLUSFREQ;
49378     +     by _NAME_;
49379     +run;
49380     +
49381     +data  &outnode;
49382     +     merge &outnode _tmp_GCLUSFREQ; by _NAME_;
49383     +     if COUNT=. then COUNT=1;
49384     +run;
49385     +
49386     +proc datasets lib = work nolist;
49387     +     delete _tmp_outrsquare _tmp_GCLUSFREQ;
49388     +run;
49389     +
49390     +quit;
49391     +%Mend MakeGClusterConstData;
49392     +
49393     +
49394     +%macro CreateGClusterScoreCode(indata=,  globalclusid=, fileref=);
49395     +
49396     +    data _gscoretmpds;
49397     +          set &indata;
49398     +          if (_TYPE_ in ('SCORE' 'MEAN' 'STD') and _NCL_ = 1 ) or (_TYPE_ in ('MEAN' 'STD'));
49399     +          if _TYPE_ = 'MEAN' then _NAME_='MEAN';
49400     +          if _TYPE_ = 'STD' then _NAME_='STD';
49401     +          if _TYPE_ = 'SCORE' then _NAME_ = "GC"||strip(&globalclusid);
49402     +          DROP _TYPE_ _NCL_;
49403     +     run;
49404     +
49405     +    /*  %let gscorefile =  %bquote(&EM_NODEDIR)&EM_DSEP.gclusterscore.sas;
49406     +        GCluster Component &globalclusid ------ */
49407     +
49408     +    filename _file_  "&fileref";
49409     +
49410     +    data _null_;
49411     +        %if &globalclusid eq 1 %then %do;
49412     +          FILE _file_;
49413     +        %end;
49414     +        %else %do;
49415     +          FILE _file_ MOD;
49416     +        %end;
49417     +
49418     +        %let dsid = %sysfunc(open(work._gscoretmpds));
49419     +        %let nvar = %sysfunc(attrn(&dsid, NVAR));
49420     +        %let vn_name =%sysfunc(varnum(&dsid, _NAME_));
49421     +
49422     +        %let k = 1;
49423     +        %do %while(^%sysfunc(fetch(&dsid)));
49424     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49425     +                %if &k > 2 %then %do;
49426     +                put "&_name = 0 ; ";
49427     +                %end;
49428     +                %let k = %eval(&k+1);
49429     +        %end;
49430     +
49431     +        %let rc = %sysfunc(rewind(&dsid));
49432     +        %do i= 2 %to &nvar;
49433     +            %let _varname =  %sysfunc(varname(&dsid, &i));
49434     +            %do %while(^%sysfunc(fetch(&dsid)));
49435     +                %let _name = %sysfunc(getvarc(&dsid, &vn_name));
49436     +                %if &_name = MEAN %then
49437     +                %let _mean = %sysfunc(getvarn(&dsid, &i));
49438     +                %else %if &_name = STD %then
49439     +                %let _std = %sysfunc(getvarn(&dsid, &i));
49440     +                %else %do;
49441     +                      %let coeff =  %sysfunc(getvarn(&dsid, &i));
49442     +                      %let abscoeff = %sysfunc(abs(&coeff));
49443     +                          %if &abscoeff >  0 %then %do;
49444     +                       put "&_name = &_name+&coeff * (&_varname - &_mean)/&_std;";
49445     +                           %end;
49446     +                 %end;
49447     +             %end;
49448     +             %let rc = %sysfunc(rewind(&dsid));
49449     +
49450     +         %end;
49451     +
49452     +        %let dsid= %sysfunc(close(&dsid));
49453     +       run;
49454     +
49455     +
49456     +       proc datasets lib=work nolist;
49457     +            delete _gscoretmpds;
49458     +       run;
49459     +      quit;
49460     +
49461     +%mend CreateGClusterScoreCode;
49462     +
49463     +
49464     +%macro MakeGClusterCorrelation(Indata=, ngcluster=, gscorecode=, outrsquare=);
49465     +
49466     +   %EM_REGISTER(KEY=GSCORE, TYPE=DATA);
49467     +   %EM_GETNAME(KEY=GSCORE, TYPE=DATA);
49468     +   %EM_REGISTER(KEY=GSCORESTAT, TYPE=DATA);
49469     +   %EM_GETNAME(KEY=GSCORESTAT, TYPE=DATA);
49470     +   %EM_REGISTER(KEY=GSCORETREE, TYPE=DATA);
49471     +   %EM_GETNAME(KEY=GSCORETREE, TYPE=DATA);
49472     +   %EM_REGISTER(KEY=GSCORECORR, TYPE=DATA);
49473     +   %EM_GETNAME(KEY=GSCORECORR, TYPE=DATA);
49474     +   %EM_REGISTER(KEY=GSCORECORRPLOT, TYPE=DATA);
49475     +   %EM_GETNAME(KEY=GSCORECORRPLOT, TYPE=DATA);
49476     +   %EM_REGISTER(KEY=GCLUSLINK, TYPE=DATA);
49477     +   %EM_GETNAME(KEY=GCLUSLINK, TYPE=DATA);
49478     +   %EM_REGISTER(KEY=GCLUSNODE, TYPE=DATA);
49479     +   %EM_GETNAME(KEY=GCLUSNODE, TYPE=DATA);
49480     +
49481     +   filename gsfile "&gscorecode";
49482     +
49483     +   data &EM_USER_GSCORE;
49484     +             set &indata;
49485     +             %include  gsfile;
49486     +        keep
49487     +        %do i=1 %to &ngcluster;
49488     +         %let gcvarname = GC&i;
49489     +         &gcvarname
49490     +        %end;
49491     +     ;
49492     +   run;
49493     +
49494     +   proc varclus data=&EM_USER_GSCORE outstat=&EM_USER_GSCORESTAT outtree=&EM_USER_GSCORETREE
49495     +    %if %upcase(&EM_PROPERTY_CLUSCOMP) eq CENTROID %then %do; centroid %end;
49496     +    %if %upcase(&EM_PROPERTY_CLUSSOURCE) eq COV %then %do; cov %end;
49497     +    %if %upcase(&EM_PROPERTY_CLUSHIERACHY) eq Y %then %do; hi %end;
49498     +    noprint  ;
49499     +     var
49500     +       %do i=1 %to &ngcluster;
49501     +         %let gcvarname = GC&i;
49502     +         &gcvarname
49503     +        %end;
49504     +   ;
49505     +   run;
49506     +
49507     +
49508     +   %MakeVarClusCorrData(statds=&EM_USER_GSCORESTAT, corrds=&EM_USER_GSCORECORR, corrplotds=&EM_USER_GSCORECORRPLOT );
49509     +   data &EM_USER_GSCORECORRPLOT ;
49510     +        set &EM_USER_GSCORECORRPLOT;
49511     +        rename _X_ = X;
49512     +        rename _Y_ = Y;
49513     +        label _X_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49514     +        label _Y_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote))" ;
49515     +   run;
49516     +
49517     +   %MakeGClusterConstData(indata=&EM_USER_GSCORETREE, inoutrsq=&outrsquare, outnode=&EM_USER_GCLUSNODE, outlink=&EM_USER_GCLUSLINK);
49518     +
49519     +   data &EM_USER_GSCORETREE;
49520     +        length _NAME_ $32;
49521     +        length _LABEL_ $100;
49522     +        set &EM_USER_GSCORETREE(DROP=_LABEL_);
49523     +        if upcase(substr(strip(_NAME_),1, 2))='GC' then do;
49524     +         _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_gcluster, noquote)):"||_NAME_;
49525     +        end;else do;
49526     +         _LABEL_ = _NAME_;
49527     +        end;
49528     +       label _LABEL_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_variable, noquote))";
49529     +
49530     +   run;
49531     +
49532     +   quit;
49533     +
49534     +%mend MakeGClusterCorrelation;
49535     +
49536     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.variableclustering_report.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT.SOURCE.
49537     +%macro report;
49538     +    %EM_GETNAME(key=VARCLUSMETA, type=DATA) ;
49539     +
49540     +    data _null_;
49541     +         set &EM_USER_VARCLUSMETA;
49542     +         if _N_=1 then
49543     +         call symput('_trainnum', TrainNum);
49544     +    run;
49545     +   %if (&_trainnum = 1 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = NO %then %do;
49546     +           filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
49547     +           %include temp;
49548     +           filename temp;
49549     +           %report1;
49550     +       %end;
49551     +   %if (&_trainnum = 2 ) or %upcase(&EM_PROPERTY_TWOSTAGECLUS) = YES %then %do;
49552     +           filename temp catalog 'sashelp.emexpl.variableclustering_report2.source';
49553     +           %include temp;
49554     +           filename temp;
49555     +           %report2;
49556     +    %end;
49557     +
49558     +   /* End of all runs, change the flag of newtrain to N */
49559     +    %EM_GETNAME(KEY=VARCLUSMETA, TYPE=DATA);
49560     +    data &EM_USER_VARCLUSMETA;
49561     +         set &EM_USER_VARCLUSMETA;
49562     +         NewTrain = "N";
49563     +    run;
49564     +    quit;
49565     +%mend report;
49566     +
49567     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT):   ;
MPRINT(REPORT):   data _null_;
MPRINT(REPORT):   set EMWS5.VarClus_VARCLUSMETA;
MPRINT(REPORT):   if _N_=1 then call symput('_trainnum', TrainNum);
MPRINT(REPORT):   run;
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      126690:166
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   filename temp catalog 'sashelp.emexpl.variableclustering_report1.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.VARIABLECLUSTERING_REPORT1.SOURCE.
49568     +%macro report1;
49570     +   %EM_GETNAME(key=OUTRSQUARE, type=DATA) ;
49571     +   %EM_GETNAME(key=OUTVARSEL, type=DATA) ;
49572     +   %EM_GETNAME(key=CLUSFREQ, type=DATA) ;
49574     +   data &EM_USER_OUTVARSEL;
49575     +        set &EM_USER_OUTRSQUARE;
49576     +        if upcase(strip(SELECTED)) = 'YES' then output;
49577     +   run;
49579     +   data _tmp_outrsquare;
49580     +        set &EM_USER_OUTRSQUARE;
49581     +        if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
49582     +   run;
49584     +   proc freq data =_tmp_outrsquare noprint;
49585     +        tables cluster/out=&EM_USER_CLUSFREQ sparse;
49586     +   run;
49588     +   proc datasets lib = work nolist;
49589     +     delete _tmp_outrsquare;
49590     +   run;
49592     +   data &EM_USER_CLUSFREQ;
49593     +       set &EM_USER_CLUSFREQ;
49594     +       label
49595     +           cluster = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_cluster, NOQUOTE))"
49596     +           count   = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqcnt, NOQUOTE))"
49597     +           percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_varclus_label_freqpct, NOQUOTE))"
49598     +       ;
49599     +   run;
49601     +   %EM_REPORT(key=OUTVARSEL, viewtype=DATA, block=MODEL, autodisplay=Y, description=selectedvariables);
49602     +   %EM_REPORT(key=CLUSFREQ, viewtype=DATA, block=MODEL, autodisplay=Y, description=varfreqbycluster);
49603     +   %EM_REPORT(key=OUTRSQUARE, viewtype=DATA, block=MODEL, autodisplay=Y, description=varseltable);
49605     +   %EM_REPORT(linkkey=OUTLINK, nodekey=OUTNODE, viewtype=Constellation,  autodisplay=Y, block=MODEL,  linkfrom=Cluster, linkto=Variable, linkid=LINKID, nodeid=NODEID, nodeshape=TYPE, description=clusterplot);
49606     +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=Y, block =MODEL, Name=NAME, PARENT=PARENT, HEIGHT=Proportion , TipText = Variable, description=dendrogram );
49607     +   %EM_REPORT(key=OUTRSQUARE, view = 1, viewtype=SCATTER, x=Cluster, y=RSqRatio, autodisplay=N, group=Selected, block=MODEL, description=rsqplot);
49608     +   %EM_REPORT(view = 1, y=RsqWithOwnClusComp);
49609     +   %EM_REPORT(view=1, y=RsqWithNextClusComp);
49610     +   %EM_REPORT(key=OUTCORRPLOT, viewtype=HISTOGRAM, X=_X_,Y=_Y_, FREQ=correlation, autodisplay=N, block=MODEL, description=varcorr);
49611     +   %EM_REPORT(key=OUTCLUSCORRPLOT, viewtype=HISTOGRAM, X=X,Y=Y, FREQ=Correlation, autodisplay=N, block=MODEL, description=cluscorr);
49612     +   %EM_REPORT(key=OUTCLUSSTRUCT, view=2, viewtype=BAR, block=MODEL, x=Cluster, freq=_anynumeric_ , autodisplay=N,  description=corrstruct) ;
49614     +   /*
49615     +   %EM_REPORT(KEY=OUTTREE, VIEWTYPE=DENDROGRAM,  autodisplay=N, block =Dendrogram, Name=_NAME_, Parent=_PARENT_, Height=_VAREXP_, TipText=Variable, description=totvar);
49616     +   %EM_REPORT(key=OUTCORR, viewtype=DATA, block=MODEL,description=corrmatrix) ;
49617     +   %EM_REPORT(key=OUTSTATPLOT, viewtype=DATA, block=MODEL, description=sumstat) ; */
49620     +%mend report1;
NOTE: %INCLUDE (level 1) ending.
MPRINT(REPORT):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   ;
MPRINT(REPORT1):   data EMWS5.VarClus_OUTVARSEL;
MPRINT(REPORT1):   set EMWS5.VarClus_OUTRSQUARE;
MPRINT(REPORT1):   if upcase(strip(SELECTED)) = 'YES' then output;
MPRINT(REPORT1):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_OUTVARSEL has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   data _tmp_outrsquare;
MPRINT(REPORT1):   set EMWS5.VarClus_OUTRSQUARE;
MPRINT(REPORT1):   if upcase(strip(TYPE)) = 'CLUSTERCOMP' then delete;
MPRINT(REPORT1):   run;
 
NOTE: There were 5 observations read from the data set EMWS5.VARCLUS_OUTRSQUARE.
NOTE: The data set WORK._TMP_OUTRSQUARE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   proc freq data =_tmp_outrsquare noprint;
MPRINT(REPORT1):   tables cluster/out=EMWS5.VarClus_CLUSFREQ sparse;
MPRINT(REPORT1):   run;
 
NOTE: There were 3 observations read from the data set WORK._TMP_OUTRSQUARE.
NOTE: The data set EMWS5.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   proc datasets lib = work nolist;
MPRINT(REPORT1):   delete _tmp_outrsquare;
MPRINT(REPORT1):   run;
 
NOTE: Deleting WORK._TMP_OUTRSQUARE (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT1):   data EMWS5.VarClus_CLUSFREQ;
MPRINT(REPORT1):   set EMWS5.VarClus_CLUSFREQ;
MPRINT(REPORT1):   label cluster = "Cluster" count = "Frequency Count" percent = "Percent of Total Frequency" ;
MPRINT(REPORT1):   run;
 
NOTE: There were 2 observations read from the data set EMWS5.VARCLUS_CLUSFREQ.
NOTE: The data set EMWS5.VARCLUS_CLUSFREQ has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTVARSEL";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "selectedvariables";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.12006283324214;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "CLUSFREQ";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varfreqbycluster";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.9010203270712;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTRSQUARE";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varseltable";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.68990088938265;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 396 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "Constellation";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "FALSE";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "clusterplot";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "OUTLINK";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "OUTNODE";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "NODEID";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "CIRCLE";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "LINKID";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "Variable";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7170303043523;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 396 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 528 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTTREE";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DENDROGRAM";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "dendrogram";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "Variable";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "PARENT";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "NAME";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "Proportion";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.41080010049548;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 528 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 660 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTRSQUARE";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "SCATTER";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "rsqplot";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RSqRatio";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "Selected";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
The SAS System
 
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 660 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 793 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RsqWithOwnClusComp";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 793 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 926 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "RsqWithNextClusComp";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "CUSTOM";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 1;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 926 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1059 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCORRPLOT";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "varcorr";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "_X_";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "_Y_";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "correlation";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.7324161034694;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1059 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1192 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCLUSCORRPLOT";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "HISTOGRAM";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "cluscorr";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "X";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "Correlation";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.80957393758444;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1192 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1325 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(REPORT1):  ;
MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   set WORK.EM_USER_REPORT end=eof;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   if eof then do;
MPRINT(EM_REPORT):   id+1;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTCLUSSTRUCT";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "BAR";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "corrstruct";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "Cluster";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "_anynumeric_";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 2;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   end;
MPRINT(EM_REPORT):   run;
 
NOTE: There were 1325 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(REPORT1):   ;
MPRINT(REPORT):  ;
MPRINT(REPORT):  ;
MPRINT(REPORT):   data EMWS5.VarClus_VARCLUSMETA;
MPRINT(REPORT):   set EMWS5.VarClus_VARCLUSMETA;
MPRINT(REPORT):   NewTrain = "N";
MPRINT(REPORT):   run;
 
NOTE: There were 1 observations read from the data set EMWS5.VARCLUS_VARCLUSMETA.
NOTE: The data set EMWS5.VARCLUS_VARCLUSMETA has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(REPORT):   quit;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End REPORT: VarClus;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
49623      *------------------------------------------------------------*;
49624      * End REPORT: VarClus;
49625      *------------------------------------------------------------*;
49626
 
49627      /* Reset EM Options */
49628      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):    options formchar="|----|+|---+=|-/\<>*";
49629      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
49630      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
49631      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_USER_REPORT;
49632      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
49633      run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1457 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 1457 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
